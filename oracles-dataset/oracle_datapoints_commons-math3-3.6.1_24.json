[ {
  "id" : 13435,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.analysis.differentiation",
  "className" : "DSCompiler",
  "javadocTag" : "@param result array where result must be stored (for\ninverse hyperbolic tangent the result array <em>cannot</em> be the input\narray)",
  "methodJavadoc" : "    /** Compute inverse hyperbolic tangent of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * inverse hyperbolic tangent the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */",
  "methodSourceCode" : "public void atanh(final double[] operand, final int operandOffset, final double[] result, final int resultOffset){\n    // create the function value and derivatives\n    double[] function = new double[1 + order];\n    final double x = operand[operandOffset];\n    function[0] = FastMath.atanh(x);\n    if (order > 0) {\n        // the nth order derivative of atanh has the form:\n        // dn(atanh(x)/dxn = Q_n(x) / (1 - x^2)^n\n        // where Q_n(x) is a degree n-1 polynomial with same parity as n-1\n        // Q_1(x) = 1, Q_2(x) = 2x, Q_3(x) = 6x^2 + 2 ...\n        // the general recurrence relation for Q_n is:\n        // Q_n(x) = (1-x^2) Q_(n-1)'(x) + 2(n-1) x Q_(n-1)(x)\n        // as per polynomial parity, we can store coefficients of both Q_(n-1) and Q_n in the same array\n        final double[] q = new double[order];\n        q[0] = 1;\n        final double x2 = x * x;\n        final double f = 1.0 / (1 - x2);\n        double coeff = f;\n        function[1] = coeff * q[0];\n        for (int n = 2; n <= order; ++n) {\n            // update and evaluate polynomial Q_n(x)\n            double v = 0;\n            q[n - 1] = n * q[n - 2];\n            for (int k = n - 1; k >= 0; k -= 2) {\n                v = v * x2 + q[k];\n                if (k > 2) {\n                    q[k - 2] = (k - 1) * q[k - 1] + (2 * n - k + 1) * q[k - 3];\n                } else if (k == 2) {\n                    q[0] = q[1];\n                }\n            }\n            if ((n & 0x1) == 0) {\n                v *= x;\n            }\n            coeff *= f;\n            function[n] = coeff * v;\n        }\n    }\n    // apply function composition\n    compose(operand, operandOffset, function, result, resultOffset);\n}",
  "classJavadoc" : "/** Class holding \"compiled\" computation rules for derivative structures.\n * <p>This class implements the computation rules described in Dan Kalman's paper <a\n * href=\"http://www1.american.edu/cas/mathstat/People/kalman/pdffiles/mmgautodiff.pdf\">Doubly\n * Recursive Multivariate Automatic Differentiation</a>, Mathematics Magazine, vol. 75,\n * no. 3, June 2002. However, in order to avoid performances bottlenecks, the recursive\n * rules are \"compiled\" once in an unfold form. This class does this recursion unrolling\n * and stores the computation rules as simple loops with pre-computed indirection arrays.</p>\n * <p>\n * This class maps all derivative computation into single dimension arrays that hold the\n * value and partial derivatives. The class does not hold these arrays, which remains under\n * the responsibility of the caller. For each combination of number of free parameters and\n * derivation order, only one compiler is necessary, and this compiler will be used to\n * perform computations on all arrays provided to it, which can represent hundreds or\n * thousands of different parameters kept together with all theur partial derivatives.\n * </p>\n * <p>\n * The arrays on which compilers operate contain only the partial derivatives together\n * with the 0<sup>th</sup> derivative, i.e. the value. The partial derivatives are stored in\n * a compiler-specific order, which can be retrieved using methods {@link\n * #getPartialDerivativeIndex(int...) getPartialDerivativeIndex} and {@link\n * #getPartialDerivativeOrders(int)}. The value is guaranteed to be stored as the first element\n * (i.e. the {@link #getPartialDerivativeIndex(int...) getPartialDerivativeIndex} method returns\n * 0 when called with 0 for all derivation orders and {@link #getPartialDerivativeOrders(int)\n * getPartialDerivativeOrders} returns an array filled with 0 when called with 0 as the index).\n * </p>\n * <p>\n * Note that the ordering changes with number of parameters and derivation order. For example\n * given 2 parameters x and y, df/dy is stored at index 2 when derivation order is set to 1 (in\n * this case the array has three elements: f, df/dx and df/dy). If derivation order is set to\n * 2, then df/dy will be stored at index 3 (in this case the array has six elements: f, df/dx,\n * df/dxdx, df/dy, df/dxdy and df/dydy).\n * </p>\n * <p>\n * Given this structure, users can perform some simple operations like adding, subtracting\n * or multiplying constants and negating the elements by themselves, knowing if they want to\n * mutate their array or create a new array. These simple operations are not provided by\n * the compiler. The compiler provides only the more complex operations between several arrays.\n * </p>\n * <p>This class is mainly used as the engine for scalar variable {@link DerivativeStructure}.\n * It can also be used directly to hold several variables in arrays for more complex data\n * structures. User can for example store a vector of n variables depending on three x, y\n * and z free parameters in one array as follows:</p> <pre>\n *   // parameter 0 is x, parameter 1 is y, parameter 2 is z\n *   int parameters = 3;\n *   DSCompiler compiler = DSCompiler.getCompiler(parameters, order);\n *   int size = compiler.getSize();\n *\n *   // pack all elements in a single array\n *   double[] array = new double[n * size];\n *   for (int i = 0; i &lt; n; ++i) {\n *\n *     // we know value is guaranteed to be the first element\n *     array[i * size] = v[i];\n *\n *     // we don't know where first derivatives are stored, so we ask the compiler\n *     array[i * size + compiler.getPartialDerivativeIndex(1, 0, 0) = dvOnDx[i][0];\n *     array[i * size + compiler.getPartialDerivativeIndex(0, 1, 0) = dvOnDy[i][0];\n *     array[i * size + compiler.getPartialDerivativeIndex(0, 0, 1) = dvOnDz[i][0];\n *\n *     // we let all higher order derivatives set to 0\n *\n *   }\n * </pre>\n * <p>Then in another function, user can perform some operations on all elements stored\n * in the single array, such as a simple product of all variables:</p> <pre>\n *   // compute the product of all elements\n *   double[] product = new double[size];\n *   prod[0] = 1.0;\n *   for (int i = 0; i &lt; n; ++i) {\n *     double[] tmp = product.clone();\n *     compiler.multiply(tmp, 0, array, i * size, product, 0);\n *   }\n *\n *   // value\n *   double p = product[0];\n *\n *   // first derivatives\n *   double dPdX = product[compiler.getPartialDerivativeIndex(1, 0, 0)];\n *   double dPdY = product[compiler.getPartialDerivativeIndex(0, 1, 0)];\n *   double dPdZ = product[compiler.getPartialDerivativeIndex(0, 0, 1)];\n *\n *   // cross derivatives (assuming order was at least 2)\n *   double dPdXdX = product[compiler.getPartialDerivativeIndex(2, 0, 0)];\n *   double dPdXdY = product[compiler.getPartialDerivativeIndex(1, 1, 0)];\n *   double dPdXdZ = product[compiler.getPartialDerivativeIndex(1, 0, 1)];\n *   double dPdYdY = product[compiler.getPartialDerivativeIndex(0, 2, 0)];\n *   double dPdYdZ = product[compiler.getPartialDerivativeIndex(0, 1, 1)];\n *   double dPdZdZ = product[compiler.getPartialDerivativeIndex(0, 0, 2)];\n * </pre>\n * @see DerivativeStructure\n * @since 3.1\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math3.analysis.differentiation;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicReference;\n\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.exception.MathArithmeticException;\nimport org.apache.commons.math3.exception.MathInternalError;\nimport org.apache.commons.math3.exception.NotPositiveException;\nimport org.apache.commons.math3.exception.NumberIsTooLargeException;\nimport org.apache.commons.math3.util.CombinatoricsUtils;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathArrays;\n\n/** Class holding \"compiled\" computation rules for derivative structures.\n * <p>This class implements the computation rules described in Dan Kalman's paper <a\n * href=\"http://www1.american.edu/cas/mathstat/People/kalman/pdffiles/mmgautodiff.pdf\">Doubly\n * Recursive Multivariate Automatic Differentiation</a>, Mathematics Magazine, vol. 75,\n * no. 3, June 2002. However, in order to avoid performances bottlenecks, the recursive\n * rules are \"compiled\" once in an unfold form. This class does this recursion unrolling\n * and stores the computation rules as simple loops with pre-computed indirection arrays.</p>\n * <p>\n * This class maps all derivative computation into single dimension arrays that hold the\n * value and partial derivatives. The class does not hold these arrays, which remains under\n * the responsibility of the caller. For each combination of number of free parameters and\n * derivation order, only one compiler is necessary, and this compiler will be used to\n * perform computations on all arrays provided to it, which can represent hundreds or\n * thousands of different parameters kept together with all theur partial derivatives.\n * </p>\n * <p>\n * The arrays on which compilers operate contain only the partial derivatives together\n * with the 0<sup>th</sup> derivative, i.e. the value. The partial derivatives are stored in\n * a compiler-specific order, which can be retrieved using methods {@link\n * #getPartialDerivativeIndex(int...) getPartialDerivativeIndex} and {@link\n * #getPartialDerivativeOrders(int)}. The value is guaranteed to be stored as the first element\n * (i.e. the {@link #getPartialDerivativeIndex(int...) getPartialDerivativeIndex} method returns\n * 0 when called with 0 for all derivation orders and {@link #getPartialDerivativeOrders(int)\n * getPartialDerivativeOrders} returns an array filled with 0 when called with 0 as the index).\n * </p>\n * <p>\n * Note that the ordering changes with number of parameters and derivation order. For example\n * given 2 parameters x and y, df/dy is stored at index 2 when derivation order is set to 1 (in\n * this case the array has three elements: f, df/dx and df/dy). If derivation order is set to\n * 2, then df/dy will be stored at index 3 (in this case the array has six elements: f, df/dx,\n * df/dxdx, df/dy, df/dxdy and df/dydy).\n * </p>\n * <p>\n * Given this structure, users can perform some simple operations like adding, subtracting\n * or multiplying constants and negating the elements by themselves, knowing if they want to\n * mutate their array or create a new array. These simple operations are not provided by\n * the compiler. The compiler provides only the more complex operations between several arrays.\n * </p>\n * <p>This class is mainly used as the engine for scalar variable {@link DerivativeStructure}.\n * It can also be used directly to hold several variables in arrays for more complex data\n * structures. User can for example store a vector of n variables depending on three x, y\n * and z free parameters in one array as follows:</p> <pre>\n *   // parameter 0 is x, parameter 1 is y, parameter 2 is z\n *   int parameters = 3;\n *   DSCompiler compiler = DSCompiler.getCompiler(parameters, order);\n *   int size = compiler.getSize();\n *\n *   // pack all elements in a single array\n *   double[] array = new double[n * size];\n *   for (int i = 0; i &lt; n; ++i) {\n *\n *     // we know value is guaranteed to be the first element\n *     array[i * size] = v[i];\n *\n *     // we don't know where first derivatives are stored, so we ask the compiler\n *     array[i * size + compiler.getPartialDerivativeIndex(1, 0, 0) = dvOnDx[i][0];\n *     array[i * size + compiler.getPartialDerivativeIndex(0, 1, 0) = dvOnDy[i][0];\n *     array[i * size + compiler.getPartialDerivativeIndex(0, 0, 1) = dvOnDz[i][0];\n *\n *     // we let all higher order derivatives set to 0\n *\n *   }\n * </pre>\n * <p>Then in another function, user can perform some operations on all elements stored\n * in the single array, such as a simple product of all variables:</p> <pre>\n *   // compute the product of all elements\n *   double[] product = new double[size];\n *   prod[0] = 1.0;\n *   for (int i = 0; i &lt; n; ++i) {\n *     double[] tmp = product.clone();\n *     compiler.multiply(tmp, 0, array, i * size, product, 0);\n *   }\n *\n *   // value\n *   double p = product[0];\n *\n *   // first derivatives\n *   double dPdX = product[compiler.getPartialDerivativeIndex(1, 0, 0)];\n *   double dPdY = product[compiler.getPartialDerivativeIndex(0, 1, 0)];\n *   double dPdZ = product[compiler.getPartialDerivativeIndex(0, 0, 1)];\n *\n *   // cross derivatives (assuming order was at least 2)\n *   double dPdXdX = product[compiler.getPartialDerivativeIndex(2, 0, 0)];\n *   double dPdXdY = product[compiler.getPartialDerivativeIndex(1, 1, 0)];\n *   double dPdXdZ = product[compiler.getPartialDerivativeIndex(1, 0, 1)];\n *   double dPdYdY = product[compiler.getPartialDerivativeIndex(0, 2, 0)];\n *   double dPdYdZ = product[compiler.getPartialDerivativeIndex(0, 1, 1)];\n *   double dPdZdZ = product[compiler.getPartialDerivativeIndex(0, 0, 2)];\n * </pre>\n * @see DerivativeStructure\n * @since 3.1\n */\npublic class DSCompiler {\n\n    /** Array of all compilers created so far. */\n    private static AtomicReference<DSCompiler[][]> compilers =\n            new AtomicReference<DSCompiler[][]>(null);\n\n    /** Number of free parameters. */\n    private final int parameters;\n\n    /** Derivation order. */\n    private final int order;\n\n    /** Number of partial derivatives (including the single 0 order derivative element). */\n    private final int[][] sizes;\n\n    /** Indirection array for partial derivatives. */\n    private final int[][] derivativesIndirection;\n\n    /** Indirection array of the lower derivative elements. */\n    private final int[] lowerIndirection;\n\n    /** Indirection arrays for multiplication. */\n    private final int[][][] multIndirection;\n\n    /** Indirection arrays for function composition. */\n    private final int[][][] compIndirection;\n\n    /** Private constructor, reserved for the factory method {@link #getCompiler(int, int)}.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param valueCompiler compiler for the value part\n     * @param derivativeCompiler compiler for the derivative part\n     * @throws NumberIsTooLargeException if order is too large\n     */\n    private DSCompiler(final int parameters, final int order,\n                       final DSCompiler valueCompiler, final DSCompiler derivativeCompiler)\n        throws NumberIsTooLargeException {\n\n        this.parameters = parameters;\n        this.order      = order;\n        this.sizes      = compileSizes(parameters, order, valueCompiler);\n        this.derivativesIndirection =\n                compileDerivativesIndirection(parameters, order,\n                                              valueCompiler, derivativeCompiler);\n        this.lowerIndirection =\n                compileLowerIndirection(parameters, order,\n                                        valueCompiler, derivativeCompiler);\n        this.multIndirection =\n                compileMultiplicationIndirection(parameters, order,\n                                                 valueCompiler, derivativeCompiler, lowerIndirection);\n        this.compIndirection =\n                compileCompositionIndirection(parameters, order,\n                                              valueCompiler, derivativeCompiler,\n                                              sizes, derivativesIndirection);\n\n    }\n\n    /** Get the compiler for number of free parameters and order.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @return cached rules set\n     * @throws NumberIsTooLargeException if order is too large\n     */\n    public static DSCompiler getCompiler(int parameters, int order)\n        throws NumberIsTooLargeException {\n\n        // get the cached compilers\n        final DSCompiler[][] cache = compilers.get();\n        if (cache != null && cache.length > parameters &&\n            cache[parameters].length > order && cache[parameters][order] != null) {\n            // the compiler has already been created\n            return cache[parameters][order];\n        }\n\n        // we need to create more compilers\n        final int maxParameters = FastMath.max(parameters, cache == null ? 0 : cache.length);\n        final int maxOrder      = FastMath.max(order,     cache == null ? 0 : cache[0].length);\n        final DSCompiler[][] newCache = new DSCompiler[maxParameters + 1][maxOrder + 1];\n\n        if (cache != null) {\n            // preserve the already created compilers\n            for (int i = 0; i < cache.length; ++i) {\n                System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);\n            }\n        }\n\n        // create the array in increasing diagonal order\n        for (int diag = 0; diag <= parameters + order; ++diag) {\n            for (int o = FastMath.max(0, diag - parameters); o <= FastMath.min(order, diag); ++o) {\n                final int p = diag - o;\n                if (newCache[p][o] == null) {\n                    final DSCompiler valueCompiler      = (p == 0) ? null : newCache[p - 1][o];\n                    final DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];\n                    newCache[p][o] = new DSCompiler(p, o, valueCompiler, derivativeCompiler);\n                }\n            }\n        }\n\n        // atomically reset the cached compilers array\n        compilers.compareAndSet(cache, newCache);\n\n        return newCache[parameters][order];\n\n    }\n\n    /** Compile the sizes array.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param valueCompiler compiler for the value part\n     * @return sizes array\n     */\n    private static int[][] compileSizes(final int parameters, final int order,\n                                        final DSCompiler valueCompiler) {\n\n        final int[][] sizes = new int[parameters + 1][order + 1];\n        if (parameters == 0) {\n            Arrays.fill(sizes[0], 1);\n        } else {\n            System.arraycopy(valueCompiler.sizes, 0, sizes, 0, parameters);\n            sizes[parameters][0] = 1;\n            for (int i = 0; i < order; ++i) {\n                sizes[parameters][i + 1] = sizes[parameters][i] + sizes[parameters - 1][i + 1];\n            }\n        }\n\n        return sizes;\n\n    }\n\n    /** Compile the derivatives indirection array.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param valueCompiler compiler for the value part\n     * @param derivativeCompiler compiler for the derivative part\n     * @return derivatives indirection array\n     */\n    private static int[][] compileDerivativesIndirection(final int parameters, final int order,\n                                                      final DSCompiler valueCompiler,\n                                                      final DSCompiler derivativeCompiler) {\n\n        if (parameters == 0 || order == 0) {\n            return new int[1][parameters];\n        }\n\n        final int vSize = valueCompiler.derivativesIndirection.length;\n        final int dSize = derivativeCompiler.derivativesIndirection.length;\n        final int[][] derivativesIndirection = new int[vSize + dSize][parameters];\n\n        // set up the indices for the value part\n        for (int i = 0; i < vSize; ++i) {\n            // copy the first indices, the last one remaining set to 0\n            System.arraycopy(valueCompiler.derivativesIndirection[i], 0,\n                             derivativesIndirection[i], 0,\n                             parameters - 1);\n        }\n\n        // set up the indices for the derivative part\n        for (int i = 0; i < dSize; ++i) {\n\n            // copy the indices\n            System.arraycopy(derivativeCompiler.derivativesIndirection[i], 0,\n                             derivativesIndirection[vSize + i], 0,\n                             parameters);\n\n            // increment the derivation order for the last parameter\n            derivativesIndirection[vSize + i][parameters - 1]++;\n\n        }\n\n        return derivativesIndirection;\n\n    }\n\n    /** Compile the lower derivatives indirection array.\n     * <p>\n     * This indirection array contains the indices of all elements\n     * except derivatives for last derivation order.\n     * </p>\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param valueCompiler compiler for the value part\n     * @param derivativeCompiler compiler for the derivative part\n     * @return lower derivatives indirection array\n     */\n    private static int[] compileLowerIndirection(final int parameters, final int order,\n                                              final DSCompiler valueCompiler,\n                                              final DSCompiler derivativeCompiler) {\n\n        if (parameters == 0 || order <= 1) {\n            return new int[] { 0 };\n        }\n\n        // this is an implementation of definition 6 in Dan Kalman's paper.\n        final int vSize = valueCompiler.lowerIndirection.length;\n        final int dSize = derivativeCompiler.lowerIndirection.length;\n        final int[] lowerIndirection = new int[vSize + dSize];\n        System.arraycopy(valueCompiler.lowerIndirection, 0, lowerIndirection, 0, vSize);\n        for (int i = 0; i < dSize; ++i) {\n            lowerIndirection[vSize + i] = valueCompiler.getSize() + derivativeCompiler.lowerIndirection[i];\n        }\n\n        return lowerIndirection;\n\n    }\n\n    /** Compile the multiplication indirection array.\n     * <p>\n     * This indirection array contains the indices of all pairs of elements\n     * involved when computing a multiplication. This allows a straightforward\n     * loop-based multiplication (see {@link #multiply(double[], int, double[], int, double[], int)}).\n     * </p>\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param valueCompiler compiler for the value part\n     * @param derivativeCompiler compiler for the derivative part\n     * @param lowerIndirection lower derivatives indirection array\n     * @return multiplication indirection array\n     */\n    private static int[][][] compileMultiplicationIndirection(final int parameters, final int order,\n                                                           final DSCompiler valueCompiler,\n                                                           final DSCompiler derivativeCompiler,\n                                                           final int[] lowerIndirection) {\n\n        if ((parameters == 0) || (order == 0)) {\n            return new int[][][] { { { 1, 0, 0 } } };\n        }\n\n        // this is an implementation of definition 3 in Dan Kalman's paper.\n        final int vSize = valueCompiler.multIndirection.length;\n        final int dSize = derivativeCompiler.multIndirection.length;\n        final int[][][] multIndirection = new int[vSize + dSize][][];\n\n        System.arraycopy(valueCompiler.multIndirection, 0, multIndirection, 0, vSize);\n\n        for (int i = 0; i < dSize; ++i) {\n            final int[][] dRow = derivativeCompiler.multIndirection[i];\n            List<int[]> row = new ArrayList<int[]>(dRow.length * 2);\n            for (int j = 0; j < dRow.length; ++j) {\n                row.add(new int[] { dRow[j][0], lowerIndirection[dRow[j][1]], vSize + dRow[j][2] });\n                row.add(new int[] { dRow[j][0], vSize + dRow[j][1], lowerIndirection[dRow[j][2]] });\n            }\n\n            // combine terms with similar derivation orders\n            final List<int[]> combined = new ArrayList<int[]>(row.size());\n            for (int j = 0; j < row.size(); ++j) {\n                final int[] termJ = row.get(j);\n                if (termJ[0] > 0) {\n                    for (int k = j + 1; k < row.size(); ++k) {\n                        final int[] termK = row.get(k);\n                        if (termJ[1] == termK[1] && termJ[2] == termK[2]) {\n                            // combine termJ and termK\n                            termJ[0] += termK[0];\n                            // make sure we will skip termK later on in the outer loop\n                            termK[0] = 0;\n                        }\n                    }\n                    combined.add(termJ);\n                }\n            }\n\n            multIndirection[vSize + i] = combined.toArray(new int[combined.size()][]);\n\n        }\n\n        return multIndirection;\n\n    }\n\n    /** Compile the function composition indirection array.\n     * <p>\n     * This indirection array contains the indices of all sets of elements\n     * involved when computing a composition. This allows a straightforward\n     * loop-based composition (see {@link #compose(double[], int, double[], double[], int)}).\n     * </p>\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param valueCompiler compiler for the value part\n     * @param derivativeCompiler compiler for the derivative part\n     * @param sizes sizes array\n     * @param derivativesIndirection derivatives indirection array\n     * @return multiplication indirection array\n     * @throws NumberIsTooLargeException if order is too large\n     */\n    private static int[][][] compileCompositionIndirection(final int parameters, final int order,\n                                                           final DSCompiler valueCompiler,\n                                                           final DSCompiler derivativeCompiler,\n                                                           final int[][] sizes,\n                                                           final int[][] derivativesIndirection)\n       throws NumberIsTooLargeException {\n\n        if ((parameters == 0) || (order == 0)) {\n            return new int[][][] { { { 1, 0 } } };\n        }\n\n        final int vSize = valueCompiler.compIndirection.length;\n        final int dSize = derivativeCompiler.compIndirection.length;\n        final int[][][] compIndirection = new int[vSize + dSize][][];\n\n        // the composition rules from the value part can be reused as is\n        System.arraycopy(valueCompiler.compIndirection, 0, compIndirection, 0, vSize);\n\n        // the composition rules for the derivative part are deduced by\n        // differentiation the rules from the underlying compiler once\n        // with respect to the parameter this compiler handles and the\n        // underlying one did not handle\n        for (int i = 0; i < dSize; ++i) {\n            List<int[]> row = new ArrayList<int[]>();\n            for (int[] term : derivativeCompiler.compIndirection[i]) {\n\n                // handle term p * f_k(g(x)) * g_l1(x) * g_l2(x) * ... * g_lp(x)\n\n                // derive the first factor in the term: f_k with respect to new parameter\n                int[] derivedTermF = new int[term.length + 1];\n                derivedTermF[0] = term[0];     // p\n                derivedTermF[1] = term[1] + 1; // f_(k+1)\n                int[] orders = new int[parameters];\n                orders[parameters - 1] = 1;\n                derivedTermF[term.length] = getPartialDerivativeIndex(parameters, order, sizes, orders);  // g_1\n                for (int j = 2; j < term.length; ++j) {\n                    // convert the indices as the mapping for the current order\n                    // is different from the mapping with one less order\n                    derivedTermF[j] = convertIndex(term[j], parameters,\n                                                   derivativeCompiler.derivativesIndirection,\n                                                   parameters, order, sizes);\n                }\n                Arrays.sort(derivedTermF, 2, derivedTermF.length);\n                row.add(derivedTermF);\n\n                // derive the various g_l\n                for (int l = 2; l < term.length; ++l) {\n                    int[] derivedTermG = new int[term.length];\n                    derivedTermG[0] = term[0];\n                    derivedTermG[1] = term[1];\n                    for (int j = 2; j < term.length; ++j) {\n                        // convert the indices as the mapping for the current order\n                        // is different from the mapping with one less order\n                        derivedTermG[j] = convertIndex(term[j], parameters,\n                                                       derivativeCompiler.derivativesIndirection,\n                                                       parameters, order, sizes);\n                        if (j == l) {\n                            // derive this term\n                            System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters);\n                            orders[parameters - 1]++;\n                            derivedTermG[j] = getPartialDerivativeIndex(parameters, order, sizes, orders);\n                        }\n                    }\n                    Arrays.sort(derivedTermG, 2, derivedTermG.length);\n                    row.add(derivedTermG);\n                }\n\n            }\n\n            // combine terms with similar derivation orders\n            final List<int[]> combined = new ArrayList<int[]>(row.size());\n            for (int j = 0; j < row.size(); ++j) {\n                final int[] termJ = row.get(j);\n                if (termJ[0] > 0) {\n                    for (int k = j + 1; k < row.size(); ++k) {\n                        final int[] termK = row.get(k);\n                        boolean equals = termJ.length == termK.length;\n                        for (int l = 1; equals && l < termJ.length; ++l) {\n                            equals &= termJ[l] == termK[l];\n                        }\n                        if (equals) {\n                            // combine termJ and termK\n                            termJ[0] += termK[0];\n                            // make sure we will skip termK later on in the outer loop\n                            termK[0] = 0;\n                        }\n                    }\n                    combined.add(termJ);\n                }\n            }\n\n            compIndirection[vSize + i] = combined.toArray(new int[combined.size()][]);\n\n        }\n\n        return compIndirection;\n\n    }\n\n    /** Get the index of a partial derivative in the array.\n     * <p>\n     * If all orders are set to 0, then the 0<sup>th</sup> order derivative\n     * is returned, which is the value of the function.\n     * </p>\n     * <p>The indices of derivatives are between 0 and {@link #getSize() getSize()} - 1.\n     * Their specific order is fixed for a given compiler, but otherwise not\n     * publicly specified. There are however some simple cases which have guaranteed\n     * indices:\n     * </p>\n     * <ul>\n     *   <li>the index of 0<sup>th</sup> order derivative is always 0</li>\n     *   <li>if there is only 1 {@link #getFreeParameters() free parameter}, then the\n     *   derivatives are sorted in increasing derivation order (i.e. f at index 0, df/dp\n     *   at index 1, d<sup>2</sup>f/dp<sup>2</sup> at index 2 ...\n     *   d<sup>k</sup>f/dp<sup>k</sup> at index k),</li>\n     *   <li>if the {@link #getOrder() derivation order} is 1, then the derivatives\n     *   are sorted in increasing free parameter order (i.e. f at index 0, df/dx<sub>1</sub>\n     *   at index 1, df/dx<sub>2</sub> at index 2 ... df/dx<sub>k</sub> at index k),</li>\n     *   <li>all other cases are not publicly specified</li>\n     * </ul>\n     * <p>\n     * This method is the inverse of method {@link #getPartialDerivativeOrders(int)}\n     * </p>\n     * @param orders derivation orders with respect to each parameter\n     * @return index of the partial derivative\n     * @exception DimensionMismatchException if the numbers of parameters does not\n     * match the instance\n     * @exception NumberIsTooLargeException if sum of derivation orders is larger\n     * than the instance limits\n     * @see #getPartialDerivativeOrders(int)\n     */\n    public int getPartialDerivativeIndex(final int ... orders)\n            throws DimensionMismatchException, NumberIsTooLargeException {\n\n        // safety check\n        if (orders.length != getFreeParameters()) {\n            throw new DimensionMismatchException(orders.length, getFreeParameters());\n        }\n\n        return getPartialDerivativeIndex(parameters, order, sizes, orders);\n\n    }\n\n    /** Get the index of a partial derivative in an array.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param sizes sizes array\n     * @param orders derivation orders with respect to each parameter\n     * (the lenght of this array must match the number of parameters)\n     * @return index of the partial derivative\n     * @exception NumberIsTooLargeException if sum of derivation orders is larger\n     * than the instance limits\n     */\n    private static int getPartialDerivativeIndex(final int parameters, final int order,\n                                                 final int[][] sizes, final int ... orders)\n        throws NumberIsTooLargeException {\n\n        // the value is obtained by diving into the recursive Dan Kalman's structure\n        // this is theorem 2 of his paper, with recursion replaced by iteration\n        int index     = 0;\n        int m         = order;\n        int ordersSum = 0;\n        for (int i = parameters - 1; i >= 0; --i) {\n\n            // derivative order for current free parameter\n            int derivativeOrder = orders[i];\n\n            // safety check\n            ordersSum += derivativeOrder;\n            if (ordersSum > order) {\n                throw new NumberIsTooLargeException(ordersSum, order, true);\n            }\n\n            while (derivativeOrder-- > 0) {\n                // as long as we differentiate according to current free parameter,\n                // we have to skip the value part and dive into the derivative part\n                // so we add the size of the value part to the base index\n                index += sizes[i][m--];\n            }\n\n        }\n\n        return index;\n\n    }\n\n    /** Convert an index from one (parameters, order) structure to another.\n     * @param index index of a partial derivative in source derivative structure\n     * @param srcP number of free parameters in source derivative structure\n     * @param srcDerivativesIndirection derivatives indirection array for the source\n     * derivative structure\n     * @param destP number of free parameters in destination derivative structure\n     * @param destO derivation order in destination derivative structure\n     * @param destSizes sizes array for the destination derivative structure\n     * @return index of the partial derivative with the <em>same</em> characteristics\n     * in destination derivative structure\n     * @throws NumberIsTooLargeException if order is too large\n     */\n    private static int convertIndex(final int index,\n                                    final int srcP, final int[][] srcDerivativesIndirection,\n                                    final int destP, final int destO, final int[][] destSizes)\n        throws NumberIsTooLargeException {\n        int[] orders = new int[destP];\n        System.arraycopy(srcDerivativesIndirection[index], 0, orders, 0, FastMath.min(srcP, destP));\n        return getPartialDerivativeIndex(destP, destO, destSizes, orders);\n    }\n\n    /** Get the derivation orders for a specific index in the array.\n     * <p>\n     * This method is the inverse of {@link #getPartialDerivativeIndex(int...)}.\n     * </p>\n     * @param index of the partial derivative\n     * @return orders derivation orders with respect to each parameter\n     * @see #getPartialDerivativeIndex(int...)\n     */\n    public int[] getPartialDerivativeOrders(final int index) {\n        return derivativesIndirection[index];\n    }\n\n    /** Get the number of free parameters.\n     * @return number of free parameters\n     */\n    public int getFreeParameters() {\n        return parameters;\n    }\n\n    /** Get the derivation order.\n     * @return derivation order\n     */\n    public int getOrder() {\n        return order;\n    }\n\n    /** Get the array size required for holding partial derivatives data.\n     * <p>\n     * This number includes the single 0 order derivative element, which is\n     * guaranteed to be stored in the first element of the array.\n     * </p>\n     * @return array size required for holding partial derivatives data\n     */\n    public int getSize() {\n        return sizes[parameters][order];\n    }\n\n    /** Compute linear combination.\n     * The derivative structure built will be a1 * ds1 + a2 * ds2\n     * @param a1 first scale factor\n     * @param c1 first base (unscaled) component\n     * @param offset1 offset of first operand in its array\n     * @param a2 second scale factor\n     * @param c2 second base (unscaled) component\n     * @param offset2 offset of second operand in its array\n     * @param result array where result must be stored (it may be\n     * one of the input arrays)\n     * @param resultOffset offset of the result in its array\n     */\n    public void linearCombination(final double a1, final double[] c1, final int offset1,\n                                  final double a2, final double[] c2, final int offset2,\n                                  final double[] result, final int resultOffset) {\n        for (int i = 0; i < getSize(); ++i) {\n            result[resultOffset + i] =\n                    MathArrays.linearCombination(a1, c1[offset1 + i], a2, c2[offset2 + i]);\n        }\n    }\n\n    /** Compute linear combination.\n     * The derivative structure built will be a1 * ds1 + a2 * ds2 + a3 * ds3 + a4 * ds4\n     * @param a1 first scale factor\n     * @param c1 first base (unscaled) component\n     * @param offset1 offset of first operand in its array\n     * @param a2 second scale factor\n     * @param c2 second base (unscaled) component\n     * @param offset2 offset of second operand in its array\n     * @param a3 third scale factor\n     * @param c3 third base (unscaled) component\n     * @param offset3 offset of third operand in its array\n     * @param result array where result must be stored (it may be\n     * one of the input arrays)\n     * @param resultOffset offset of the result in its array\n     */\n    public void linearCombination(final double a1, final double[] c1, final int offset1,\n                                  final double a2, final double[] c2, final int offset2,\n                                  final double a3, final double[] c3, final int offset3,\n                                  final double[] result, final int resultOffset) {\n        for (int i = 0; i < getSize(); ++i) {\n            result[resultOffset + i] =\n                    MathArrays.linearCombination(a1, c1[offset1 + i],\n                                                 a2, c2[offset2 + i],\n                                                 a3, c3[offset3 + i]);\n        }\n    }\n\n    /** Compute linear combination.\n     * The derivative structure built will be a1 * ds1 + a2 * ds2 + a3 * ds3 + a4 * ds4\n     * @param a1 first scale factor\n     * @param c1 first base (unscaled) component\n     * @param offset1 offset of first operand in its array\n     * @param a2 second scale factor\n     * @param c2 second base (unscaled) component\n     * @param offset2 offset of second operand in its array\n     * @param a3 third scale factor\n     * @param c3 third base (unscaled) component\n     * @param offset3 offset of third operand in its array\n     * @param a4 fourth scale factor\n     * @param c4 fourth base (unscaled) component\n     * @param offset4 offset of fourth operand in its array\n     * @param result array where result must be stored (it may be\n     * one of the input arrays)\n     * @param resultOffset offset of the result in its array\n     */\n    public void linearCombination(final double a1, final double[] c1, final int offset1,\n                                  final double a2, final double[] c2, final int offset2,\n                                  final double a3, final double[] c3, final int offset3,\n                                  final double a4, final double[] c4, final int offset4,\n                                  final double[] result, final int resultOffset) {\n        for (int i = 0; i < getSize(); ++i) {\n            result[resultOffset + i] =\n                    MathArrays.linearCombination(a1, c1[offset1 + i],\n                                                 a2, c2[offset2 + i],\n                                                 a3, c3[offset3 + i],\n                                                 a4, c4[offset4 + i]);\n        }\n    }\n\n    /** Perform addition of two derivative structures.\n     * @param lhs array holding left hand side of addition\n     * @param lhsOffset offset of the left hand side in its array\n     * @param rhs array right hand side of addition\n     * @param rhsOffset offset of the right hand side in its array\n     * @param result array where result must be stored (it may be\n     * one of the input arrays)\n     * @param resultOffset offset of the result in its array\n     */\n    public void add(final double[] lhs, final int lhsOffset,\n                    final double[] rhs, final int rhsOffset,\n                    final double[] result, final int resultOffset) {\n        for (int i = 0; i < getSize(); ++i) {\n            result[resultOffset + i] = lhs[lhsOffset + i] + rhs[rhsOffset + i];\n        }\n    }\n    /** Perform subtraction of two derivative structures.\n     * @param lhs array holding left hand side of subtraction\n     * @param lhsOffset offset of the left hand side in its array\n     * @param rhs array right hand side of subtraction\n     * @param rhsOffset offset of the right hand side in its array\n     * @param result array where result must be stored (it may be\n     * one of the input arrays)\n     * @param resultOffset offset of the result in its array\n     */\n    public void subtract(final double[] lhs, final int lhsOffset,\n                         final double[] rhs, final int rhsOffset,\n                         final double[] result, final int resultOffset) {\n        for (int i = 0; i < getSize(); ++i) {\n            result[resultOffset + i] = lhs[lhsOffset + i] - rhs[rhsOffset + i];\n        }\n    }\n\n    /** Perform multiplication of two derivative structures.\n     * @param lhs array holding left hand side of multiplication\n     * @param lhsOffset offset of the left hand side in its array\n     * @param rhs array right hand side of multiplication\n     * @param rhsOffset offset of the right hand side in its array\n     * @param result array where result must be stored (for\n     * multiplication the result array <em>cannot</em> be one of\n     * the input arrays)\n     * @param resultOffset offset of the result in its array\n     */\n    public void multiply(final double[] lhs, final int lhsOffset,\n                         final double[] rhs, final int rhsOffset,\n                         final double[] result, final int resultOffset) {\n        for (int i = 0; i < multIndirection.length; ++i) {\n            final int[][] mappingI = multIndirection[i];\n            double r = 0;\n            for (int j = 0; j < mappingI.length; ++j) {\n                r += mappingI[j][0] *\n                     lhs[lhsOffset + mappingI[j][1]] *\n                     rhs[rhsOffset + mappingI[j][2]];\n            }\n            result[resultOffset + i] = r;\n        }\n    }\n\n    /** Perform division of two derivative structures.\n     * @param lhs array holding left hand side of division\n     * @param lhsOffset offset of the left hand side in its array\n     * @param rhs array right hand side of division\n     * @param rhsOffset offset of the right hand side in its array\n     * @param result array where result must be stored (for\n     * division the result array <em>cannot</em> be one of\n     * the input arrays)\n     * @param resultOffset offset of the result in its array\n     */\n    public void divide(final double[] lhs, final int lhsOffset,\n                       final double[] rhs, final int rhsOffset,\n                       final double[] result, final int resultOffset) {\n        final double[] reciprocal = new double[getSize()];\n        pow(rhs, lhsOffset, -1, reciprocal, 0);\n        multiply(lhs, lhsOffset, reciprocal, 0, result, resultOffset);\n    }\n\n    /** Perform remainder of two derivative structures.\n     * @param lhs array holding left hand side of remainder\n     * @param lhsOffset offset of the left hand side in its array\n     * @param rhs array right hand side of remainder\n     * @param rhsOffset offset of the right hand side in its array\n     * @param result array where result must be stored (it may be\n     * one of the input arrays)\n     * @param resultOffset offset of the result in its array\n     */\n    public void remainder(final double[] lhs, final int lhsOffset,\n                          final double[] rhs, final int rhsOffset,\n                          final double[] result, final int resultOffset) {\n\n        // compute k such that lhs % rhs = lhs - k rhs\n        final double rem = FastMath.IEEEremainder(lhs[lhsOffset], rhs[rhsOffset]);\n        final double k   = FastMath.rint((lhs[lhsOffset] - rem) / rhs[rhsOffset]);\n\n        // set up value\n        result[resultOffset] = rem;\n\n        // set up partial derivatives\n        for (int i = 1; i < getSize(); ++i) {\n            result[resultOffset + i] = lhs[lhsOffset + i] - k * rhs[rhsOffset + i];\n        }\n\n    }\n\n    /** Compute power of a double to a derivative structure.\n     * @param a number to exponentiate\n     * @param operand array holding the power\n     * @param operandOffset offset of the power in its array\n     * @param result array where result must be stored (for\n     * power the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     * @since 3.3\n     */\n    public void pow(final double a,\n                    final double[] operand, final int operandOffset,\n                    final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        // [a^x, ln(a) a^x, ln(a)^2 a^x,, ln(a)^3 a^x, ... ]\n        final double[] function = new double[1 + order];\n        if (a == 0) {\n            if (operand[operandOffset] == 0) {\n                function[0] = 1;\n                double infinity = Double.POSITIVE_INFINITY;\n                for (int i = 1; i < function.length; ++i) {\n                    infinity = -infinity;\n                    function[i] = infinity;\n                }\n            } else if (operand[operandOffset] < 0) {\n                Arrays.fill(function, Double.NaN);\n            }\n        } else {\n            function[0] = FastMath.pow(a, operand[operandOffset]);\n            final double lnA = FastMath.log(a);\n            for (int i = 1; i < function.length; ++i) {\n                function[i] = lnA * function[i - 1];\n            }\n        }\n\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute power of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param p power to apply\n     * @param result array where result must be stored (for\n     * power the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void pow(final double[] operand, final int operandOffset, final double p,\n                    final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        // [x^p, px^(p-1), p(p-1)x^(p-2), ... ]\n        double[] function = new double[1 + order];\n        double xk = FastMath.pow(operand[operandOffset], p - order);\n        for (int i = order; i > 0; --i) {\n            function[i] = xk;\n            xk *= operand[operandOffset];\n        }\n        function[0] = xk;\n        double coefficient = p;\n        for (int i = 1; i <= order; ++i) {\n            function[i] *= coefficient;\n            coefficient *= p - i;\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute integer power of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param n power to apply\n     * @param result array where result must be stored (for\n     * power the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void pow(final double[] operand, final int operandOffset, final int n,\n                    final double[] result, final int resultOffset) {\n\n        if (n == 0) {\n            // special case, x^0 = 1 for all x\n            result[resultOffset] = 1.0;\n            Arrays.fill(result, resultOffset + 1, resultOffset + getSize(), 0);\n            return;\n        }\n\n        // create the power function value and derivatives\n        // [x^n, nx^(n-1), n(n-1)x^(n-2), ... ]\n        double[] function = new double[1 + order];\n\n        if (n > 0) {\n            // strictly positive power\n            final int maxOrder = FastMath.min(order, n);\n            double xk = FastMath.pow(operand[operandOffset], n - maxOrder);\n            for (int i = maxOrder; i > 0; --i) {\n                function[i] = xk;\n                xk *= operand[operandOffset];\n            }\n            function[0] = xk;\n        } else {\n            // strictly negative power\n            final double inv = 1.0 / operand[operandOffset];\n            double xk = FastMath.pow(inv, -n);\n            for (int i = 0; i <= order; ++i) {\n                function[i] = xk;\n                xk *= inv;\n            }\n        }\n\n        double coefficient = n;\n        for (int i = 1; i <= order; ++i) {\n            function[i] *= coefficient;\n            coefficient *= n - i;\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute power of a derivative structure.\n     * @param x array holding the base\n     * @param xOffset offset of the base in its array\n     * @param y array holding the exponent\n     * @param yOffset offset of the exponent in its array\n     * @param result array where result must be stored (for\n     * power the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void pow(final double[] x, final int xOffset,\n                    final double[] y, final int yOffset,\n                    final double[] result, final int resultOffset) {\n        final double[] logX = new double[getSize()];\n        log(x, xOffset, logX, 0);\n        final double[] yLogX = new double[getSize()];\n        multiply(logX, 0, y, yOffset, yLogX, 0);\n        exp(yLogX, 0, result, resultOffset);\n    }\n\n    /** Compute n<sup>th</sup> root of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param n order of the root\n     * @param result array where result must be stored (for\n     * n<sup>th</sup> root the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void rootN(final double[] operand, final int operandOffset, final int n,\n                      final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        // [x^(1/n), (1/n)x^((1/n)-1), (1-n)/n^2x^((1/n)-2), ... ]\n        double[] function = new double[1 + order];\n        double xk;\n        if (n == 2) {\n            function[0] = FastMath.sqrt(operand[operandOffset]);\n            xk          = 0.5 / function[0];\n        } else if (n == 3) {\n            function[0] = FastMath.cbrt(operand[operandOffset]);\n            xk          = 1.0 / (3.0 * function[0] * function[0]);\n        } else {\n            function[0] = FastMath.pow(operand[operandOffset], 1.0 / n);\n            xk          = 1.0 / (n * FastMath.pow(function[0], n - 1));\n        }\n        final double nReciprocal = 1.0 / n;\n        final double xReciprocal = 1.0 / operand[operandOffset];\n        for (int i = 1; i <= order; ++i) {\n            function[i] = xk;\n            xk *= xReciprocal * (nReciprocal - i);\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute exponential of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * exponential the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void exp(final double[] operand, final int operandOffset,\n                    final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        Arrays.fill(function, FastMath.exp(operand[operandOffset]));\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute exp(x) - 1 of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * exponential the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void expm1(final double[] operand, final int operandOffset,\n                      final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        function[0] = FastMath.expm1(operand[operandOffset]);\n        Arrays.fill(function, 1, 1 + order, FastMath.exp(operand[operandOffset]));\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute natural logarithm of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * logarithm the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void log(final double[] operand, final int operandOffset,\n                    final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        function[0] = FastMath.log(operand[operandOffset]);\n        if (order > 0) {\n            double inv = 1.0 / operand[operandOffset];\n            double xk  = inv;\n            for (int i = 1; i <= order; ++i) {\n                function[i] = xk;\n                xk *= -i * inv;\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Computes shifted logarithm of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * shifted logarithm the result array <em>cannot</em> be the input array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void log1p(final double[] operand, final int operandOffset,\n                      final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        function[0] = FastMath.log1p(operand[operandOffset]);\n        if (order > 0) {\n            double inv = 1.0 / (1.0 + operand[operandOffset]);\n            double xk  = inv;\n            for (int i = 1; i <= order; ++i) {\n                function[i] = xk;\n                xk *= -i * inv;\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Computes base 10 logarithm of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * base 10 logarithm the result array <em>cannot</em> be the input array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void log10(final double[] operand, final int operandOffset,\n                      final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        function[0] = FastMath.log10(operand[operandOffset]);\n        if (order > 0) {\n            double inv = 1.0 / operand[operandOffset];\n            double xk  = inv / FastMath.log(10.0);\n            for (int i = 1; i <= order; ++i) {\n                function[i] = xk;\n                xk *= -i * inv;\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute cosine of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * cosine the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void cos(final double[] operand, final int operandOffset,\n                    final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        function[0] = FastMath.cos(operand[operandOffset]);\n        if (order > 0) {\n            function[1] = -FastMath.sin(operand[operandOffset]);\n            for (int i = 2; i <= order; ++i) {\n                function[i] = -function[i - 2];\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute sine of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * sine the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void sin(final double[] operand, final int operandOffset,\n                    final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        function[0] = FastMath.sin(operand[operandOffset]);\n        if (order > 0) {\n            function[1] = FastMath.cos(operand[operandOffset]);\n            for (int i = 2; i <= order; ++i) {\n                function[i] = -function[i - 2];\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute tangent of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * tangent the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void tan(final double[] operand, final int operandOffset,\n                    final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        final double[] function = new double[1 + order];\n        final double t = FastMath.tan(operand[operandOffset]);\n        function[0] = t;\n\n        if (order > 0) {\n\n            // the nth order derivative of tan has the form:\n            // dn(tan(x)/dxn = P_n(tan(x))\n            // where P_n(t) is a degree n+1 polynomial with same parity as n+1\n            // P_0(t) = t, P_1(t) = 1 + t^2, P_2(t) = 2 t (1 + t^2) ...\n            // the general recurrence relation for P_n is:\n            // P_n(x) = (1+t^2) P_(n-1)'(t)\n            // as per polynomial parity, we can store coefficients of both P_(n-1) and P_n in the same array\n            final double[] p = new double[order + 2];\n            p[1] = 1;\n            final double t2 = t * t;\n            for (int n = 1; n <= order; ++n) {\n\n                // update and evaluate polynomial P_n(t)\n                double v = 0;\n                p[n + 1] = n * p[n];\n                for (int k = n + 1; k >= 0; k -= 2) {\n                    v = v * t2 + p[k];\n                    if (k > 2) {\n                        p[k - 2] = (k - 1) * p[k - 1] + (k - 3) * p[k - 3];\n                    } else if (k == 2) {\n                        p[0] = p[1];\n                    }\n                }\n                if ((n & 0x1) == 0) {\n                    v *= t;\n                }\n\n                function[n] = v;\n\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute arc cosine of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * arc cosine the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void acos(final double[] operand, final int operandOffset,\n                    final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        final double x = operand[operandOffset];\n        function[0] = FastMath.acos(x);\n        if (order > 0) {\n            // the nth order derivative of acos has the form:\n            // dn(acos(x)/dxn = P_n(x) / [1 - x^2]^((2n-1)/2)\n            // where P_n(x) is a degree n-1 polynomial with same parity as n-1\n            // P_1(x) = -1, P_2(x) = -x, P_3(x) = -2x^2 - 1 ...\n            // the general recurrence relation for P_n is:\n            // P_n(x) = (1-x^2) P_(n-1)'(x) + (2n-3) x P_(n-1)(x)\n            // as per polynomial parity, we can store coefficients of both P_(n-1) and P_n in the same array\n            final double[] p = new double[order];\n            p[0] = -1;\n            final double x2    = x * x;\n            final double f     = 1.0 / (1 - x2);\n            double coeff = FastMath.sqrt(f);\n            function[1] = coeff * p[0];\n            for (int n = 2; n <= order; ++n) {\n\n                // update and evaluate polynomial P_n(x)\n                double v = 0;\n                p[n - 1] = (n - 1) * p[n - 2];\n                for (int k = n - 1; k >= 0; k -= 2) {\n                    v = v * x2 + p[k];\n                    if (k > 2) {\n                        p[k - 2] = (k - 1) * p[k - 1] + (2 * n - k) * p[k - 3];\n                    } else if (k == 2) {\n                        p[0] = p[1];\n                    }\n                }\n                if ((n & 0x1) == 0) {\n                    v *= x;\n                }\n\n                coeff *= f;\n                function[n] = coeff * v;\n\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute arc sine of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * arc sine the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void asin(final double[] operand, final int operandOffset,\n                    final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        final double x = operand[operandOffset];\n        function[0] = FastMath.asin(x);\n        if (order > 0) {\n            // the nth order derivative of asin has the form:\n            // dn(asin(x)/dxn = P_n(x) / [1 - x^2]^((2n-1)/2)\n            // where P_n(x) is a degree n-1 polynomial with same parity as n-1\n            // P_1(x) = 1, P_2(x) = x, P_3(x) = 2x^2 + 1 ...\n            // the general recurrence relation for P_n is:\n            // P_n(x) = (1-x^2) P_(n-1)'(x) + (2n-3) x P_(n-1)(x)\n            // as per polynomial parity, we can store coefficients of both P_(n-1) and P_n in the same array\n            final double[] p = new double[order];\n            p[0] = 1;\n            final double x2    = x * x;\n            final double f     = 1.0 / (1 - x2);\n            double coeff = FastMath.sqrt(f);\n            function[1] = coeff * p[0];\n            for (int n = 2; n <= order; ++n) {\n\n                // update and evaluate polynomial P_n(x)\n                double v = 0;\n                p[n - 1] = (n - 1) * p[n - 2];\n                for (int k = n - 1; k >= 0; k -= 2) {\n                    v = v * x2 + p[k];\n                    if (k > 2) {\n                        p[k - 2] = (k - 1) * p[k - 1] + (2 * n - k) * p[k - 3];\n                    } else if (k == 2) {\n                        p[0] = p[1];\n                    }\n                }\n                if ((n & 0x1) == 0) {\n                    v *= x;\n                }\n\n                coeff *= f;\n                function[n] = coeff * v;\n\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute arc tangent of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * arc tangent the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void atan(final double[] operand, final int operandOffset,\n                     final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        final double x = operand[operandOffset];\n        function[0] = FastMath.atan(x);\n        if (order > 0) {\n            // the nth order derivative of atan has the form:\n            // dn(atan(x)/dxn = Q_n(x) / (1 + x^2)^n\n            // where Q_n(x) is a degree n-1 polynomial with same parity as n-1\n            // Q_1(x) = 1, Q_2(x) = -2x, Q_3(x) = 6x^2 - 2 ...\n            // the general recurrence relation for Q_n is:\n            // Q_n(x) = (1+x^2) Q_(n-1)'(x) - 2(n-1) x Q_(n-1)(x)\n            // as per polynomial parity, we can store coefficients of both Q_(n-1) and Q_n in the same array\n            final double[] q = new double[order];\n            q[0] = 1;\n            final double x2    = x * x;\n            final double f     = 1.0 / (1 + x2);\n            double coeff = f;\n            function[1] = coeff * q[0];\n            for (int n = 2; n <= order; ++n) {\n\n                // update and evaluate polynomial Q_n(x)\n                double v = 0;\n                q[n - 1] = -n * q[n - 2];\n                for (int k = n - 1; k >= 0; k -= 2) {\n                    v = v * x2 + q[k];\n                    if (k > 2) {\n                        q[k - 2] = (k - 1) * q[k - 1] + (k - 1 - 2 * n) * q[k - 3];\n                    } else if (k == 2) {\n                        q[0] = q[1];\n                    }\n                }\n                if ((n & 0x1) == 0) {\n                    v *= x;\n                }\n\n                coeff *= f;\n                function[n] = coeff * v;\n\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute two arguments arc tangent of a derivative structure.\n     * @param y array holding the first operand\n     * @param yOffset offset of the first operand in its array\n     * @param x array holding the second operand\n     * @param xOffset offset of the second operand in its array\n     * @param result array where result must be stored (for\n     * two arguments arc tangent the result array <em>cannot</em>\n     * be the input array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void atan2(final double[] y, final int yOffset,\n                      final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset) {\n\n        // compute r = sqrt(x^2+y^2)\n        double[] tmp1 = new double[getSize()];\n        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n        double[] tmp2 = new double[getSize()];\n        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n        if (x[xOffset] >= 0) {\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n            for (int i = 0; i < tmp2.length; ++i) {\n                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n            }\n\n        } else {\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n            result[resultOffset] =\n                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n            for (int i = 1; i < tmp2.length; ++i) {\n                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n            }\n\n        }\n\n        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n        result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);\n\n    }\n\n    /** Compute hyperbolic cosine of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * hyperbolic cosine the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void cosh(final double[] operand, final int operandOffset,\n                     final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        function[0] = FastMath.cosh(operand[operandOffset]);\n        if (order > 0) {\n            function[1] = FastMath.sinh(operand[operandOffset]);\n            for (int i = 2; i <= order; ++i) {\n                function[i] = function[i - 2];\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute hyperbolic sine of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * hyperbolic sine the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void sinh(final double[] operand, final int operandOffset,\n                     final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        function[0] = FastMath.sinh(operand[operandOffset]);\n        if (order > 0) {\n            function[1] = FastMath.cosh(operand[operandOffset]);\n            for (int i = 2; i <= order; ++i) {\n                function[i] = function[i - 2];\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute hyperbolic tangent of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * hyperbolic tangent the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void tanh(final double[] operand, final int operandOffset,\n                     final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        final double[] function = new double[1 + order];\n        final double t = FastMath.tanh(operand[operandOffset]);\n        function[0] = t;\n\n        if (order > 0) {\n\n            // the nth order derivative of tanh has the form:\n            // dn(tanh(x)/dxn = P_n(tanh(x))\n            // where P_n(t) is a degree n+1 polynomial with same parity as n+1\n            // P_0(t) = t, P_1(t) = 1 - t^2, P_2(t) = -2 t (1 - t^2) ...\n            // the general recurrence relation for P_n is:\n            // P_n(x) = (1-t^2) P_(n-1)'(t)\n            // as per polynomial parity, we can store coefficients of both P_(n-1) and P_n in the same array\n            final double[] p = new double[order + 2];\n            p[1] = 1;\n            final double t2 = t * t;\n            for (int n = 1; n <= order; ++n) {\n\n                // update and evaluate polynomial P_n(t)\n                double v = 0;\n                p[n + 1] = -n * p[n];\n                for (int k = n + 1; k >= 0; k -= 2) {\n                    v = v * t2 + p[k];\n                    if (k > 2) {\n                        p[k - 2] = (k - 1) * p[k - 1] - (k - 3) * p[k - 3];\n                    } else if (k == 2) {\n                        p[0] = p[1];\n                    }\n                }\n                if ((n & 0x1) == 0) {\n                    v *= t;\n                }\n\n                function[n] = v;\n\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute inverse hyperbolic cosine of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * inverse hyperbolic cosine the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void acosh(final double[] operand, final int operandOffset,\n                     final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        final double x = operand[operandOffset];\n        function[0] = FastMath.acosh(x);\n        if (order > 0) {\n            // the nth order derivative of acosh has the form:\n            // dn(acosh(x)/dxn = P_n(x) / [x^2 - 1]^((2n-1)/2)\n            // where P_n(x) is a degree n-1 polynomial with same parity as n-1\n            // P_1(x) = 1, P_2(x) = -x, P_3(x) = 2x^2 + 1 ...\n            // the general recurrence relation for P_n is:\n            // P_n(x) = (x^2-1) P_(n-1)'(x) - (2n-3) x P_(n-1)(x)\n            // as per polynomial parity, we can store coefficients of both P_(n-1) and P_n in the same array\n            final double[] p = new double[order];\n            p[0] = 1;\n            final double x2  = x * x;\n            final double f   = 1.0 / (x2 - 1);\n            double coeff = FastMath.sqrt(f);\n            function[1] = coeff * p[0];\n            for (int n = 2; n <= order; ++n) {\n\n                // update and evaluate polynomial P_n(x)\n                double v = 0;\n                p[n - 1] = (1 - n) * p[n - 2];\n                for (int k = n - 1; k >= 0; k -= 2) {\n                    v = v * x2 + p[k];\n                    if (k > 2) {\n                        p[k - 2] = (1 - k) * p[k - 1] + (k - 2 * n) * p[k - 3];\n                    } else if (k == 2) {\n                        p[0] = -p[1];\n                    }\n                }\n                if ((n & 0x1) == 0) {\n                    v *= x;\n                }\n\n                coeff *= f;\n                function[n] = coeff * v;\n\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute inverse hyperbolic sine of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * inverse hyperbolic sine the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void asinh(final double[] operand, final int operandOffset,\n                     final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        final double x = operand[operandOffset];\n        function[0] = FastMath.asinh(x);\n        if (order > 0) {\n            // the nth order derivative of asinh has the form:\n            // dn(asinh(x)/dxn = P_n(x) / [x^2 + 1]^((2n-1)/2)\n            // where P_n(x) is a degree n-1 polynomial with same parity as n-1\n            // P_1(x) = 1, P_2(x) = -x, P_3(x) = 2x^2 - 1 ...\n            // the general recurrence relation for P_n is:\n            // P_n(x) = (x^2+1) P_(n-1)'(x) - (2n-3) x P_(n-1)(x)\n            // as per polynomial parity, we can store coefficients of both P_(n-1) and P_n in the same array\n            final double[] p = new double[order];\n            p[0] = 1;\n            final double x2    = x * x;\n            final double f     = 1.0 / (1 + x2);\n            double coeff = FastMath.sqrt(f);\n            function[1] = coeff * p[0];\n            for (int n = 2; n <= order; ++n) {\n\n                // update and evaluate polynomial P_n(x)\n                double v = 0;\n                p[n - 1] = (1 - n) * p[n - 2];\n                for (int k = n - 1; k >= 0; k -= 2) {\n                    v = v * x2 + p[k];\n                    if (k > 2) {\n                        p[k - 2] = (k - 1) * p[k - 1] + (k - 2 * n) * p[k - 3];\n                    } else if (k == 2) {\n                        p[0] = p[1];\n                    }\n                }\n                if ((n & 0x1) == 0) {\n                    v *= x;\n                }\n\n                coeff *= f;\n                function[n] = coeff * v;\n\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute inverse hyperbolic tangent of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * inverse hyperbolic tangent the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void atanh(final double[] operand, final int operandOffset,\n                      final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        final double x = operand[operandOffset];\n        function[0] = FastMath.atanh(x);\n        if (order > 0) {\n            // the nth order derivative of atanh has the form:\n            // dn(atanh(x)/dxn = Q_n(x) / (1 - x^2)^n\n            // where Q_n(x) is a degree n-1 polynomial with same parity as n-1\n            // Q_1(x) = 1, Q_2(x) = 2x, Q_3(x) = 6x^2 + 2 ...\n            // the general recurrence relation for Q_n is:\n            // Q_n(x) = (1-x^2) Q_(n-1)'(x) + 2(n-1) x Q_(n-1)(x)\n            // as per polynomial parity, we can store coefficients of both Q_(n-1) and Q_n in the same array\n            final double[] q = new double[order];\n            q[0] = 1;\n            final double x2 = x * x;\n            final double f  = 1.0 / (1 - x2);\n            double coeff = f;\n            function[1] = coeff * q[0];\n            for (int n = 2; n <= order; ++n) {\n\n                // update and evaluate polynomial Q_n(x)\n                double v = 0;\n                q[n - 1] = n * q[n - 2];\n                for (int k = n - 1; k >= 0; k -= 2) {\n                    v = v * x2 + q[k];\n                    if (k > 2) {\n                        q[k - 2] = (k - 1) * q[k - 1] + (2 * n - k + 1) * q[k - 3];\n                    } else if (k == 2) {\n                        q[0] = q[1];\n                    }\n                }\n                if ((n & 0x1) == 0) {\n                    v *= x;\n                }\n\n                coeff *= f;\n                function[n] = coeff * v;\n\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute composition of a derivative structure by a function.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param f array of value and derivatives of the function at\n     * the current point (i.e. at {@code operand[operandOffset]}).\n     * @param result array where result must be stored (for\n     * composition the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void compose(final double[] operand, final int operandOffset, final double[] f,\n                        final double[] result, final int resultOffset) {\n        for (int i = 0; i < compIndirection.length; ++i) {\n            final int[][] mappingI = compIndirection[i];\n            double r = 0;\n            for (int j = 0; j < mappingI.length; ++j) {\n                final int[] mappingIJ = mappingI[j];\n                double product = mappingIJ[0] * f[mappingIJ[1]];\n                for (int k = 2; k < mappingIJ.length; ++k) {\n                    product *= operand[operandOffset + mappingIJ[k]];\n                }\n                r += product;\n            }\n            result[resultOffset + i] = r;\n        }\n    }\n\n    /** Evaluate Taylor expansion of a derivative structure.\n     * @param ds array holding the derivative structure\n     * @param dsOffset offset of the derivative structure in its array\n     * @param delta parameters offsets (&Delta;x, &Delta;y, ...)\n     * @return value of the Taylor expansion at x + &Delta;x, y + &Delta;y, ...\n     * @throws MathArithmeticException if factorials becomes too large\n     */\n    public double taylor(final double[] ds, final int dsOffset, final double ... delta)\n       throws MathArithmeticException {\n        double value = 0;\n        for (int i = getSize() - 1; i >= 0; --i) {\n            final int[] orders = getPartialDerivativeOrders(i);\n            double term = ds[dsOffset + i];\n            for (int k = 0; k < orders.length; ++k) {\n                if (orders[k] > 0) {\n                    try {\n                        term *= FastMath.pow(delta[k], orders[k]) /\n                        CombinatoricsUtils.factorial(orders[k]);\n                    } catch (NotPositiveException e) {\n                        // this cannot happen\n                        throw new MathInternalError(e);\n                    }\n                }\n            }\n            value += term;\n        }\n        return value;\n    }\n\n    /** Check rules set compatibility.\n     * @param compiler other compiler to check against instance\n     * @exception DimensionMismatchException if number of free parameters or orders are inconsistent\n     */\n    public void checkCompatibility(final DSCompiler compiler)\n            throws DimensionMismatchException {\n        if (parameters != compiler.parameters) {\n            throw new DimensionMismatchException(parameters, compiler.parameters);\n        }\n        if (order != compiler.order) {\n            throw new DimensionMismatchException(order, compiler.order);\n        }\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "operand", "", "double[]" ], [ "operandOffset", "", "int" ], [ "result", "", "double[]" ], [ "resultOffset", "", "int" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getOrder", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public int getOrder()" ], [ "getSize", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public int getSize()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "taylor", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public double taylor(final double[] ds, final int dsOffset, final double... delta) throws MathArithmeticException" ], [ "getPartialDerivativeIndex", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public int getPartialDerivativeIndex(final int... orders) throws DimensionMismatchException, NumberIsTooLargeException" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "getFreeParameters", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public int getFreeParameters()" ], [ "getPartialDerivativeOrders", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public int[] getPartialDerivativeOrders(final int index)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "equals", "", "double[]", "public boolean equals(Object);" ], [ "toString", "", "double[]", "public String toString()" ], [ "hashCode", "", "double[]", "public native int hashCode()" ], [ "getClass", "", "double[]", "public final native Class getClass();" ], [ "clone", "", "double[]", "public T[] clone();" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "length", "", "double[]", "public final int length;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 13448,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.analysis.differentiation",
  "className" : "DSCompiler",
  "javadocTag" : "@throws DimensionMismatchException if number of free parameters or orders are inconsistent",
  "methodJavadoc" : "    /** Check rules set compatibility.\n     * @param compiler other compiler to check against instance\n     * @throws DimensionMismatchException if number of free parameters or orders are inconsistent\n     */",
  "methodSourceCode" : "public void checkCompatibility(final DSCompiler compiler) throws DimensionMismatchException{\n    if (parameters != compiler.parameters) {\n        throw new DimensionMismatchException(parameters, compiler.parameters);\n    }\n    if (order != compiler.order) {\n        throw new DimensionMismatchException(order, compiler.order);\n    }\n}",
  "classJavadoc" : "/** Class holding \"compiled\" computation rules for derivative structures.\n * <p>This class implements the computation rules described in Dan Kalman's paper <a\n * href=\"http://www1.american.edu/cas/mathstat/People/kalman/pdffiles/mmgautodiff.pdf\">Doubly\n * Recursive Multivariate Automatic Differentiation</a>, Mathematics Magazine, vol. 75,\n * no. 3, June 2002. However, in order to avoid performances bottlenecks, the recursive\n * rules are \"compiled\" once in an unfold form. This class does this recursion unrolling\n * and stores the computation rules as simple loops with pre-computed indirection arrays.</p>\n * <p>\n * This class maps all derivative computation into single dimension arrays that hold the\n * value and partial derivatives. The class does not hold these arrays, which remains under\n * the responsibility of the caller. For each combination of number of free parameters and\n * derivation order, only one compiler is necessary, and this compiler will be used to\n * perform computations on all arrays provided to it, which can represent hundreds or\n * thousands of different parameters kept together with all theur partial derivatives.\n * </p>\n * <p>\n * The arrays on which compilers operate contain only the partial derivatives together\n * with the 0<sup>th</sup> derivative, i.e. the value. The partial derivatives are stored in\n * a compiler-specific order, which can be retrieved using methods {@link\n * #getPartialDerivativeIndex(int...) getPartialDerivativeIndex} and {@link\n * #getPartialDerivativeOrders(int)}. The value is guaranteed to be stored as the first element\n * (i.e. the {@link #getPartialDerivativeIndex(int...) getPartialDerivativeIndex} method returns\n * 0 when called with 0 for all derivation orders and {@link #getPartialDerivativeOrders(int)\n * getPartialDerivativeOrders} returns an array filled with 0 when called with 0 as the index).\n * </p>\n * <p>\n * Note that the ordering changes with number of parameters and derivation order. For example\n * given 2 parameters x and y, df/dy is stored at index 2 when derivation order is set to 1 (in\n * this case the array has three elements: f, df/dx and df/dy). If derivation order is set to\n * 2, then df/dy will be stored at index 3 (in this case the array has six elements: f, df/dx,\n * df/dxdx, df/dy, df/dxdy and df/dydy).\n * </p>\n * <p>\n * Given this structure, users can perform some simple operations like adding, subtracting\n * or multiplying constants and negating the elements by themselves, knowing if they want to\n * mutate their array or create a new array. These simple operations are not provided by\n * the compiler. The compiler provides only the more complex operations between several arrays.\n * </p>\n * <p>This class is mainly used as the engine for scalar variable {@link DerivativeStructure}.\n * It can also be used directly to hold several variables in arrays for more complex data\n * structures. User can for example store a vector of n variables depending on three x, y\n * and z free parameters in one array as follows:</p> <pre>\n *   // parameter 0 is x, parameter 1 is y, parameter 2 is z\n *   int parameters = 3;\n *   DSCompiler compiler = DSCompiler.getCompiler(parameters, order);\n *   int size = compiler.getSize();\n *\n *   // pack all elements in a single array\n *   double[] array = new double[n * size];\n *   for (int i = 0; i &lt; n; ++i) {\n *\n *     // we know value is guaranteed to be the first element\n *     array[i * size] = v[i];\n *\n *     // we don't know where first derivatives are stored, so we ask the compiler\n *     array[i * size + compiler.getPartialDerivativeIndex(1, 0, 0) = dvOnDx[i][0];\n *     array[i * size + compiler.getPartialDerivativeIndex(0, 1, 0) = dvOnDy[i][0];\n *     array[i * size + compiler.getPartialDerivativeIndex(0, 0, 1) = dvOnDz[i][0];\n *\n *     // we let all higher order derivatives set to 0\n *\n *   }\n * </pre>\n * <p>Then in another function, user can perform some operations on all elements stored\n * in the single array, such as a simple product of all variables:</p> <pre>\n *   // compute the product of all elements\n *   double[] product = new double[size];\n *   prod[0] = 1.0;\n *   for (int i = 0; i &lt; n; ++i) {\n *     double[] tmp = product.clone();\n *     compiler.multiply(tmp, 0, array, i * size, product, 0);\n *   }\n *\n *   // value\n *   double p = product[0];\n *\n *   // first derivatives\n *   double dPdX = product[compiler.getPartialDerivativeIndex(1, 0, 0)];\n *   double dPdY = product[compiler.getPartialDerivativeIndex(0, 1, 0)];\n *   double dPdZ = product[compiler.getPartialDerivativeIndex(0, 0, 1)];\n *\n *   // cross derivatives (assuming order was at least 2)\n *   double dPdXdX = product[compiler.getPartialDerivativeIndex(2, 0, 0)];\n *   double dPdXdY = product[compiler.getPartialDerivativeIndex(1, 1, 0)];\n *   double dPdXdZ = product[compiler.getPartialDerivativeIndex(1, 0, 1)];\n *   double dPdYdY = product[compiler.getPartialDerivativeIndex(0, 2, 0)];\n *   double dPdYdZ = product[compiler.getPartialDerivativeIndex(0, 1, 1)];\n *   double dPdZdZ = product[compiler.getPartialDerivativeIndex(0, 0, 2)];\n * </pre>\n * @see DerivativeStructure\n * @since 3.1\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math3.analysis.differentiation;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicReference;\n\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.exception.MathArithmeticException;\nimport org.apache.commons.math3.exception.MathInternalError;\nimport org.apache.commons.math3.exception.NotPositiveException;\nimport org.apache.commons.math3.exception.NumberIsTooLargeException;\nimport org.apache.commons.math3.util.CombinatoricsUtils;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathArrays;\n\n/** Class holding \"compiled\" computation rules for derivative structures.\n * <p>This class implements the computation rules described in Dan Kalman's paper <a\n * href=\"http://www1.american.edu/cas/mathstat/People/kalman/pdffiles/mmgautodiff.pdf\">Doubly\n * Recursive Multivariate Automatic Differentiation</a>, Mathematics Magazine, vol. 75,\n * no. 3, June 2002. However, in order to avoid performances bottlenecks, the recursive\n * rules are \"compiled\" once in an unfold form. This class does this recursion unrolling\n * and stores the computation rules as simple loops with pre-computed indirection arrays.</p>\n * <p>\n * This class maps all derivative computation into single dimension arrays that hold the\n * value and partial derivatives. The class does not hold these arrays, which remains under\n * the responsibility of the caller. For each combination of number of free parameters and\n * derivation order, only one compiler is necessary, and this compiler will be used to\n * perform computations on all arrays provided to it, which can represent hundreds or\n * thousands of different parameters kept together with all theur partial derivatives.\n * </p>\n * <p>\n * The arrays on which compilers operate contain only the partial derivatives together\n * with the 0<sup>th</sup> derivative, i.e. the value. The partial derivatives are stored in\n * a compiler-specific order, which can be retrieved using methods {@link\n * #getPartialDerivativeIndex(int...) getPartialDerivativeIndex} and {@link\n * #getPartialDerivativeOrders(int)}. The value is guaranteed to be stored as the first element\n * (i.e. the {@link #getPartialDerivativeIndex(int...) getPartialDerivativeIndex} method returns\n * 0 when called with 0 for all derivation orders and {@link #getPartialDerivativeOrders(int)\n * getPartialDerivativeOrders} returns an array filled with 0 when called with 0 as the index).\n * </p>\n * <p>\n * Note that the ordering changes with number of parameters and derivation order. For example\n * given 2 parameters x and y, df/dy is stored at index 2 when derivation order is set to 1 (in\n * this case the array has three elements: f, df/dx and df/dy). If derivation order is set to\n * 2, then df/dy will be stored at index 3 (in this case the array has six elements: f, df/dx,\n * df/dxdx, df/dy, df/dxdy and df/dydy).\n * </p>\n * <p>\n * Given this structure, users can perform some simple operations like adding, subtracting\n * or multiplying constants and negating the elements by themselves, knowing if they want to\n * mutate their array or create a new array. These simple operations are not provided by\n * the compiler. The compiler provides only the more complex operations between several arrays.\n * </p>\n * <p>This class is mainly used as the engine for scalar variable {@link DerivativeStructure}.\n * It can also be used directly to hold several variables in arrays for more complex data\n * structures. User can for example store a vector of n variables depending on three x, y\n * and z free parameters in one array as follows:</p> <pre>\n *   // parameter 0 is x, parameter 1 is y, parameter 2 is z\n *   int parameters = 3;\n *   DSCompiler compiler = DSCompiler.getCompiler(parameters, order);\n *   int size = compiler.getSize();\n *\n *   // pack all elements in a single array\n *   double[] array = new double[n * size];\n *   for (int i = 0; i &lt; n; ++i) {\n *\n *     // we know value is guaranteed to be the first element\n *     array[i * size] = v[i];\n *\n *     // we don't know where first derivatives are stored, so we ask the compiler\n *     array[i * size + compiler.getPartialDerivativeIndex(1, 0, 0) = dvOnDx[i][0];\n *     array[i * size + compiler.getPartialDerivativeIndex(0, 1, 0) = dvOnDy[i][0];\n *     array[i * size + compiler.getPartialDerivativeIndex(0, 0, 1) = dvOnDz[i][0];\n *\n *     // we let all higher order derivatives set to 0\n *\n *   }\n * </pre>\n * <p>Then in another function, user can perform some operations on all elements stored\n * in the single array, such as a simple product of all variables:</p> <pre>\n *   // compute the product of all elements\n *   double[] product = new double[size];\n *   prod[0] = 1.0;\n *   for (int i = 0; i &lt; n; ++i) {\n *     double[] tmp = product.clone();\n *     compiler.multiply(tmp, 0, array, i * size, product, 0);\n *   }\n *\n *   // value\n *   double p = product[0];\n *\n *   // first derivatives\n *   double dPdX = product[compiler.getPartialDerivativeIndex(1, 0, 0)];\n *   double dPdY = product[compiler.getPartialDerivativeIndex(0, 1, 0)];\n *   double dPdZ = product[compiler.getPartialDerivativeIndex(0, 0, 1)];\n *\n *   // cross derivatives (assuming order was at least 2)\n *   double dPdXdX = product[compiler.getPartialDerivativeIndex(2, 0, 0)];\n *   double dPdXdY = product[compiler.getPartialDerivativeIndex(1, 1, 0)];\n *   double dPdXdZ = product[compiler.getPartialDerivativeIndex(1, 0, 1)];\n *   double dPdYdY = product[compiler.getPartialDerivativeIndex(0, 2, 0)];\n *   double dPdYdZ = product[compiler.getPartialDerivativeIndex(0, 1, 1)];\n *   double dPdZdZ = product[compiler.getPartialDerivativeIndex(0, 0, 2)];\n * </pre>\n * @see DerivativeStructure\n * @since 3.1\n */\npublic class DSCompiler {\n\n    /** Array of all compilers created so far. */\n    private static AtomicReference<DSCompiler[][]> compilers =\n            new AtomicReference<DSCompiler[][]>(null);\n\n    /** Number of free parameters. */\n    private final int parameters;\n\n    /** Derivation order. */\n    private final int order;\n\n    /** Number of partial derivatives (including the single 0 order derivative element). */\n    private final int[][] sizes;\n\n    /** Indirection array for partial derivatives. */\n    private final int[][] derivativesIndirection;\n\n    /** Indirection array of the lower derivative elements. */\n    private final int[] lowerIndirection;\n\n    /** Indirection arrays for multiplication. */\n    private final int[][][] multIndirection;\n\n    /** Indirection arrays for function composition. */\n    private final int[][][] compIndirection;\n\n    /** Private constructor, reserved for the factory method {@link #getCompiler(int, int)}.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param valueCompiler compiler for the value part\n     * @param derivativeCompiler compiler for the derivative part\n     * @throws NumberIsTooLargeException if order is too large\n     */\n    private DSCompiler(final int parameters, final int order,\n                       final DSCompiler valueCompiler, final DSCompiler derivativeCompiler)\n        throws NumberIsTooLargeException {\n\n        this.parameters = parameters;\n        this.order      = order;\n        this.sizes      = compileSizes(parameters, order, valueCompiler);\n        this.derivativesIndirection =\n                compileDerivativesIndirection(parameters, order,\n                                              valueCompiler, derivativeCompiler);\n        this.lowerIndirection =\n                compileLowerIndirection(parameters, order,\n                                        valueCompiler, derivativeCompiler);\n        this.multIndirection =\n                compileMultiplicationIndirection(parameters, order,\n                                                 valueCompiler, derivativeCompiler, lowerIndirection);\n        this.compIndirection =\n                compileCompositionIndirection(parameters, order,\n                                              valueCompiler, derivativeCompiler,\n                                              sizes, derivativesIndirection);\n\n    }\n\n    /** Get the compiler for number of free parameters and order.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @return cached rules set\n     * @throws NumberIsTooLargeException if order is too large\n     */\n    public static DSCompiler getCompiler(int parameters, int order)\n        throws NumberIsTooLargeException {\n\n        // get the cached compilers\n        final DSCompiler[][] cache = compilers.get();\n        if (cache != null && cache.length > parameters &&\n            cache[parameters].length > order && cache[parameters][order] != null) {\n            // the compiler has already been created\n            return cache[parameters][order];\n        }\n\n        // we need to create more compilers\n        final int maxParameters = FastMath.max(parameters, cache == null ? 0 : cache.length);\n        final int maxOrder      = FastMath.max(order,     cache == null ? 0 : cache[0].length);\n        final DSCompiler[][] newCache = new DSCompiler[maxParameters + 1][maxOrder + 1];\n\n        if (cache != null) {\n            // preserve the already created compilers\n            for (int i = 0; i < cache.length; ++i) {\n                System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);\n            }\n        }\n\n        // create the array in increasing diagonal order\n        for (int diag = 0; diag <= parameters + order; ++diag) {\n            for (int o = FastMath.max(0, diag - parameters); o <= FastMath.min(order, diag); ++o) {\n                final int p = diag - o;\n                if (newCache[p][o] == null) {\n                    final DSCompiler valueCompiler      = (p == 0) ? null : newCache[p - 1][o];\n                    final DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];\n                    newCache[p][o] = new DSCompiler(p, o, valueCompiler, derivativeCompiler);\n                }\n            }\n        }\n\n        // atomically reset the cached compilers array\n        compilers.compareAndSet(cache, newCache);\n\n        return newCache[parameters][order];\n\n    }\n\n    /** Compile the sizes array.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param valueCompiler compiler for the value part\n     * @return sizes array\n     */\n    private static int[][] compileSizes(final int parameters, final int order,\n                                        final DSCompiler valueCompiler) {\n\n        final int[][] sizes = new int[parameters + 1][order + 1];\n        if (parameters == 0) {\n            Arrays.fill(sizes[0], 1);\n        } else {\n            System.arraycopy(valueCompiler.sizes, 0, sizes, 0, parameters);\n            sizes[parameters][0] = 1;\n            for (int i = 0; i < order; ++i) {\n                sizes[parameters][i + 1] = sizes[parameters][i] + sizes[parameters - 1][i + 1];\n            }\n        }\n\n        return sizes;\n\n    }\n\n    /** Compile the derivatives indirection array.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param valueCompiler compiler for the value part\n     * @param derivativeCompiler compiler for the derivative part\n     * @return derivatives indirection array\n     */\n    private static int[][] compileDerivativesIndirection(final int parameters, final int order,\n                                                      final DSCompiler valueCompiler,\n                                                      final DSCompiler derivativeCompiler) {\n\n        if (parameters == 0 || order == 0) {\n            return new int[1][parameters];\n        }\n\n        final int vSize = valueCompiler.derivativesIndirection.length;\n        final int dSize = derivativeCompiler.derivativesIndirection.length;\n        final int[][] derivativesIndirection = new int[vSize + dSize][parameters];\n\n        // set up the indices for the value part\n        for (int i = 0; i < vSize; ++i) {\n            // copy the first indices, the last one remaining set to 0\n            System.arraycopy(valueCompiler.derivativesIndirection[i], 0,\n                             derivativesIndirection[i], 0,\n                             parameters - 1);\n        }\n\n        // set up the indices for the derivative part\n        for (int i = 0; i < dSize; ++i) {\n\n            // copy the indices\n            System.arraycopy(derivativeCompiler.derivativesIndirection[i], 0,\n                             derivativesIndirection[vSize + i], 0,\n                             parameters);\n\n            // increment the derivation order for the last parameter\n            derivativesIndirection[vSize + i][parameters - 1]++;\n\n        }\n\n        return derivativesIndirection;\n\n    }\n\n    /** Compile the lower derivatives indirection array.\n     * <p>\n     * This indirection array contains the indices of all elements\n     * except derivatives for last derivation order.\n     * </p>\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param valueCompiler compiler for the value part\n     * @param derivativeCompiler compiler for the derivative part\n     * @return lower derivatives indirection array\n     */\n    private static int[] compileLowerIndirection(final int parameters, final int order,\n                                              final DSCompiler valueCompiler,\n                                              final DSCompiler derivativeCompiler) {\n\n        if (parameters == 0 || order <= 1) {\n            return new int[] { 0 };\n        }\n\n        // this is an implementation of definition 6 in Dan Kalman's paper.\n        final int vSize = valueCompiler.lowerIndirection.length;\n        final int dSize = derivativeCompiler.lowerIndirection.length;\n        final int[] lowerIndirection = new int[vSize + dSize];\n        System.arraycopy(valueCompiler.lowerIndirection, 0, lowerIndirection, 0, vSize);\n        for (int i = 0; i < dSize; ++i) {\n            lowerIndirection[vSize + i] = valueCompiler.getSize() + derivativeCompiler.lowerIndirection[i];\n        }\n\n        return lowerIndirection;\n\n    }\n\n    /** Compile the multiplication indirection array.\n     * <p>\n     * This indirection array contains the indices of all pairs of elements\n     * involved when computing a multiplication. This allows a straightforward\n     * loop-based multiplication (see {@link #multiply(double[], int, double[], int, double[], int)}).\n     * </p>\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param valueCompiler compiler for the value part\n     * @param derivativeCompiler compiler for the derivative part\n     * @param lowerIndirection lower derivatives indirection array\n     * @return multiplication indirection array\n     */\n    private static int[][][] compileMultiplicationIndirection(final int parameters, final int order,\n                                                           final DSCompiler valueCompiler,\n                                                           final DSCompiler derivativeCompiler,\n                                                           final int[] lowerIndirection) {\n\n        if ((parameters == 0) || (order == 0)) {\n            return new int[][][] { { { 1, 0, 0 } } };\n        }\n\n        // this is an implementation of definition 3 in Dan Kalman's paper.\n        final int vSize = valueCompiler.multIndirection.length;\n        final int dSize = derivativeCompiler.multIndirection.length;\n        final int[][][] multIndirection = new int[vSize + dSize][][];\n\n        System.arraycopy(valueCompiler.multIndirection, 0, multIndirection, 0, vSize);\n\n        for (int i = 0; i < dSize; ++i) {\n            final int[][] dRow = derivativeCompiler.multIndirection[i];\n            List<int[]> row = new ArrayList<int[]>(dRow.length * 2);\n            for (int j = 0; j < dRow.length; ++j) {\n                row.add(new int[] { dRow[j][0], lowerIndirection[dRow[j][1]], vSize + dRow[j][2] });\n                row.add(new int[] { dRow[j][0], vSize + dRow[j][1], lowerIndirection[dRow[j][2]] });\n            }\n\n            // combine terms with similar derivation orders\n            final List<int[]> combined = new ArrayList<int[]>(row.size());\n            for (int j = 0; j < row.size(); ++j) {\n                final int[] termJ = row.get(j);\n                if (termJ[0] > 0) {\n                    for (int k = j + 1; k < row.size(); ++k) {\n                        final int[] termK = row.get(k);\n                        if (termJ[1] == termK[1] && termJ[2] == termK[2]) {\n                            // combine termJ and termK\n                            termJ[0] += termK[0];\n                            // make sure we will skip termK later on in the outer loop\n                            termK[0] = 0;\n                        }\n                    }\n                    combined.add(termJ);\n                }\n            }\n\n            multIndirection[vSize + i] = combined.toArray(new int[combined.size()][]);\n\n        }\n\n        return multIndirection;\n\n    }\n\n    /** Compile the function composition indirection array.\n     * <p>\n     * This indirection array contains the indices of all sets of elements\n     * involved when computing a composition. This allows a straightforward\n     * loop-based composition (see {@link #compose(double[], int, double[], double[], int)}).\n     * </p>\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param valueCompiler compiler for the value part\n     * @param derivativeCompiler compiler for the derivative part\n     * @param sizes sizes array\n     * @param derivativesIndirection derivatives indirection array\n     * @return multiplication indirection array\n     * @throws NumberIsTooLargeException if order is too large\n     */\n    private static int[][][] compileCompositionIndirection(final int parameters, final int order,\n                                                           final DSCompiler valueCompiler,\n                                                           final DSCompiler derivativeCompiler,\n                                                           final int[][] sizes,\n                                                           final int[][] derivativesIndirection)\n       throws NumberIsTooLargeException {\n\n        if ((parameters == 0) || (order == 0)) {\n            return new int[][][] { { { 1, 0 } } };\n        }\n\n        final int vSize = valueCompiler.compIndirection.length;\n        final int dSize = derivativeCompiler.compIndirection.length;\n        final int[][][] compIndirection = new int[vSize + dSize][][];\n\n        // the composition rules from the value part can be reused as is\n        System.arraycopy(valueCompiler.compIndirection, 0, compIndirection, 0, vSize);\n\n        // the composition rules for the derivative part are deduced by\n        // differentiation the rules from the underlying compiler once\n        // with respect to the parameter this compiler handles and the\n        // underlying one did not handle\n        for (int i = 0; i < dSize; ++i) {\n            List<int[]> row = new ArrayList<int[]>();\n            for (int[] term : derivativeCompiler.compIndirection[i]) {\n\n                // handle term p * f_k(g(x)) * g_l1(x) * g_l2(x) * ... * g_lp(x)\n\n                // derive the first factor in the term: f_k with respect to new parameter\n                int[] derivedTermF = new int[term.length + 1];\n                derivedTermF[0] = term[0];     // p\n                derivedTermF[1] = term[1] + 1; // f_(k+1)\n                int[] orders = new int[parameters];\n                orders[parameters - 1] = 1;\n                derivedTermF[term.length] = getPartialDerivativeIndex(parameters, order, sizes, orders);  // g_1\n                for (int j = 2; j < term.length; ++j) {\n                    // convert the indices as the mapping for the current order\n                    // is different from the mapping with one less order\n                    derivedTermF[j] = convertIndex(term[j], parameters,\n                                                   derivativeCompiler.derivativesIndirection,\n                                                   parameters, order, sizes);\n                }\n                Arrays.sort(derivedTermF, 2, derivedTermF.length);\n                row.add(derivedTermF);\n\n                // derive the various g_l\n                for (int l = 2; l < term.length; ++l) {\n                    int[] derivedTermG = new int[term.length];\n                    derivedTermG[0] = term[0];\n                    derivedTermG[1] = term[1];\n                    for (int j = 2; j < term.length; ++j) {\n                        // convert the indices as the mapping for the current order\n                        // is different from the mapping with one less order\n                        derivedTermG[j] = convertIndex(term[j], parameters,\n                                                       derivativeCompiler.derivativesIndirection,\n                                                       parameters, order, sizes);\n                        if (j == l) {\n                            // derive this term\n                            System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters);\n                            orders[parameters - 1]++;\n                            derivedTermG[j] = getPartialDerivativeIndex(parameters, order, sizes, orders);\n                        }\n                    }\n                    Arrays.sort(derivedTermG, 2, derivedTermG.length);\n                    row.add(derivedTermG);\n                }\n\n            }\n\n            // combine terms with similar derivation orders\n            final List<int[]> combined = new ArrayList<int[]>(row.size());\n            for (int j = 0; j < row.size(); ++j) {\n                final int[] termJ = row.get(j);\n                if (termJ[0] > 0) {\n                    for (int k = j + 1; k < row.size(); ++k) {\n                        final int[] termK = row.get(k);\n                        boolean equals = termJ.length == termK.length;\n                        for (int l = 1; equals && l < termJ.length; ++l) {\n                            equals &= termJ[l] == termK[l];\n                        }\n                        if (equals) {\n                            // combine termJ and termK\n                            termJ[0] += termK[0];\n                            // make sure we will skip termK later on in the outer loop\n                            termK[0] = 0;\n                        }\n                    }\n                    combined.add(termJ);\n                }\n            }\n\n            compIndirection[vSize + i] = combined.toArray(new int[combined.size()][]);\n\n        }\n\n        return compIndirection;\n\n    }\n\n    /** Get the index of a partial derivative in the array.\n     * <p>\n     * If all orders are set to 0, then the 0<sup>th</sup> order derivative\n     * is returned, which is the value of the function.\n     * </p>\n     * <p>The indices of derivatives are between 0 and {@link #getSize() getSize()} - 1.\n     * Their specific order is fixed for a given compiler, but otherwise not\n     * publicly specified. There are however some simple cases which have guaranteed\n     * indices:\n     * </p>\n     * <ul>\n     *   <li>the index of 0<sup>th</sup> order derivative is always 0</li>\n     *   <li>if there is only 1 {@link #getFreeParameters() free parameter}, then the\n     *   derivatives are sorted in increasing derivation order (i.e. f at index 0, df/dp\n     *   at index 1, d<sup>2</sup>f/dp<sup>2</sup> at index 2 ...\n     *   d<sup>k</sup>f/dp<sup>k</sup> at index k),</li>\n     *   <li>if the {@link #getOrder() derivation order} is 1, then the derivatives\n     *   are sorted in increasing free parameter order (i.e. f at index 0, df/dx<sub>1</sub>\n     *   at index 1, df/dx<sub>2</sub> at index 2 ... df/dx<sub>k</sub> at index k),</li>\n     *   <li>all other cases are not publicly specified</li>\n     * </ul>\n     * <p>\n     * This method is the inverse of method {@link #getPartialDerivativeOrders(int)}\n     * </p>\n     * @param orders derivation orders with respect to each parameter\n     * @return index of the partial derivative\n     * @exception DimensionMismatchException if the numbers of parameters does not\n     * match the instance\n     * @exception NumberIsTooLargeException if sum of derivation orders is larger\n     * than the instance limits\n     * @see #getPartialDerivativeOrders(int)\n     */\n    public int getPartialDerivativeIndex(final int ... orders)\n            throws DimensionMismatchException, NumberIsTooLargeException {\n\n        // safety check\n        if (orders.length != getFreeParameters()) {\n            throw new DimensionMismatchException(orders.length, getFreeParameters());\n        }\n\n        return getPartialDerivativeIndex(parameters, order, sizes, orders);\n\n    }\n\n    /** Get the index of a partial derivative in an array.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param sizes sizes array\n     * @param orders derivation orders with respect to each parameter\n     * (the lenght of this array must match the number of parameters)\n     * @return index of the partial derivative\n     * @exception NumberIsTooLargeException if sum of derivation orders is larger\n     * than the instance limits\n     */\n    private static int getPartialDerivativeIndex(final int parameters, final int order,\n                                                 final int[][] sizes, final int ... orders)\n        throws NumberIsTooLargeException {\n\n        // the value is obtained by diving into the recursive Dan Kalman's structure\n        // this is theorem 2 of his paper, with recursion replaced by iteration\n        int index     = 0;\n        int m         = order;\n        int ordersSum = 0;\n        for (int i = parameters - 1; i >= 0; --i) {\n\n            // derivative order for current free parameter\n            int derivativeOrder = orders[i];\n\n            // safety check\n            ordersSum += derivativeOrder;\n            if (ordersSum > order) {\n                throw new NumberIsTooLargeException(ordersSum, order, true);\n            }\n\n            while (derivativeOrder-- > 0) {\n                // as long as we differentiate according to current free parameter,\n                // we have to skip the value part and dive into the derivative part\n                // so we add the size of the value part to the base index\n                index += sizes[i][m--];\n            }\n\n        }\n\n        return index;\n\n    }\n\n    /** Convert an index from one (parameters, order) structure to another.\n     * @param index index of a partial derivative in source derivative structure\n     * @param srcP number of free parameters in source derivative structure\n     * @param srcDerivativesIndirection derivatives indirection array for the source\n     * derivative structure\n     * @param destP number of free parameters in destination derivative structure\n     * @param destO derivation order in destination derivative structure\n     * @param destSizes sizes array for the destination derivative structure\n     * @return index of the partial derivative with the <em>same</em> characteristics\n     * in destination derivative structure\n     * @throws NumberIsTooLargeException if order is too large\n     */\n    private static int convertIndex(final int index,\n                                    final int srcP, final int[][] srcDerivativesIndirection,\n                                    final int destP, final int destO, final int[][] destSizes)\n        throws NumberIsTooLargeException {\n        int[] orders = new int[destP];\n        System.arraycopy(srcDerivativesIndirection[index], 0, orders, 0, FastMath.min(srcP, destP));\n        return getPartialDerivativeIndex(destP, destO, destSizes, orders);\n    }\n\n    /** Get the derivation orders for a specific index in the array.\n     * <p>\n     * This method is the inverse of {@link #getPartialDerivativeIndex(int...)}.\n     * </p>\n     * @param index of the partial derivative\n     * @return orders derivation orders with respect to each parameter\n     * @see #getPartialDerivativeIndex(int...)\n     */\n    public int[] getPartialDerivativeOrders(final int index) {\n        return derivativesIndirection[index];\n    }\n\n    /** Get the number of free parameters.\n     * @return number of free parameters\n     */\n    public int getFreeParameters() {\n        return parameters;\n    }\n\n    /** Get the derivation order.\n     * @return derivation order\n     */\n    public int getOrder() {\n        return order;\n    }\n\n    /** Get the array size required for holding partial derivatives data.\n     * <p>\n     * This number includes the single 0 order derivative element, which is\n     * guaranteed to be stored in the first element of the array.\n     * </p>\n     * @return array size required for holding partial derivatives data\n     */\n    public int getSize() {\n        return sizes[parameters][order];\n    }\n\n    /** Compute linear combination.\n     * The derivative structure built will be a1 * ds1 + a2 * ds2\n     * @param a1 first scale factor\n     * @param c1 first base (unscaled) component\n     * @param offset1 offset of first operand in its array\n     * @param a2 second scale factor\n     * @param c2 second base (unscaled) component\n     * @param offset2 offset of second operand in its array\n     * @param result array where result must be stored (it may be\n     * one of the input arrays)\n     * @param resultOffset offset of the result in its array\n     */\n    public void linearCombination(final double a1, final double[] c1, final int offset1,\n                                  final double a2, final double[] c2, final int offset2,\n                                  final double[] result, final int resultOffset) {\n        for (int i = 0; i < getSize(); ++i) {\n            result[resultOffset + i] =\n                    MathArrays.linearCombination(a1, c1[offset1 + i], a2, c2[offset2 + i]);\n        }\n    }\n\n    /** Compute linear combination.\n     * The derivative structure built will be a1 * ds1 + a2 * ds2 + a3 * ds3 + a4 * ds4\n     * @param a1 first scale factor\n     * @param c1 first base (unscaled) component\n     * @param offset1 offset of first operand in its array\n     * @param a2 second scale factor\n     * @param c2 second base (unscaled) component\n     * @param offset2 offset of second operand in its array\n     * @param a3 third scale factor\n     * @param c3 third base (unscaled) component\n     * @param offset3 offset of third operand in its array\n     * @param result array where result must be stored (it may be\n     * one of the input arrays)\n     * @param resultOffset offset of the result in its array\n     */\n    public void linearCombination(final double a1, final double[] c1, final int offset1,\n                                  final double a2, final double[] c2, final int offset2,\n                                  final double a3, final double[] c3, final int offset3,\n                                  final double[] result, final int resultOffset) {\n        for (int i = 0; i < getSize(); ++i) {\n            result[resultOffset + i] =\n                    MathArrays.linearCombination(a1, c1[offset1 + i],\n                                                 a2, c2[offset2 + i],\n                                                 a3, c3[offset3 + i]);\n        }\n    }\n\n    /** Compute linear combination.\n     * The derivative structure built will be a1 * ds1 + a2 * ds2 + a3 * ds3 + a4 * ds4\n     * @param a1 first scale factor\n     * @param c1 first base (unscaled) component\n     * @param offset1 offset of first operand in its array\n     * @param a2 second scale factor\n     * @param c2 second base (unscaled) component\n     * @param offset2 offset of second operand in its array\n     * @param a3 third scale factor\n     * @param c3 third base (unscaled) component\n     * @param offset3 offset of third operand in its array\n     * @param a4 fourth scale factor\n     * @param c4 fourth base (unscaled) component\n     * @param offset4 offset of fourth operand in its array\n     * @param result array where result must be stored (it may be\n     * one of the input arrays)\n     * @param resultOffset offset of the result in its array\n     */\n    public void linearCombination(final double a1, final double[] c1, final int offset1,\n                                  final double a2, final double[] c2, final int offset2,\n                                  final double a3, final double[] c3, final int offset3,\n                                  final double a4, final double[] c4, final int offset4,\n                                  final double[] result, final int resultOffset) {\n        for (int i = 0; i < getSize(); ++i) {\n            result[resultOffset + i] =\n                    MathArrays.linearCombination(a1, c1[offset1 + i],\n                                                 a2, c2[offset2 + i],\n                                                 a3, c3[offset3 + i],\n                                                 a4, c4[offset4 + i]);\n        }\n    }\n\n    /** Perform addition of two derivative structures.\n     * @param lhs array holding left hand side of addition\n     * @param lhsOffset offset of the left hand side in its array\n     * @param rhs array right hand side of addition\n     * @param rhsOffset offset of the right hand side in its array\n     * @param result array where result must be stored (it may be\n     * one of the input arrays)\n     * @param resultOffset offset of the result in its array\n     */\n    public void add(final double[] lhs, final int lhsOffset,\n                    final double[] rhs, final int rhsOffset,\n                    final double[] result, final int resultOffset) {\n        for (int i = 0; i < getSize(); ++i) {\n            result[resultOffset + i] = lhs[lhsOffset + i] + rhs[rhsOffset + i];\n        }\n    }\n    /** Perform subtraction of two derivative structures.\n     * @param lhs array holding left hand side of subtraction\n     * @param lhsOffset offset of the left hand side in its array\n     * @param rhs array right hand side of subtraction\n     * @param rhsOffset offset of the right hand side in its array\n     * @param result array where result must be stored (it may be\n     * one of the input arrays)\n     * @param resultOffset offset of the result in its array\n     */\n    public void subtract(final double[] lhs, final int lhsOffset,\n                         final double[] rhs, final int rhsOffset,\n                         final double[] result, final int resultOffset) {\n        for (int i = 0; i < getSize(); ++i) {\n            result[resultOffset + i] = lhs[lhsOffset + i] - rhs[rhsOffset + i];\n        }\n    }\n\n    /** Perform multiplication of two derivative structures.\n     * @param lhs array holding left hand side of multiplication\n     * @param lhsOffset offset of the left hand side in its array\n     * @param rhs array right hand side of multiplication\n     * @param rhsOffset offset of the right hand side in its array\n     * @param result array where result must be stored (for\n     * multiplication the result array <em>cannot</em> be one of\n     * the input arrays)\n     * @param resultOffset offset of the result in its array\n     */\n    public void multiply(final double[] lhs, final int lhsOffset,\n                         final double[] rhs, final int rhsOffset,\n                         final double[] result, final int resultOffset) {\n        for (int i = 0; i < multIndirection.length; ++i) {\n            final int[][] mappingI = multIndirection[i];\n            double r = 0;\n            for (int j = 0; j < mappingI.length; ++j) {\n                r += mappingI[j][0] *\n                     lhs[lhsOffset + mappingI[j][1]] *\n                     rhs[rhsOffset + mappingI[j][2]];\n            }\n            result[resultOffset + i] = r;\n        }\n    }\n\n    /** Perform division of two derivative structures.\n     * @param lhs array holding left hand side of division\n     * @param lhsOffset offset of the left hand side in its array\n     * @param rhs array right hand side of division\n     * @param rhsOffset offset of the right hand side in its array\n     * @param result array where result must be stored (for\n     * division the result array <em>cannot</em> be one of\n     * the input arrays)\n     * @param resultOffset offset of the result in its array\n     */\n    public void divide(final double[] lhs, final int lhsOffset,\n                       final double[] rhs, final int rhsOffset,\n                       final double[] result, final int resultOffset) {\n        final double[] reciprocal = new double[getSize()];\n        pow(rhs, lhsOffset, -1, reciprocal, 0);\n        multiply(lhs, lhsOffset, reciprocal, 0, result, resultOffset);\n    }\n\n    /** Perform remainder of two derivative structures.\n     * @param lhs array holding left hand side of remainder\n     * @param lhsOffset offset of the left hand side in its array\n     * @param rhs array right hand side of remainder\n     * @param rhsOffset offset of the right hand side in its array\n     * @param result array where result must be stored (it may be\n     * one of the input arrays)\n     * @param resultOffset offset of the result in its array\n     */\n    public void remainder(final double[] lhs, final int lhsOffset,\n                          final double[] rhs, final int rhsOffset,\n                          final double[] result, final int resultOffset) {\n\n        // compute k such that lhs % rhs = lhs - k rhs\n        final double rem = FastMath.IEEEremainder(lhs[lhsOffset], rhs[rhsOffset]);\n        final double k   = FastMath.rint((lhs[lhsOffset] - rem) / rhs[rhsOffset]);\n\n        // set up value\n        result[resultOffset] = rem;\n\n        // set up partial derivatives\n        for (int i = 1; i < getSize(); ++i) {\n            result[resultOffset + i] = lhs[lhsOffset + i] - k * rhs[rhsOffset + i];\n        }\n\n    }\n\n    /** Compute power of a double to a derivative structure.\n     * @param a number to exponentiate\n     * @param operand array holding the power\n     * @param operandOffset offset of the power in its array\n     * @param result array where result must be stored (for\n     * power the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     * @since 3.3\n     */\n    public void pow(final double a,\n                    final double[] operand, final int operandOffset,\n                    final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        // [a^x, ln(a) a^x, ln(a)^2 a^x,, ln(a)^3 a^x, ... ]\n        final double[] function = new double[1 + order];\n        if (a == 0) {\n            if (operand[operandOffset] == 0) {\n                function[0] = 1;\n                double infinity = Double.POSITIVE_INFINITY;\n                for (int i = 1; i < function.length; ++i) {\n                    infinity = -infinity;\n                    function[i] = infinity;\n                }\n            } else if (operand[operandOffset] < 0) {\n                Arrays.fill(function, Double.NaN);\n            }\n        } else {\n            function[0] = FastMath.pow(a, operand[operandOffset]);\n            final double lnA = FastMath.log(a);\n            for (int i = 1; i < function.length; ++i) {\n                function[i] = lnA * function[i - 1];\n            }\n        }\n\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute power of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param p power to apply\n     * @param result array where result must be stored (for\n     * power the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void pow(final double[] operand, final int operandOffset, final double p,\n                    final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        // [x^p, px^(p-1), p(p-1)x^(p-2), ... ]\n        double[] function = new double[1 + order];\n        double xk = FastMath.pow(operand[operandOffset], p - order);\n        for (int i = order; i > 0; --i) {\n            function[i] = xk;\n            xk *= operand[operandOffset];\n        }\n        function[0] = xk;\n        double coefficient = p;\n        for (int i = 1; i <= order; ++i) {\n            function[i] *= coefficient;\n            coefficient *= p - i;\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute integer power of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param n power to apply\n     * @param result array where result must be stored (for\n     * power the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void pow(final double[] operand, final int operandOffset, final int n,\n                    final double[] result, final int resultOffset) {\n\n        if (n == 0) {\n            // special case, x^0 = 1 for all x\n            result[resultOffset] = 1.0;\n            Arrays.fill(result, resultOffset + 1, resultOffset + getSize(), 0);\n            return;\n        }\n\n        // create the power function value and derivatives\n        // [x^n, nx^(n-1), n(n-1)x^(n-2), ... ]\n        double[] function = new double[1 + order];\n\n        if (n > 0) {\n            // strictly positive power\n            final int maxOrder = FastMath.min(order, n);\n            double xk = FastMath.pow(operand[operandOffset], n - maxOrder);\n            for (int i = maxOrder; i > 0; --i) {\n                function[i] = xk;\n                xk *= operand[operandOffset];\n            }\n            function[0] = xk;\n        } else {\n            // strictly negative power\n            final double inv = 1.0 / operand[operandOffset];\n            double xk = FastMath.pow(inv, -n);\n            for (int i = 0; i <= order; ++i) {\n                function[i] = xk;\n                xk *= inv;\n            }\n        }\n\n        double coefficient = n;\n        for (int i = 1; i <= order; ++i) {\n            function[i] *= coefficient;\n            coefficient *= n - i;\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute power of a derivative structure.\n     * @param x array holding the base\n     * @param xOffset offset of the base in its array\n     * @param y array holding the exponent\n     * @param yOffset offset of the exponent in its array\n     * @param result array where result must be stored (for\n     * power the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void pow(final double[] x, final int xOffset,\n                    final double[] y, final int yOffset,\n                    final double[] result, final int resultOffset) {\n        final double[] logX = new double[getSize()];\n        log(x, xOffset, logX, 0);\n        final double[] yLogX = new double[getSize()];\n        multiply(logX, 0, y, yOffset, yLogX, 0);\n        exp(yLogX, 0, result, resultOffset);\n    }\n\n    /** Compute n<sup>th</sup> root of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param n order of the root\n     * @param result array where result must be stored (for\n     * n<sup>th</sup> root the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void rootN(final double[] operand, final int operandOffset, final int n,\n                      final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        // [x^(1/n), (1/n)x^((1/n)-1), (1-n)/n^2x^((1/n)-2), ... ]\n        double[] function = new double[1 + order];\n        double xk;\n        if (n == 2) {\n            function[0] = FastMath.sqrt(operand[operandOffset]);\n            xk          = 0.5 / function[0];\n        } else if (n == 3) {\n            function[0] = FastMath.cbrt(operand[operandOffset]);\n            xk          = 1.0 / (3.0 * function[0] * function[0]);\n        } else {\n            function[0] = FastMath.pow(operand[operandOffset], 1.0 / n);\n            xk          = 1.0 / (n * FastMath.pow(function[0], n - 1));\n        }\n        final double nReciprocal = 1.0 / n;\n        final double xReciprocal = 1.0 / operand[operandOffset];\n        for (int i = 1; i <= order; ++i) {\n            function[i] = xk;\n            xk *= xReciprocal * (nReciprocal - i);\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute exponential of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * exponential the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void exp(final double[] operand, final int operandOffset,\n                    final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        Arrays.fill(function, FastMath.exp(operand[operandOffset]));\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute exp(x) - 1 of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * exponential the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void expm1(final double[] operand, final int operandOffset,\n                      final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        function[0] = FastMath.expm1(operand[operandOffset]);\n        Arrays.fill(function, 1, 1 + order, FastMath.exp(operand[operandOffset]));\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute natural logarithm of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * logarithm the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void log(final double[] operand, final int operandOffset,\n                    final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        function[0] = FastMath.log(operand[operandOffset]);\n        if (order > 0) {\n            double inv = 1.0 / operand[operandOffset];\n            double xk  = inv;\n            for (int i = 1; i <= order; ++i) {\n                function[i] = xk;\n                xk *= -i * inv;\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Computes shifted logarithm of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * shifted logarithm the result array <em>cannot</em> be the input array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void log1p(final double[] operand, final int operandOffset,\n                      final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        function[0] = FastMath.log1p(operand[operandOffset]);\n        if (order > 0) {\n            double inv = 1.0 / (1.0 + operand[operandOffset]);\n            double xk  = inv;\n            for (int i = 1; i <= order; ++i) {\n                function[i] = xk;\n                xk *= -i * inv;\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Computes base 10 logarithm of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * base 10 logarithm the result array <em>cannot</em> be the input array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void log10(final double[] operand, final int operandOffset,\n                      final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        function[0] = FastMath.log10(operand[operandOffset]);\n        if (order > 0) {\n            double inv = 1.0 / operand[operandOffset];\n            double xk  = inv / FastMath.log(10.0);\n            for (int i = 1; i <= order; ++i) {\n                function[i] = xk;\n                xk *= -i * inv;\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute cosine of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * cosine the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void cos(final double[] operand, final int operandOffset,\n                    final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        function[0] = FastMath.cos(operand[operandOffset]);\n        if (order > 0) {\n            function[1] = -FastMath.sin(operand[operandOffset]);\n            for (int i = 2; i <= order; ++i) {\n                function[i] = -function[i - 2];\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute sine of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * sine the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void sin(final double[] operand, final int operandOffset,\n                    final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        function[0] = FastMath.sin(operand[operandOffset]);\n        if (order > 0) {\n            function[1] = FastMath.cos(operand[operandOffset]);\n            for (int i = 2; i <= order; ++i) {\n                function[i] = -function[i - 2];\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute tangent of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * tangent the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void tan(final double[] operand, final int operandOffset,\n                    final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        final double[] function = new double[1 + order];\n        final double t = FastMath.tan(operand[operandOffset]);\n        function[0] = t;\n\n        if (order > 0) {\n\n            // the nth order derivative of tan has the form:\n            // dn(tan(x)/dxn = P_n(tan(x))\n            // where P_n(t) is a degree n+1 polynomial with same parity as n+1\n            // P_0(t) = t, P_1(t) = 1 + t^2, P_2(t) = 2 t (1 + t^2) ...\n            // the general recurrence relation for P_n is:\n            // P_n(x) = (1+t^2) P_(n-1)'(t)\n            // as per polynomial parity, we can store coefficients of both P_(n-1) and P_n in the same array\n            final double[] p = new double[order + 2];\n            p[1] = 1;\n            final double t2 = t * t;\n            for (int n = 1; n <= order; ++n) {\n\n                // update and evaluate polynomial P_n(t)\n                double v = 0;\n                p[n + 1] = n * p[n];\n                for (int k = n + 1; k >= 0; k -= 2) {\n                    v = v * t2 + p[k];\n                    if (k > 2) {\n                        p[k - 2] = (k - 1) * p[k - 1] + (k - 3) * p[k - 3];\n                    } else if (k == 2) {\n                        p[0] = p[1];\n                    }\n                }\n                if ((n & 0x1) == 0) {\n                    v *= t;\n                }\n\n                function[n] = v;\n\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute arc cosine of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * arc cosine the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void acos(final double[] operand, final int operandOffset,\n                    final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        final double x = operand[operandOffset];\n        function[0] = FastMath.acos(x);\n        if (order > 0) {\n            // the nth order derivative of acos has the form:\n            // dn(acos(x)/dxn = P_n(x) / [1 - x^2]^((2n-1)/2)\n            // where P_n(x) is a degree n-1 polynomial with same parity as n-1\n            // P_1(x) = -1, P_2(x) = -x, P_3(x) = -2x^2 - 1 ...\n            // the general recurrence relation for P_n is:\n            // P_n(x) = (1-x^2) P_(n-1)'(x) + (2n-3) x P_(n-1)(x)\n            // as per polynomial parity, we can store coefficients of both P_(n-1) and P_n in the same array\n            final double[] p = new double[order];\n            p[0] = -1;\n            final double x2    = x * x;\n            final double f     = 1.0 / (1 - x2);\n            double coeff = FastMath.sqrt(f);\n            function[1] = coeff * p[0];\n            for (int n = 2; n <= order; ++n) {\n\n                // update and evaluate polynomial P_n(x)\n                double v = 0;\n                p[n - 1] = (n - 1) * p[n - 2];\n                for (int k = n - 1; k >= 0; k -= 2) {\n                    v = v * x2 + p[k];\n                    if (k > 2) {\n                        p[k - 2] = (k - 1) * p[k - 1] + (2 * n - k) * p[k - 3];\n                    } else if (k == 2) {\n                        p[0] = p[1];\n                    }\n                }\n                if ((n & 0x1) == 0) {\n                    v *= x;\n                }\n\n                coeff *= f;\n                function[n] = coeff * v;\n\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute arc sine of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * arc sine the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void asin(final double[] operand, final int operandOffset,\n                    final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        final double x = operand[operandOffset];\n        function[0] = FastMath.asin(x);\n        if (order > 0) {\n            // the nth order derivative of asin has the form:\n            // dn(asin(x)/dxn = P_n(x) / [1 - x^2]^((2n-1)/2)\n            // where P_n(x) is a degree n-1 polynomial with same parity as n-1\n            // P_1(x) = 1, P_2(x) = x, P_3(x) = 2x^2 + 1 ...\n            // the general recurrence relation for P_n is:\n            // P_n(x) = (1-x^2) P_(n-1)'(x) + (2n-3) x P_(n-1)(x)\n            // as per polynomial parity, we can store coefficients of both P_(n-1) and P_n in the same array\n            final double[] p = new double[order];\n            p[0] = 1;\n            final double x2    = x * x;\n            final double f     = 1.0 / (1 - x2);\n            double coeff = FastMath.sqrt(f);\n            function[1] = coeff * p[0];\n            for (int n = 2; n <= order; ++n) {\n\n                // update and evaluate polynomial P_n(x)\n                double v = 0;\n                p[n - 1] = (n - 1) * p[n - 2];\n                for (int k = n - 1; k >= 0; k -= 2) {\n                    v = v * x2 + p[k];\n                    if (k > 2) {\n                        p[k - 2] = (k - 1) * p[k - 1] + (2 * n - k) * p[k - 3];\n                    } else if (k == 2) {\n                        p[0] = p[1];\n                    }\n                }\n                if ((n & 0x1) == 0) {\n                    v *= x;\n                }\n\n                coeff *= f;\n                function[n] = coeff * v;\n\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute arc tangent of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * arc tangent the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void atan(final double[] operand, final int operandOffset,\n                     final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        final double x = operand[operandOffset];\n        function[0] = FastMath.atan(x);\n        if (order > 0) {\n            // the nth order derivative of atan has the form:\n            // dn(atan(x)/dxn = Q_n(x) / (1 + x^2)^n\n            // where Q_n(x) is a degree n-1 polynomial with same parity as n-1\n            // Q_1(x) = 1, Q_2(x) = -2x, Q_3(x) = 6x^2 - 2 ...\n            // the general recurrence relation for Q_n is:\n            // Q_n(x) = (1+x^2) Q_(n-1)'(x) - 2(n-1) x Q_(n-1)(x)\n            // as per polynomial parity, we can store coefficients of both Q_(n-1) and Q_n in the same array\n            final double[] q = new double[order];\n            q[0] = 1;\n            final double x2    = x * x;\n            final double f     = 1.0 / (1 + x2);\n            double coeff = f;\n            function[1] = coeff * q[0];\n            for (int n = 2; n <= order; ++n) {\n\n                // update and evaluate polynomial Q_n(x)\n                double v = 0;\n                q[n - 1] = -n * q[n - 2];\n                for (int k = n - 1; k >= 0; k -= 2) {\n                    v = v * x2 + q[k];\n                    if (k > 2) {\n                        q[k - 2] = (k - 1) * q[k - 1] + (k - 1 - 2 * n) * q[k - 3];\n                    } else if (k == 2) {\n                        q[0] = q[1];\n                    }\n                }\n                if ((n & 0x1) == 0) {\n                    v *= x;\n                }\n\n                coeff *= f;\n                function[n] = coeff * v;\n\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute two arguments arc tangent of a derivative structure.\n     * @param y array holding the first operand\n     * @param yOffset offset of the first operand in its array\n     * @param x array holding the second operand\n     * @param xOffset offset of the second operand in its array\n     * @param result array where result must be stored (for\n     * two arguments arc tangent the result array <em>cannot</em>\n     * be the input array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void atan2(final double[] y, final int yOffset,\n                      final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset) {\n\n        // compute r = sqrt(x^2+y^2)\n        double[] tmp1 = new double[getSize()];\n        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n        double[] tmp2 = new double[getSize()];\n        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n        if (x[xOffset] >= 0) {\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n            for (int i = 0; i < tmp2.length; ++i) {\n                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n            }\n\n        } else {\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n            result[resultOffset] =\n                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n            for (int i = 1; i < tmp2.length; ++i) {\n                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n            }\n\n        }\n\n        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n        result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);\n\n    }\n\n    /** Compute hyperbolic cosine of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * hyperbolic cosine the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void cosh(final double[] operand, final int operandOffset,\n                     final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        function[0] = FastMath.cosh(operand[operandOffset]);\n        if (order > 0) {\n            function[1] = FastMath.sinh(operand[operandOffset]);\n            for (int i = 2; i <= order; ++i) {\n                function[i] = function[i - 2];\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute hyperbolic sine of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * hyperbolic sine the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void sinh(final double[] operand, final int operandOffset,\n                     final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        function[0] = FastMath.sinh(operand[operandOffset]);\n        if (order > 0) {\n            function[1] = FastMath.cosh(operand[operandOffset]);\n            for (int i = 2; i <= order; ++i) {\n                function[i] = function[i - 2];\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute hyperbolic tangent of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * hyperbolic tangent the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void tanh(final double[] operand, final int operandOffset,\n                     final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        final double[] function = new double[1 + order];\n        final double t = FastMath.tanh(operand[operandOffset]);\n        function[0] = t;\n\n        if (order > 0) {\n\n            // the nth order derivative of tanh has the form:\n            // dn(tanh(x)/dxn = P_n(tanh(x))\n            // where P_n(t) is a degree n+1 polynomial with same parity as n+1\n            // P_0(t) = t, P_1(t) = 1 - t^2, P_2(t) = -2 t (1 - t^2) ...\n            // the general recurrence relation for P_n is:\n            // P_n(x) = (1-t^2) P_(n-1)'(t)\n            // as per polynomial parity, we can store coefficients of both P_(n-1) and P_n in the same array\n            final double[] p = new double[order + 2];\n            p[1] = 1;\n            final double t2 = t * t;\n            for (int n = 1; n <= order; ++n) {\n\n                // update and evaluate polynomial P_n(t)\n                double v = 0;\n                p[n + 1] = -n * p[n];\n                for (int k = n + 1; k >= 0; k -= 2) {\n                    v = v * t2 + p[k];\n                    if (k > 2) {\n                        p[k - 2] = (k - 1) * p[k - 1] - (k - 3) * p[k - 3];\n                    } else if (k == 2) {\n                        p[0] = p[1];\n                    }\n                }\n                if ((n & 0x1) == 0) {\n                    v *= t;\n                }\n\n                function[n] = v;\n\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute inverse hyperbolic cosine of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * inverse hyperbolic cosine the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void acosh(final double[] operand, final int operandOffset,\n                     final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        final double x = operand[operandOffset];\n        function[0] = FastMath.acosh(x);\n        if (order > 0) {\n            // the nth order derivative of acosh has the form:\n            // dn(acosh(x)/dxn = P_n(x) / [x^2 - 1]^((2n-1)/2)\n            // where P_n(x) is a degree n-1 polynomial with same parity as n-1\n            // P_1(x) = 1, P_2(x) = -x, P_3(x) = 2x^2 + 1 ...\n            // the general recurrence relation for P_n is:\n            // P_n(x) = (x^2-1) P_(n-1)'(x) - (2n-3) x P_(n-1)(x)\n            // as per polynomial parity, we can store coefficients of both P_(n-1) and P_n in the same array\n            final double[] p = new double[order];\n            p[0] = 1;\n            final double x2  = x * x;\n            final double f   = 1.0 / (x2 - 1);\n            double coeff = FastMath.sqrt(f);\n            function[1] = coeff * p[0];\n            for (int n = 2; n <= order; ++n) {\n\n                // update and evaluate polynomial P_n(x)\n                double v = 0;\n                p[n - 1] = (1 - n) * p[n - 2];\n                for (int k = n - 1; k >= 0; k -= 2) {\n                    v = v * x2 + p[k];\n                    if (k > 2) {\n                        p[k - 2] = (1 - k) * p[k - 1] + (k - 2 * n) * p[k - 3];\n                    } else if (k == 2) {\n                        p[0] = -p[1];\n                    }\n                }\n                if ((n & 0x1) == 0) {\n                    v *= x;\n                }\n\n                coeff *= f;\n                function[n] = coeff * v;\n\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute inverse hyperbolic sine of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * inverse hyperbolic sine the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void asinh(final double[] operand, final int operandOffset,\n                     final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        final double x = operand[operandOffset];\n        function[0] = FastMath.asinh(x);\n        if (order > 0) {\n            // the nth order derivative of asinh has the form:\n            // dn(asinh(x)/dxn = P_n(x) / [x^2 + 1]^((2n-1)/2)\n            // where P_n(x) is a degree n-1 polynomial with same parity as n-1\n            // P_1(x) = 1, P_2(x) = -x, P_3(x) = 2x^2 - 1 ...\n            // the general recurrence relation for P_n is:\n            // P_n(x) = (x^2+1) P_(n-1)'(x) - (2n-3) x P_(n-1)(x)\n            // as per polynomial parity, we can store coefficients of both P_(n-1) and P_n in the same array\n            final double[] p = new double[order];\n            p[0] = 1;\n            final double x2    = x * x;\n            final double f     = 1.0 / (1 + x2);\n            double coeff = FastMath.sqrt(f);\n            function[1] = coeff * p[0];\n            for (int n = 2; n <= order; ++n) {\n\n                // update and evaluate polynomial P_n(x)\n                double v = 0;\n                p[n - 1] = (1 - n) * p[n - 2];\n                for (int k = n - 1; k >= 0; k -= 2) {\n                    v = v * x2 + p[k];\n                    if (k > 2) {\n                        p[k - 2] = (k - 1) * p[k - 1] + (k - 2 * n) * p[k - 3];\n                    } else if (k == 2) {\n                        p[0] = p[1];\n                    }\n                }\n                if ((n & 0x1) == 0) {\n                    v *= x;\n                }\n\n                coeff *= f;\n                function[n] = coeff * v;\n\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute inverse hyperbolic tangent of a derivative structure.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param result array where result must be stored (for\n     * inverse hyperbolic tangent the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void atanh(final double[] operand, final int operandOffset,\n                      final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        final double x = operand[operandOffset];\n        function[0] = FastMath.atanh(x);\n        if (order > 0) {\n            // the nth order derivative of atanh has the form:\n            // dn(atanh(x)/dxn = Q_n(x) / (1 - x^2)^n\n            // where Q_n(x) is a degree n-1 polynomial with same parity as n-1\n            // Q_1(x) = 1, Q_2(x) = 2x, Q_3(x) = 6x^2 + 2 ...\n            // the general recurrence relation for Q_n is:\n            // Q_n(x) = (1-x^2) Q_(n-1)'(x) + 2(n-1) x Q_(n-1)(x)\n            // as per polynomial parity, we can store coefficients of both Q_(n-1) and Q_n in the same array\n            final double[] q = new double[order];\n            q[0] = 1;\n            final double x2 = x * x;\n            final double f  = 1.0 / (1 - x2);\n            double coeff = f;\n            function[1] = coeff * q[0];\n            for (int n = 2; n <= order; ++n) {\n\n                // update and evaluate polynomial Q_n(x)\n                double v = 0;\n                q[n - 1] = n * q[n - 2];\n                for (int k = n - 1; k >= 0; k -= 2) {\n                    v = v * x2 + q[k];\n                    if (k > 2) {\n                        q[k - 2] = (k - 1) * q[k - 1] + (2 * n - k + 1) * q[k - 3];\n                    } else if (k == 2) {\n                        q[0] = q[1];\n                    }\n                }\n                if ((n & 0x1) == 0) {\n                    v *= x;\n                }\n\n                coeff *= f;\n                function[n] = coeff * v;\n\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }\n\n    /** Compute composition of a derivative structure by a function.\n     * @param operand array holding the operand\n     * @param operandOffset offset of the operand in its array\n     * @param f array of value and derivatives of the function at\n     * the current point (i.e. at {@code operand[operandOffset]}).\n     * @param result array where result must be stored (for\n     * composition the result array <em>cannot</em> be the input\n     * array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void compose(final double[] operand, final int operandOffset, final double[] f,\n                        final double[] result, final int resultOffset) {\n        for (int i = 0; i < compIndirection.length; ++i) {\n            final int[][] mappingI = compIndirection[i];\n            double r = 0;\n            for (int j = 0; j < mappingI.length; ++j) {\n                final int[] mappingIJ = mappingI[j];\n                double product = mappingIJ[0] * f[mappingIJ[1]];\n                for (int k = 2; k < mappingIJ.length; ++k) {\n                    product *= operand[operandOffset + mappingIJ[k]];\n                }\n                r += product;\n            }\n            result[resultOffset + i] = r;\n        }\n    }\n\n    /** Evaluate Taylor expansion of a derivative structure.\n     * @param ds array holding the derivative structure\n     * @param dsOffset offset of the derivative structure in its array\n     * @param delta parameters offsets (&Delta;x, &Delta;y, ...)\n     * @return value of the Taylor expansion at x + &Delta;x, y + &Delta;y, ...\n     * @throws MathArithmeticException if factorials becomes too large\n     */\n    public double taylor(final double[] ds, final int dsOffset, final double ... delta)\n       throws MathArithmeticException {\n        double value = 0;\n        for (int i = getSize() - 1; i >= 0; --i) {\n            final int[] orders = getPartialDerivativeOrders(i);\n            double term = ds[dsOffset + i];\n            for (int k = 0; k < orders.length; ++k) {\n                if (orders[k] > 0) {\n                    try {\n                        term *= FastMath.pow(delta[k], orders[k]) /\n                        CombinatoricsUtils.factorial(orders[k]);\n                    } catch (NotPositiveException e) {\n                        // this cannot happen\n                        throw new MathInternalError(e);\n                    }\n                }\n            }\n            value += term;\n        }\n        return value;\n    }\n\n    /** Check rules set compatibility.\n     * @param compiler other compiler to check against instance\n     * @exception DimensionMismatchException if number of free parameters or orders are inconsistent\n     */\n    public void checkCompatibility(final DSCompiler compiler)\n            throws DimensionMismatchException {\n        if (parameters != compiler.parameters) {\n            throw new DimensionMismatchException(parameters, compiler.parameters);\n        }\n        if (order != compiler.order) {\n            throw new DimensionMismatchException(order, compiler.order);\n        }\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "compiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "toString", "java.lang", "Object", "public String toString()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "getPartialDerivativeOrders", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public int[] getPartialDerivativeOrders(final int index)" ], [ "getSize", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public int getSize()" ], [ "taylor", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public double taylor(final double[] ds, final int dsOffset, final double... delta) throws MathArithmeticException" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "getPartialDerivativeIndex", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public int getPartialDerivativeIndex(final int... orders) throws DimensionMismatchException, NumberIsTooLargeException" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "getFreeParameters", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public int getFreeParameters()" ], [ "getOrder", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public int getOrder()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 13454,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.analysis.differentiation",
  "className" : "SparseGradient",
  "javadocTag" : "@param value value of the constant",
  "methodJavadoc" : "    /** Factory method creating a constant.\n     * @param value value of the constant\n     * @return a new instance\n     */",
  "methodSourceCode" : "public static SparseGradient createConstant(final double value){\n    return new SparseGradient(value, Collections.<Integer, Double>emptyMap());\n}",
  "classJavadoc" : "/**\n * First derivative computation with large number of variables.\n * <p>\n * This class plays a similar role to {@link DerivativeStructure}, with\n * a focus on efficiency when dealing with large number of independent variables\n * and most computation depend only on a few of them, and when only first derivative\n * is desired. When these conditions are met, this class should be much faster than\n * {@link DerivativeStructure} and use less memory.\n * </p>\n *\n * @since 3.3\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math3.analysis.differentiation;\n\nimport java.io.Serializable;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.apache.commons.math3.Field;\nimport org.apache.commons.math3.FieldElement;\nimport org.apache.commons.math3.RealFieldElement;\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathArrays;\nimport org.apache.commons.math3.util.MathUtils;\nimport org.apache.commons.math3.util.Precision;\n\n/**\n * First derivative computation with large number of variables.\n * <p>\n * This class plays a similar role to {@link DerivativeStructure}, with\n * a focus on efficiency when dealing with large number of independent variables\n * and most computation depend only on a few of them, and when only first derivative\n * is desired. When these conditions are met, this class should be much faster than\n * {@link DerivativeStructure} and use less memory.\n * </p>\n *\n * @since 3.3\n */\npublic class SparseGradient implements RealFieldElement<SparseGradient>, Serializable {\n\n    /** Serializable UID. */\n    private static final long serialVersionUID = 20131025L;\n\n    /** Value of the calculation. */\n    private double value;\n\n    /** Stored derivative, each key representing a different independent variable. */\n    private final Map<Integer, Double> derivatives;\n\n    /** Internal constructor.\n     * @param value value of the function\n     * @param derivatives derivatives map, a deep copy will be performed,\n     * so the map given here will remain safe from changes in the new instance,\n     * may be null to create an empty derivatives map, i.e. a constant value\n     */\n    private SparseGradient(final double value, final Map<Integer, Double> derivatives) {\n        this.value = value;\n        this.derivatives = new HashMap<Integer, Double>();\n        if (derivatives != null) {\n            this.derivatives.putAll(derivatives);\n        }\n    }\n\n    /** Internal constructor.\n     * @param value value of the function\n     * @param scale scaling factor to apply to all derivatives\n     * @param derivatives derivatives map, a deep copy will be performed,\n     * so the map given here will remain safe from changes in the new instance,\n     * may be null to create an empty derivatives map, i.e. a constant value\n     */\n    private SparseGradient(final double value, final double scale,\n                             final Map<Integer, Double> derivatives) {\n        this.value = value;\n        this.derivatives = new HashMap<Integer, Double>();\n        if (derivatives != null) {\n            for (final Map.Entry<Integer, Double> entry : derivatives.entrySet()) {\n                this.derivatives.put(entry.getKey(), scale * entry.getValue());\n            }\n        }\n    }\n\n    /** Factory method creating a constant.\n     * @param value value of the constant\n     * @return a new instance\n     */\n    public static SparseGradient createConstant(final double value) {\n        return new SparseGradient(value, Collections.<Integer, Double> emptyMap());\n    }\n\n    /** Factory method creating an independent variable.\n     * @param idx index of the variable\n     * @param value value of the variable\n     * @return a new instance\n     */\n    public static SparseGradient createVariable(final int idx, final double value) {\n        return new SparseGradient(value, Collections.singletonMap(idx, 1.0));\n    }\n\n    /**\n     * Find the number of variables.\n     * @return number of variables\n     */\n    public int numVars() {\n        return derivatives.size();\n    }\n\n    /**\n     * Get the derivative with respect to a particular index variable.\n     *\n     * @param index index to differentiate with.\n     * @return derivative with respect to a particular index variable\n     */\n    public double getDerivative(final int index) {\n        final Double out = derivatives.get(index);\n        return (out == null) ? 0.0 : out;\n    }\n\n    /**\n     * Get the value of the function.\n     * @return value of the function.\n     */\n    public double getValue() {\n        return value;\n    }\n\n    /** {@inheritDoc} */\n    public double getReal() {\n        return value;\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient add(final SparseGradient a) {\n        final SparseGradient out = new SparseGradient(value + a.value, derivatives);\n        for (Map.Entry<Integer, Double> entry : a.derivatives.entrySet()) {\n            final int id = entry.getKey();\n            final Double old = out.derivatives.get(id);\n            if (old == null) {\n                out.derivatives.put(id, entry.getValue());\n            } else {\n                out.derivatives.put(id, old + entry.getValue());\n            }\n        }\n\n        return out;\n    }\n\n    /**\n     * Add in place.\n     * <p>\n     * This method is designed to be faster when used multiple times in a loop.\n     * </p>\n     * <p>\n     * The instance is changed here, in order to not change the\n     * instance the {@link #add(SparseGradient)} method should\n     * be used.\n     * </p>\n     * @param a instance to add\n     */\n    public void addInPlace(final SparseGradient a) {\n        value += a.value;\n        for (final Map.Entry<Integer, Double> entry : a.derivatives.entrySet()) {\n            final int id = entry.getKey();\n            final Double old = derivatives.get(id);\n            if (old == null) {\n                derivatives.put(id, entry.getValue());\n            } else {\n                derivatives.put(id, old + entry.getValue());\n            }\n        }\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient add(final double c) {\n        final SparseGradient out = new SparseGradient(value + c, derivatives);\n        return out;\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient subtract(final SparseGradient a) {\n        final SparseGradient out = new SparseGradient(value - a.value, derivatives);\n        for (Map.Entry<Integer, Double> entry : a.derivatives.entrySet()) {\n            final int id = entry.getKey();\n            final Double old = out.derivatives.get(id);\n            if (old == null) {\n                out.derivatives.put(id, -entry.getValue());\n            } else {\n                out.derivatives.put(id, old - entry.getValue());\n            }\n        }\n        return out;\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient subtract(double c) {\n        return new SparseGradient(value - c, derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient multiply(final SparseGradient a) {\n        final SparseGradient out =\n            new SparseGradient(value * a.value, Collections.<Integer, Double> emptyMap());\n\n        // Derivatives.\n        for (Map.Entry<Integer, Double> entry : derivatives.entrySet()) {\n            out.derivatives.put(entry.getKey(), a.value * entry.getValue());\n        }\n        for (Map.Entry<Integer, Double> entry : a.derivatives.entrySet()) {\n            final int id = entry.getKey();\n            final Double old = out.derivatives.get(id);\n            if (old == null) {\n                out.derivatives.put(id, value * entry.getValue());\n            } else {\n                out.derivatives.put(id, old + value * entry.getValue());\n            }\n        }\n        return out;\n    }\n\n    /**\n     * Multiply in place.\n     * <p>\n     * This method is designed to be faster when used multiple times in a loop.\n     * </p>\n     * <p>\n     * The instance is changed here, in order to not change the\n     * instance the {@link #add(SparseGradient)} method should\n     * be used.\n     * </p>\n     * @param a instance to multiply\n     */\n    public void multiplyInPlace(final SparseGradient a) {\n        // Derivatives.\n        for (Map.Entry<Integer, Double> entry : derivatives.entrySet()) {\n            derivatives.put(entry.getKey(), a.value * entry.getValue());\n        }\n        for (Map.Entry<Integer, Double> entry : a.derivatives.entrySet()) {\n            final int id = entry.getKey();\n            final Double old = derivatives.get(id);\n            if (old == null) {\n                derivatives.put(id, value * entry.getValue());\n            } else {\n                derivatives.put(id, old + value * entry.getValue());\n            }\n        }\n        value *= a.value;\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient multiply(final double c) {\n        return new SparseGradient(value * c, c, derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient multiply(final int n) {\n        return new SparseGradient(value * n, n, derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient divide(final SparseGradient a) {\n        final SparseGradient out = new SparseGradient(value / a.value, Collections.<Integer, Double> emptyMap());\n\n        // Derivatives.\n        for (Map.Entry<Integer, Double> entry : derivatives.entrySet()) {\n            out.derivatives.put(entry.getKey(), entry.getValue() / a.value);\n        }\n        for (Map.Entry<Integer, Double> entry : a.derivatives.entrySet()) {\n            final int id = entry.getKey();\n            final Double old = out.derivatives.get(id);\n            if (old == null) {\n                out.derivatives.put(id, -out.value / a.value * entry.getValue());\n            } else {\n                out.derivatives.put(id, old - out.value / a.value * entry.getValue());\n            }\n        }\n        return out;\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient divide(final double c) {\n        return new SparseGradient(value / c, 1.0 / c, derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient negate() {\n        return new SparseGradient(-value, -1.0, derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public Field<SparseGradient> getField() {\n        return new Field<SparseGradient>() {\n\n            /** {@inheritDoc} */\n            public SparseGradient getZero() {\n                return createConstant(0);\n            }\n\n            /** {@inheritDoc} */\n            public SparseGradient getOne() {\n                return createConstant(1);\n            }\n\n            /** {@inheritDoc} */\n            public Class<? extends FieldElement<SparseGradient>> getRuntimeClass() {\n                return SparseGradient.class;\n            }\n\n        };\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient remainder(final double a) {\n        return new SparseGradient(FastMath.IEEEremainder(value, a), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient remainder(final SparseGradient a) {\n\n        // compute k such that lhs % rhs = lhs - k rhs\n        final double rem = FastMath.IEEEremainder(value, a.value);\n        final double k   = FastMath.rint((value - rem) / a.value);\n\n        return subtract(a.multiply(k));\n\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient abs() {\n        if (Double.doubleToLongBits(value) < 0) {\n            // we use the bits representation to also handle -0.0\n            return negate();\n        } else {\n            return this;\n        }\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient ceil() {\n        return createConstant(FastMath.ceil(value));\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient floor() {\n        return createConstant(FastMath.floor(value));\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient rint() {\n        return createConstant(FastMath.rint(value));\n    }\n\n    /** {@inheritDoc} */\n    public long round() {\n        return FastMath.round(value);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient signum() {\n        return createConstant(FastMath.signum(value));\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient copySign(final SparseGradient sign) {\n        final long m = Double.doubleToLongBits(value);\n        final long s = Double.doubleToLongBits(sign.value);\n        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient copySign(final double sign) {\n        final long m = Double.doubleToLongBits(value);\n        final long s = Double.doubleToLongBits(sign);\n        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient scalb(final int n) {\n        final SparseGradient out = new SparseGradient(FastMath.scalb(value, n), Collections.<Integer, Double> emptyMap());\n        for (Map.Entry<Integer, Double> entry : derivatives.entrySet()) {\n            out.derivatives.put(entry.getKey(), FastMath.scalb(entry.getValue(), n));\n        }\n        return out;\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient hypot(final SparseGradient y) {\n        if (Double.isInfinite(value) || Double.isInfinite(y.value)) {\n            return createConstant(Double.POSITIVE_INFINITY);\n        } else if (Double.isNaN(value) || Double.isNaN(y.value)) {\n            return createConstant(Double.NaN);\n        } else {\n\n            final int expX = FastMath.getExponent(value);\n            final int expY = FastMath.getExponent(y.value);\n            if (expX > expY + 27) {\n                // y is negligible with respect to x\n                return abs();\n            } else if (expY > expX + 27) {\n                // x is negligible with respect to y\n                return y.abs();\n            } else {\n\n                // find an intermediate scale to avoid both overflow and underflow\n                final int middleExp = (expX + expY) / 2;\n\n                // scale parameters without losing precision\n                final SparseGradient scaledX = scalb(-middleExp);\n                final SparseGradient scaledY = y.scalb(-middleExp);\n\n                // compute scaled hypotenuse\n                final SparseGradient scaledH =\n                        scaledX.multiply(scaledX).add(scaledY.multiply(scaledY)).sqrt();\n\n                // remove scaling\n                return scaledH.scalb(middleExp);\n\n            }\n\n        }\n    }\n\n    /**\n     * Returns the hypotenuse of a triangle with sides {@code x} and {@code y}\n     * - sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)\n     * avoiding intermediate overflow or underflow.\n     *\n     * <ul>\n     * <li> If either argument is infinite, then the result is positive infinity.</li>\n     * <li> else, if either argument is NaN then the result is NaN.</li>\n     * </ul>\n     *\n     * @param x a value\n     * @param y a value\n     * @return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)\n     */\n    public static SparseGradient hypot(final SparseGradient x, final SparseGradient y) {\n        return x.hypot(y);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient reciprocal() {\n        return new SparseGradient(1.0 / value, -1.0 / (value * value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient sqrt() {\n        final double sqrt = FastMath.sqrt(value);\n        return new SparseGradient(sqrt, 0.5 / sqrt, derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient cbrt() {\n        final double cbrt = FastMath.cbrt(value);\n        return new SparseGradient(cbrt, 1.0 / (3 * cbrt * cbrt), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient rootN(final int n) {\n        if (n == 2) {\n            return sqrt();\n        } else if (n == 3) {\n            return cbrt();\n        } else {\n            final double root = FastMath.pow(value, 1.0 / n);\n            return new SparseGradient(root, 1.0 / (n * FastMath.pow(root, n - 1)), derivatives);\n        }\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient pow(final double p) {\n        return new SparseGradient(FastMath.pow(value,  p), p * FastMath.pow(value,  p - 1), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient pow(final int n) {\n        if (n == 0) {\n            return getField().getOne();\n        } else {\n            final double valueNm1 = FastMath.pow(value,  n - 1);\n            return new SparseGradient(value * valueNm1, n * valueNm1, derivatives);\n        }\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient pow(final SparseGradient e) {\n        return log().multiply(e).exp();\n    }\n\n    /** Compute a<sup>x</sup> where a is a double and x a {@link SparseGradient}\n     * @param a number to exponentiate\n     * @param x power to apply\n     * @return a<sup>x</sup>\n     */\n    public static SparseGradient pow(final double a, final SparseGradient x) {\n        if (a == 0) {\n            if (x.value == 0) {\n                return x.compose(1.0, Double.NEGATIVE_INFINITY);\n            } else if (x.value < 0) {\n                return x.compose(Double.NaN, Double.NaN);\n            } else {\n                return x.getField().getZero();\n            }\n        } else {\n            final double ax = FastMath.pow(a, x.value);\n            return new SparseGradient(ax, ax * FastMath.log(a), x.derivatives);\n        }\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient exp() {\n        final double e = FastMath.exp(value);\n        return new SparseGradient(e, e, derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient expm1() {\n        return new SparseGradient(FastMath.expm1(value), FastMath.exp(value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient log() {\n        return new SparseGradient(FastMath.log(value), 1.0 / value, derivatives);\n    }\n\n    /** Base 10 logarithm.\n     * @return base 10 logarithm of the instance\n     */\n    public SparseGradient log10() {\n        return new SparseGradient(FastMath.log10(value), 1.0 / (FastMath.log(10.0) * value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient log1p() {\n        return new SparseGradient(FastMath.log1p(value), 1.0 / (1.0 + value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient cos() {\n        return new SparseGradient(FastMath.cos(value), -FastMath.sin(value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient sin() {\n        return new SparseGradient(FastMath.sin(value), FastMath.cos(value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient tan() {\n        final double t = FastMath.tan(value);\n        return new SparseGradient(t, 1 + t * t, derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient acos() {\n        return new SparseGradient(FastMath.acos(value), -1.0 / FastMath.sqrt(1 - value * value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient asin() {\n        return new SparseGradient(FastMath.asin(value), 1.0 / FastMath.sqrt(1 - value * value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient atan() {\n        return new SparseGradient(FastMath.atan(value), 1.0 / (1 + value * value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient atan2(final SparseGradient x) {\n\n        // compute r = sqrt(x^2+y^2)\n        final SparseGradient r = multiply(this).add(x.multiply(x)).sqrt();\n\n        final SparseGradient a;\n        if (x.value >= 0) {\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            a = divide(r.add(x)).atan().multiply(2);\n\n        } else {\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            final SparseGradient tmp = divide(r.subtract(x)).atan().multiply(-2);\n            a = tmp.add(tmp.value <= 0 ? -FastMath.PI : FastMath.PI);\n\n        }\n\n        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n        a.value = FastMath.atan2(value, x.value);\n\n        return a;\n\n    }\n\n    /** Two arguments arc tangent operation.\n     * @param y first argument of the arc tangent\n     * @param x second argument of the arc tangent\n     * @return atan2(y, x)\n     */\n    public static SparseGradient atan2(final SparseGradient y, final SparseGradient x) {\n        return y.atan2(x);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient cosh() {\n        return new SparseGradient(FastMath.cosh(value), FastMath.sinh(value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient sinh() {\n        return new SparseGradient(FastMath.sinh(value), FastMath.cosh(value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient tanh() {\n        final double t = FastMath.tanh(value);\n        return new SparseGradient(t, 1 - t * t, derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient acosh() {\n        return new SparseGradient(FastMath.acosh(value), 1.0 / FastMath.sqrt(value * value - 1.0), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient asinh() {\n        return new SparseGradient(FastMath.asinh(value), 1.0 / FastMath.sqrt(value * value + 1.0), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient atanh() {\n        return new SparseGradient(FastMath.atanh(value), 1.0 / (1.0 - value * value), derivatives);\n    }\n\n    /** Convert radians to degrees, with error of less than 0.5 ULP\n     *  @return instance converted into degrees\n     */\n    public SparseGradient toDegrees() {\n        return new SparseGradient(FastMath.toDegrees(value), FastMath.toDegrees(1.0), derivatives);\n    }\n\n    /** Convert degrees to radians, with error of less than 0.5 ULP\n     *  @return instance converted into radians\n     */\n    public SparseGradient toRadians() {\n        return new SparseGradient(FastMath.toRadians(value), FastMath.toRadians(1.0), derivatives);\n    }\n\n    /** Evaluate Taylor expansion of a sparse gradient.\n     * @param delta parameters offsets (&Delta;x, &Delta;y, ...)\n     * @return value of the Taylor expansion at x + &Delta;x, y + &Delta;y, ...\n     */\n    public double taylor(final double ... delta) {\n        double y = value;\n        for (int i = 0; i < delta.length; ++i) {\n            y += delta[i] * getDerivative(i);\n        }\n        return y;\n    }\n\n    /** Compute composition of the instance by a univariate function.\n     * @param f0 value of the function at (i.e. f({@link #getValue()}))\n     * @param f1 first derivative of the function at\n     * the current point (i.e. f'({@link #getValue()}))\n     * @return f(this)\n    */\n    public SparseGradient compose(final double f0, final double f1) {\n        return new SparseGradient(f0, f1, derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient linearCombination(final SparseGradient[] a,\n                                              final SparseGradient[] b)\n        throws DimensionMismatchException {\n\n        // compute a simple value, with all partial derivatives\n        SparseGradient out = a[0].getField().getZero();\n        for (int i = 0; i < a.length; ++i) {\n            out = out.add(a[i].multiply(b[i]));\n        }\n\n        // recompute an accurate value, taking care of cancellations\n        final double[] aDouble = new double[a.length];\n        for (int i = 0; i < a.length; ++i) {\n            aDouble[i] = a[i].getValue();\n        }\n        final double[] bDouble = new double[b.length];\n        for (int i = 0; i < b.length; ++i) {\n            bDouble[i] = b[i].getValue();\n        }\n        out.value = MathArrays.linearCombination(aDouble, bDouble);\n\n        return out;\n\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient linearCombination(final double[] a, final SparseGradient[] b) {\n\n        // compute a simple value, with all partial derivatives\n        SparseGradient out = b[0].getField().getZero();\n        for (int i = 0; i < a.length; ++i) {\n            out = out.add(b[i].multiply(a[i]));\n        }\n\n        // recompute an accurate value, taking care of cancellations\n        final double[] bDouble = new double[b.length];\n        for (int i = 0; i < b.length; ++i) {\n            bDouble[i] = b[i].getValue();\n        }\n        out.value = MathArrays.linearCombination(a, bDouble);\n\n        return out;\n\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient linearCombination(final SparseGradient a1, final SparseGradient b1,\n                                              final SparseGradient a2, final SparseGradient b2) {\n\n        // compute a simple value, with all partial derivatives\n        SparseGradient out = a1.multiply(b1).add(a2.multiply(b2));\n\n        // recompute an accurate value, taking care of cancellations\n        out.value = MathArrays.linearCombination(a1.value, b1.value, a2.value, b2.value);\n\n        return out;\n\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient linearCombination(final double a1, final SparseGradient b1,\n                                              final double a2, final SparseGradient b2) {\n\n        // compute a simple value, with all partial derivatives\n        SparseGradient out = b1.multiply(a1).add(b2.multiply(a2));\n\n        // recompute an accurate value, taking care of cancellations\n        out.value = MathArrays.linearCombination(a1, b1.value, a2, b2.value);\n\n        return out;\n\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient linearCombination(final SparseGradient a1, final SparseGradient b1,\n                                              final SparseGradient a2, final SparseGradient b2,\n                                              final SparseGradient a3, final SparseGradient b3) {\n\n        // compute a simple value, with all partial derivatives\n        SparseGradient out = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3));\n\n        // recompute an accurate value, taking care of cancellations\n        out.value = MathArrays.linearCombination(a1.value, b1.value,\n                                                 a2.value, b2.value,\n                                                 a3.value, b3.value);\n\n        return out;\n\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient linearCombination(final double a1, final SparseGradient b1,\n                                              final double a2, final SparseGradient b2,\n                                              final double a3, final SparseGradient b3) {\n\n        // compute a simple value, with all partial derivatives\n        SparseGradient out = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3));\n\n        // recompute an accurate value, taking care of cancellations\n        out.value = MathArrays.linearCombination(a1, b1.value,\n                                                 a2, b2.value,\n                                                 a3, b3.value);\n\n        return out;\n\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient linearCombination(final SparseGradient a1, final SparseGradient b1,\n                                              final SparseGradient a2, final SparseGradient b2,\n                                              final SparseGradient a3, final SparseGradient b3,\n                                              final SparseGradient a4, final SparseGradient b4) {\n\n        // compute a simple value, with all partial derivatives\n        SparseGradient out = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3)).add(a4.multiply(b4));\n\n        // recompute an accurate value, taking care of cancellations\n        out.value = MathArrays.linearCombination(a1.value, b1.value,\n                                                 a2.value, b2.value,\n                                                 a3.value, b3.value,\n                                                 a4.value, b4.value);\n\n        return out;\n\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient linearCombination(final double a1, final SparseGradient b1,\n                                              final double a2, final SparseGradient b2,\n                                              final double a3, final SparseGradient b3,\n                                              final double a4, final SparseGradient b4) {\n\n        // compute a simple value, with all partial derivatives\n        SparseGradient out = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3)).add(b4.multiply(a4));\n\n        // recompute an accurate value, taking care of cancellations\n        out.value = MathArrays.linearCombination(a1, b1.value,\n                                                 a2, b2.value,\n                                                 a3, b3.value,\n                                                 a4, b4.value);\n\n        return out;\n\n    }\n\n    /**\n     * Test for the equality of two sparse gradients.\n     * <p>\n     * Sparse gradients are considered equal if they have the same value\n     * and the same derivatives.\n     * </p>\n     * @param other Object to test for equality to this\n     * @return true if two sparse gradients are equal\n     */\n    @Override\n    public boolean equals(Object other) {\n\n        if (this == other) {\n            return true;\n        }\n\n        if (other instanceof SparseGradient) {\n            final SparseGradient rhs = (SparseGradient)other;\n            if (!Precision.equals(value, rhs.value, 1)) {\n                return false;\n            }\n            if (derivatives.size() != rhs.derivatives.size()) {\n                return false;\n            }\n            for (final Map.Entry<Integer, Double> entry : derivatives.entrySet()) {\n                if (!rhs.derivatives.containsKey(entry.getKey())) {\n                    return false;\n                }\n                if (!Precision.equals(entry.getValue(), rhs.derivatives.get(entry.getKey()), 1)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     * Get a hashCode for the derivative structure.\n     * @return a hash code value for this object\n     * @since 3.2\n     */\n    @Override\n    public int hashCode() {\n        return 743 + 809 * MathUtils.hash(value) + 167 * derivatives.hashCode();\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "value", "", "double" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "negate", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient negate()" ], [ "getDerivative", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public double getDerivative(final int index)" ], [ "add", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient add(final SparseGradient a)" ], [ "scalb", "org.apache.commons.math3", "RealFieldElement", "public abstract T scalb(int arg0)" ], [ "atan", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan()" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient atan2(final SparseGradient x)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient pow(final SparseGradient e)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient pow(final int n)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient hypot(final SparseGradient y)" ], [ "subtract", "org.apache.commons.math3", "FieldElement", "public abstract T subtract(T arg0) throws NullArgumentException" ], [ "compose", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient compose(final double f0, final double f1)" ], [ "cbrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T cbrt()" ], [ "toDegrees", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient toDegrees()" ], [ "cosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T cosh()" ], [ "floor", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient floor()" ], [ "tanh", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient tanh()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient linearCombination(final double a1, final SparseGradient b1, final double a2, final SparseGradient b2, final double a3, final SparseGradient b3)" ], [ "divide", "org.apache.commons.math3", "RealFieldElement", "public abstract T divide(double arg0)" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(T arg0)" ], [ "remainder", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient remainder(final SparseGradient a)" ], [ "rint", "org.apache.commons.math3", "RealFieldElement", "public abstract T rint()" ], [ "atan2", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan2(T arg0) throws DimensionMismatchException" ], [ "reciprocal", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient reciprocal()" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(double arg0)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5, double arg6, T arg7)" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient linearCombination(final SparseGradient a1, final SparseGradient b1, final SparseGradient a2, final SparseGradient b2, final SparseGradient a3, final SparseGradient b3)" ], [ "hypot", "org.apache.commons.math3", "RealFieldElement", "public abstract T hypot(T arg0) throws DimensionMismatchException" ], [ "exp", "org.apache.commons.math3", "RealFieldElement", "public abstract T exp()" ], [ "abs", "org.apache.commons.math3", "RealFieldElement", "public abstract T abs()" ], [ "sin", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient sin()" ], [ "expm1", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient expm1()" ], [ "getValue", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public double getValue()" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(int arg0)" ], [ "rootN", "org.apache.commons.math3", "RealFieldElement", "public abstract T rootN(int arg0)" ], [ "floor", "org.apache.commons.math3", "RealFieldElement", "public abstract T floor()" ], [ "cos", "org.apache.commons.math3", "RealFieldElement", "public abstract T cos()" ], [ "hashCode", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public int hashCode()" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient pow(final double p)" ], [ "subtract", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient subtract(double c)" ], [ "acos", "org.apache.commons.math3", "RealFieldElement", "public abstract T acos()" ], [ "multiply", "org.apache.commons.math3", "RealFieldElement", "public abstract T multiply(double arg0)" ], [ "getField", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public Field<SparseGradient> getField()" ], [ "asinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T asinh()" ], [ "taylor", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public double taylor(final double... delta)" ], [ "tanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T tanh()" ], [ "ceil", "org.apache.commons.math3", "RealFieldElement", "public abstract T ceil()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient linearCombination(final double a1, final SparseGradient b1, final double a2, final SparseGradient b2)" ], [ "signum", "org.apache.commons.math3", "RealFieldElement", "public abstract T signum()" ], [ "add", "org.apache.commons.math3", "RealFieldElement", "public abstract T add(double arg0)" ], [ "sqrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T sqrt()" ], [ "add", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient add(final double c)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(T arg0) throws DimensionMismatchException" ], [ "divide", "org.apache.commons.math3", "FieldElement", "public abstract T divide(T arg0) throws NullArgumentException, MathArithmeticException" ], [ "toRadians", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient toRadians()" ], [ "tan", "org.apache.commons.math3", "RealFieldElement", "public abstract T tan()" ], [ "cbrt", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient cbrt()" ], [ "log10", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient log10()" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient multiply(final SparseGradient a)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5)" ], [ "asinh", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient asinh()" ], [ "sqrt", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient sqrt()" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(double arg0)" ], [ "asin", "org.apache.commons.math3", "RealFieldElement", "public abstract T asin()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3)" ], [ "remainder", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient remainder(final double a)" ], [ "tan", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient tan()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient linearCombination(final double a1, final SparseGradient b1, final double a2, final SparseGradient b2, final double a3, final SparseGradient b3, final double a4, final SparseGradient b4)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5)" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient multiply(final double c)" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient linearCombination(final SparseGradient[] a, final SparseGradient[] b) throws DimensionMismatchException" ], [ "getReal", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public double getReal()" ], [ "divide", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient divide(final SparseGradient a)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient linearCombination(final SparseGradient a1, final SparseGradient b1, final SparseGradient a2, final SparseGradient b2)" ], [ "atanh", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient atanh()" ], [ "scalb", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient scalb(final int n)" ], [ "reciprocal", "org.apache.commons.math3", "RealFieldElement", "public abstract T reciprocal()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient linearCombination(final double[] a, final SparseGradient[] b)" ], [ "acos", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient acos()" ], [ "getField", "org.apache.commons.math3", "FieldElement", "public abstract Field<T> getField()" ], [ "negate", "org.apache.commons.math3", "FieldElement", "public abstract T negate()" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(int arg0)" ], [ "sinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T sinh()" ], [ "atan", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient atan()" ], [ "abs", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient abs()" ], [ "acosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T acosh()" ], [ "log1p", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient log1p()" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(T arg0) throws DimensionMismatchException" ], [ "divide", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient divide(final double c)" ], [ "log", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient log()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "expm1", "org.apache.commons.math3", "RealFieldElement", "public abstract T expm1()" ], [ "copySign", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient copySign(final SparseGradient sign)" ], [ "log1p", "org.apache.commons.math3", "RealFieldElement", "public abstract T log1p()" ], [ "subtract", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient subtract(final SparseGradient a)" ], [ "ceil", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient ceil()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient linearCombination(final SparseGradient a1, final SparseGradient b1, final SparseGradient a2, final SparseGradient b2, final SparseGradient a3, final SparseGradient b3, final SparseGradient a4, final SparseGradient b4)" ], [ "exp", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient exp()" ], [ "subtract", "org.apache.commons.math3", "RealFieldElement", "public abstract T subtract(double arg0)" ], [ "cosh", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient cosh()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "sin", "org.apache.commons.math3", "RealFieldElement", "public abstract T sin()" ], [ "numVars", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public int numVars()" ], [ "acosh", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient acosh()" ], [ "rint", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient rint()" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(double arg0)" ], [ "copySign", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient copySign(final double sign)" ], [ "add", "org.apache.commons.math3", "FieldElement", "public abstract T add(T arg0) throws NullArgumentException" ], [ "sinh", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient sinh()" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(T arg0) throws NullArgumentException" ], [ "equals", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public boolean equals(Object other)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5, T arg6, T arg7)" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient multiply(final int n)" ], [ "signum", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient signum()" ], [ "atanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T atanh()" ], [ "cos", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient cos()" ], [ "log", "org.apache.commons.math3", "RealFieldElement", "public abstract T log()" ], [ "rootN", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient rootN(final int n)" ], [ "round", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public long round()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "asin", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient asin()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "round", "org.apache.commons.math3", "RealFieldElement", "public abstract long round()" ], [ "getReal", "org.apache.commons.math3", "RealFieldElement", "public abstract double getReal()" ], [ "reciprocal", "org.apache.commons.math3", "FieldElement", "public abstract T reciprocal() throws MathArithmeticException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 13481,
  "oracle" : ";",
  "oracleType" : "NORMAL_POST",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.analysis.differentiation",
  "className" : "SparseGradient",
  "javadocTag" : "@return f(this)",
  "methodJavadoc" : "    /** Compute composition of the instance by a univariate function.\n     * @param f0 value of the function at (i.e. f({@link #getValue()}))\n     * @param f1 first derivative of the function at\n     * the current point (i.e. f'({@link #getValue()}))\n     * @return f(this)\n    */",
  "methodSourceCode" : "public SparseGradient compose(final double f0, final double f1){\n    return new SparseGradient(f0, f1, derivatives);\n}",
  "classJavadoc" : "/**\n * First derivative computation with large number of variables.\n * <p>\n * This class plays a similar role to {@link DerivativeStructure}, with\n * a focus on efficiency when dealing with large number of independent variables\n * and most computation depend only on a few of them, and when only first derivative\n * is desired. When these conditions are met, this class should be much faster than\n * {@link DerivativeStructure} and use less memory.\n * </p>\n *\n * @since 3.3\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math3.analysis.differentiation;\n\nimport java.io.Serializable;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.apache.commons.math3.Field;\nimport org.apache.commons.math3.FieldElement;\nimport org.apache.commons.math3.RealFieldElement;\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathArrays;\nimport org.apache.commons.math3.util.MathUtils;\nimport org.apache.commons.math3.util.Precision;\n\n/**\n * First derivative computation with large number of variables.\n * <p>\n * This class plays a similar role to {@link DerivativeStructure}, with\n * a focus on efficiency when dealing with large number of independent variables\n * and most computation depend only on a few of them, and when only first derivative\n * is desired. When these conditions are met, this class should be much faster than\n * {@link DerivativeStructure} and use less memory.\n * </p>\n *\n * @since 3.3\n */\npublic class SparseGradient implements RealFieldElement<SparseGradient>, Serializable {\n\n    /** Serializable UID. */\n    private static final long serialVersionUID = 20131025L;\n\n    /** Value of the calculation. */\n    private double value;\n\n    /** Stored derivative, each key representing a different independent variable. */\n    private final Map<Integer, Double> derivatives;\n\n    /** Internal constructor.\n     * @param value value of the function\n     * @param derivatives derivatives map, a deep copy will be performed,\n     * so the map given here will remain safe from changes in the new instance,\n     * may be null to create an empty derivatives map, i.e. a constant value\n     */\n    private SparseGradient(final double value, final Map<Integer, Double> derivatives) {\n        this.value = value;\n        this.derivatives = new HashMap<Integer, Double>();\n        if (derivatives != null) {\n            this.derivatives.putAll(derivatives);\n        }\n    }\n\n    /** Internal constructor.\n     * @param value value of the function\n     * @param scale scaling factor to apply to all derivatives\n     * @param derivatives derivatives map, a deep copy will be performed,\n     * so the map given here will remain safe from changes in the new instance,\n     * may be null to create an empty derivatives map, i.e. a constant value\n     */\n    private SparseGradient(final double value, final double scale,\n                             final Map<Integer, Double> derivatives) {\n        this.value = value;\n        this.derivatives = new HashMap<Integer, Double>();\n        if (derivatives != null) {\n            for (final Map.Entry<Integer, Double> entry : derivatives.entrySet()) {\n                this.derivatives.put(entry.getKey(), scale * entry.getValue());\n            }\n        }\n    }\n\n    /** Factory method creating a constant.\n     * @param value value of the constant\n     * @return a new instance\n     */\n    public static SparseGradient createConstant(final double value) {\n        return new SparseGradient(value, Collections.<Integer, Double> emptyMap());\n    }\n\n    /** Factory method creating an independent variable.\n     * @param idx index of the variable\n     * @param value value of the variable\n     * @return a new instance\n     */\n    public static SparseGradient createVariable(final int idx, final double value) {\n        return new SparseGradient(value, Collections.singletonMap(idx, 1.0));\n    }\n\n    /**\n     * Find the number of variables.\n     * @return number of variables\n     */\n    public int numVars() {\n        return derivatives.size();\n    }\n\n    /**\n     * Get the derivative with respect to a particular index variable.\n     *\n     * @param index index to differentiate with.\n     * @return derivative with respect to a particular index variable\n     */\n    public double getDerivative(final int index) {\n        final Double out = derivatives.get(index);\n        return (out == null) ? 0.0 : out;\n    }\n\n    /**\n     * Get the value of the function.\n     * @return value of the function.\n     */\n    public double getValue() {\n        return value;\n    }\n\n    /** {@inheritDoc} */\n    public double getReal() {\n        return value;\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient add(final SparseGradient a) {\n        final SparseGradient out = new SparseGradient(value + a.value, derivatives);\n        for (Map.Entry<Integer, Double> entry : a.derivatives.entrySet()) {\n            final int id = entry.getKey();\n            final Double old = out.derivatives.get(id);\n            if (old == null) {\n                out.derivatives.put(id, entry.getValue());\n            } else {\n                out.derivatives.put(id, old + entry.getValue());\n            }\n        }\n\n        return out;\n    }\n\n    /**\n     * Add in place.\n     * <p>\n     * This method is designed to be faster when used multiple times in a loop.\n     * </p>\n     * <p>\n     * The instance is changed here, in order to not change the\n     * instance the {@link #add(SparseGradient)} method should\n     * be used.\n     * </p>\n     * @param a instance to add\n     */\n    public void addInPlace(final SparseGradient a) {\n        value += a.value;\n        for (final Map.Entry<Integer, Double> entry : a.derivatives.entrySet()) {\n            final int id = entry.getKey();\n            final Double old = derivatives.get(id);\n            if (old == null) {\n                derivatives.put(id, entry.getValue());\n            } else {\n                derivatives.put(id, old + entry.getValue());\n            }\n        }\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient add(final double c) {\n        final SparseGradient out = new SparseGradient(value + c, derivatives);\n        return out;\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient subtract(final SparseGradient a) {\n        final SparseGradient out = new SparseGradient(value - a.value, derivatives);\n        for (Map.Entry<Integer, Double> entry : a.derivatives.entrySet()) {\n            final int id = entry.getKey();\n            final Double old = out.derivatives.get(id);\n            if (old == null) {\n                out.derivatives.put(id, -entry.getValue());\n            } else {\n                out.derivatives.put(id, old - entry.getValue());\n            }\n        }\n        return out;\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient subtract(double c) {\n        return new SparseGradient(value - c, derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient multiply(final SparseGradient a) {\n        final SparseGradient out =\n            new SparseGradient(value * a.value, Collections.<Integer, Double> emptyMap());\n\n        // Derivatives.\n        for (Map.Entry<Integer, Double> entry : derivatives.entrySet()) {\n            out.derivatives.put(entry.getKey(), a.value * entry.getValue());\n        }\n        for (Map.Entry<Integer, Double> entry : a.derivatives.entrySet()) {\n            final int id = entry.getKey();\n            final Double old = out.derivatives.get(id);\n            if (old == null) {\n                out.derivatives.put(id, value * entry.getValue());\n            } else {\n                out.derivatives.put(id, old + value * entry.getValue());\n            }\n        }\n        return out;\n    }\n\n    /**\n     * Multiply in place.\n     * <p>\n     * This method is designed to be faster when used multiple times in a loop.\n     * </p>\n     * <p>\n     * The instance is changed here, in order to not change the\n     * instance the {@link #add(SparseGradient)} method should\n     * be used.\n     * </p>\n     * @param a instance to multiply\n     */\n    public void multiplyInPlace(final SparseGradient a) {\n        // Derivatives.\n        for (Map.Entry<Integer, Double> entry : derivatives.entrySet()) {\n            derivatives.put(entry.getKey(), a.value * entry.getValue());\n        }\n        for (Map.Entry<Integer, Double> entry : a.derivatives.entrySet()) {\n            final int id = entry.getKey();\n            final Double old = derivatives.get(id);\n            if (old == null) {\n                derivatives.put(id, value * entry.getValue());\n            } else {\n                derivatives.put(id, old + value * entry.getValue());\n            }\n        }\n        value *= a.value;\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient multiply(final double c) {\n        return new SparseGradient(value * c, c, derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient multiply(final int n) {\n        return new SparseGradient(value * n, n, derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient divide(final SparseGradient a) {\n        final SparseGradient out = new SparseGradient(value / a.value, Collections.<Integer, Double> emptyMap());\n\n        // Derivatives.\n        for (Map.Entry<Integer, Double> entry : derivatives.entrySet()) {\n            out.derivatives.put(entry.getKey(), entry.getValue() / a.value);\n        }\n        for (Map.Entry<Integer, Double> entry : a.derivatives.entrySet()) {\n            final int id = entry.getKey();\n            final Double old = out.derivatives.get(id);\n            if (old == null) {\n                out.derivatives.put(id, -out.value / a.value * entry.getValue());\n            } else {\n                out.derivatives.put(id, old - out.value / a.value * entry.getValue());\n            }\n        }\n        return out;\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient divide(final double c) {\n        return new SparseGradient(value / c, 1.0 / c, derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient negate() {\n        return new SparseGradient(-value, -1.0, derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public Field<SparseGradient> getField() {\n        return new Field<SparseGradient>() {\n\n            /** {@inheritDoc} */\n            public SparseGradient getZero() {\n                return createConstant(0);\n            }\n\n            /** {@inheritDoc} */\n            public SparseGradient getOne() {\n                return createConstant(1);\n            }\n\n            /** {@inheritDoc} */\n            public Class<? extends FieldElement<SparseGradient>> getRuntimeClass() {\n                return SparseGradient.class;\n            }\n\n        };\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient remainder(final double a) {\n        return new SparseGradient(FastMath.IEEEremainder(value, a), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient remainder(final SparseGradient a) {\n\n        // compute k such that lhs % rhs = lhs - k rhs\n        final double rem = FastMath.IEEEremainder(value, a.value);\n        final double k   = FastMath.rint((value - rem) / a.value);\n\n        return subtract(a.multiply(k));\n\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient abs() {\n        if (Double.doubleToLongBits(value) < 0) {\n            // we use the bits representation to also handle -0.0\n            return negate();\n        } else {\n            return this;\n        }\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient ceil() {\n        return createConstant(FastMath.ceil(value));\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient floor() {\n        return createConstant(FastMath.floor(value));\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient rint() {\n        return createConstant(FastMath.rint(value));\n    }\n\n    /** {@inheritDoc} */\n    public long round() {\n        return FastMath.round(value);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient signum() {\n        return createConstant(FastMath.signum(value));\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient copySign(final SparseGradient sign) {\n        final long m = Double.doubleToLongBits(value);\n        final long s = Double.doubleToLongBits(sign.value);\n        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient copySign(final double sign) {\n        final long m = Double.doubleToLongBits(value);\n        final long s = Double.doubleToLongBits(sign);\n        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient scalb(final int n) {\n        final SparseGradient out = new SparseGradient(FastMath.scalb(value, n), Collections.<Integer, Double> emptyMap());\n        for (Map.Entry<Integer, Double> entry : derivatives.entrySet()) {\n            out.derivatives.put(entry.getKey(), FastMath.scalb(entry.getValue(), n));\n        }\n        return out;\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient hypot(final SparseGradient y) {\n        if (Double.isInfinite(value) || Double.isInfinite(y.value)) {\n            return createConstant(Double.POSITIVE_INFINITY);\n        } else if (Double.isNaN(value) || Double.isNaN(y.value)) {\n            return createConstant(Double.NaN);\n        } else {\n\n            final int expX = FastMath.getExponent(value);\n            final int expY = FastMath.getExponent(y.value);\n            if (expX > expY + 27) {\n                // y is negligible with respect to x\n                return abs();\n            } else if (expY > expX + 27) {\n                // x is negligible with respect to y\n                return y.abs();\n            } else {\n\n                // find an intermediate scale to avoid both overflow and underflow\n                final int middleExp = (expX + expY) / 2;\n\n                // scale parameters without losing precision\n                final SparseGradient scaledX = scalb(-middleExp);\n                final SparseGradient scaledY = y.scalb(-middleExp);\n\n                // compute scaled hypotenuse\n                final SparseGradient scaledH =\n                        scaledX.multiply(scaledX).add(scaledY.multiply(scaledY)).sqrt();\n\n                // remove scaling\n                return scaledH.scalb(middleExp);\n\n            }\n\n        }\n    }\n\n    /**\n     * Returns the hypotenuse of a triangle with sides {@code x} and {@code y}\n     * - sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)\n     * avoiding intermediate overflow or underflow.\n     *\n     * <ul>\n     * <li> If either argument is infinite, then the result is positive infinity.</li>\n     * <li> else, if either argument is NaN then the result is NaN.</li>\n     * </ul>\n     *\n     * @param x a value\n     * @param y a value\n     * @return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)\n     */\n    public static SparseGradient hypot(final SparseGradient x, final SparseGradient y) {\n        return x.hypot(y);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient reciprocal() {\n        return new SparseGradient(1.0 / value, -1.0 / (value * value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient sqrt() {\n        final double sqrt = FastMath.sqrt(value);\n        return new SparseGradient(sqrt, 0.5 / sqrt, derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient cbrt() {\n        final double cbrt = FastMath.cbrt(value);\n        return new SparseGradient(cbrt, 1.0 / (3 * cbrt * cbrt), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient rootN(final int n) {\n        if (n == 2) {\n            return sqrt();\n        } else if (n == 3) {\n            return cbrt();\n        } else {\n            final double root = FastMath.pow(value, 1.0 / n);\n            return new SparseGradient(root, 1.0 / (n * FastMath.pow(root, n - 1)), derivatives);\n        }\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient pow(final double p) {\n        return new SparseGradient(FastMath.pow(value,  p), p * FastMath.pow(value,  p - 1), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient pow(final int n) {\n        if (n == 0) {\n            return getField().getOne();\n        } else {\n            final double valueNm1 = FastMath.pow(value,  n - 1);\n            return new SparseGradient(value * valueNm1, n * valueNm1, derivatives);\n        }\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient pow(final SparseGradient e) {\n        return log().multiply(e).exp();\n    }\n\n    /** Compute a<sup>x</sup> where a is a double and x a {@link SparseGradient}\n     * @param a number to exponentiate\n     * @param x power to apply\n     * @return a<sup>x</sup>\n     */\n    public static SparseGradient pow(final double a, final SparseGradient x) {\n        if (a == 0) {\n            if (x.value == 0) {\n                return x.compose(1.0, Double.NEGATIVE_INFINITY);\n            } else if (x.value < 0) {\n                return x.compose(Double.NaN, Double.NaN);\n            } else {\n                return x.getField().getZero();\n            }\n        } else {\n            final double ax = FastMath.pow(a, x.value);\n            return new SparseGradient(ax, ax * FastMath.log(a), x.derivatives);\n        }\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient exp() {\n        final double e = FastMath.exp(value);\n        return new SparseGradient(e, e, derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient expm1() {\n        return new SparseGradient(FastMath.expm1(value), FastMath.exp(value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient log() {\n        return new SparseGradient(FastMath.log(value), 1.0 / value, derivatives);\n    }\n\n    /** Base 10 logarithm.\n     * @return base 10 logarithm of the instance\n     */\n    public SparseGradient log10() {\n        return new SparseGradient(FastMath.log10(value), 1.0 / (FastMath.log(10.0) * value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient log1p() {\n        return new SparseGradient(FastMath.log1p(value), 1.0 / (1.0 + value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient cos() {\n        return new SparseGradient(FastMath.cos(value), -FastMath.sin(value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient sin() {\n        return new SparseGradient(FastMath.sin(value), FastMath.cos(value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient tan() {\n        final double t = FastMath.tan(value);\n        return new SparseGradient(t, 1 + t * t, derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient acos() {\n        return new SparseGradient(FastMath.acos(value), -1.0 / FastMath.sqrt(1 - value * value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient asin() {\n        return new SparseGradient(FastMath.asin(value), 1.0 / FastMath.sqrt(1 - value * value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient atan() {\n        return new SparseGradient(FastMath.atan(value), 1.0 / (1 + value * value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient atan2(final SparseGradient x) {\n\n        // compute r = sqrt(x^2+y^2)\n        final SparseGradient r = multiply(this).add(x.multiply(x)).sqrt();\n\n        final SparseGradient a;\n        if (x.value >= 0) {\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            a = divide(r.add(x)).atan().multiply(2);\n\n        } else {\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            final SparseGradient tmp = divide(r.subtract(x)).atan().multiply(-2);\n            a = tmp.add(tmp.value <= 0 ? -FastMath.PI : FastMath.PI);\n\n        }\n\n        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n        a.value = FastMath.atan2(value, x.value);\n\n        return a;\n\n    }\n\n    /** Two arguments arc tangent operation.\n     * @param y first argument of the arc tangent\n     * @param x second argument of the arc tangent\n     * @return atan2(y, x)\n     */\n    public static SparseGradient atan2(final SparseGradient y, final SparseGradient x) {\n        return y.atan2(x);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient cosh() {\n        return new SparseGradient(FastMath.cosh(value), FastMath.sinh(value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient sinh() {\n        return new SparseGradient(FastMath.sinh(value), FastMath.cosh(value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient tanh() {\n        final double t = FastMath.tanh(value);\n        return new SparseGradient(t, 1 - t * t, derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient acosh() {\n        return new SparseGradient(FastMath.acosh(value), 1.0 / FastMath.sqrt(value * value - 1.0), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient asinh() {\n        return new SparseGradient(FastMath.asinh(value), 1.0 / FastMath.sqrt(value * value + 1.0), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient atanh() {\n        return new SparseGradient(FastMath.atanh(value), 1.0 / (1.0 - value * value), derivatives);\n    }\n\n    /** Convert radians to degrees, with error of less than 0.5 ULP\n     *  @return instance converted into degrees\n     */\n    public SparseGradient toDegrees() {\n        return new SparseGradient(FastMath.toDegrees(value), FastMath.toDegrees(1.0), derivatives);\n    }\n\n    /** Convert degrees to radians, with error of less than 0.5 ULP\n     *  @return instance converted into radians\n     */\n    public SparseGradient toRadians() {\n        return new SparseGradient(FastMath.toRadians(value), FastMath.toRadians(1.0), derivatives);\n    }\n\n    /** Evaluate Taylor expansion of a sparse gradient.\n     * @param delta parameters offsets (&Delta;x, &Delta;y, ...)\n     * @return value of the Taylor expansion at x + &Delta;x, y + &Delta;y, ...\n     */\n    public double taylor(final double ... delta) {\n        double y = value;\n        for (int i = 0; i < delta.length; ++i) {\n            y += delta[i] * getDerivative(i);\n        }\n        return y;\n    }\n\n    /** Compute composition of the instance by a univariate function.\n     * @param f0 value of the function at (i.e. f({@link #getValue()}))\n     * @param f1 first derivative of the function at\n     * the current point (i.e. f'({@link #getValue()}))\n     * @return f(this)\n    */\n    public SparseGradient compose(final double f0, final double f1) {\n        return new SparseGradient(f0, f1, derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient linearCombination(final SparseGradient[] a,\n                                              final SparseGradient[] b)\n        throws DimensionMismatchException {\n\n        // compute a simple value, with all partial derivatives\n        SparseGradient out = a[0].getField().getZero();\n        for (int i = 0; i < a.length; ++i) {\n            out = out.add(a[i].multiply(b[i]));\n        }\n\n        // recompute an accurate value, taking care of cancellations\n        final double[] aDouble = new double[a.length];\n        for (int i = 0; i < a.length; ++i) {\n            aDouble[i] = a[i].getValue();\n        }\n        final double[] bDouble = new double[b.length];\n        for (int i = 0; i < b.length; ++i) {\n            bDouble[i] = b[i].getValue();\n        }\n        out.value = MathArrays.linearCombination(aDouble, bDouble);\n\n        return out;\n\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient linearCombination(final double[] a, final SparseGradient[] b) {\n\n        // compute a simple value, with all partial derivatives\n        SparseGradient out = b[0].getField().getZero();\n        for (int i = 0; i < a.length; ++i) {\n            out = out.add(b[i].multiply(a[i]));\n        }\n\n        // recompute an accurate value, taking care of cancellations\n        final double[] bDouble = new double[b.length];\n        for (int i = 0; i < b.length; ++i) {\n            bDouble[i] = b[i].getValue();\n        }\n        out.value = MathArrays.linearCombination(a, bDouble);\n\n        return out;\n\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient linearCombination(final SparseGradient a1, final SparseGradient b1,\n                                              final SparseGradient a2, final SparseGradient b2) {\n\n        // compute a simple value, with all partial derivatives\n        SparseGradient out = a1.multiply(b1).add(a2.multiply(b2));\n\n        // recompute an accurate value, taking care of cancellations\n        out.value = MathArrays.linearCombination(a1.value, b1.value, a2.value, b2.value);\n\n        return out;\n\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient linearCombination(final double a1, final SparseGradient b1,\n                                              final double a2, final SparseGradient b2) {\n\n        // compute a simple value, with all partial derivatives\n        SparseGradient out = b1.multiply(a1).add(b2.multiply(a2));\n\n        // recompute an accurate value, taking care of cancellations\n        out.value = MathArrays.linearCombination(a1, b1.value, a2, b2.value);\n\n        return out;\n\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient linearCombination(final SparseGradient a1, final SparseGradient b1,\n                                              final SparseGradient a2, final SparseGradient b2,\n                                              final SparseGradient a3, final SparseGradient b3) {\n\n        // compute a simple value, with all partial derivatives\n        SparseGradient out = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3));\n\n        // recompute an accurate value, taking care of cancellations\n        out.value = MathArrays.linearCombination(a1.value, b1.value,\n                                                 a2.value, b2.value,\n                                                 a3.value, b3.value);\n\n        return out;\n\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient linearCombination(final double a1, final SparseGradient b1,\n                                              final double a2, final SparseGradient b2,\n                                              final double a3, final SparseGradient b3) {\n\n        // compute a simple value, with all partial derivatives\n        SparseGradient out = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3));\n\n        // recompute an accurate value, taking care of cancellations\n        out.value = MathArrays.linearCombination(a1, b1.value,\n                                                 a2, b2.value,\n                                                 a3, b3.value);\n\n        return out;\n\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient linearCombination(final SparseGradient a1, final SparseGradient b1,\n                                              final SparseGradient a2, final SparseGradient b2,\n                                              final SparseGradient a3, final SparseGradient b3,\n                                              final SparseGradient a4, final SparseGradient b4) {\n\n        // compute a simple value, with all partial derivatives\n        SparseGradient out = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3)).add(a4.multiply(b4));\n\n        // recompute an accurate value, taking care of cancellations\n        out.value = MathArrays.linearCombination(a1.value, b1.value,\n                                                 a2.value, b2.value,\n                                                 a3.value, b3.value,\n                                                 a4.value, b4.value);\n\n        return out;\n\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient linearCombination(final double a1, final SparseGradient b1,\n                                              final double a2, final SparseGradient b2,\n                                              final double a3, final SparseGradient b3,\n                                              final double a4, final SparseGradient b4) {\n\n        // compute a simple value, with all partial derivatives\n        SparseGradient out = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3)).add(b4.multiply(a4));\n\n        // recompute an accurate value, taking care of cancellations\n        out.value = MathArrays.linearCombination(a1, b1.value,\n                                                 a2, b2.value,\n                                                 a3, b3.value,\n                                                 a4, b4.value);\n\n        return out;\n\n    }\n\n    /**\n     * Test for the equality of two sparse gradients.\n     * <p>\n     * Sparse gradients are considered equal if they have the same value\n     * and the same derivatives.\n     * </p>\n     * @param other Object to test for equality to this\n     * @return true if two sparse gradients are equal\n     */\n    @Override\n    public boolean equals(Object other) {\n\n        if (this == other) {\n            return true;\n        }\n\n        if (other instanceof SparseGradient) {\n            final SparseGradient rhs = (SparseGradient)other;\n            if (!Precision.equals(value, rhs.value, 1)) {\n                return false;\n            }\n            if (derivatives.size() != rhs.derivatives.size()) {\n                return false;\n            }\n            for (final Map.Entry<Integer, Double> entry : derivatives.entrySet()) {\n                if (!rhs.derivatives.containsKey(entry.getKey())) {\n                    return false;\n                }\n                if (!Precision.equals(entry.getValue(), rhs.derivatives.get(entry.getKey()), 1)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     * Get a hashCode for the derivative structure.\n     * @return a hash code value for this object\n     * @since 3.2\n     */\n    @Override\n    public int hashCode() {\n        return 743 + 809 * MathUtils.hash(value) + 167 * derivatives.hashCode();\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ [ "0", "int" ], [ "1", "int" ] ],
  "tokensMethodArguments" : [ [ "f0", "", "double" ], [ "f1", "", "double" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "subtract", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient subtract(final SparseGradient a)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient atan2(final SparseGradient x)" ], [ "tanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T tanh()" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient hypot(final SparseGradient y)" ], [ "tan", "org.apache.commons.math3", "RealFieldElement", "public abstract T tan()" ], [ "toDegrees", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient toDegrees()" ], [ "add", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient add(final double c)" ], [ "copySign", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient copySign(final double sign)" ], [ "log", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient log()" ], [ "tan", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient tan()" ], [ "asin", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient asin()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient linearCombination(final double a1, final SparseGradient b1, final double a2, final SparseGradient b2, final double a3, final SparseGradient b3, final double a4, final SparseGradient b4)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5)" ], [ "acosh", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient acosh()" ], [ "acos", "org.apache.commons.math3", "RealFieldElement", "public abstract T acos()" ], [ "log1p", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient log1p()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5)" ], [ "sqrt", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient sqrt()" ], [ "getReal", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public double getReal()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(T arg0) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(int arg0)" ], [ "hashCode", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public int hashCode()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5, double arg6, T arg7)" ], [ "negate", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient negate()" ], [ "floor", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient floor()" ], [ "acosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T acosh()" ], [ "ceil", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient ceil()" ], [ "exp", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient exp()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(T arg0) throws DimensionMismatchException" ], [ "add", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient add(final SparseGradient a)" ], [ "reciprocal", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient reciprocal()" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(T arg0)" ], [ "atanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T atanh()" ], [ "reciprocal", "org.apache.commons.math3", "RealFieldElement", "public abstract T reciprocal()" ], [ "rootN", "org.apache.commons.math3", "RealFieldElement", "public abstract T rootN(int arg0)" ], [ "hypot", "org.apache.commons.math3", "RealFieldElement", "public abstract T hypot(T arg0) throws DimensionMismatchException" ], [ "cos", "org.apache.commons.math3", "RealFieldElement", "public abstract T cos()" ], [ "asin", "org.apache.commons.math3", "RealFieldElement", "public abstract T asin()" ], [ "taylor", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public double taylor(final double... delta)" ], [ "negate", "org.apache.commons.math3", "FieldElement", "public abstract T negate()" ], [ "divide", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient divide(final SparseGradient a)" ], [ "ceil", "org.apache.commons.math3", "RealFieldElement", "public abstract T ceil()" ], [ "asinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T asinh()" ], [ "sinh", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient sinh()" ], [ "getValue", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public double getValue()" ], [ "sin", "org.apache.commons.math3", "RealFieldElement", "public abstract T sin()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(double arg0)" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(int arg0)" ], [ "exp", "org.apache.commons.math3", "RealFieldElement", "public abstract T exp()" ], [ "getDerivative", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public double getDerivative(final int index)" ], [ "floor", "org.apache.commons.math3", "RealFieldElement", "public abstract T floor()" ], [ "divide", "org.apache.commons.math3", "FieldElement", "public abstract T divide(T arg0) throws NullArgumentException, MathArithmeticException" ], [ "atan", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient atan()" ], [ "remainder", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient remainder(final SparseGradient a)" ], [ "divide", "org.apache.commons.math3", "RealFieldElement", "public abstract T divide(double arg0)" ], [ "tanh", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient tanh()" ], [ "remainder", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient remainder(final double a)" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient multiply(final int n)" ], [ "rootN", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient rootN(final int n)" ], [ "sqrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T sqrt()" ], [ "divide", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient divide(final double c)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "round", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public long round()" ], [ "scalb", "org.apache.commons.math3", "RealFieldElement", "public abstract T scalb(int arg0)" ], [ "atanh", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient atanh()" ], [ "sinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T sinh()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient linearCombination(final SparseGradient[] a, final SparseGradient[] b) throws DimensionMismatchException" ], [ "cbrt", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient cbrt()" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient pow(final SparseGradient e)" ], [ "signum", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient signum()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient linearCombination(final SparseGradient a1, final SparseGradient b1, final SparseGradient a2, final SparseGradient b2, final SparseGradient a3, final SparseGradient b3, final SparseGradient a4, final SparseGradient b4)" ], [ "expm1", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient expm1()" ], [ "multiply", "org.apache.commons.math3", "RealFieldElement", "public abstract T multiply(double arg0)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5, T arg6, T arg7)" ], [ "getField", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public Field<SparseGradient> getField()" ], [ "acos", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient acos()" ], [ "scalb", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient scalb(final int n)" ], [ "expm1", "org.apache.commons.math3", "RealFieldElement", "public abstract T expm1()" ], [ "sin", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient sin()" ], [ "cosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T cosh()" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient multiply(final double c)" ], [ "toRadians", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient toRadians()" ], [ "cos", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient cos()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient linearCombination(final double a1, final SparseGradient b1, final double a2, final SparseGradient b2)" ], [ "getField", "org.apache.commons.math3", "FieldElement", "public abstract Field<T> getField()" ], [ "subtract", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient subtract(double c)" ], [ "subtract", "org.apache.commons.math3", "RealFieldElement", "public abstract T subtract(double arg0)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient pow(final double p)" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient linearCombination(final double a1, final SparseGradient b1, final double a2, final SparseGradient b2, final double a3, final SparseGradient b3)" ], [ "cosh", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient cosh()" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(double arg0)" ], [ "atan2", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan2(T arg0) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3)" ], [ "log", "org.apache.commons.math3", "RealFieldElement", "public abstract T log()" ], [ "asinh", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient asinh()" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient pow(final int n)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3)" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient linearCombination(final double[] a, final SparseGradient[] b)" ], [ "atan", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan()" ], [ "add", "org.apache.commons.math3", "RealFieldElement", "public abstract T add(double arg0)" ], [ "subtract", "org.apache.commons.math3", "FieldElement", "public abstract T subtract(T arg0) throws NullArgumentException" ], [ "log10", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient log10()" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(T arg0) throws NullArgumentException" ], [ "signum", "org.apache.commons.math3", "RealFieldElement", "public abstract T signum()" ], [ "copySign", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient copySign(final SparseGradient sign)" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient linearCombination(final SparseGradient a1, final SparseGradient b1, final SparseGradient a2, final SparseGradient b2)" ], [ "compose", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient compose(final double f0, final double f1)" ], [ "abs", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient abs()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient linearCombination(final SparseGradient a1, final SparseGradient b1, final SparseGradient a2, final SparseGradient b2, final SparseGradient a3, final SparseGradient b3)" ], [ "numVars", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public int numVars()" ], [ "cbrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T cbrt()" ], [ "equals", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public boolean equals(Object other)" ], [ "rint", "org.apache.commons.math3", "RealFieldElement", "public abstract T rint()" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(double arg0)" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient multiply(final SparseGradient a)" ], [ "rint", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient rint()" ], [ "log1p", "org.apache.commons.math3", "RealFieldElement", "public abstract T log1p()" ], [ "add", "org.apache.commons.math3", "FieldElement", "public abstract T add(T arg0) throws NullArgumentException" ], [ "abs", "org.apache.commons.math3", "RealFieldElement", "public abstract T abs()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "round", "org.apache.commons.math3", "RealFieldElement", "public abstract long round()" ], [ "getReal", "org.apache.commons.math3", "RealFieldElement", "public abstract double getReal()" ], [ "reciprocal", "org.apache.commons.math3", "FieldElement", "public abstract T reciprocal() throws MathArithmeticException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 13488,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.analysis.differentiation",
  "className" : "SparseGradient",
  "javadocTag" : "@param scale scaling factor to apply to all derivatives",
  "methodJavadoc" : "    /** Internal constructor.\n     * @param value value of the function\n     * @param scale scaling factor to apply to all derivatives\n     * @param derivatives derivatives map, a deep copy will be performed,\n     * so the map given here will remain safe from changes in the new instance,\n     * may be null to create an empty derivatives map, i.e. a constant value\n     */",
  "methodSourceCode" : "private SparseGradient(final double value, final double scale, final Map<Integer, Double> derivatives){\n    this.value = value;\n    this.derivatives = new HashMap<Integer, Double>();\n    if (derivatives != null) {\n        for (final Map.Entry<Integer, Double> entry : derivatives.entrySet()) {\n            this.derivatives.put(entry.getKey(), scale * entry.getValue());\n        }\n    }\n}",
  "classJavadoc" : "/**\n * First derivative computation with large number of variables.\n * <p>\n * This class plays a similar role to {@link DerivativeStructure}, with\n * a focus on efficiency when dealing with large number of independent variables\n * and most computation depend only on a few of them, and when only first derivative\n * is desired. When these conditions are met, this class should be much faster than\n * {@link DerivativeStructure} and use less memory.\n * </p>\n *\n * @since 3.3\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math3.analysis.differentiation;\n\nimport java.io.Serializable;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.apache.commons.math3.Field;\nimport org.apache.commons.math3.FieldElement;\nimport org.apache.commons.math3.RealFieldElement;\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathArrays;\nimport org.apache.commons.math3.util.MathUtils;\nimport org.apache.commons.math3.util.Precision;\n\n/**\n * First derivative computation with large number of variables.\n * <p>\n * This class plays a similar role to {@link DerivativeStructure}, with\n * a focus on efficiency when dealing with large number of independent variables\n * and most computation depend only on a few of them, and when only first derivative\n * is desired. When these conditions are met, this class should be much faster than\n * {@link DerivativeStructure} and use less memory.\n * </p>\n *\n * @since 3.3\n */\npublic class SparseGradient implements RealFieldElement<SparseGradient>, Serializable {\n\n    /** Serializable UID. */\n    private static final long serialVersionUID = 20131025L;\n\n    /** Value of the calculation. */\n    private double value;\n\n    /** Stored derivative, each key representing a different independent variable. */\n    private final Map<Integer, Double> derivatives;\n\n    /** Internal constructor.\n     * @param value value of the function\n     * @param derivatives derivatives map, a deep copy will be performed,\n     * so the map given here will remain safe from changes in the new instance,\n     * may be null to create an empty derivatives map, i.e. a constant value\n     */\n    private SparseGradient(final double value, final Map<Integer, Double> derivatives) {\n        this.value = value;\n        this.derivatives = new HashMap<Integer, Double>();\n        if (derivatives != null) {\n            this.derivatives.putAll(derivatives);\n        }\n    }\n\n    /** Internal constructor.\n     * @param value value of the function\n     * @param scale scaling factor to apply to all derivatives\n     * @param derivatives derivatives map, a deep copy will be performed,\n     * so the map given here will remain safe from changes in the new instance,\n     * may be null to create an empty derivatives map, i.e. a constant value\n     */\n    private SparseGradient(final double value, final double scale,\n                             final Map<Integer, Double> derivatives) {\n        this.value = value;\n        this.derivatives = new HashMap<Integer, Double>();\n        if (derivatives != null) {\n            for (final Map.Entry<Integer, Double> entry : derivatives.entrySet()) {\n                this.derivatives.put(entry.getKey(), scale * entry.getValue());\n            }\n        }\n    }\n\n    /** Factory method creating a constant.\n     * @param value value of the constant\n     * @return a new instance\n     */\n    public static SparseGradient createConstant(final double value) {\n        return new SparseGradient(value, Collections.<Integer, Double> emptyMap());\n    }\n\n    /** Factory method creating an independent variable.\n     * @param idx index of the variable\n     * @param value value of the variable\n     * @return a new instance\n     */\n    public static SparseGradient createVariable(final int idx, final double value) {\n        return new SparseGradient(value, Collections.singletonMap(idx, 1.0));\n    }\n\n    /**\n     * Find the number of variables.\n     * @return number of variables\n     */\n    public int numVars() {\n        return derivatives.size();\n    }\n\n    /**\n     * Get the derivative with respect to a particular index variable.\n     *\n     * @param index index to differentiate with.\n     * @return derivative with respect to a particular index variable\n     */\n    public double getDerivative(final int index) {\n        final Double out = derivatives.get(index);\n        return (out == null) ? 0.0 : out;\n    }\n\n    /**\n     * Get the value of the function.\n     * @return value of the function.\n     */\n    public double getValue() {\n        return value;\n    }\n\n    /** {@inheritDoc} */\n    public double getReal() {\n        return value;\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient add(final SparseGradient a) {\n        final SparseGradient out = new SparseGradient(value + a.value, derivatives);\n        for (Map.Entry<Integer, Double> entry : a.derivatives.entrySet()) {\n            final int id = entry.getKey();\n            final Double old = out.derivatives.get(id);\n            if (old == null) {\n                out.derivatives.put(id, entry.getValue());\n            } else {\n                out.derivatives.put(id, old + entry.getValue());\n            }\n        }\n\n        return out;\n    }\n\n    /**\n     * Add in place.\n     * <p>\n     * This method is designed to be faster when used multiple times in a loop.\n     * </p>\n     * <p>\n     * The instance is changed here, in order to not change the\n     * instance the {@link #add(SparseGradient)} method should\n     * be used.\n     * </p>\n     * @param a instance to add\n     */\n    public void addInPlace(final SparseGradient a) {\n        value += a.value;\n        for (final Map.Entry<Integer, Double> entry : a.derivatives.entrySet()) {\n            final int id = entry.getKey();\n            final Double old = derivatives.get(id);\n            if (old == null) {\n                derivatives.put(id, entry.getValue());\n            } else {\n                derivatives.put(id, old + entry.getValue());\n            }\n        }\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient add(final double c) {\n        final SparseGradient out = new SparseGradient(value + c, derivatives);\n        return out;\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient subtract(final SparseGradient a) {\n        final SparseGradient out = new SparseGradient(value - a.value, derivatives);\n        for (Map.Entry<Integer, Double> entry : a.derivatives.entrySet()) {\n            final int id = entry.getKey();\n            final Double old = out.derivatives.get(id);\n            if (old == null) {\n                out.derivatives.put(id, -entry.getValue());\n            } else {\n                out.derivatives.put(id, old - entry.getValue());\n            }\n        }\n        return out;\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient subtract(double c) {\n        return new SparseGradient(value - c, derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient multiply(final SparseGradient a) {\n        final SparseGradient out =\n            new SparseGradient(value * a.value, Collections.<Integer, Double> emptyMap());\n\n        // Derivatives.\n        for (Map.Entry<Integer, Double> entry : derivatives.entrySet()) {\n            out.derivatives.put(entry.getKey(), a.value * entry.getValue());\n        }\n        for (Map.Entry<Integer, Double> entry : a.derivatives.entrySet()) {\n            final int id = entry.getKey();\n            final Double old = out.derivatives.get(id);\n            if (old == null) {\n                out.derivatives.put(id, value * entry.getValue());\n            } else {\n                out.derivatives.put(id, old + value * entry.getValue());\n            }\n        }\n        return out;\n    }\n\n    /**\n     * Multiply in place.\n     * <p>\n     * This method is designed to be faster when used multiple times in a loop.\n     * </p>\n     * <p>\n     * The instance is changed here, in order to not change the\n     * instance the {@link #add(SparseGradient)} method should\n     * be used.\n     * </p>\n     * @param a instance to multiply\n     */\n    public void multiplyInPlace(final SparseGradient a) {\n        // Derivatives.\n        for (Map.Entry<Integer, Double> entry : derivatives.entrySet()) {\n            derivatives.put(entry.getKey(), a.value * entry.getValue());\n        }\n        for (Map.Entry<Integer, Double> entry : a.derivatives.entrySet()) {\n            final int id = entry.getKey();\n            final Double old = derivatives.get(id);\n            if (old == null) {\n                derivatives.put(id, value * entry.getValue());\n            } else {\n                derivatives.put(id, old + value * entry.getValue());\n            }\n        }\n        value *= a.value;\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient multiply(final double c) {\n        return new SparseGradient(value * c, c, derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient multiply(final int n) {\n        return new SparseGradient(value * n, n, derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient divide(final SparseGradient a) {\n        final SparseGradient out = new SparseGradient(value / a.value, Collections.<Integer, Double> emptyMap());\n\n        // Derivatives.\n        for (Map.Entry<Integer, Double> entry : derivatives.entrySet()) {\n            out.derivatives.put(entry.getKey(), entry.getValue() / a.value);\n        }\n        for (Map.Entry<Integer, Double> entry : a.derivatives.entrySet()) {\n            final int id = entry.getKey();\n            final Double old = out.derivatives.get(id);\n            if (old == null) {\n                out.derivatives.put(id, -out.value / a.value * entry.getValue());\n            } else {\n                out.derivatives.put(id, old - out.value / a.value * entry.getValue());\n            }\n        }\n        return out;\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient divide(final double c) {\n        return new SparseGradient(value / c, 1.0 / c, derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient negate() {\n        return new SparseGradient(-value, -1.0, derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public Field<SparseGradient> getField() {\n        return new Field<SparseGradient>() {\n\n            /** {@inheritDoc} */\n            public SparseGradient getZero() {\n                return createConstant(0);\n            }\n\n            /** {@inheritDoc} */\n            public SparseGradient getOne() {\n                return createConstant(1);\n            }\n\n            /** {@inheritDoc} */\n            public Class<? extends FieldElement<SparseGradient>> getRuntimeClass() {\n                return SparseGradient.class;\n            }\n\n        };\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient remainder(final double a) {\n        return new SparseGradient(FastMath.IEEEremainder(value, a), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient remainder(final SparseGradient a) {\n\n        // compute k such that lhs % rhs = lhs - k rhs\n        final double rem = FastMath.IEEEremainder(value, a.value);\n        final double k   = FastMath.rint((value - rem) / a.value);\n\n        return subtract(a.multiply(k));\n\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient abs() {\n        if (Double.doubleToLongBits(value) < 0) {\n            // we use the bits representation to also handle -0.0\n            return negate();\n        } else {\n            return this;\n        }\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient ceil() {\n        return createConstant(FastMath.ceil(value));\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient floor() {\n        return createConstant(FastMath.floor(value));\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient rint() {\n        return createConstant(FastMath.rint(value));\n    }\n\n    /** {@inheritDoc} */\n    public long round() {\n        return FastMath.round(value);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient signum() {\n        return createConstant(FastMath.signum(value));\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient copySign(final SparseGradient sign) {\n        final long m = Double.doubleToLongBits(value);\n        final long s = Double.doubleToLongBits(sign.value);\n        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient copySign(final double sign) {\n        final long m = Double.doubleToLongBits(value);\n        final long s = Double.doubleToLongBits(sign);\n        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient scalb(final int n) {\n        final SparseGradient out = new SparseGradient(FastMath.scalb(value, n), Collections.<Integer, Double> emptyMap());\n        for (Map.Entry<Integer, Double> entry : derivatives.entrySet()) {\n            out.derivatives.put(entry.getKey(), FastMath.scalb(entry.getValue(), n));\n        }\n        return out;\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient hypot(final SparseGradient y) {\n        if (Double.isInfinite(value) || Double.isInfinite(y.value)) {\n            return createConstant(Double.POSITIVE_INFINITY);\n        } else if (Double.isNaN(value) || Double.isNaN(y.value)) {\n            return createConstant(Double.NaN);\n        } else {\n\n            final int expX = FastMath.getExponent(value);\n            final int expY = FastMath.getExponent(y.value);\n            if (expX > expY + 27) {\n                // y is negligible with respect to x\n                return abs();\n            } else if (expY > expX + 27) {\n                // x is negligible with respect to y\n                return y.abs();\n            } else {\n\n                // find an intermediate scale to avoid both overflow and underflow\n                final int middleExp = (expX + expY) / 2;\n\n                // scale parameters without losing precision\n                final SparseGradient scaledX = scalb(-middleExp);\n                final SparseGradient scaledY = y.scalb(-middleExp);\n\n                // compute scaled hypotenuse\n                final SparseGradient scaledH =\n                        scaledX.multiply(scaledX).add(scaledY.multiply(scaledY)).sqrt();\n\n                // remove scaling\n                return scaledH.scalb(middleExp);\n\n            }\n\n        }\n    }\n\n    /**\n     * Returns the hypotenuse of a triangle with sides {@code x} and {@code y}\n     * - sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)\n     * avoiding intermediate overflow or underflow.\n     *\n     * <ul>\n     * <li> If either argument is infinite, then the result is positive infinity.</li>\n     * <li> else, if either argument is NaN then the result is NaN.</li>\n     * </ul>\n     *\n     * @param x a value\n     * @param y a value\n     * @return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)\n     */\n    public static SparseGradient hypot(final SparseGradient x, final SparseGradient y) {\n        return x.hypot(y);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient reciprocal() {\n        return new SparseGradient(1.0 / value, -1.0 / (value * value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient sqrt() {\n        final double sqrt = FastMath.sqrt(value);\n        return new SparseGradient(sqrt, 0.5 / sqrt, derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient cbrt() {\n        final double cbrt = FastMath.cbrt(value);\n        return new SparseGradient(cbrt, 1.0 / (3 * cbrt * cbrt), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient rootN(final int n) {\n        if (n == 2) {\n            return sqrt();\n        } else if (n == 3) {\n            return cbrt();\n        } else {\n            final double root = FastMath.pow(value, 1.0 / n);\n            return new SparseGradient(root, 1.0 / (n * FastMath.pow(root, n - 1)), derivatives);\n        }\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient pow(final double p) {\n        return new SparseGradient(FastMath.pow(value,  p), p * FastMath.pow(value,  p - 1), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient pow(final int n) {\n        if (n == 0) {\n            return getField().getOne();\n        } else {\n            final double valueNm1 = FastMath.pow(value,  n - 1);\n            return new SparseGradient(value * valueNm1, n * valueNm1, derivatives);\n        }\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient pow(final SparseGradient e) {\n        return log().multiply(e).exp();\n    }\n\n    /** Compute a<sup>x</sup> where a is a double and x a {@link SparseGradient}\n     * @param a number to exponentiate\n     * @param x power to apply\n     * @return a<sup>x</sup>\n     */\n    public static SparseGradient pow(final double a, final SparseGradient x) {\n        if (a == 0) {\n            if (x.value == 0) {\n                return x.compose(1.0, Double.NEGATIVE_INFINITY);\n            } else if (x.value < 0) {\n                return x.compose(Double.NaN, Double.NaN);\n            } else {\n                return x.getField().getZero();\n            }\n        } else {\n            final double ax = FastMath.pow(a, x.value);\n            return new SparseGradient(ax, ax * FastMath.log(a), x.derivatives);\n        }\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient exp() {\n        final double e = FastMath.exp(value);\n        return new SparseGradient(e, e, derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient expm1() {\n        return new SparseGradient(FastMath.expm1(value), FastMath.exp(value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient log() {\n        return new SparseGradient(FastMath.log(value), 1.0 / value, derivatives);\n    }\n\n    /** Base 10 logarithm.\n     * @return base 10 logarithm of the instance\n     */\n    public SparseGradient log10() {\n        return new SparseGradient(FastMath.log10(value), 1.0 / (FastMath.log(10.0) * value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient log1p() {\n        return new SparseGradient(FastMath.log1p(value), 1.0 / (1.0 + value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient cos() {\n        return new SparseGradient(FastMath.cos(value), -FastMath.sin(value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient sin() {\n        return new SparseGradient(FastMath.sin(value), FastMath.cos(value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient tan() {\n        final double t = FastMath.tan(value);\n        return new SparseGradient(t, 1 + t * t, derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient acos() {\n        return new SparseGradient(FastMath.acos(value), -1.0 / FastMath.sqrt(1 - value * value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient asin() {\n        return new SparseGradient(FastMath.asin(value), 1.0 / FastMath.sqrt(1 - value * value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient atan() {\n        return new SparseGradient(FastMath.atan(value), 1.0 / (1 + value * value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient atan2(final SparseGradient x) {\n\n        // compute r = sqrt(x^2+y^2)\n        final SparseGradient r = multiply(this).add(x.multiply(x)).sqrt();\n\n        final SparseGradient a;\n        if (x.value >= 0) {\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            a = divide(r.add(x)).atan().multiply(2);\n\n        } else {\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            final SparseGradient tmp = divide(r.subtract(x)).atan().multiply(-2);\n            a = tmp.add(tmp.value <= 0 ? -FastMath.PI : FastMath.PI);\n\n        }\n\n        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n        a.value = FastMath.atan2(value, x.value);\n\n        return a;\n\n    }\n\n    /** Two arguments arc tangent operation.\n     * @param y first argument of the arc tangent\n     * @param x second argument of the arc tangent\n     * @return atan2(y, x)\n     */\n    public static SparseGradient atan2(final SparseGradient y, final SparseGradient x) {\n        return y.atan2(x);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient cosh() {\n        return new SparseGradient(FastMath.cosh(value), FastMath.sinh(value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient sinh() {\n        return new SparseGradient(FastMath.sinh(value), FastMath.cosh(value), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient tanh() {\n        final double t = FastMath.tanh(value);\n        return new SparseGradient(t, 1 - t * t, derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient acosh() {\n        return new SparseGradient(FastMath.acosh(value), 1.0 / FastMath.sqrt(value * value - 1.0), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient asinh() {\n        return new SparseGradient(FastMath.asinh(value), 1.0 / FastMath.sqrt(value * value + 1.0), derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient atanh() {\n        return new SparseGradient(FastMath.atanh(value), 1.0 / (1.0 - value * value), derivatives);\n    }\n\n    /** Convert radians to degrees, with error of less than 0.5 ULP\n     *  @return instance converted into degrees\n     */\n    public SparseGradient toDegrees() {\n        return new SparseGradient(FastMath.toDegrees(value), FastMath.toDegrees(1.0), derivatives);\n    }\n\n    /** Convert degrees to radians, with error of less than 0.5 ULP\n     *  @return instance converted into radians\n     */\n    public SparseGradient toRadians() {\n        return new SparseGradient(FastMath.toRadians(value), FastMath.toRadians(1.0), derivatives);\n    }\n\n    /** Evaluate Taylor expansion of a sparse gradient.\n     * @param delta parameters offsets (&Delta;x, &Delta;y, ...)\n     * @return value of the Taylor expansion at x + &Delta;x, y + &Delta;y, ...\n     */\n    public double taylor(final double ... delta) {\n        double y = value;\n        for (int i = 0; i < delta.length; ++i) {\n            y += delta[i] * getDerivative(i);\n        }\n        return y;\n    }\n\n    /** Compute composition of the instance by a univariate function.\n     * @param f0 value of the function at (i.e. f({@link #getValue()}))\n     * @param f1 first derivative of the function at\n     * the current point (i.e. f'({@link #getValue()}))\n     * @return f(this)\n    */\n    public SparseGradient compose(final double f0, final double f1) {\n        return new SparseGradient(f0, f1, derivatives);\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient linearCombination(final SparseGradient[] a,\n                                              final SparseGradient[] b)\n        throws DimensionMismatchException {\n\n        // compute a simple value, with all partial derivatives\n        SparseGradient out = a[0].getField().getZero();\n        for (int i = 0; i < a.length; ++i) {\n            out = out.add(a[i].multiply(b[i]));\n        }\n\n        // recompute an accurate value, taking care of cancellations\n        final double[] aDouble = new double[a.length];\n        for (int i = 0; i < a.length; ++i) {\n            aDouble[i] = a[i].getValue();\n        }\n        final double[] bDouble = new double[b.length];\n        for (int i = 0; i < b.length; ++i) {\n            bDouble[i] = b[i].getValue();\n        }\n        out.value = MathArrays.linearCombination(aDouble, bDouble);\n\n        return out;\n\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient linearCombination(final double[] a, final SparseGradient[] b) {\n\n        // compute a simple value, with all partial derivatives\n        SparseGradient out = b[0].getField().getZero();\n        for (int i = 0; i < a.length; ++i) {\n            out = out.add(b[i].multiply(a[i]));\n        }\n\n        // recompute an accurate value, taking care of cancellations\n        final double[] bDouble = new double[b.length];\n        for (int i = 0; i < b.length; ++i) {\n            bDouble[i] = b[i].getValue();\n        }\n        out.value = MathArrays.linearCombination(a, bDouble);\n\n        return out;\n\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient linearCombination(final SparseGradient a1, final SparseGradient b1,\n                                              final SparseGradient a2, final SparseGradient b2) {\n\n        // compute a simple value, with all partial derivatives\n        SparseGradient out = a1.multiply(b1).add(a2.multiply(b2));\n\n        // recompute an accurate value, taking care of cancellations\n        out.value = MathArrays.linearCombination(a1.value, b1.value, a2.value, b2.value);\n\n        return out;\n\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient linearCombination(final double a1, final SparseGradient b1,\n                                              final double a2, final SparseGradient b2) {\n\n        // compute a simple value, with all partial derivatives\n        SparseGradient out = b1.multiply(a1).add(b2.multiply(a2));\n\n        // recompute an accurate value, taking care of cancellations\n        out.value = MathArrays.linearCombination(a1, b1.value, a2, b2.value);\n\n        return out;\n\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient linearCombination(final SparseGradient a1, final SparseGradient b1,\n                                              final SparseGradient a2, final SparseGradient b2,\n                                              final SparseGradient a3, final SparseGradient b3) {\n\n        // compute a simple value, with all partial derivatives\n        SparseGradient out = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3));\n\n        // recompute an accurate value, taking care of cancellations\n        out.value = MathArrays.linearCombination(a1.value, b1.value,\n                                                 a2.value, b2.value,\n                                                 a3.value, b3.value);\n\n        return out;\n\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient linearCombination(final double a1, final SparseGradient b1,\n                                              final double a2, final SparseGradient b2,\n                                              final double a3, final SparseGradient b3) {\n\n        // compute a simple value, with all partial derivatives\n        SparseGradient out = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3));\n\n        // recompute an accurate value, taking care of cancellations\n        out.value = MathArrays.linearCombination(a1, b1.value,\n                                                 a2, b2.value,\n                                                 a3, b3.value);\n\n        return out;\n\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient linearCombination(final SparseGradient a1, final SparseGradient b1,\n                                              final SparseGradient a2, final SparseGradient b2,\n                                              final SparseGradient a3, final SparseGradient b3,\n                                              final SparseGradient a4, final SparseGradient b4) {\n\n        // compute a simple value, with all partial derivatives\n        SparseGradient out = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3)).add(a4.multiply(b4));\n\n        // recompute an accurate value, taking care of cancellations\n        out.value = MathArrays.linearCombination(a1.value, b1.value,\n                                                 a2.value, b2.value,\n                                                 a3.value, b3.value,\n                                                 a4.value, b4.value);\n\n        return out;\n\n    }\n\n    /** {@inheritDoc} */\n    public SparseGradient linearCombination(final double a1, final SparseGradient b1,\n                                              final double a2, final SparseGradient b2,\n                                              final double a3, final SparseGradient b3,\n                                              final double a4, final SparseGradient b4) {\n\n        // compute a simple value, with all partial derivatives\n        SparseGradient out = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3)).add(b4.multiply(a4));\n\n        // recompute an accurate value, taking care of cancellations\n        out.value = MathArrays.linearCombination(a1, b1.value,\n                                                 a2, b2.value,\n                                                 a3, b3.value,\n                                                 a4, b4.value);\n\n        return out;\n\n    }\n\n    /**\n     * Test for the equality of two sparse gradients.\n     * <p>\n     * Sparse gradients are considered equal if they have the same value\n     * and the same derivatives.\n     * </p>\n     * @param other Object to test for equality to this\n     * @return true if two sparse gradients are equal\n     */\n    @Override\n    public boolean equals(Object other) {\n\n        if (this == other) {\n            return true;\n        }\n\n        if (other instanceof SparseGradient) {\n            final SparseGradient rhs = (SparseGradient)other;\n            if (!Precision.equals(value, rhs.value, 1)) {\n                return false;\n            }\n            if (derivatives.size() != rhs.derivatives.size()) {\n                return false;\n            }\n            for (final Map.Entry<Integer, Double> entry : derivatives.entrySet()) {\n                if (!rhs.derivatives.containsKey(entry.getKey())) {\n                    return false;\n                }\n                if (!Precision.equals(entry.getValue(), rhs.derivatives.get(entry.getKey()), 1)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     * Get a hashCode for the derivative structure.\n     * @return a hash code value for this object\n     * @since 3.2\n     */\n    @Override\n    public int hashCode() {\n        return 743 + 809 * MathUtils.hash(value) + 167 * derivatives.hashCode();\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "value", "", "double" ], [ "scale", "", "double" ], [ "derivatives", "java.util.Map", "Map<Integer, Double>" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "rint", "org.apache.commons.math3", "RealFieldElement", "public abstract T rint()" ], [ "getField", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public Field<SparseGradient> getField()" ], [ "rootN", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient rootN(final int n)" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient linearCombination(final SparseGradient[] a, final SparseGradient[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5, T arg6, T arg7)" ], [ "log10", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient log10()" ], [ "toRadians", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient toRadians()" ], [ "signum", "org.apache.commons.math3", "RealFieldElement", "public abstract T signum()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3)" ], [ "divide", "org.apache.commons.math3", "FieldElement", "public abstract T divide(T arg0) throws NullArgumentException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(T arg0) throws DimensionMismatchException" ], [ "add", "org.apache.commons.math3", "RealFieldElement", "public abstract T add(double arg0)" ], [ "divide", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient divide(final double c)" ], [ "log", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient log()" ], [ "remainder", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient remainder(final double a)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5, double arg6, T arg7)" ], [ "floor", "org.apache.commons.math3", "RealFieldElement", "public abstract T floor()" ], [ "add", "org.apache.commons.math3", "FieldElement", "public abstract T add(T arg0) throws NullArgumentException" ], [ "scalb", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient scalb(final int n)" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient multiply(final double c)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient hypot(final SparseGradient y)" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient multiply(final int n)" ], [ "divide", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient divide(final SparseGradient a)" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(int arg0)" ], [ "atan", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient atan()" ], [ "tan", "org.apache.commons.math3", "RealFieldElement", "public abstract T tan()" ], [ "log", "org.apache.commons.math3", "RealFieldElement", "public abstract T log()" ], [ "equals", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public boolean equals(Object other)" ], [ "getDerivative", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public double getDerivative(final int index)" ], [ "log1p", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient log1p()" ], [ "add", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient add(final double c)" ], [ "exp", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient exp()" ], [ "subtract", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient subtract(final SparseGradient a)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(double arg0)" ], [ "sinh", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient sinh()" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(T arg0) throws NullArgumentException" ], [ "compose", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient compose(final double f0, final double f1)" ], [ "floor", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient floor()" ], [ "add", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient add(final SparseGradient a)" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(int arg0)" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient multiply(final SparseGradient a)" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient linearCombination(final double[] a, final SparseGradient[] b)" ], [ "acos", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient acos()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "expm1", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient expm1()" ], [ "cos", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient cos()" ], [ "negate", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient negate()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient linearCombination(final double a1, final SparseGradient b1, final double a2, final SparseGradient b2)" ], [ "exp", "org.apache.commons.math3", "RealFieldElement", "public abstract T exp()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient linearCombination(final SparseGradient a1, final SparseGradient b1, final SparseGradient a2, final SparseGradient b2, final SparseGradient a3, final SparseGradient b3)" ], [ "abs", "org.apache.commons.math3", "RealFieldElement", "public abstract T abs()" ], [ "acosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T acosh()" ], [ "numVars", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public int numVars()" ], [ "ceil", "org.apache.commons.math3", "RealFieldElement", "public abstract T ceil()" ], [ "subtract", "org.apache.commons.math3", "FieldElement", "public abstract T subtract(T arg0) throws NullArgumentException" ], [ "sqrt", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient sqrt()" ], [ "toDegrees", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient toDegrees()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient linearCombination(final SparseGradient a1, final SparseGradient b1, final SparseGradient a2, final SparseGradient b2)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient pow(final int n)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient pow(final SparseGradient e)" ], [ "asin", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient asin()" ], [ "cbrt", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient cbrt()" ], [ "sinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T sinh()" ], [ "subtract", "org.apache.commons.math3", "RealFieldElement", "public abstract T subtract(double arg0)" ], [ "hypot", "org.apache.commons.math3", "RealFieldElement", "public abstract T hypot(T arg0) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5)" ], [ "subtract", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient subtract(double c)" ], [ "getValue", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public double getValue()" ], [ "asinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T asinh()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5)" ], [ "copySign", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient copySign(final SparseGradient sign)" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient linearCombination(final double a1, final SparseGradient b1, final double a2, final SparseGradient b2, final double a3, final SparseGradient b3, final double a4, final SparseGradient b4)" ], [ "sqrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T sqrt()" ], [ "rootN", "org.apache.commons.math3", "RealFieldElement", "public abstract T rootN(int arg0)" ], [ "sin", "org.apache.commons.math3", "RealFieldElement", "public abstract T sin()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient linearCombination(final double a1, final SparseGradient b1, final double a2, final SparseGradient b2, final double a3, final SparseGradient b3)" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(T arg0)" ], [ "sin", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient sin()" ], [ "getField", "org.apache.commons.math3", "FieldElement", "public abstract Field<T> getField()" ], [ "atanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T atanh()" ], [ "reciprocal", "org.apache.commons.math3", "RealFieldElement", "public abstract T reciprocal()" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient atan2(final SparseGradient x)" ], [ "scalb", "org.apache.commons.math3", "RealFieldElement", "public abstract T scalb(int arg0)" ], [ "signum", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient signum()" ], [ "getReal", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public double getReal()" ], [ "expm1", "org.apache.commons.math3", "RealFieldElement", "public abstract T expm1()" ], [ "tan", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient tan()" ], [ "log1p", "org.apache.commons.math3", "RealFieldElement", "public abstract T log1p()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "ceil", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient ceil()" ], [ "negate", "org.apache.commons.math3", "FieldElement", "public abstract T negate()" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(T arg0) throws DimensionMismatchException" ], [ "remainder", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient remainder(final SparseGradient a)" ], [ "asinh", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient asinh()" ], [ "rint", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient rint()" ], [ "asin", "org.apache.commons.math3", "RealFieldElement", "public abstract T asin()" ], [ "hashCode", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public int hashCode()" ], [ "abs", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient abs()" ], [ "atan2", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan2(T arg0) throws DimensionMismatchException" ], [ "acos", "org.apache.commons.math3", "RealFieldElement", "public abstract T acos()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3)" ], [ "acosh", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient acosh()" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(double arg0)" ], [ "taylor", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public double taylor(final double... delta)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient pow(final double p)" ], [ "atanh", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient atanh()" ], [ "tanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T tanh()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient linearCombination(final SparseGradient a1, final SparseGradient b1, final SparseGradient a2, final SparseGradient b2, final SparseGradient a3, final SparseGradient b3, final SparseGradient a4, final SparseGradient b4)" ], [ "multiply", "org.apache.commons.math3", "RealFieldElement", "public abstract T multiply(double arg0)" ], [ "cosh", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient cosh()" ], [ "round", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public long round()" ], [ "tanh", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient tanh()" ], [ "divide", "org.apache.commons.math3", "RealFieldElement", "public abstract T divide(double arg0)" ], [ "reciprocal", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient reciprocal()" ], [ "atan", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan()" ], [ "cos", "org.apache.commons.math3", "RealFieldElement", "public abstract T cos()" ], [ "copySign", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public SparseGradient copySign(final double sign)" ], [ "cbrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T cbrt()" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(double arg0)" ], [ "cosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T cosh()" ], [ "replace", "java.util", "Map", "public default boolean replace(K arg0, V arg1, V arg2)" ], [ "get", "java.util", "Map", "public abstract V get(Object arg0)" ], [ "containsValue", "java.util", "Map", "public abstract boolean containsValue(Object arg0)" ], [ "replace", "java.util", "Map", "public default V replace(K arg0, V arg1)" ], [ "isEmpty", "java.util", "Map", "public abstract boolean isEmpty()" ], [ "computeIfPresent", "java.util", "Map", "public default V computeIfPresent(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "hashCode", "java.util", "Map", "public abstract int hashCode()" ], [ "computeIfAbsent", "java.util", "Map", "public default V computeIfAbsent(K arg0, Function<? super K, ? extends V> arg1)" ], [ "getOrDefault", "java.util", "Map", "public default V getOrDefault(Object arg0, V arg1)" ], [ "keySet", "java.util", "Map", "public abstract Set<K> keySet()" ], [ "entrySet", "java.util", "Map", "public abstract Set<Map.Entry<K, V>> entrySet()" ], [ "containsKey", "java.util", "Map", "public abstract boolean containsKey(Object arg0)" ], [ "remove", "java.util", "Map", "public default boolean remove(Object arg0, Object arg1)" ], [ "remove", "java.util", "Map", "public abstract V remove(Object arg0)" ], [ "put", "java.util", "Map", "public abstract V put(K arg0, V arg1)" ], [ "compute", "java.util", "Map", "public default V compute(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "equals", "java.util", "Map", "public abstract boolean equals(Object arg0)" ], [ "merge", "java.util", "Map", "public default V merge(K arg0, V arg1, BiFunction<? super V, ? super V, ? extends V> arg2)" ], [ "size", "java.util", "Map", "public abstract int size()" ], [ "values", "java.util", "Map", "public abstract Collection<V> values()" ], [ "putIfAbsent", "java.util", "Map", "public default V putIfAbsent(K arg0, V arg1)" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 13492,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.analysis.differentiation",
  "className" : "UnivariateMatrixFunctionDifferentiator",
  "javadocTag" : "@param function function to differentiate",
  "methodJavadoc" : "    /** Create an implementation of a {@link UnivariateDifferentiableMatrixFunction\n     * differential} from a regular {@link UnivariateMatrixFunction matrix function}.\n     * @param function function to differentiate\n     * @return differential function\n     */",
  "methodSourceCode" : "UnivariateDifferentiableMatrixFunction differentiate(UnivariateMatrixFunction function);",
  "classJavadoc" : "/** Interface defining the function differentiation operation.\n * @since 3.1\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math3.analysis.differentiation;\n\nimport org.apache.commons.math3.analysis.UnivariateMatrixFunction;\n\n/** Interface defining the function differentiation operation.\n * @since 3.1\n */\npublic interface UnivariateMatrixFunctionDifferentiator {\n\n    /** Create an implementation of a {@link UnivariateDifferentiableMatrixFunction\n     * differential} from a regular {@link UnivariateMatrixFunction matrix function}.\n     * @param function function to differentiate\n     * @return differential function\n     */\n    UnivariateDifferentiableMatrixFunction differentiate(UnivariateMatrixFunction function);\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "function", "org.apache.commons.math3.analysis", "UnivariateMatrixFunction" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "differentiate", "org.apache.commons.math3.analysis.differentiation", "UnivariateMatrixFunctionDifferentiator", "UnivariateDifferentiableMatrixFunction differentiate(UnivariateMatrixFunction function)" ], [ "value", "org.apache.commons.math3.analysis", "UnivariateMatrixFunction", "public abstract double[][] value(double arg0)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "value", "org.apache.commons.math3.analysis.differentiation", "UnivariateDifferentiableMatrixFunction", "public abstract DerivativeStructure[][] value(DerivativeStructure arg0) throws MathIllegalArgumentException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 13496,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.analysis.differentiation",
  "className" : "MultivariateDifferentiableFunction",
  "javadocTag" : "@throws MathIllegalArgumentException if {@code point} does not\nsatisfy the function's constraints (wrong dimension, argument out of bound,\nor unsupported derivative order for example)",
  "methodJavadoc" : "    /**\n     * Compute the value for the function at the given point.\n     *\n     * @param point Point at which the function must be evaluated.\n     * @return the function value for the given point.\n     * @throws MathIllegalArgumentException if {@code point} does not\n     * satisfy the function's constraints (wrong dimension, argument out of bound,\n     * or unsupported derivative order for example)\n     */",
  "methodSourceCode" : "DerivativeStructure value(DerivativeStructure[] point) throws MathIllegalArgumentException;",
  "classJavadoc" : "/**\n * Extension of {@link MultivariateFunction} representing a\n * multivariate differentiable real function.\n * @since 3.1\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.analysis.differentiation;\n\nimport org.apache.commons.math3.analysis.MultivariateFunction;\nimport org.apache.commons.math3.exception.MathIllegalArgumentException;\n\n/**\n * Extension of {@link MultivariateFunction} representing a\n * multivariate differentiable real function.\n * @since 3.1\n */\npublic interface MultivariateDifferentiableFunction extends MultivariateFunction {\n\n    /**\n     * Compute the value for the function at the given point.\n     *\n     * @param point Point at which the function must be evaluated.\n     * @return the function value for the given point.\n     * @exception MathIllegalArgumentException if {@code point} does not\n     * satisfy the function's constraints (wrong dimension, argument out of bound,\n     * or unsupported derivative order for example)\n     */\n    DerivativeStructure value(DerivativeStructure[] point)\n        throws MathIllegalArgumentException;\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "point", "", "DerivativeStructure[]" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "value", "org.apache.commons.math3.analysis.differentiation", "MultivariateDifferentiableFunction", "DerivativeStructure value(DerivativeStructure[] point) throws MathIllegalArgumentException" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "value", "org.apache.commons.math3.analysis", "MultivariateFunction", "public abstract double value(double[] arg0)" ], [ "equals", "", "org.apache.commons.math3.analysis.differentiation.DerivativeStructure[]", "public boolean equals(Object);" ], [ "toString", "", "org.apache.commons.math3.analysis.differentiation.DerivativeStructure[]", "public String toString()" ], [ "hashCode", "", "org.apache.commons.math3.analysis.differentiation.DerivativeStructure[]", "public native int hashCode()" ], [ "getClass", "", "org.apache.commons.math3.analysis.differentiation.DerivativeStructure[]", "public final native Class getClass();" ], [ "clone", "", "org.apache.commons.math3.analysis.differentiation.DerivativeStructure[]", "public T[] clone();" ], [ "scalb", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure scalb(int arg0)" ], [ "toRadians", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure toRadians()" ], [ "copySign", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure copySign(DerivativeStructure arg0)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure pow(double arg0)" ], [ "exp", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure exp()" ], [ "getFreeParameters", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int getFreeParameters()" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure pow(int arg0)" ], [ "hashCode", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int hashCode()" ], [ "getReal", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double getReal()" ], [ "getAllDerivatives", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double[] getAllDerivatives()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(DerivativeStructure arg0, DerivativeStructure arg1, DerivativeStructure arg2, DerivativeStructure arg3) throws DimensionMismatchException" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure multiply(int arg0)" ], [ "getExponent", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int getExponent()" ], [ "log10", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure log10()" ], [ "getField", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public Field<DerivativeStructure> getField()" ], [ "ceil", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure ceil()" ], [ "asinh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure asinh()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(double[] arg0, DerivativeStructure[] arg1) throws DimensionMismatchException" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure multiply(DerivativeStructure arg0) throws DimensionMismatchException" ], [ "add", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure add(double arg0)" ], [ "getValue", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double getValue()" ], [ "rint", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure rint()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(double arg0, DerivativeStructure arg1, double arg2, DerivativeStructure arg3, double arg4, DerivativeStructure arg5, double arg6, DerivativeStructure arg7) throws DimensionMismatchException" ], [ "subtract", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure subtract(double arg0)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure hypot(DerivativeStructure arg0) throws DimensionMismatchException" ], [ "taylor", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public transient double taylor(double[] arg0) throws MathArithmeticException" ], [ "tanh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure tanh()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(double arg0, DerivativeStructure arg1, double arg2, DerivativeStructure arg3, double arg4, DerivativeStructure arg5) throws DimensionMismatchException" ], [ "compose", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public transient DerivativeStructure compose(double[] arg0) throws DimensionMismatchException" ], [ "tan", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure tan()" ], [ "sin", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure sin()" ], [ "copySign", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure copySign(double arg0)" ], [ "divide", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure divide(double arg0)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure atan2(DerivativeStructure arg0) throws DimensionMismatchException" ], [ "atanh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure atanh()" ], [ "signum", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure signum()" ], [ "log", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure log()" ], [ "remainder", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure remainder(double arg0)" ], [ "add", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure add(DerivativeStructure arg0) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(DerivativeStructure arg0, DerivativeStructure arg1, DerivativeStructure arg2, DerivativeStructure arg3, DerivativeStructure arg4, DerivativeStructure arg5, DerivativeStructure arg6, DerivativeStructure arg7) throws DimensionMismatchException" ], [ "cos", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure cos()" ], [ "asin", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure asin()" ], [ "divide", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure divide(DerivativeStructure arg0) throws DimensionMismatchException" ], [ "subtract", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure subtract(DerivativeStructure arg0) throws DimensionMismatchException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure createConstant(double arg0)" ], [ "abs", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure abs()" ], [ "getPartialDerivative", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public transient double getPartialDerivative(int[] arg0) throws DimensionMismatchException, NumberIsTooLargeException" ], [ "log1p", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure log1p()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(DerivativeStructure arg0, DerivativeStructure arg1, DerivativeStructure arg2, DerivativeStructure arg3, DerivativeStructure arg4, DerivativeStructure arg5) throws DimensionMismatchException" ], [ "acos", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure acos()" ], [ "atan", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure atan()" ], [ "acosh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure acosh()" ], [ "cbrt", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure cbrt()" ], [ "expm1", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure expm1()" ], [ "equals", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public boolean equals(Object arg0)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure pow(DerivativeStructure arg0) throws DimensionMismatchException" ], [ "cosh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure cosh()" ], [ "rootN", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure rootN(int arg0)" ], [ "sinh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure sinh()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(DerivativeStructure[] arg0, DerivativeStructure[] arg1) throws DimensionMismatchException" ], [ "toDegrees", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure toDegrees()" ], [ "getOrder", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int getOrder()" ], [ "negate", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure negate()" ], [ "floor", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure floor()" ], [ "sqrt", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure sqrt()" ], [ "remainder", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure remainder(DerivativeStructure arg0) throws DimensionMismatchException" ], [ "reciprocal", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure reciprocal()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(double arg0, DerivativeStructure arg1, double arg2, DerivativeStructure arg3) throws DimensionMismatchException" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure multiply(double arg0)" ], [ "round", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public long round()" ], [ "asinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T asinh()" ], [ "sinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T sinh()" ], [ "abs", "org.apache.commons.math3", "RealFieldElement", "public abstract T abs()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5)" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(double arg0)" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(T arg0) throws DimensionMismatchException" ], [ "cosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T cosh()" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(double arg0)" ], [ "multiply", "org.apache.commons.math3", "RealFieldElement", "public abstract T multiply(double arg0)" ], [ "ceil", "org.apache.commons.math3", "RealFieldElement", "public abstract T ceil()" ], [ "reciprocal", "org.apache.commons.math3", "RealFieldElement", "public abstract T reciprocal()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "atan", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan()" ], [ "add", "org.apache.commons.math3", "RealFieldElement", "public abstract T add(double arg0)" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(T arg0) throws DimensionMismatchException" ], [ "cos", "org.apache.commons.math3", "RealFieldElement", "public abstract T cos()" ], [ "subtract", "org.apache.commons.math3", "RealFieldElement", "public abstract T subtract(double arg0)" ], [ "sqrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T sqrt()" ], [ "expm1", "org.apache.commons.math3", "RealFieldElement", "public abstract T expm1()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "divide", "org.apache.commons.math3", "RealFieldElement", "public abstract T divide(double arg0)" ], [ "cbrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T cbrt()" ], [ "signum", "org.apache.commons.math3", "RealFieldElement", "public abstract T signum()" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(T arg0)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5, double arg6, T arg7)" ], [ "exp", "org.apache.commons.math3", "RealFieldElement", "public abstract T exp()" ], [ "getReal", "org.apache.commons.math3", "RealFieldElement", "public abstract double getReal()" ], [ "rootN", "org.apache.commons.math3", "RealFieldElement", "public abstract T rootN(int arg0)" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(int arg0)" ], [ "round", "org.apache.commons.math3", "RealFieldElement", "public abstract long round()" ], [ "asin", "org.apache.commons.math3", "RealFieldElement", "public abstract T asin()" ], [ "tanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T tanh()" ], [ "log", "org.apache.commons.math3", "RealFieldElement", "public abstract T log()" ], [ "log1p", "org.apache.commons.math3", "RealFieldElement", "public abstract T log1p()" ], [ "rint", "org.apache.commons.math3", "RealFieldElement", "public abstract T rint()" ], [ "tan", "org.apache.commons.math3", "RealFieldElement", "public abstract T tan()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3)" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(double arg0)" ], [ "scalb", "org.apache.commons.math3", "RealFieldElement", "public abstract T scalb(int arg0)" ], [ "acos", "org.apache.commons.math3", "RealFieldElement", "public abstract T acos()" ], [ "acosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T acosh()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3)" ], [ "atanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T atanh()" ], [ "floor", "org.apache.commons.math3", "RealFieldElement", "public abstract T floor()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5)" ], [ "hypot", "org.apache.commons.math3", "RealFieldElement", "public abstract T hypot(T arg0) throws DimensionMismatchException" ], [ "sin", "org.apache.commons.math3", "RealFieldElement", "public abstract T sin()" ], [ "atan2", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan2(T arg0) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5, T arg6, T arg7)" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(int arg0)" ], [ "divide", "org.apache.commons.math3", "FieldElement", "public abstract T divide(T arg0) throws NullArgumentException, MathArithmeticException" ], [ "subtract", "org.apache.commons.math3", "FieldElement", "public abstract T subtract(T arg0) throws NullArgumentException" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(T arg0) throws NullArgumentException" ], [ "add", "org.apache.commons.math3", "FieldElement", "public abstract T add(T arg0) throws NullArgumentException" ], [ "negate", "org.apache.commons.math3", "FieldElement", "public abstract T negate()" ], [ "reciprocal", "org.apache.commons.math3", "FieldElement", "public abstract T reciprocal() throws MathArithmeticException" ], [ "getField", "org.apache.commons.math3", "FieldElement", "public abstract Field<T> getField()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "length", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure[]", "public final int length;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 13507,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.analysis.differentiation",
  "className" : "DerivativeStructure",
  "javadocTag" : "@throws NumberIsTooLargeException if sum of derivation orders is larger\nthan the instance limits",
  "methodJavadoc" : "    /** Get a partial derivative.\n     * @param orders derivation orders with respect to each variable (if all orders are 0,\n     * the value is returned)\n     * @return partial derivative\n     * @see #getValue()\n     * @throws DimensionMismatchException if the numbers of variables does not\n     * match the instance\n     * @throws NumberIsTooLargeException if sum of derivation orders is larger\n     * than the instance limits\n     */",
  "methodSourceCode" : "public double getPartialDerivative(final int... orders) throws DimensionMismatchException, NumberIsTooLargeException{\n    return data[compiler.getPartialDerivativeIndex(orders)];\n}",
  "classJavadoc" : "/** Class representing both the value and the differentials of a function.\n * <p>This class is the workhorse of the differentiation package.</p>\n * <p>This class is an implementation of the extension to Rall's\n * numbers described in Dan Kalman's paper <a\n * href=\"http://www1.american.edu/cas/mathstat/People/kalman/pdffiles/mmgautodiff.pdf\">Doubly\n * Recursive Multivariate Automatic Differentiation</a>, Mathematics Magazine, vol. 75,\n * no. 3, June 2002. Rall's numbers are an extension to the real numbers used\n * throughout mathematical expressions; they hold the derivative together with the\n * value of a function. Dan Kalman's derivative structures hold all partial derivatives\n * up to any specified order, with respect to any number of free parameters. Rall's\n * numbers therefore can be seen as derivative structures for order one derivative and\n * one free parameter, and real numbers can be seen as derivative structures with zero\n * order derivative and no free parameters.</p>\n * <p>{@link DerivativeStructure} instances can be used directly thanks to\n * the arithmetic operators to the mathematical functions provided as\n * methods by this class (+, -, *, /, %, sin, cos ...).</p>\n * <p>Implementing complex expressions by hand using these classes is\n * a tedious and error-prone task but has the advantage of having no limitation\n * on the derivation order despite no requiring users to compute the derivatives by\n * themselves. Implementing complex expression can also be done by developing computation\n * code using standard primitive double values and to use {@link\n * UnivariateFunctionDifferentiator differentiators} to create the {@link\n * DerivativeStructure}-based instances. This method is simpler but may be limited in\n * the accuracy and derivation orders and may be computationally intensive (this is\n * typically the case for {@link FiniteDifferencesDifferentiator finite differences\n * differentiator}.</p>\n * <p>Instances of this class are guaranteed to be immutable.</p>\n * @see DSCompiler\n * @since 3.1\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math3.analysis.differentiation;\n\nimport java.io.Serializable;\n\nimport org.apache.commons.math3.Field;\nimport org.apache.commons.math3.FieldElement;\nimport org.apache.commons.math3.RealFieldElement;\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.exception.MathArithmeticException;\nimport org.apache.commons.math3.exception.NumberIsTooLargeException;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathArrays;\nimport org.apache.commons.math3.util.MathUtils;\n\n/** Class representing both the value and the differentials of a function.\n * <p>This class is the workhorse of the differentiation package.</p>\n * <p>This class is an implementation of the extension to Rall's\n * numbers described in Dan Kalman's paper <a\n * href=\"http://www1.american.edu/cas/mathstat/People/kalman/pdffiles/mmgautodiff.pdf\">Doubly\n * Recursive Multivariate Automatic Differentiation</a>, Mathematics Magazine, vol. 75,\n * no. 3, June 2002. Rall's numbers are an extension to the real numbers used\n * throughout mathematical expressions; they hold the derivative together with the\n * value of a function. Dan Kalman's derivative structures hold all partial derivatives\n * up to any specified order, with respect to any number of free parameters. Rall's\n * numbers therefore can be seen as derivative structures for order one derivative and\n * one free parameter, and real numbers can be seen as derivative structures with zero\n * order derivative and no free parameters.</p>\n * <p>{@link DerivativeStructure} instances can be used directly thanks to\n * the arithmetic operators to the mathematical functions provided as\n * methods by this class (+, -, *, /, %, sin, cos ...).</p>\n * <p>Implementing complex expressions by hand using these classes is\n * a tedious and error-prone task but has the advantage of having no limitation\n * on the derivation order despite no requiring users to compute the derivatives by\n * themselves. Implementing complex expression can also be done by developing computation\n * code using standard primitive double values and to use {@link\n * UnivariateFunctionDifferentiator differentiators} to create the {@link\n * DerivativeStructure}-based instances. This method is simpler but may be limited in\n * the accuracy and derivation orders and may be computationally intensive (this is\n * typically the case for {@link FiniteDifferencesDifferentiator finite differences\n * differentiator}.</p>\n * <p>Instances of this class are guaranteed to be immutable.</p>\n * @see DSCompiler\n * @since 3.1\n */\npublic class DerivativeStructure implements RealFieldElement<DerivativeStructure>, Serializable {\n\n    /** Serializable UID. */\n    private static final long serialVersionUID = 20120730L;\n\n    /** Compiler for the current dimensions. */\n    private transient DSCompiler compiler;\n\n    /** Combined array holding all values. */\n    private final double[] data;\n\n    /** Build an instance with all values and derivatives set to 0.\n     * @param compiler compiler to use for computation\n     */\n    private DerivativeStructure(final DSCompiler compiler) {\n        this.compiler = compiler;\n        this.data     = new double[compiler.getSize()];\n    }\n\n    /** Build an instance with all values and derivatives set to 0.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @throws NumberIsTooLargeException if order is too large\n     */\n    public DerivativeStructure(final int parameters, final int order)\n        throws NumberIsTooLargeException {\n        this(DSCompiler.getCompiler(parameters, order));\n    }\n\n    /** Build an instance representing a constant value.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param value value of the constant\n     * @throws NumberIsTooLargeException if order is too large\n     * @see #DerivativeStructure(int, int, int, double)\n     */\n    public DerivativeStructure(final int parameters, final int order, final double value)\n        throws NumberIsTooLargeException {\n        this(parameters, order);\n        this.data[0] = value;\n    }\n\n    /** Build an instance representing a variable.\n     * <p>Instances built using this constructor are considered\n     * to be the free variables with respect to which differentials\n     * are computed. As such, their differential with respect to\n     * themselves is +1.</p>\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param index index of the variable (from 0 to {@code parameters - 1})\n     * @param value value of the variable\n     * @exception NumberIsTooLargeException if {@code index >= parameters}.\n     * @see #DerivativeStructure(int, int, double)\n     */\n    public DerivativeStructure(final int parameters, final int order,\n                               final int index, final double value)\n        throws NumberIsTooLargeException {\n        this(parameters, order, value);\n\n        if (index >= parameters) {\n            throw new NumberIsTooLargeException(index, parameters, false);\n        }\n\n        if (order > 0) {\n            // the derivative of the variable with respect to itself is 1.\n            data[DSCompiler.getCompiler(index, order).getSize()] = 1.0;\n        }\n\n    }\n\n    /** Linear combination constructor.\n     * The derivative structure built will be a1 * ds1 + a2 * ds2\n     * @param a1 first scale factor\n     * @param ds1 first base (unscaled) derivative structure\n     * @param a2 second scale factor\n     * @param ds2 second base (unscaled) derivative structure\n     * @exception DimensionMismatchException if number of free parameters or orders are inconsistent\n     */\n    public DerivativeStructure(final double a1, final DerivativeStructure ds1,\n                               final double a2, final DerivativeStructure ds2)\n        throws DimensionMismatchException {\n        this(ds1.compiler);\n        compiler.checkCompatibility(ds2.compiler);\n        compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, data, 0);\n    }\n\n    /** Linear combination constructor.\n     * The derivative structure built will be a1 * ds1 + a2 * ds2 + a3 * ds3\n     * @param a1 first scale factor\n     * @param ds1 first base (unscaled) derivative structure\n     * @param a2 second scale factor\n     * @param ds2 second base (unscaled) derivative structure\n     * @param a3 third scale factor\n     * @param ds3 third base (unscaled) derivative structure\n     * @exception DimensionMismatchException if number of free parameters or orders are inconsistent\n     */\n    public DerivativeStructure(final double a1, final DerivativeStructure ds1,\n                               final double a2, final DerivativeStructure ds2,\n                               final double a3, final DerivativeStructure ds3)\n        throws DimensionMismatchException {\n        this(ds1.compiler);\n        compiler.checkCompatibility(ds2.compiler);\n        compiler.checkCompatibility(ds3.compiler);\n        compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, a3, ds3.data, 0, data, 0);\n    }\n\n    /** Linear combination constructor.\n     * The derivative structure built will be a1 * ds1 + a2 * ds2 + a3 * ds3 + a4 * ds4\n     * @param a1 first scale factor\n     * @param ds1 first base (unscaled) derivative structure\n     * @param a2 second scale factor\n     * @param ds2 second base (unscaled) derivative structure\n     * @param a3 third scale factor\n     * @param ds3 third base (unscaled) derivative structure\n     * @param a4 fourth scale factor\n     * @param ds4 fourth base (unscaled) derivative structure\n     * @exception DimensionMismatchException if number of free parameters or orders are inconsistent\n     */\n    public DerivativeStructure(final double a1, final DerivativeStructure ds1,\n                               final double a2, final DerivativeStructure ds2,\n                               final double a3, final DerivativeStructure ds3,\n                               final double a4, final DerivativeStructure ds4)\n        throws DimensionMismatchException {\n        this(ds1.compiler);\n        compiler.checkCompatibility(ds2.compiler);\n        compiler.checkCompatibility(ds3.compiler);\n        compiler.checkCompatibility(ds4.compiler);\n        compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0,\n                                   a3, ds3.data, 0, a4, ds4.data, 0,\n                                   data, 0);\n    }\n\n    /** Build an instance from all its derivatives.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param derivatives derivatives sorted according to\n     * {@link DSCompiler#getPartialDerivativeIndex(int...)}\n     * @exception DimensionMismatchException if derivatives array does not match the\n     * {@link DSCompiler#getSize() size} expected by the compiler\n     * @throws NumberIsTooLargeException if order is too large\n     * @see #getAllDerivatives()\n     */\n    public DerivativeStructure(final int parameters, final int order, final double ... derivatives)\n        throws DimensionMismatchException, NumberIsTooLargeException {\n        this(parameters, order);\n        if (derivatives.length != data.length) {\n            throw new DimensionMismatchException(derivatives.length, data.length);\n        }\n        System.arraycopy(derivatives, 0, data, 0, data.length);\n    }\n\n    /** Copy constructor.\n     * @param ds instance to copy\n     */\n    private DerivativeStructure(final DerivativeStructure ds) {\n        this.compiler = ds.compiler;\n        this.data     = ds.data.clone();\n    }\n\n    /** Get the number of free parameters.\n     * @return number of free parameters\n     */\n    public int getFreeParameters() {\n        return compiler.getFreeParameters();\n    }\n\n    /** Get the derivation order.\n     * @return derivation order\n     */\n    public int getOrder() {\n        return compiler.getOrder();\n    }\n\n    /** Create a constant compatible with instance order and number of parameters.\n     * <p>\n     * This method is a convenience factory method, it simply calls\n     * {@code new DerivativeStructure(getFreeParameters(), getOrder(), c)}\n     * </p>\n     * @param c value of the constant\n     * @return a constant compatible with instance order and number of parameters\n     * @see #DerivativeStructure(int, int, double)\n     * @since 3.3\n     */\n    public DerivativeStructure createConstant(final double c) {\n        return new DerivativeStructure(getFreeParameters(), getOrder(), c);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public double getReal() {\n        return data[0];\n    }\n\n    /** Get the value part of the derivative structure.\n     * @return value part of the derivative structure\n     * @see #getPartialDerivative(int...)\n     */\n    public double getValue() {\n        return data[0];\n    }\n\n    /** Get a partial derivative.\n     * @param orders derivation orders with respect to each variable (if all orders are 0,\n     * the value is returned)\n     * @return partial derivative\n     * @see #getValue()\n     * @exception DimensionMismatchException if the numbers of variables does not\n     * match the instance\n     * @exception NumberIsTooLargeException if sum of derivation orders is larger\n     * than the instance limits\n     */\n    public double getPartialDerivative(final int ... orders)\n        throws DimensionMismatchException, NumberIsTooLargeException {\n        return data[compiler.getPartialDerivativeIndex(orders)];\n    }\n\n    /** Get all partial derivatives.\n     * @return a fresh copy of partial derivatives, in an array sorted according to\n     * {@link DSCompiler#getPartialDerivativeIndex(int...)}\n     */\n    public double[] getAllDerivatives() {\n        return data.clone();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure add(final double a) {\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        ds.data[0] += a;\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */\n    public DerivativeStructure add(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        compiler.add(data, 0, a.data, 0, ds.data, 0);\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure subtract(final double a) {\n        return add(-a);\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */\n    public DerivativeStructure subtract(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        compiler.subtract(data, 0, a.data, 0, ds.data, 0);\n        return ds;\n    }\n\n    /** {@inheritDoc} */\n    public DerivativeStructure multiply(final int n) {\n        return multiply((double) n);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure multiply(final double a) {\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] *= a;\n        }\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */\n    public DerivativeStructure multiply(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.multiply(data, 0, a.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure divide(final double a) {\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] /= a;\n        }\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */\n    public DerivativeStructure divide(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.divide(data, 0, a.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc} */\n    public DerivativeStructure remainder(final double a) {\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        ds.data[0] = FastMath.IEEEremainder(ds.data[0], a);\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure remainder(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.remainder(data, 0, a.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc} */\n    public DerivativeStructure negate() {\n        final DerivativeStructure ds = new DerivativeStructure(compiler);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] = -data[i];\n        }\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure abs() {\n        if (Double.doubleToLongBits(data[0]) < 0) {\n            // we use the bits representation to also handle -0.0\n            return negate();\n        } else {\n            return this;\n        }\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure ceil() {\n        return new DerivativeStructure(compiler.getFreeParameters(),\n                                       compiler.getOrder(),\n                                       FastMath.ceil(data[0]));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure floor() {\n        return new DerivativeStructure(compiler.getFreeParameters(),\n                                       compiler.getOrder(),\n                                       FastMath.floor(data[0]));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure rint() {\n        return new DerivativeStructure(compiler.getFreeParameters(),\n                                       compiler.getOrder(),\n                                       FastMath.rint(data[0]));\n    }\n\n    /** {@inheritDoc} */\n    public long round() {\n        return FastMath.round(data[0]);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure signum() {\n        return new DerivativeStructure(compiler.getFreeParameters(),\n                                       compiler.getOrder(),\n                                       FastMath.signum(data[0]));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure copySign(final DerivativeStructure sign){\n        long m = Double.doubleToLongBits(data[0]);\n        long s = Double.doubleToLongBits(sign.data[0]);\n        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure copySign(final double sign) {\n        long m = Double.doubleToLongBits(data[0]);\n        long s = Double.doubleToLongBits(sign);\n        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /**\n     * Return the exponent of the instance value, removing the bias.\n     * <p>\n     * For double numbers of the form 2<sup>x</sup>, the unbiased\n     * exponent is exactly x.\n     * </p>\n     * @return exponent for instance in IEEE754 representation, without bias\n     */\n    public int getExponent() {\n        return FastMath.getExponent(data[0]);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure scalb(final int n) {\n        final DerivativeStructure ds = new DerivativeStructure(compiler);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] = FastMath.scalb(data[i], n);\n        }\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure hypot(final DerivativeStructure y)\n        throws DimensionMismatchException {\n\n        compiler.checkCompatibility(y.compiler);\n\n        if (Double.isInfinite(data[0]) || Double.isInfinite(y.data[0])) {\n            return new DerivativeStructure(compiler.getFreeParameters(),\n                                           compiler.getFreeParameters(),\n                                           Double.POSITIVE_INFINITY);\n        } else if (Double.isNaN(data[0]) || Double.isNaN(y.data[0])) {\n            return new DerivativeStructure(compiler.getFreeParameters(),\n                                           compiler.getFreeParameters(),\n                                           Double.NaN);\n        } else {\n\n            final int expX = getExponent();\n            final int expY = y.getExponent();\n            if (expX > expY + 27) {\n                // y is neglectible with respect to x\n                return abs();\n            } else if (expY > expX + 27) {\n                // x is neglectible with respect to y\n                return y.abs();\n            } else {\n\n                // find an intermediate scale to avoid both overflow and underflow\n                final int middleExp = (expX + expY) / 2;\n\n                // scale parameters without losing precision\n                final DerivativeStructure scaledX = scalb(-middleExp);\n                final DerivativeStructure scaledY = y.scalb(-middleExp);\n\n                // compute scaled hypotenuse\n                final DerivativeStructure scaledH =\n                        scaledX.multiply(scaledX).add(scaledY.multiply(scaledY)).sqrt();\n\n                // remove scaling\n                return scaledH.scalb(middleExp);\n\n            }\n\n        }\n    }\n\n    /**\n     * Returns the hypotenuse of a triangle with sides {@code x} and {@code y}\n     * - sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)\n     * avoiding intermediate overflow or underflow.\n     *\n     * <ul>\n     * <li> If either argument is infinite, then the result is positive infinity.</li>\n     * <li> else, if either argument is NaN then the result is NaN.</li>\n     * </ul>\n     *\n     * @param x a value\n     * @param y a value\n     * @return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y)\n        throws DimensionMismatchException {\n        return x.hypot(y);\n    }\n\n    /** Compute composition of the instance by a univariate function.\n     * @param f array of value and derivatives of the function at\n     * the current point (i.e. [f({@link #getValue()}),\n     * f'({@link #getValue()}), f''({@link #getValue()})...]).\n     * @return f(this)\n     * @exception DimensionMismatchException if the number of derivatives\n     * in the array is not equal to {@link #getOrder() order} + 1\n     */\n    public DerivativeStructure compose(final double ... f)\n        throws DimensionMismatchException {\n        if (f.length != getOrder() + 1) {\n            throw new DimensionMismatchException(f.length, getOrder() + 1);\n        }\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.compose(data, 0, f, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc} */\n    public DerivativeStructure reciprocal() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.pow(data, 0, -1, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure sqrt() {\n        return rootN(2);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure cbrt() {\n        return rootN(3);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure rootN(final int n) {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.rootN(data, 0, n, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc} */\n    public Field<DerivativeStructure> getField() {\n        return new Field<DerivativeStructure>() {\n\n            /** {@inheritDoc} */\n            public DerivativeStructure getZero() {\n                return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 0.0);\n            }\n\n            /** {@inheritDoc} */\n            public DerivativeStructure getOne() {\n                return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 1.0);\n            }\n\n            /** {@inheritDoc} */\n            public Class<? extends FieldElement<DerivativeStructure>> getRuntimeClass() {\n                return DerivativeStructure.class;\n            }\n\n        };\n    }\n\n    /** Compute a<sup>x</sup> where a is a double and x a {@link DerivativeStructure}\n     * @param a number to exponentiate\n     * @param x power to apply\n     * @return a<sup>x</sup>\n     * @since 3.3\n     */\n    public static DerivativeStructure pow(final double a, final DerivativeStructure x) {\n        final DerivativeStructure result = new DerivativeStructure(x.compiler);\n        x.compiler.pow(a, x.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure pow(final double p) {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.pow(data, 0, p, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure pow(final int n) {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.pow(data, 0, n, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure pow(final DerivativeStructure e)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(e.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.pow(data, 0, e.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure exp() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.exp(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure expm1() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.expm1(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure log() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.log(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure log1p() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.log1p(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** Base 10 logarithm.\n     * @return base 10 logarithm of the instance\n     */\n    public DerivativeStructure log10() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.log10(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure cos() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.cos(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure sin() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.sin(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure tan() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.tan(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure acos() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.acos(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure asin() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.asin(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure atan() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.atan(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure atan2(final DerivativeStructure x)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(x.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.atan2(data, 0, x.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** Two arguments arc tangent operation.\n     * @param y first argument of the arc tangent\n     * @param x second argument of the arc tangent\n     * @return atan2(y, x)\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x)\n        throws DimensionMismatchException {\n        return y.atan2(x);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure cosh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.cosh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure sinh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.sinh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure tanh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.tanh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure acosh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.acosh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure asinh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.asinh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure atanh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.atanh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** Convert radians to degrees, with error of less than 0.5 ULP\n     *  @return instance converted into degrees\n     */\n    public DerivativeStructure toDegrees() {\n        final DerivativeStructure ds = new DerivativeStructure(compiler);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] = FastMath.toDegrees(data[i]);\n        }\n        return ds;\n    }\n\n    /** Convert degrees to radians, with error of less than 0.5 ULP\n     *  @return instance converted into radians\n     */\n    public DerivativeStructure toRadians() {\n        final DerivativeStructure ds = new DerivativeStructure(compiler);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] = FastMath.toRadians(data[i]);\n        }\n        return ds;\n    }\n\n    /** Evaluate Taylor expansion a derivative structure.\n     * @param delta parameters offsets (&Delta;x, &Delta;y, ...)\n     * @return value of the Taylor expansion at x + &Delta;x, y + &Delta;y, ...\n     * @throws MathArithmeticException if factorials becomes too large\n     */\n    public double taylor(final double ... delta) throws MathArithmeticException {\n        return compiler.taylor(data, 0, delta);\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final DerivativeStructure[] a, final DerivativeStructure[] b)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double[] aDouble = new double[a.length];\n        for (int i = 0; i < a.length; ++i) {\n            aDouble[i] = a[i].getValue();\n        }\n        final double[] bDouble = new double[b.length];\n        for (int i = 0; i < b.length; ++i) {\n            bDouble[i] = b[i].getValue();\n        }\n        final double accurateValue = MathArrays.linearCombination(aDouble, bDouble);\n\n        // compute a simple value, with all partial derivatives\n        DerivativeStructure simpleValue = a[0].getField().getZero();\n        for (int i = 0; i < a.length; ++i) {\n            simpleValue = simpleValue.add(a[i].multiply(b[i]));\n        }\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final double[] a, final DerivativeStructure[] b)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double[] bDouble = new double[b.length];\n        for (int i = 0; i < b.length; ++i) {\n            bDouble[i] = b[i].getValue();\n        }\n        final double accurateValue = MathArrays.linearCombination(a, bDouble);\n\n        // compute a simple value, with all partial derivatives\n        DerivativeStructure simpleValue = b[0].getField().getZero();\n        for (int i = 0; i < a.length; ++i) {\n            simpleValue = simpleValue.add(b[i].multiply(a[i]));\n        }\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,\n                                                 final DerivativeStructure a2, final DerivativeStructure b2)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),\n                                                                  a2.getValue(), b2.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,\n                                                 final double a2, final DerivativeStructure b2)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),\n                                                                  a2, b2.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,\n                                                 final DerivativeStructure a2, final DerivativeStructure b2,\n                                                 final DerivativeStructure a3, final DerivativeStructure b3)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),\n                                                                  a2.getValue(), b2.getValue(),\n                                                                  a3.getValue(), b3.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,\n                                                 final double a2, final DerivativeStructure b2,\n                                                 final double a3, final DerivativeStructure b3)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),\n                                                                  a2, b2.getValue(),\n                                                                  a3, b3.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,\n                                                 final DerivativeStructure a2, final DerivativeStructure b2,\n                                                 final DerivativeStructure a3, final DerivativeStructure b3,\n                                                 final DerivativeStructure a4, final DerivativeStructure b4)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),\n                                                                  a2.getValue(), b2.getValue(),\n                                                                  a3.getValue(), b3.getValue(),\n                                                                  a4.getValue(), b4.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3)).add(a4.multiply(b4));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,\n                                                 final double a2, final DerivativeStructure b2,\n                                                 final double a3, final DerivativeStructure b3,\n                                                 final double a4, final DerivativeStructure b4)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),\n                                                                  a2, b2.getValue(),\n                                                                  a3, b3.getValue(),\n                                                                  a4, b4.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3)).add(b4.multiply(a4));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /**\n     * Test for the equality of two derivative structures.\n     * <p>\n     * Derivative structures are considered equal if they have the same number\n     * of free parameters, the same derivation order, and the same derivatives.\n     * </p>\n     * @param other Object to test for equality to this\n     * @return true if two derivative structures are equal\n     * @since 3.2\n     */\n    @Override\n    public boolean equals(Object other) {\n\n        if (this == other) {\n            return true;\n        }\n\n        if (other instanceof DerivativeStructure) {\n            final DerivativeStructure rhs = (DerivativeStructure)other;\n            return (getFreeParameters() == rhs.getFreeParameters()) &&\n                   (getOrder() == rhs.getOrder()) &&\n                   MathArrays.equals(data, rhs.data);\n        }\n\n        return false;\n\n    }\n\n    /**\n     * Get a hashCode for the derivative structure.\n     * @return a hash code value for this object\n     * @since 3.2\n     */\n    @Override\n    public int hashCode() {\n        return 227 + 229 * getFreeParameters() + 233 * getOrder() + 239 * MathUtils.hash(data);\n    }\n\n    /**\n     * Replace the instance with a data transfer object for serialization.\n     * @return data transfer object that will be serialized\n     */\n    private Object writeReplace() {\n        return new DataTransferObject(compiler.getFreeParameters(), compiler.getOrder(), data);\n    }\n\n    /** Internal class used only for serialization. */\n    private static class DataTransferObject implements Serializable {\n\n        /** Serializable UID. */\n        private static final long serialVersionUID = 20120730L;\n\n        /** Number of variables.\n         * @serial\n         */\n        private final int variables;\n\n        /** Derivation order.\n         * @serial\n         */\n        private final int order;\n\n        /** Partial derivatives.\n         * @serial\n         */\n        private final double[] data;\n\n        /** Simple constructor.\n         * @param variables number of variables\n         * @param order derivation order\n         * @param data partial derivatives\n         */\n        DataTransferObject(final int variables, final int order, final double[] data) {\n            this.variables = variables;\n            this.order     = order;\n            this.data      = data;\n        }\n\n        /** Replace the deserialized data transfer object with a {@link DerivativeStructure}.\n         * @return replacement {@link DerivativeStructure}\n         */\n        private Object readResolve() {\n            return new DerivativeStructure(variables, order, data);\n        }\n\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ [ "0", "int" ] ],
  "tokensMethodArguments" : [ [ "orders", "", "int[]" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(double arg0)" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1, final double a2, final DerivativeStructure b2) throws DimensionMismatchException" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure multiply(final int n)" ], [ "exp", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure exp()" ], [ "tan", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure tan()" ], [ "getOrder", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int getOrder()" ], [ "cosh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure cosh()" ], [ "reciprocal", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure reciprocal()" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure pow(final int n)" ], [ "getPartialDerivative", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double getPartialDerivative(final int... orders) throws DimensionMismatchException, NumberIsTooLargeException" ], [ "floor", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure floor()" ], [ "floor", "org.apache.commons.math3", "RealFieldElement", "public abstract T floor()" ], [ "atan2", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan2(T arg0) throws DimensionMismatchException" ], [ "getField", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public Field<DerivativeStructure> getField()" ], [ "hashCode", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int hashCode()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5)" ], [ "cos", "org.apache.commons.math3", "RealFieldElement", "public abstract T cos()" ], [ "negate", "org.apache.commons.math3", "FieldElement", "public abstract T negate()" ], [ "acosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T acosh()" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure pow(final double p)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(T arg0) throws DimensionMismatchException" ], [ "rootN", "org.apache.commons.math3", "RealFieldElement", "public abstract T rootN(int arg0)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5, double arg6, T arg7)" ], [ "abs", "org.apache.commons.math3", "RealFieldElement", "public abstract T abs()" ], [ "getAllDerivatives", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double[] getAllDerivatives()" ], [ "copySign", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure copySign(final DerivativeStructure sign)" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure multiply(final DerivativeStructure a) throws DimensionMismatchException" ], [ "divide", "org.apache.commons.math3", "FieldElement", "public abstract T divide(T arg0) throws NullArgumentException, MathArithmeticException" ], [ "log10", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure log10()" ], [ "sin", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure sin()" ], [ "atanh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure atanh()" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(int arg0)" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(T arg0)" ], [ "asinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T asinh()" ], [ "log", "org.apache.commons.math3", "RealFieldElement", "public abstract T log()" ], [ "multiply", "org.apache.commons.math3", "RealFieldElement", "public abstract T multiply(double arg0)" ], [ "sin", "org.apache.commons.math3", "RealFieldElement", "public abstract T sin()" ], [ "ceil", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure ceil()" ], [ "subtract", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure subtract(final DerivativeStructure a) throws DimensionMismatchException" ], [ "divide", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure divide(final DerivativeStructure a) throws DimensionMismatchException" ], [ "cosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T cosh()" ], [ "cbrt", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure cbrt()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final double[] a, final DerivativeStructure[] b) throws DimensionMismatchException" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(double arg0)" ], [ "acos", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure acos()" ], [ "tanh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure tanh()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final DerivativeStructure[] a, final DerivativeStructure[] b) throws DimensionMismatchException" ], [ "ceil", "org.apache.commons.math3", "RealFieldElement", "public abstract T ceil()" ], [ "equals", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public boolean equals(Object other)" ], [ "round", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public long round()" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(int arg0)" ], [ "sqrt", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure sqrt()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "expm1", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure expm1()" ], [ "divide", "org.apache.commons.math3", "RealFieldElement", "public abstract T divide(double arg0)" ], [ "log1p", "org.apache.commons.math3", "RealFieldElement", "public abstract T log1p()" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(double arg0)" ], [ "log", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure log()" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure createConstant(final double c)" ], [ "acos", "org.apache.commons.math3", "RealFieldElement", "public abstract T acos()" ], [ "getField", "org.apache.commons.math3", "FieldElement", "public abstract Field<T> getField()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1, final DerivativeStructure a2, final DerivativeStructure b2) throws DimensionMismatchException" ], [ "copySign", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure copySign(final double sign)" ], [ "atan", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure atan()" ], [ "scalb", "org.apache.commons.math3", "RealFieldElement", "public abstract T scalb(int arg0)" ], [ "negate", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure negate()" ], [ "sinh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure sinh()" ], [ "rint", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure rint()" ], [ "subtract", "org.apache.commons.math3", "RealFieldElement", "public abstract T subtract(double arg0)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5, T arg6, T arg7)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3)" ], [ "asinh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure asinh()" ], [ "atanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T atanh()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1, final double a2, final DerivativeStructure b2, final double a3, final DerivativeStructure b3) throws DimensionMismatchException" ], [ "tanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T tanh()" ], [ "log1p", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure log1p()" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure pow(final DerivativeStructure e) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1, final DerivativeStructure a2, final DerivativeStructure b2, final DerivativeStructure a3, final DerivativeStructure b3) throws DimensionMismatchException" ], [ "reciprocal", "org.apache.commons.math3", "RealFieldElement", "public abstract T reciprocal()" ], [ "rootN", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure rootN(final int n)" ], [ "asin", "org.apache.commons.math3", "RealFieldElement", "public abstract T asin()" ], [ "remainder", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure remainder(final double a)" ], [ "cos", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure cos()" ], [ "abs", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure abs()" ], [ "scalb", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure scalb(final int n)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3)" ], [ "cbrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T cbrt()" ], [ "divide", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure divide(final double a)" ], [ "getFreeParameters", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int getFreeParameters()" ], [ "subtract", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure subtract(final double a)" ], [ "add", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure add(final DerivativeStructure a) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1, final double a2, final DerivativeStructure b2, final double a3, final DerivativeStructure b3, final double a4, final DerivativeStructure b4) throws DimensionMismatchException" ], [ "sinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T sinh()" ], [ "tan", "org.apache.commons.math3", "RealFieldElement", "public abstract T tan()" ], [ "rint", "org.apache.commons.math3", "RealFieldElement", "public abstract T rint()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "atan", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan()" ], [ "getValue", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double getValue()" ], [ "sqrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T sqrt()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1, final DerivativeStructure a2, final DerivativeStructure b2, final DerivativeStructure a3, final DerivativeStructure b3, final DerivativeStructure a4, final DerivativeStructure b4) throws DimensionMismatchException" ], [ "getExponent", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int getExponent()" ], [ "asin", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure asin()" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(T arg0) throws NullArgumentException" ], [ "getReal", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double getReal()" ], [ "toDegrees", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure toDegrees()" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure atan2(final DerivativeStructure x) throws DimensionMismatchException" ], [ "hypot", "org.apache.commons.math3", "RealFieldElement", "public abstract T hypot(T arg0) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(T arg0) throws DimensionMismatchException" ], [ "acosh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure acosh()" ], [ "compose", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure compose(final double... f) throws DimensionMismatchException" ], [ "signum", "org.apache.commons.math3", "RealFieldElement", "public abstract T signum()" ], [ "exp", "org.apache.commons.math3", "RealFieldElement", "public abstract T exp()" ], [ "taylor", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double taylor(final double... delta) throws MathArithmeticException" ], [ "signum", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure signum()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5)" ], [ "toRadians", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure toRadians()" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure multiply(final double a)" ], [ "add", "org.apache.commons.math3", "FieldElement", "public abstract T add(T arg0) throws NullArgumentException" ], [ "subtract", "org.apache.commons.math3", "FieldElement", "public abstract T subtract(T arg0) throws NullArgumentException" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "expm1", "org.apache.commons.math3", "RealFieldElement", "public abstract T expm1()" ], [ "add", "org.apache.commons.math3", "RealFieldElement", "public abstract T add(double arg0)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure hypot(final DerivativeStructure y) throws DimensionMismatchException" ], [ "remainder", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure remainder(final DerivativeStructure a) throws DimensionMismatchException" ], [ "add", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure add(final double a)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "length", "", "int[]", "public final int length;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 13509,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.analysis.differentiation",
  "className" : "DerivativeStructure",
  "javadocTag" : "@throws DimensionMismatchException if number of free parameters\nor orders do not match",
  "methodJavadoc" : "    /** {@inheritDoc}\n     * @throws DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */",
  "methodSourceCode" : "public DerivativeStructure add(final DerivativeStructure a) throws DimensionMismatchException{\n    compiler.checkCompatibility(a.compiler);\n    final DerivativeStructure ds = new DerivativeStructure(this);\n    compiler.add(data, 0, a.data, 0, ds.data, 0);\n    return ds;\n}",
  "classJavadoc" : "/** Class representing both the value and the differentials of a function.\n * <p>This class is the workhorse of the differentiation package.</p>\n * <p>This class is an implementation of the extension to Rall's\n * numbers described in Dan Kalman's paper <a\n * href=\"http://www1.american.edu/cas/mathstat/People/kalman/pdffiles/mmgautodiff.pdf\">Doubly\n * Recursive Multivariate Automatic Differentiation</a>, Mathematics Magazine, vol. 75,\n * no. 3, June 2002. Rall's numbers are an extension to the real numbers used\n * throughout mathematical expressions; they hold the derivative together with the\n * value of a function. Dan Kalman's derivative structures hold all partial derivatives\n * up to any specified order, with respect to any number of free parameters. Rall's\n * numbers therefore can be seen as derivative structures for order one derivative and\n * one free parameter, and real numbers can be seen as derivative structures with zero\n * order derivative and no free parameters.</p>\n * <p>{@link DerivativeStructure} instances can be used directly thanks to\n * the arithmetic operators to the mathematical functions provided as\n * methods by this class (+, -, *, /, %, sin, cos ...).</p>\n * <p>Implementing complex expressions by hand using these classes is\n * a tedious and error-prone task but has the advantage of having no limitation\n * on the derivation order despite no requiring users to compute the derivatives by\n * themselves. Implementing complex expression can also be done by developing computation\n * code using standard primitive double values and to use {@link\n * UnivariateFunctionDifferentiator differentiators} to create the {@link\n * DerivativeStructure}-based instances. This method is simpler but may be limited in\n * the accuracy and derivation orders and may be computationally intensive (this is\n * typically the case for {@link FiniteDifferencesDifferentiator finite differences\n * differentiator}.</p>\n * <p>Instances of this class are guaranteed to be immutable.</p>\n * @see DSCompiler\n * @since 3.1\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math3.analysis.differentiation;\n\nimport java.io.Serializable;\n\nimport org.apache.commons.math3.Field;\nimport org.apache.commons.math3.FieldElement;\nimport org.apache.commons.math3.RealFieldElement;\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.exception.MathArithmeticException;\nimport org.apache.commons.math3.exception.NumberIsTooLargeException;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathArrays;\nimport org.apache.commons.math3.util.MathUtils;\n\n/** Class representing both the value and the differentials of a function.\n * <p>This class is the workhorse of the differentiation package.</p>\n * <p>This class is an implementation of the extension to Rall's\n * numbers described in Dan Kalman's paper <a\n * href=\"http://www1.american.edu/cas/mathstat/People/kalman/pdffiles/mmgautodiff.pdf\">Doubly\n * Recursive Multivariate Automatic Differentiation</a>, Mathematics Magazine, vol. 75,\n * no. 3, June 2002. Rall's numbers are an extension to the real numbers used\n * throughout mathematical expressions; they hold the derivative together with the\n * value of a function. Dan Kalman's derivative structures hold all partial derivatives\n * up to any specified order, with respect to any number of free parameters. Rall's\n * numbers therefore can be seen as derivative structures for order one derivative and\n * one free parameter, and real numbers can be seen as derivative structures with zero\n * order derivative and no free parameters.</p>\n * <p>{@link DerivativeStructure} instances can be used directly thanks to\n * the arithmetic operators to the mathematical functions provided as\n * methods by this class (+, -, *, /, %, sin, cos ...).</p>\n * <p>Implementing complex expressions by hand using these classes is\n * a tedious and error-prone task but has the advantage of having no limitation\n * on the derivation order despite no requiring users to compute the derivatives by\n * themselves. Implementing complex expression can also be done by developing computation\n * code using standard primitive double values and to use {@link\n * UnivariateFunctionDifferentiator differentiators} to create the {@link\n * DerivativeStructure}-based instances. This method is simpler but may be limited in\n * the accuracy and derivation orders and may be computationally intensive (this is\n * typically the case for {@link FiniteDifferencesDifferentiator finite differences\n * differentiator}.</p>\n * <p>Instances of this class are guaranteed to be immutable.</p>\n * @see DSCompiler\n * @since 3.1\n */\npublic class DerivativeStructure implements RealFieldElement<DerivativeStructure>, Serializable {\n\n    /** Serializable UID. */\n    private static final long serialVersionUID = 20120730L;\n\n    /** Compiler for the current dimensions. */\n    private transient DSCompiler compiler;\n\n    /** Combined array holding all values. */\n    private final double[] data;\n\n    /** Build an instance with all values and derivatives set to 0.\n     * @param compiler compiler to use for computation\n     */\n    private DerivativeStructure(final DSCompiler compiler) {\n        this.compiler = compiler;\n        this.data     = new double[compiler.getSize()];\n    }\n\n    /** Build an instance with all values and derivatives set to 0.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @throws NumberIsTooLargeException if order is too large\n     */\n    public DerivativeStructure(final int parameters, final int order)\n        throws NumberIsTooLargeException {\n        this(DSCompiler.getCompiler(parameters, order));\n    }\n\n    /** Build an instance representing a constant value.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param value value of the constant\n     * @throws NumberIsTooLargeException if order is too large\n     * @see #DerivativeStructure(int, int, int, double)\n     */\n    public DerivativeStructure(final int parameters, final int order, final double value)\n        throws NumberIsTooLargeException {\n        this(parameters, order);\n        this.data[0] = value;\n    }\n\n    /** Build an instance representing a variable.\n     * <p>Instances built using this constructor are considered\n     * to be the free variables with respect to which differentials\n     * are computed. As such, their differential with respect to\n     * themselves is +1.</p>\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param index index of the variable (from 0 to {@code parameters - 1})\n     * @param value value of the variable\n     * @exception NumberIsTooLargeException if {@code index >= parameters}.\n     * @see #DerivativeStructure(int, int, double)\n     */\n    public DerivativeStructure(final int parameters, final int order,\n                               final int index, final double value)\n        throws NumberIsTooLargeException {\n        this(parameters, order, value);\n\n        if (index >= parameters) {\n            throw new NumberIsTooLargeException(index, parameters, false);\n        }\n\n        if (order > 0) {\n            // the derivative of the variable with respect to itself is 1.\n            data[DSCompiler.getCompiler(index, order).getSize()] = 1.0;\n        }\n\n    }\n\n    /** Linear combination constructor.\n     * The derivative structure built will be a1 * ds1 + a2 * ds2\n     * @param a1 first scale factor\n     * @param ds1 first base (unscaled) derivative structure\n     * @param a2 second scale factor\n     * @param ds2 second base (unscaled) derivative structure\n     * @exception DimensionMismatchException if number of free parameters or orders are inconsistent\n     */\n    public DerivativeStructure(final double a1, final DerivativeStructure ds1,\n                               final double a2, final DerivativeStructure ds2)\n        throws DimensionMismatchException {\n        this(ds1.compiler);\n        compiler.checkCompatibility(ds2.compiler);\n        compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, data, 0);\n    }\n\n    /** Linear combination constructor.\n     * The derivative structure built will be a1 * ds1 + a2 * ds2 + a3 * ds3\n     * @param a1 first scale factor\n     * @param ds1 first base (unscaled) derivative structure\n     * @param a2 second scale factor\n     * @param ds2 second base (unscaled) derivative structure\n     * @param a3 third scale factor\n     * @param ds3 third base (unscaled) derivative structure\n     * @exception DimensionMismatchException if number of free parameters or orders are inconsistent\n     */\n    public DerivativeStructure(final double a1, final DerivativeStructure ds1,\n                               final double a2, final DerivativeStructure ds2,\n                               final double a3, final DerivativeStructure ds3)\n        throws DimensionMismatchException {\n        this(ds1.compiler);\n        compiler.checkCompatibility(ds2.compiler);\n        compiler.checkCompatibility(ds3.compiler);\n        compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, a3, ds3.data, 0, data, 0);\n    }\n\n    /** Linear combination constructor.\n     * The derivative structure built will be a1 * ds1 + a2 * ds2 + a3 * ds3 + a4 * ds4\n     * @param a1 first scale factor\n     * @param ds1 first base (unscaled) derivative structure\n     * @param a2 second scale factor\n     * @param ds2 second base (unscaled) derivative structure\n     * @param a3 third scale factor\n     * @param ds3 third base (unscaled) derivative structure\n     * @param a4 fourth scale factor\n     * @param ds4 fourth base (unscaled) derivative structure\n     * @exception DimensionMismatchException if number of free parameters or orders are inconsistent\n     */\n    public DerivativeStructure(final double a1, final DerivativeStructure ds1,\n                               final double a2, final DerivativeStructure ds2,\n                               final double a3, final DerivativeStructure ds3,\n                               final double a4, final DerivativeStructure ds4)\n        throws DimensionMismatchException {\n        this(ds1.compiler);\n        compiler.checkCompatibility(ds2.compiler);\n        compiler.checkCompatibility(ds3.compiler);\n        compiler.checkCompatibility(ds4.compiler);\n        compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0,\n                                   a3, ds3.data, 0, a4, ds4.data, 0,\n                                   data, 0);\n    }\n\n    /** Build an instance from all its derivatives.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param derivatives derivatives sorted according to\n     * {@link DSCompiler#getPartialDerivativeIndex(int...)}\n     * @exception DimensionMismatchException if derivatives array does not match the\n     * {@link DSCompiler#getSize() size} expected by the compiler\n     * @throws NumberIsTooLargeException if order is too large\n     * @see #getAllDerivatives()\n     */\n    public DerivativeStructure(final int parameters, final int order, final double ... derivatives)\n        throws DimensionMismatchException, NumberIsTooLargeException {\n        this(parameters, order);\n        if (derivatives.length != data.length) {\n            throw new DimensionMismatchException(derivatives.length, data.length);\n        }\n        System.arraycopy(derivatives, 0, data, 0, data.length);\n    }\n\n    /** Copy constructor.\n     * @param ds instance to copy\n     */\n    private DerivativeStructure(final DerivativeStructure ds) {\n        this.compiler = ds.compiler;\n        this.data     = ds.data.clone();\n    }\n\n    /** Get the number of free parameters.\n     * @return number of free parameters\n     */\n    public int getFreeParameters() {\n        return compiler.getFreeParameters();\n    }\n\n    /** Get the derivation order.\n     * @return derivation order\n     */\n    public int getOrder() {\n        return compiler.getOrder();\n    }\n\n    /** Create a constant compatible with instance order and number of parameters.\n     * <p>\n     * This method is a convenience factory method, it simply calls\n     * {@code new DerivativeStructure(getFreeParameters(), getOrder(), c)}\n     * </p>\n     * @param c value of the constant\n     * @return a constant compatible with instance order and number of parameters\n     * @see #DerivativeStructure(int, int, double)\n     * @since 3.3\n     */\n    public DerivativeStructure createConstant(final double c) {\n        return new DerivativeStructure(getFreeParameters(), getOrder(), c);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public double getReal() {\n        return data[0];\n    }\n\n    /** Get the value part of the derivative structure.\n     * @return value part of the derivative structure\n     * @see #getPartialDerivative(int...)\n     */\n    public double getValue() {\n        return data[0];\n    }\n\n    /** Get a partial derivative.\n     * @param orders derivation orders with respect to each variable (if all orders are 0,\n     * the value is returned)\n     * @return partial derivative\n     * @see #getValue()\n     * @exception DimensionMismatchException if the numbers of variables does not\n     * match the instance\n     * @exception NumberIsTooLargeException if sum of derivation orders is larger\n     * than the instance limits\n     */\n    public double getPartialDerivative(final int ... orders)\n        throws DimensionMismatchException, NumberIsTooLargeException {\n        return data[compiler.getPartialDerivativeIndex(orders)];\n    }\n\n    /** Get all partial derivatives.\n     * @return a fresh copy of partial derivatives, in an array sorted according to\n     * {@link DSCompiler#getPartialDerivativeIndex(int...)}\n     */\n    public double[] getAllDerivatives() {\n        return data.clone();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure add(final double a) {\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        ds.data[0] += a;\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */\n    public DerivativeStructure add(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        compiler.add(data, 0, a.data, 0, ds.data, 0);\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure subtract(final double a) {\n        return add(-a);\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */\n    public DerivativeStructure subtract(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        compiler.subtract(data, 0, a.data, 0, ds.data, 0);\n        return ds;\n    }\n\n    /** {@inheritDoc} */\n    public DerivativeStructure multiply(final int n) {\n        return multiply((double) n);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure multiply(final double a) {\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] *= a;\n        }\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */\n    public DerivativeStructure multiply(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.multiply(data, 0, a.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure divide(final double a) {\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] /= a;\n        }\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */\n    public DerivativeStructure divide(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.divide(data, 0, a.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc} */\n    public DerivativeStructure remainder(final double a) {\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        ds.data[0] = FastMath.IEEEremainder(ds.data[0], a);\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure remainder(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.remainder(data, 0, a.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc} */\n    public DerivativeStructure negate() {\n        final DerivativeStructure ds = new DerivativeStructure(compiler);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] = -data[i];\n        }\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure abs() {\n        if (Double.doubleToLongBits(data[0]) < 0) {\n            // we use the bits representation to also handle -0.0\n            return negate();\n        } else {\n            return this;\n        }\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure ceil() {\n        return new DerivativeStructure(compiler.getFreeParameters(),\n                                       compiler.getOrder(),\n                                       FastMath.ceil(data[0]));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure floor() {\n        return new DerivativeStructure(compiler.getFreeParameters(),\n                                       compiler.getOrder(),\n                                       FastMath.floor(data[0]));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure rint() {\n        return new DerivativeStructure(compiler.getFreeParameters(),\n                                       compiler.getOrder(),\n                                       FastMath.rint(data[0]));\n    }\n\n    /** {@inheritDoc} */\n    public long round() {\n        return FastMath.round(data[0]);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure signum() {\n        return new DerivativeStructure(compiler.getFreeParameters(),\n                                       compiler.getOrder(),\n                                       FastMath.signum(data[0]));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure copySign(final DerivativeStructure sign){\n        long m = Double.doubleToLongBits(data[0]);\n        long s = Double.doubleToLongBits(sign.data[0]);\n        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure copySign(final double sign) {\n        long m = Double.doubleToLongBits(data[0]);\n        long s = Double.doubleToLongBits(sign);\n        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /**\n     * Return the exponent of the instance value, removing the bias.\n     * <p>\n     * For double numbers of the form 2<sup>x</sup>, the unbiased\n     * exponent is exactly x.\n     * </p>\n     * @return exponent for instance in IEEE754 representation, without bias\n     */\n    public int getExponent() {\n        return FastMath.getExponent(data[0]);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure scalb(final int n) {\n        final DerivativeStructure ds = new DerivativeStructure(compiler);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] = FastMath.scalb(data[i], n);\n        }\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure hypot(final DerivativeStructure y)\n        throws DimensionMismatchException {\n\n        compiler.checkCompatibility(y.compiler);\n\n        if (Double.isInfinite(data[0]) || Double.isInfinite(y.data[0])) {\n            return new DerivativeStructure(compiler.getFreeParameters(),\n                                           compiler.getFreeParameters(),\n                                           Double.POSITIVE_INFINITY);\n        } else if (Double.isNaN(data[0]) || Double.isNaN(y.data[0])) {\n            return new DerivativeStructure(compiler.getFreeParameters(),\n                                           compiler.getFreeParameters(),\n                                           Double.NaN);\n        } else {\n\n            final int expX = getExponent();\n            final int expY = y.getExponent();\n            if (expX > expY + 27) {\n                // y is neglectible with respect to x\n                return abs();\n            } else if (expY > expX + 27) {\n                // x is neglectible with respect to y\n                return y.abs();\n            } else {\n\n                // find an intermediate scale to avoid both overflow and underflow\n                final int middleExp = (expX + expY) / 2;\n\n                // scale parameters without losing precision\n                final DerivativeStructure scaledX = scalb(-middleExp);\n                final DerivativeStructure scaledY = y.scalb(-middleExp);\n\n                // compute scaled hypotenuse\n                final DerivativeStructure scaledH =\n                        scaledX.multiply(scaledX).add(scaledY.multiply(scaledY)).sqrt();\n\n                // remove scaling\n                return scaledH.scalb(middleExp);\n\n            }\n\n        }\n    }\n\n    /**\n     * Returns the hypotenuse of a triangle with sides {@code x} and {@code y}\n     * - sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)\n     * avoiding intermediate overflow or underflow.\n     *\n     * <ul>\n     * <li> If either argument is infinite, then the result is positive infinity.</li>\n     * <li> else, if either argument is NaN then the result is NaN.</li>\n     * </ul>\n     *\n     * @param x a value\n     * @param y a value\n     * @return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y)\n        throws DimensionMismatchException {\n        return x.hypot(y);\n    }\n\n    /** Compute composition of the instance by a univariate function.\n     * @param f array of value and derivatives of the function at\n     * the current point (i.e. [f({@link #getValue()}),\n     * f'({@link #getValue()}), f''({@link #getValue()})...]).\n     * @return f(this)\n     * @exception DimensionMismatchException if the number of derivatives\n     * in the array is not equal to {@link #getOrder() order} + 1\n     */\n    public DerivativeStructure compose(final double ... f)\n        throws DimensionMismatchException {\n        if (f.length != getOrder() + 1) {\n            throw new DimensionMismatchException(f.length, getOrder() + 1);\n        }\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.compose(data, 0, f, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc} */\n    public DerivativeStructure reciprocal() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.pow(data, 0, -1, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure sqrt() {\n        return rootN(2);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure cbrt() {\n        return rootN(3);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure rootN(final int n) {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.rootN(data, 0, n, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc} */\n    public Field<DerivativeStructure> getField() {\n        return new Field<DerivativeStructure>() {\n\n            /** {@inheritDoc} */\n            public DerivativeStructure getZero() {\n                return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 0.0);\n            }\n\n            /** {@inheritDoc} */\n            public DerivativeStructure getOne() {\n                return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 1.0);\n            }\n\n            /** {@inheritDoc} */\n            public Class<? extends FieldElement<DerivativeStructure>> getRuntimeClass() {\n                return DerivativeStructure.class;\n            }\n\n        };\n    }\n\n    /** Compute a<sup>x</sup> where a is a double and x a {@link DerivativeStructure}\n     * @param a number to exponentiate\n     * @param x power to apply\n     * @return a<sup>x</sup>\n     * @since 3.3\n     */\n    public static DerivativeStructure pow(final double a, final DerivativeStructure x) {\n        final DerivativeStructure result = new DerivativeStructure(x.compiler);\n        x.compiler.pow(a, x.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure pow(final double p) {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.pow(data, 0, p, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure pow(final int n) {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.pow(data, 0, n, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure pow(final DerivativeStructure e)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(e.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.pow(data, 0, e.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure exp() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.exp(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure expm1() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.expm1(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure log() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.log(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure log1p() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.log1p(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** Base 10 logarithm.\n     * @return base 10 logarithm of the instance\n     */\n    public DerivativeStructure log10() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.log10(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure cos() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.cos(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure sin() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.sin(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure tan() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.tan(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure acos() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.acos(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure asin() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.asin(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure atan() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.atan(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure atan2(final DerivativeStructure x)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(x.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.atan2(data, 0, x.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** Two arguments arc tangent operation.\n     * @param y first argument of the arc tangent\n     * @param x second argument of the arc tangent\n     * @return atan2(y, x)\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x)\n        throws DimensionMismatchException {\n        return y.atan2(x);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure cosh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.cosh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure sinh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.sinh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure tanh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.tanh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure acosh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.acosh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure asinh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.asinh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure atanh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.atanh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** Convert radians to degrees, with error of less than 0.5 ULP\n     *  @return instance converted into degrees\n     */\n    public DerivativeStructure toDegrees() {\n        final DerivativeStructure ds = new DerivativeStructure(compiler);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] = FastMath.toDegrees(data[i]);\n        }\n        return ds;\n    }\n\n    /** Convert degrees to radians, with error of less than 0.5 ULP\n     *  @return instance converted into radians\n     */\n    public DerivativeStructure toRadians() {\n        final DerivativeStructure ds = new DerivativeStructure(compiler);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] = FastMath.toRadians(data[i]);\n        }\n        return ds;\n    }\n\n    /** Evaluate Taylor expansion a derivative structure.\n     * @param delta parameters offsets (&Delta;x, &Delta;y, ...)\n     * @return value of the Taylor expansion at x + &Delta;x, y + &Delta;y, ...\n     * @throws MathArithmeticException if factorials becomes too large\n     */\n    public double taylor(final double ... delta) throws MathArithmeticException {\n        return compiler.taylor(data, 0, delta);\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final DerivativeStructure[] a, final DerivativeStructure[] b)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double[] aDouble = new double[a.length];\n        for (int i = 0; i < a.length; ++i) {\n            aDouble[i] = a[i].getValue();\n        }\n        final double[] bDouble = new double[b.length];\n        for (int i = 0; i < b.length; ++i) {\n            bDouble[i] = b[i].getValue();\n        }\n        final double accurateValue = MathArrays.linearCombination(aDouble, bDouble);\n\n        // compute a simple value, with all partial derivatives\n        DerivativeStructure simpleValue = a[0].getField().getZero();\n        for (int i = 0; i < a.length; ++i) {\n            simpleValue = simpleValue.add(a[i].multiply(b[i]));\n        }\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final double[] a, final DerivativeStructure[] b)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double[] bDouble = new double[b.length];\n        for (int i = 0; i < b.length; ++i) {\n            bDouble[i] = b[i].getValue();\n        }\n        final double accurateValue = MathArrays.linearCombination(a, bDouble);\n\n        // compute a simple value, with all partial derivatives\n        DerivativeStructure simpleValue = b[0].getField().getZero();\n        for (int i = 0; i < a.length; ++i) {\n            simpleValue = simpleValue.add(b[i].multiply(a[i]));\n        }\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,\n                                                 final DerivativeStructure a2, final DerivativeStructure b2)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),\n                                                                  a2.getValue(), b2.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,\n                                                 final double a2, final DerivativeStructure b2)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),\n                                                                  a2, b2.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,\n                                                 final DerivativeStructure a2, final DerivativeStructure b2,\n                                                 final DerivativeStructure a3, final DerivativeStructure b3)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),\n                                                                  a2.getValue(), b2.getValue(),\n                                                                  a3.getValue(), b3.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,\n                                                 final double a2, final DerivativeStructure b2,\n                                                 final double a3, final DerivativeStructure b3)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),\n                                                                  a2, b2.getValue(),\n                                                                  a3, b3.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,\n                                                 final DerivativeStructure a2, final DerivativeStructure b2,\n                                                 final DerivativeStructure a3, final DerivativeStructure b3,\n                                                 final DerivativeStructure a4, final DerivativeStructure b4)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),\n                                                                  a2.getValue(), b2.getValue(),\n                                                                  a3.getValue(), b3.getValue(),\n                                                                  a4.getValue(), b4.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3)).add(a4.multiply(b4));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,\n                                                 final double a2, final DerivativeStructure b2,\n                                                 final double a3, final DerivativeStructure b3,\n                                                 final double a4, final DerivativeStructure b4)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),\n                                                                  a2, b2.getValue(),\n                                                                  a3, b3.getValue(),\n                                                                  a4, b4.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3)).add(b4.multiply(a4));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /**\n     * Test for the equality of two derivative structures.\n     * <p>\n     * Derivative structures are considered equal if they have the same number\n     * of free parameters, the same derivation order, and the same derivatives.\n     * </p>\n     * @param other Object to test for equality to this\n     * @return true if two derivative structures are equal\n     * @since 3.2\n     */\n    @Override\n    public boolean equals(Object other) {\n\n        if (this == other) {\n            return true;\n        }\n\n        if (other instanceof DerivativeStructure) {\n            final DerivativeStructure rhs = (DerivativeStructure)other;\n            return (getFreeParameters() == rhs.getFreeParameters()) &&\n                   (getOrder() == rhs.getOrder()) &&\n                   MathArrays.equals(data, rhs.data);\n        }\n\n        return false;\n\n    }\n\n    /**\n     * Get a hashCode for the derivative structure.\n     * @return a hash code value for this object\n     * @since 3.2\n     */\n    @Override\n    public int hashCode() {\n        return 227 + 229 * getFreeParameters() + 233 * getOrder() + 239 * MathUtils.hash(data);\n    }\n\n    /**\n     * Replace the instance with a data transfer object for serialization.\n     * @return data transfer object that will be serialized\n     */\n    private Object writeReplace() {\n        return new DataTransferObject(compiler.getFreeParameters(), compiler.getOrder(), data);\n    }\n\n    /** Internal class used only for serialization. */\n    private static class DataTransferObject implements Serializable {\n\n        /** Serializable UID. */\n        private static final long serialVersionUID = 20120730L;\n\n        /** Number of variables.\n         * @serial\n         */\n        private final int variables;\n\n        /** Derivation order.\n         * @serial\n         */\n        private final int order;\n\n        /** Partial derivatives.\n         * @serial\n         */\n        private final double[] data;\n\n        /** Simple constructor.\n         * @param variables number of variables\n         * @param order derivation order\n         * @param data partial derivatives\n         */\n        DataTransferObject(final int variables, final int order, final double[] data) {\n            this.variables = variables;\n            this.order     = order;\n            this.data      = data;\n        }\n\n        /** Replace the deserialized data transfer object with a {@link DerivativeStructure}.\n         * @return replacement {@link DerivativeStructure}\n         */\n        private Object readResolve() {\n            return new DerivativeStructure(variables, order, data);\n        }\n\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "a", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "exp", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure exp()" ], [ "reciprocal", "org.apache.commons.math3", "RealFieldElement", "public abstract T reciprocal()" ], [ "log10", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure log10()" ], [ "negate", "org.apache.commons.math3", "FieldElement", "public abstract T negate()" ], [ "subtract", "org.apache.commons.math3", "RealFieldElement", "public abstract T subtract(double arg0)" ], [ "rootN", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure rootN(final int n)" ], [ "sqrt", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure sqrt()" ], [ "expm1", "org.apache.commons.math3", "RealFieldElement", "public abstract T expm1()" ], [ "sin", "org.apache.commons.math3", "RealFieldElement", "public abstract T sin()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "negate", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure negate()" ], [ "taylor", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double taylor(final double... delta) throws MathArithmeticException" ], [ "signum", "org.apache.commons.math3", "RealFieldElement", "public abstract T signum()" ], [ "divide", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure divide(final double a)" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(T arg0) throws DimensionMismatchException" ], [ "getAllDerivatives", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double[] getAllDerivatives()" ], [ "add", "org.apache.commons.math3", "FieldElement", "public abstract T add(T arg0) throws NullArgumentException" ], [ "atan", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure atan()" ], [ "acosh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure acosh()" ], [ "log1p", "org.apache.commons.math3", "RealFieldElement", "public abstract T log1p()" ], [ "tan", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure tan()" ], [ "remainder", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure remainder(final DerivativeStructure a) throws DimensionMismatchException" ], [ "atan2", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan2(T arg0) throws DimensionMismatchException" ], [ "equals", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public boolean equals(Object other)" ], [ "acos", "org.apache.commons.math3", "RealFieldElement", "public abstract T acos()" ], [ "getPartialDerivative", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double getPartialDerivative(final int... orders) throws DimensionMismatchException, NumberIsTooLargeException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure pow(final int n)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "cosh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure cosh()" ], [ "floor", "org.apache.commons.math3", "RealFieldElement", "public abstract T floor()" ], [ "log1p", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure log1p()" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(T arg0) throws NullArgumentException" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5)" ], [ "cosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T cosh()" ], [ "signum", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure signum()" ], [ "asinh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure asinh()" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(int arg0)" ], [ "getField", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public Field<DerivativeStructure> getField()" ], [ "atanh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure atanh()" ], [ "getField", "org.apache.commons.math3", "FieldElement", "public abstract Field<T> getField()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1, final double a2, final DerivativeStructure b2, final double a3, final DerivativeStructure b3) throws DimensionMismatchException" ], [ "toDegrees", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure toDegrees()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final DerivativeStructure[] a, final DerivativeStructure[] b) throws DimensionMismatchException" ], [ "cos", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure cos()" ], [ "multiply", "org.apache.commons.math3", "RealFieldElement", "public abstract T multiply(double arg0)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3)" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure multiply(final DerivativeStructure a) throws DimensionMismatchException" ], [ "log", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure log()" ], [ "rootN", "org.apache.commons.math3", "RealFieldElement", "public abstract T rootN(int arg0)" ], [ "getOrder", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int getOrder()" ], [ "remainder", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure remainder(final double a)" ], [ "scalb", "org.apache.commons.math3", "RealFieldElement", "public abstract T scalb(int arg0)" ], [ "rint", "org.apache.commons.math3", "RealFieldElement", "public abstract T rint()" ], [ "reciprocal", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure reciprocal()" ], [ "add", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure add(final double a)" ], [ "log", "org.apache.commons.math3", "RealFieldElement", "public abstract T log()" ], [ "subtract", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure subtract(final double a)" ], [ "add", "org.apache.commons.math3", "RealFieldElement", "public abstract T add(double arg0)" ], [ "getValue", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double getValue()" ], [ "subtract", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure subtract(final DerivativeStructure a) throws DimensionMismatchException" ], [ "getExponent", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int getExponent()" ], [ "round", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public long round()" ], [ "hashCode", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int hashCode()" ], [ "tanh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure tanh()" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(int arg0)" ], [ "copySign", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure copySign(final double sign)" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1, final DerivativeStructure a2, final DerivativeStructure b2) throws DimensionMismatchException" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure hypot(final DerivativeStructure y) throws DimensionMismatchException" ], [ "toRadians", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure toRadians()" ], [ "getReal", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double getReal()" ], [ "getFreeParameters", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int getFreeParameters()" ], [ "sinh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure sinh()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5, T arg6, T arg7)" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final double[] a, final DerivativeStructure[] b) throws DimensionMismatchException" ], [ "sin", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure sin()" ], [ "asin", "org.apache.commons.math3", "RealFieldElement", "public abstract T asin()" ], [ "abs", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure abs()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1, final DerivativeStructure a2, final DerivativeStructure b2, final DerivativeStructure a3, final DerivativeStructure b3, final DerivativeStructure a4, final DerivativeStructure b4) throws DimensionMismatchException" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(double arg0)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure atan2(final DerivativeStructure x) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure pow(final DerivativeStructure e) throws DimensionMismatchException" ], [ "cos", "org.apache.commons.math3", "RealFieldElement", "public abstract T cos()" ], [ "ceil", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure ceil()" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(T arg0) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1, final double a2, final DerivativeStructure b2) throws DimensionMismatchException" ], [ "cbrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T cbrt()" ], [ "compose", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure compose(final double... f) throws DimensionMismatchException" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure multiply(final double a)" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(T arg0)" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1, final DerivativeStructure a2, final DerivativeStructure b2, final DerivativeStructure a3, final DerivativeStructure b3) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1, final double a2, final DerivativeStructure b2, final double a3, final DerivativeStructure b3, final double a4, final DerivativeStructure b4) throws DimensionMismatchException" ], [ "tanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T tanh()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(double arg0)" ], [ "atanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T atanh()" ], [ "tan", "org.apache.commons.math3", "RealFieldElement", "public abstract T tan()" ], [ "expm1", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure expm1()" ], [ "asin", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure asin()" ], [ "divide", "org.apache.commons.math3", "RealFieldElement", "public abstract T divide(double arg0)" ], [ "sinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T sinh()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5)" ], [ "rint", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure rint()" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(double arg0)" ], [ "ceil", "org.apache.commons.math3", "RealFieldElement", "public abstract T ceil()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3)" ], [ "atan", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan()" ], [ "scalb", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure scalb(final int n)" ], [ "sqrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T sqrt()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "subtract", "org.apache.commons.math3", "FieldElement", "public abstract T subtract(T arg0) throws NullArgumentException" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure multiply(final int n)" ], [ "add", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure add(final DerivativeStructure a) throws DimensionMismatchException" ], [ "divide", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure divide(final DerivativeStructure a) throws DimensionMismatchException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure createConstant(final double c)" ], [ "asinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T asinh()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5, double arg6, T arg7)" ], [ "abs", "org.apache.commons.math3", "RealFieldElement", "public abstract T abs()" ], [ "acosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T acosh()" ], [ "floor", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure floor()" ], [ "cbrt", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure cbrt()" ], [ "divide", "org.apache.commons.math3", "FieldElement", "public abstract T divide(T arg0) throws NullArgumentException, MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure copySign(final DerivativeStructure sign)" ], [ "acos", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure acos()" ], [ "hypot", "org.apache.commons.math3", "RealFieldElement", "public abstract T hypot(T arg0) throws DimensionMismatchException" ], [ "exp", "org.apache.commons.math3", "RealFieldElement", "public abstract T exp()" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure pow(final double p)" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "getReal", "org.apache.commons.math3", "RealFieldElement", "public abstract double getReal()" ], [ "round", "org.apache.commons.math3", "RealFieldElement", "public abstract long round()" ], [ "reciprocal", "org.apache.commons.math3", "FieldElement", "public abstract T reciprocal() throws MathArithmeticException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 13511,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.analysis.differentiation",
  "className" : "DerivativeStructure",
  "javadocTag" : "@throws DimensionMismatchException if number of free parameters\nor orders do not match",
  "methodJavadoc" : "    /** {@inheritDoc}\n     * @throws DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */",
  "methodSourceCode" : "public DerivativeStructure multiply(final DerivativeStructure a) throws DimensionMismatchException{\n    compiler.checkCompatibility(a.compiler);\n    final DerivativeStructure result = new DerivativeStructure(compiler);\n    compiler.multiply(data, 0, a.data, 0, result.data, 0);\n    return result;\n}",
  "classJavadoc" : "/** Class representing both the value and the differentials of a function.\n * <p>This class is the workhorse of the differentiation package.</p>\n * <p>This class is an implementation of the extension to Rall's\n * numbers described in Dan Kalman's paper <a\n * href=\"http://www1.american.edu/cas/mathstat/People/kalman/pdffiles/mmgautodiff.pdf\">Doubly\n * Recursive Multivariate Automatic Differentiation</a>, Mathematics Magazine, vol. 75,\n * no. 3, June 2002. Rall's numbers are an extension to the real numbers used\n * throughout mathematical expressions; they hold the derivative together with the\n * value of a function. Dan Kalman's derivative structures hold all partial derivatives\n * up to any specified order, with respect to any number of free parameters. Rall's\n * numbers therefore can be seen as derivative structures for order one derivative and\n * one free parameter, and real numbers can be seen as derivative structures with zero\n * order derivative and no free parameters.</p>\n * <p>{@link DerivativeStructure} instances can be used directly thanks to\n * the arithmetic operators to the mathematical functions provided as\n * methods by this class (+, -, *, /, %, sin, cos ...).</p>\n * <p>Implementing complex expressions by hand using these classes is\n * a tedious and error-prone task but has the advantage of having no limitation\n * on the derivation order despite no requiring users to compute the derivatives by\n * themselves. Implementing complex expression can also be done by developing computation\n * code using standard primitive double values and to use {@link\n * UnivariateFunctionDifferentiator differentiators} to create the {@link\n * DerivativeStructure}-based instances. This method is simpler but may be limited in\n * the accuracy and derivation orders and may be computationally intensive (this is\n * typically the case for {@link FiniteDifferencesDifferentiator finite differences\n * differentiator}.</p>\n * <p>Instances of this class are guaranteed to be immutable.</p>\n * @see DSCompiler\n * @since 3.1\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math3.analysis.differentiation;\n\nimport java.io.Serializable;\n\nimport org.apache.commons.math3.Field;\nimport org.apache.commons.math3.FieldElement;\nimport org.apache.commons.math3.RealFieldElement;\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.exception.MathArithmeticException;\nimport org.apache.commons.math3.exception.NumberIsTooLargeException;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathArrays;\nimport org.apache.commons.math3.util.MathUtils;\n\n/** Class representing both the value and the differentials of a function.\n * <p>This class is the workhorse of the differentiation package.</p>\n * <p>This class is an implementation of the extension to Rall's\n * numbers described in Dan Kalman's paper <a\n * href=\"http://www1.american.edu/cas/mathstat/People/kalman/pdffiles/mmgautodiff.pdf\">Doubly\n * Recursive Multivariate Automatic Differentiation</a>, Mathematics Magazine, vol. 75,\n * no. 3, June 2002. Rall's numbers are an extension to the real numbers used\n * throughout mathematical expressions; they hold the derivative together with the\n * value of a function. Dan Kalman's derivative structures hold all partial derivatives\n * up to any specified order, with respect to any number of free parameters. Rall's\n * numbers therefore can be seen as derivative structures for order one derivative and\n * one free parameter, and real numbers can be seen as derivative structures with zero\n * order derivative and no free parameters.</p>\n * <p>{@link DerivativeStructure} instances can be used directly thanks to\n * the arithmetic operators to the mathematical functions provided as\n * methods by this class (+, -, *, /, %, sin, cos ...).</p>\n * <p>Implementing complex expressions by hand using these classes is\n * a tedious and error-prone task but has the advantage of having no limitation\n * on the derivation order despite no requiring users to compute the derivatives by\n * themselves. Implementing complex expression can also be done by developing computation\n * code using standard primitive double values and to use {@link\n * UnivariateFunctionDifferentiator differentiators} to create the {@link\n * DerivativeStructure}-based instances. This method is simpler but may be limited in\n * the accuracy and derivation orders and may be computationally intensive (this is\n * typically the case for {@link FiniteDifferencesDifferentiator finite differences\n * differentiator}.</p>\n * <p>Instances of this class are guaranteed to be immutable.</p>\n * @see DSCompiler\n * @since 3.1\n */\npublic class DerivativeStructure implements RealFieldElement<DerivativeStructure>, Serializable {\n\n    /** Serializable UID. */\n    private static final long serialVersionUID = 20120730L;\n\n    /** Compiler for the current dimensions. */\n    private transient DSCompiler compiler;\n\n    /** Combined array holding all values. */\n    private final double[] data;\n\n    /** Build an instance with all values and derivatives set to 0.\n     * @param compiler compiler to use for computation\n     */\n    private DerivativeStructure(final DSCompiler compiler) {\n        this.compiler = compiler;\n        this.data     = new double[compiler.getSize()];\n    }\n\n    /** Build an instance with all values and derivatives set to 0.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @throws NumberIsTooLargeException if order is too large\n     */\n    public DerivativeStructure(final int parameters, final int order)\n        throws NumberIsTooLargeException {\n        this(DSCompiler.getCompiler(parameters, order));\n    }\n\n    /** Build an instance representing a constant value.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param value value of the constant\n     * @throws NumberIsTooLargeException if order is too large\n     * @see #DerivativeStructure(int, int, int, double)\n     */\n    public DerivativeStructure(final int parameters, final int order, final double value)\n        throws NumberIsTooLargeException {\n        this(parameters, order);\n        this.data[0] = value;\n    }\n\n    /** Build an instance representing a variable.\n     * <p>Instances built using this constructor are considered\n     * to be the free variables with respect to which differentials\n     * are computed. As such, their differential with respect to\n     * themselves is +1.</p>\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param index index of the variable (from 0 to {@code parameters - 1})\n     * @param value value of the variable\n     * @exception NumberIsTooLargeException if {@code index >= parameters}.\n     * @see #DerivativeStructure(int, int, double)\n     */\n    public DerivativeStructure(final int parameters, final int order,\n                               final int index, final double value)\n        throws NumberIsTooLargeException {\n        this(parameters, order, value);\n\n        if (index >= parameters) {\n            throw new NumberIsTooLargeException(index, parameters, false);\n        }\n\n        if (order > 0) {\n            // the derivative of the variable with respect to itself is 1.\n            data[DSCompiler.getCompiler(index, order).getSize()] = 1.0;\n        }\n\n    }\n\n    /** Linear combination constructor.\n     * The derivative structure built will be a1 * ds1 + a2 * ds2\n     * @param a1 first scale factor\n     * @param ds1 first base (unscaled) derivative structure\n     * @param a2 second scale factor\n     * @param ds2 second base (unscaled) derivative structure\n     * @exception DimensionMismatchException if number of free parameters or orders are inconsistent\n     */\n    public DerivativeStructure(final double a1, final DerivativeStructure ds1,\n                               final double a2, final DerivativeStructure ds2)\n        throws DimensionMismatchException {\n        this(ds1.compiler);\n        compiler.checkCompatibility(ds2.compiler);\n        compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, data, 0);\n    }\n\n    /** Linear combination constructor.\n     * The derivative structure built will be a1 * ds1 + a2 * ds2 + a3 * ds3\n     * @param a1 first scale factor\n     * @param ds1 first base (unscaled) derivative structure\n     * @param a2 second scale factor\n     * @param ds2 second base (unscaled) derivative structure\n     * @param a3 third scale factor\n     * @param ds3 third base (unscaled) derivative structure\n     * @exception DimensionMismatchException if number of free parameters or orders are inconsistent\n     */\n    public DerivativeStructure(final double a1, final DerivativeStructure ds1,\n                               final double a2, final DerivativeStructure ds2,\n                               final double a3, final DerivativeStructure ds3)\n        throws DimensionMismatchException {\n        this(ds1.compiler);\n        compiler.checkCompatibility(ds2.compiler);\n        compiler.checkCompatibility(ds3.compiler);\n        compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, a3, ds3.data, 0, data, 0);\n    }\n\n    /** Linear combination constructor.\n     * The derivative structure built will be a1 * ds1 + a2 * ds2 + a3 * ds3 + a4 * ds4\n     * @param a1 first scale factor\n     * @param ds1 first base (unscaled) derivative structure\n     * @param a2 second scale factor\n     * @param ds2 second base (unscaled) derivative structure\n     * @param a3 third scale factor\n     * @param ds3 third base (unscaled) derivative structure\n     * @param a4 fourth scale factor\n     * @param ds4 fourth base (unscaled) derivative structure\n     * @exception DimensionMismatchException if number of free parameters or orders are inconsistent\n     */\n    public DerivativeStructure(final double a1, final DerivativeStructure ds1,\n                               final double a2, final DerivativeStructure ds2,\n                               final double a3, final DerivativeStructure ds3,\n                               final double a4, final DerivativeStructure ds4)\n        throws DimensionMismatchException {\n        this(ds1.compiler);\n        compiler.checkCompatibility(ds2.compiler);\n        compiler.checkCompatibility(ds3.compiler);\n        compiler.checkCompatibility(ds4.compiler);\n        compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0,\n                                   a3, ds3.data, 0, a4, ds4.data, 0,\n                                   data, 0);\n    }\n\n    /** Build an instance from all its derivatives.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param derivatives derivatives sorted according to\n     * {@link DSCompiler#getPartialDerivativeIndex(int...)}\n     * @exception DimensionMismatchException if derivatives array does not match the\n     * {@link DSCompiler#getSize() size} expected by the compiler\n     * @throws NumberIsTooLargeException if order is too large\n     * @see #getAllDerivatives()\n     */\n    public DerivativeStructure(final int parameters, final int order, final double ... derivatives)\n        throws DimensionMismatchException, NumberIsTooLargeException {\n        this(parameters, order);\n        if (derivatives.length != data.length) {\n            throw new DimensionMismatchException(derivatives.length, data.length);\n        }\n        System.arraycopy(derivatives, 0, data, 0, data.length);\n    }\n\n    /** Copy constructor.\n     * @param ds instance to copy\n     */\n    private DerivativeStructure(final DerivativeStructure ds) {\n        this.compiler = ds.compiler;\n        this.data     = ds.data.clone();\n    }\n\n    /** Get the number of free parameters.\n     * @return number of free parameters\n     */\n    public int getFreeParameters() {\n        return compiler.getFreeParameters();\n    }\n\n    /** Get the derivation order.\n     * @return derivation order\n     */\n    public int getOrder() {\n        return compiler.getOrder();\n    }\n\n    /** Create a constant compatible with instance order and number of parameters.\n     * <p>\n     * This method is a convenience factory method, it simply calls\n     * {@code new DerivativeStructure(getFreeParameters(), getOrder(), c)}\n     * </p>\n     * @param c value of the constant\n     * @return a constant compatible with instance order and number of parameters\n     * @see #DerivativeStructure(int, int, double)\n     * @since 3.3\n     */\n    public DerivativeStructure createConstant(final double c) {\n        return new DerivativeStructure(getFreeParameters(), getOrder(), c);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public double getReal() {\n        return data[0];\n    }\n\n    /** Get the value part of the derivative structure.\n     * @return value part of the derivative structure\n     * @see #getPartialDerivative(int...)\n     */\n    public double getValue() {\n        return data[0];\n    }\n\n    /** Get a partial derivative.\n     * @param orders derivation orders with respect to each variable (if all orders are 0,\n     * the value is returned)\n     * @return partial derivative\n     * @see #getValue()\n     * @exception DimensionMismatchException if the numbers of variables does not\n     * match the instance\n     * @exception NumberIsTooLargeException if sum of derivation orders is larger\n     * than the instance limits\n     */\n    public double getPartialDerivative(final int ... orders)\n        throws DimensionMismatchException, NumberIsTooLargeException {\n        return data[compiler.getPartialDerivativeIndex(orders)];\n    }\n\n    /** Get all partial derivatives.\n     * @return a fresh copy of partial derivatives, in an array sorted according to\n     * {@link DSCompiler#getPartialDerivativeIndex(int...)}\n     */\n    public double[] getAllDerivatives() {\n        return data.clone();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure add(final double a) {\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        ds.data[0] += a;\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */\n    public DerivativeStructure add(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        compiler.add(data, 0, a.data, 0, ds.data, 0);\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure subtract(final double a) {\n        return add(-a);\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */\n    public DerivativeStructure subtract(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        compiler.subtract(data, 0, a.data, 0, ds.data, 0);\n        return ds;\n    }\n\n    /** {@inheritDoc} */\n    public DerivativeStructure multiply(final int n) {\n        return multiply((double) n);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure multiply(final double a) {\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] *= a;\n        }\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */\n    public DerivativeStructure multiply(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.multiply(data, 0, a.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure divide(final double a) {\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] /= a;\n        }\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */\n    public DerivativeStructure divide(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.divide(data, 0, a.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc} */\n    public DerivativeStructure remainder(final double a) {\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        ds.data[0] = FastMath.IEEEremainder(ds.data[0], a);\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure remainder(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.remainder(data, 0, a.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc} */\n    public DerivativeStructure negate() {\n        final DerivativeStructure ds = new DerivativeStructure(compiler);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] = -data[i];\n        }\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure abs() {\n        if (Double.doubleToLongBits(data[0]) < 0) {\n            // we use the bits representation to also handle -0.0\n            return negate();\n        } else {\n            return this;\n        }\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure ceil() {\n        return new DerivativeStructure(compiler.getFreeParameters(),\n                                       compiler.getOrder(),\n                                       FastMath.ceil(data[0]));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure floor() {\n        return new DerivativeStructure(compiler.getFreeParameters(),\n                                       compiler.getOrder(),\n                                       FastMath.floor(data[0]));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure rint() {\n        return new DerivativeStructure(compiler.getFreeParameters(),\n                                       compiler.getOrder(),\n                                       FastMath.rint(data[0]));\n    }\n\n    /** {@inheritDoc} */\n    public long round() {\n        return FastMath.round(data[0]);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure signum() {\n        return new DerivativeStructure(compiler.getFreeParameters(),\n                                       compiler.getOrder(),\n                                       FastMath.signum(data[0]));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure copySign(final DerivativeStructure sign){\n        long m = Double.doubleToLongBits(data[0]);\n        long s = Double.doubleToLongBits(sign.data[0]);\n        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure copySign(final double sign) {\n        long m = Double.doubleToLongBits(data[0]);\n        long s = Double.doubleToLongBits(sign);\n        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /**\n     * Return the exponent of the instance value, removing the bias.\n     * <p>\n     * For double numbers of the form 2<sup>x</sup>, the unbiased\n     * exponent is exactly x.\n     * </p>\n     * @return exponent for instance in IEEE754 representation, without bias\n     */\n    public int getExponent() {\n        return FastMath.getExponent(data[0]);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure scalb(final int n) {\n        final DerivativeStructure ds = new DerivativeStructure(compiler);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] = FastMath.scalb(data[i], n);\n        }\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure hypot(final DerivativeStructure y)\n        throws DimensionMismatchException {\n\n        compiler.checkCompatibility(y.compiler);\n\n        if (Double.isInfinite(data[0]) || Double.isInfinite(y.data[0])) {\n            return new DerivativeStructure(compiler.getFreeParameters(),\n                                           compiler.getFreeParameters(),\n                                           Double.POSITIVE_INFINITY);\n        } else if (Double.isNaN(data[0]) || Double.isNaN(y.data[0])) {\n            return new DerivativeStructure(compiler.getFreeParameters(),\n                                           compiler.getFreeParameters(),\n                                           Double.NaN);\n        } else {\n\n            final int expX = getExponent();\n            final int expY = y.getExponent();\n            if (expX > expY + 27) {\n                // y is neglectible with respect to x\n                return abs();\n            } else if (expY > expX + 27) {\n                // x is neglectible with respect to y\n                return y.abs();\n            } else {\n\n                // find an intermediate scale to avoid both overflow and underflow\n                final int middleExp = (expX + expY) / 2;\n\n                // scale parameters without losing precision\n                final DerivativeStructure scaledX = scalb(-middleExp);\n                final DerivativeStructure scaledY = y.scalb(-middleExp);\n\n                // compute scaled hypotenuse\n                final DerivativeStructure scaledH =\n                        scaledX.multiply(scaledX).add(scaledY.multiply(scaledY)).sqrt();\n\n                // remove scaling\n                return scaledH.scalb(middleExp);\n\n            }\n\n        }\n    }\n\n    /**\n     * Returns the hypotenuse of a triangle with sides {@code x} and {@code y}\n     * - sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)\n     * avoiding intermediate overflow or underflow.\n     *\n     * <ul>\n     * <li> If either argument is infinite, then the result is positive infinity.</li>\n     * <li> else, if either argument is NaN then the result is NaN.</li>\n     * </ul>\n     *\n     * @param x a value\n     * @param y a value\n     * @return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y)\n        throws DimensionMismatchException {\n        return x.hypot(y);\n    }\n\n    /** Compute composition of the instance by a univariate function.\n     * @param f array of value and derivatives of the function at\n     * the current point (i.e. [f({@link #getValue()}),\n     * f'({@link #getValue()}), f''({@link #getValue()})...]).\n     * @return f(this)\n     * @exception DimensionMismatchException if the number of derivatives\n     * in the array is not equal to {@link #getOrder() order} + 1\n     */\n    public DerivativeStructure compose(final double ... f)\n        throws DimensionMismatchException {\n        if (f.length != getOrder() + 1) {\n            throw new DimensionMismatchException(f.length, getOrder() + 1);\n        }\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.compose(data, 0, f, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc} */\n    public DerivativeStructure reciprocal() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.pow(data, 0, -1, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure sqrt() {\n        return rootN(2);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure cbrt() {\n        return rootN(3);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure rootN(final int n) {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.rootN(data, 0, n, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc} */\n    public Field<DerivativeStructure> getField() {\n        return new Field<DerivativeStructure>() {\n\n            /** {@inheritDoc} */\n            public DerivativeStructure getZero() {\n                return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 0.0);\n            }\n\n            /** {@inheritDoc} */\n            public DerivativeStructure getOne() {\n                return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 1.0);\n            }\n\n            /** {@inheritDoc} */\n            public Class<? extends FieldElement<DerivativeStructure>> getRuntimeClass() {\n                return DerivativeStructure.class;\n            }\n\n        };\n    }\n\n    /** Compute a<sup>x</sup> where a is a double and x a {@link DerivativeStructure}\n     * @param a number to exponentiate\n     * @param x power to apply\n     * @return a<sup>x</sup>\n     * @since 3.3\n     */\n    public static DerivativeStructure pow(final double a, final DerivativeStructure x) {\n        final DerivativeStructure result = new DerivativeStructure(x.compiler);\n        x.compiler.pow(a, x.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure pow(final double p) {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.pow(data, 0, p, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure pow(final int n) {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.pow(data, 0, n, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure pow(final DerivativeStructure e)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(e.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.pow(data, 0, e.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure exp() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.exp(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure expm1() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.expm1(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure log() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.log(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure log1p() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.log1p(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** Base 10 logarithm.\n     * @return base 10 logarithm of the instance\n     */\n    public DerivativeStructure log10() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.log10(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure cos() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.cos(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure sin() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.sin(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure tan() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.tan(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure acos() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.acos(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure asin() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.asin(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure atan() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.atan(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure atan2(final DerivativeStructure x)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(x.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.atan2(data, 0, x.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** Two arguments arc tangent operation.\n     * @param y first argument of the arc tangent\n     * @param x second argument of the arc tangent\n     * @return atan2(y, x)\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x)\n        throws DimensionMismatchException {\n        return y.atan2(x);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure cosh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.cosh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure sinh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.sinh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure tanh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.tanh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure acosh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.acosh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure asinh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.asinh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure atanh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.atanh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** Convert radians to degrees, with error of less than 0.5 ULP\n     *  @return instance converted into degrees\n     */\n    public DerivativeStructure toDegrees() {\n        final DerivativeStructure ds = new DerivativeStructure(compiler);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] = FastMath.toDegrees(data[i]);\n        }\n        return ds;\n    }\n\n    /** Convert degrees to radians, with error of less than 0.5 ULP\n     *  @return instance converted into radians\n     */\n    public DerivativeStructure toRadians() {\n        final DerivativeStructure ds = new DerivativeStructure(compiler);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] = FastMath.toRadians(data[i]);\n        }\n        return ds;\n    }\n\n    /** Evaluate Taylor expansion a derivative structure.\n     * @param delta parameters offsets (&Delta;x, &Delta;y, ...)\n     * @return value of the Taylor expansion at x + &Delta;x, y + &Delta;y, ...\n     * @throws MathArithmeticException if factorials becomes too large\n     */\n    public double taylor(final double ... delta) throws MathArithmeticException {\n        return compiler.taylor(data, 0, delta);\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final DerivativeStructure[] a, final DerivativeStructure[] b)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double[] aDouble = new double[a.length];\n        for (int i = 0; i < a.length; ++i) {\n            aDouble[i] = a[i].getValue();\n        }\n        final double[] bDouble = new double[b.length];\n        for (int i = 0; i < b.length; ++i) {\n            bDouble[i] = b[i].getValue();\n        }\n        final double accurateValue = MathArrays.linearCombination(aDouble, bDouble);\n\n        // compute a simple value, with all partial derivatives\n        DerivativeStructure simpleValue = a[0].getField().getZero();\n        for (int i = 0; i < a.length; ++i) {\n            simpleValue = simpleValue.add(a[i].multiply(b[i]));\n        }\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final double[] a, final DerivativeStructure[] b)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double[] bDouble = new double[b.length];\n        for (int i = 0; i < b.length; ++i) {\n            bDouble[i] = b[i].getValue();\n        }\n        final double accurateValue = MathArrays.linearCombination(a, bDouble);\n\n        // compute a simple value, with all partial derivatives\n        DerivativeStructure simpleValue = b[0].getField().getZero();\n        for (int i = 0; i < a.length; ++i) {\n            simpleValue = simpleValue.add(b[i].multiply(a[i]));\n        }\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,\n                                                 final DerivativeStructure a2, final DerivativeStructure b2)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),\n                                                                  a2.getValue(), b2.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,\n                                                 final double a2, final DerivativeStructure b2)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),\n                                                                  a2, b2.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,\n                                                 final DerivativeStructure a2, final DerivativeStructure b2,\n                                                 final DerivativeStructure a3, final DerivativeStructure b3)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),\n                                                                  a2.getValue(), b2.getValue(),\n                                                                  a3.getValue(), b3.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,\n                                                 final double a2, final DerivativeStructure b2,\n                                                 final double a3, final DerivativeStructure b3)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),\n                                                                  a2, b2.getValue(),\n                                                                  a3, b3.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,\n                                                 final DerivativeStructure a2, final DerivativeStructure b2,\n                                                 final DerivativeStructure a3, final DerivativeStructure b3,\n                                                 final DerivativeStructure a4, final DerivativeStructure b4)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),\n                                                                  a2.getValue(), b2.getValue(),\n                                                                  a3.getValue(), b3.getValue(),\n                                                                  a4.getValue(), b4.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3)).add(a4.multiply(b4));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,\n                                                 final double a2, final DerivativeStructure b2,\n                                                 final double a3, final DerivativeStructure b3,\n                                                 final double a4, final DerivativeStructure b4)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),\n                                                                  a2, b2.getValue(),\n                                                                  a3, b3.getValue(),\n                                                                  a4, b4.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3)).add(b4.multiply(a4));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /**\n     * Test for the equality of two derivative structures.\n     * <p>\n     * Derivative structures are considered equal if they have the same number\n     * of free parameters, the same derivation order, and the same derivatives.\n     * </p>\n     * @param other Object to test for equality to this\n     * @return true if two derivative structures are equal\n     * @since 3.2\n     */\n    @Override\n    public boolean equals(Object other) {\n\n        if (this == other) {\n            return true;\n        }\n\n        if (other instanceof DerivativeStructure) {\n            final DerivativeStructure rhs = (DerivativeStructure)other;\n            return (getFreeParameters() == rhs.getFreeParameters()) &&\n                   (getOrder() == rhs.getOrder()) &&\n                   MathArrays.equals(data, rhs.data);\n        }\n\n        return false;\n\n    }\n\n    /**\n     * Get a hashCode for the derivative structure.\n     * @return a hash code value for this object\n     * @since 3.2\n     */\n    @Override\n    public int hashCode() {\n        return 227 + 229 * getFreeParameters() + 233 * getOrder() + 239 * MathUtils.hash(data);\n    }\n\n    /**\n     * Replace the instance with a data transfer object for serialization.\n     * @return data transfer object that will be serialized\n     */\n    private Object writeReplace() {\n        return new DataTransferObject(compiler.getFreeParameters(), compiler.getOrder(), data);\n    }\n\n    /** Internal class used only for serialization. */\n    private static class DataTransferObject implements Serializable {\n\n        /** Serializable UID. */\n        private static final long serialVersionUID = 20120730L;\n\n        /** Number of variables.\n         * @serial\n         */\n        private final int variables;\n\n        /** Derivation order.\n         * @serial\n         */\n        private final int order;\n\n        /** Partial derivatives.\n         * @serial\n         */\n        private final double[] data;\n\n        /** Simple constructor.\n         * @param variables number of variables\n         * @param order derivation order\n         * @param data partial derivatives\n         */\n        DataTransferObject(final int variables, final int order, final double[] data) {\n            this.variables = variables;\n            this.order     = order;\n            this.data      = data;\n        }\n\n        /** Replace the deserialized data transfer object with a {@link DerivativeStructure}.\n         * @return replacement {@link DerivativeStructure}\n         */\n        private Object readResolve() {\n            return new DerivativeStructure(variables, order, data);\n        }\n\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "a", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "atanh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure atanh()" ], [ "scalb", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure scalb(final int n)" ], [ "signum", "org.apache.commons.math3", "RealFieldElement", "public abstract T signum()" ], [ "divide", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure divide(final DerivativeStructure a) throws DimensionMismatchException" ], [ "sinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T sinh()" ], [ "reciprocal", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure reciprocal()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1, final DerivativeStructure a2, final DerivativeStructure b2, final DerivativeStructure a3, final DerivativeStructure b3, final DerivativeStructure a4, final DerivativeStructure b4) throws DimensionMismatchException" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure multiply(final DerivativeStructure a) throws DimensionMismatchException" ], [ "floor", "org.apache.commons.math3", "RealFieldElement", "public abstract T floor()" ], [ "getAllDerivatives", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double[] getAllDerivatives()" ], [ "multiply", "org.apache.commons.math3", "RealFieldElement", "public abstract T multiply(double arg0)" ], [ "rootN", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure rootN(final int n)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5, T arg6, T arg7)" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure multiply(final double a)" ], [ "atanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T atanh()" ], [ "tanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T tanh()" ], [ "toRadians", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure toRadians()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1, final DerivativeStructure a2, final DerivativeStructure b2) throws DimensionMismatchException" ], [ "getOrder", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int getOrder()" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(double arg0)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5, double arg6, T arg7)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "reciprocal", "org.apache.commons.math3", "RealFieldElement", "public abstract T reciprocal()" ], [ "getField", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public Field<DerivativeStructure> getField()" ], [ "abs", "org.apache.commons.math3", "RealFieldElement", "public abstract T abs()" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(double arg0)" ], [ "taylor", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double taylor(final double... delta) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure pow(final int n)" ], [ "subtract", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure subtract(final double a)" ], [ "acosh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure acosh()" ], [ "expm1", "org.apache.commons.math3", "RealFieldElement", "public abstract T expm1()" ], [ "sin", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure sin()" ], [ "acos", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure acos()" ], [ "copySign", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure copySign(final DerivativeStructure sign)" ], [ "log", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure log()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "add", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure add(final double a)" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(int arg0)" ], [ "sinh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure sinh()" ], [ "add", "org.apache.commons.math3", "FieldElement", "public abstract T add(T arg0) throws NullArgumentException" ], [ "getValue", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double getValue()" ], [ "subtract", "org.apache.commons.math3", "RealFieldElement", "public abstract T subtract(double arg0)" ], [ "copySign", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure copySign(final double sign)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "divide", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure divide(final double a)" ], [ "compose", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure compose(final double... f) throws DimensionMismatchException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure createConstant(final double c)" ], [ "exp", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure exp()" ], [ "rootN", "org.apache.commons.math3", "RealFieldElement", "public abstract T rootN(int arg0)" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1, final double a2, final DerivativeStructure b2, final double a3, final DerivativeStructure b3, final double a4, final DerivativeStructure b4) throws DimensionMismatchException" ], [ "hashCode", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int hashCode()" ], [ "log1p", "org.apache.commons.math3", "RealFieldElement", "public abstract T log1p()" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(T arg0) throws DimensionMismatchException" ], [ "subtract", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure subtract(final DerivativeStructure a) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3)" ], [ "negate", "org.apache.commons.math3", "FieldElement", "public abstract T negate()" ], [ "acosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T acosh()" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(double arg0)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure hypot(final DerivativeStructure y) throws DimensionMismatchException" ], [ "subtract", "org.apache.commons.math3", "FieldElement", "public abstract T subtract(T arg0) throws NullArgumentException" ], [ "floor", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure floor()" ], [ "cos", "org.apache.commons.math3", "RealFieldElement", "public abstract T cos()" ], [ "rint", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure rint()" ], [ "remainder", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure remainder(final double a)" ], [ "atan", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final double[] a, final DerivativeStructure[] b) throws DimensionMismatchException" ], [ "tan", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure tan()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3)" ], [ "log1p", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure log1p()" ], [ "atan", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure atan()" ], [ "sqrt", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure sqrt()" ], [ "getFreeParameters", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int getFreeParameters()" ], [ "signum", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure signum()" ], [ "getPartialDerivative", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double getPartialDerivative(final int... orders) throws DimensionMismatchException, NumberIsTooLargeException" ], [ "getField", "org.apache.commons.math3", "FieldElement", "public abstract Field<T> getField()" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(T arg0)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure pow(final DerivativeStructure e) throws DimensionMismatchException" ], [ "rint", "org.apache.commons.math3", "RealFieldElement", "public abstract T rint()" ], [ "round", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public long round()" ], [ "abs", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure abs()" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure pow(final double p)" ], [ "cosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T cosh()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure multiply(final int n)" ], [ "scalb", "org.apache.commons.math3", "RealFieldElement", "public abstract T scalb(int arg0)" ], [ "cbrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T cbrt()" ], [ "asinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T asinh()" ], [ "log10", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure log10()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1, final double a2, final DerivativeStructure b2) throws DimensionMismatchException" ], [ "exp", "org.apache.commons.math3", "RealFieldElement", "public abstract T exp()" ], [ "cos", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure cos()" ], [ "asin", "org.apache.commons.math3", "RealFieldElement", "public abstract T asin()" ], [ "ceil", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure ceil()" ], [ "expm1", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure expm1()" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure atan2(final DerivativeStructure x) throws DimensionMismatchException" ], [ "toDegrees", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure toDegrees()" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(T arg0) throws NullArgumentException" ], [ "add", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure add(final DerivativeStructure a) throws DimensionMismatchException" ], [ "asinh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure asinh()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final DerivativeStructure[] a, final DerivativeStructure[] b) throws DimensionMismatchException" ], [ "getExponent", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int getExponent()" ], [ "divide", "org.apache.commons.math3", "RealFieldElement", "public abstract T divide(double arg0)" ], [ "equals", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public boolean equals(Object other)" ], [ "divide", "org.apache.commons.math3", "FieldElement", "public abstract T divide(T arg0) throws NullArgumentException, MathArithmeticException" ], [ "acos", "org.apache.commons.math3", "RealFieldElement", "public abstract T acos()" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(T arg0) throws DimensionMismatchException" ], [ "add", "org.apache.commons.math3", "RealFieldElement", "public abstract T add(double arg0)" ], [ "atan2", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan2(T arg0) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5)" ], [ "tan", "org.apache.commons.math3", "RealFieldElement", "public abstract T tan()" ], [ "sin", "org.apache.commons.math3", "RealFieldElement", "public abstract T sin()" ], [ "log", "org.apache.commons.math3", "RealFieldElement", "public abstract T log()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1, final DerivativeStructure a2, final DerivativeStructure b2, final DerivativeStructure a3, final DerivativeStructure b3) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1, final double a2, final DerivativeStructure b2, final double a3, final DerivativeStructure b3) throws DimensionMismatchException" ], [ "asin", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure asin()" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(int arg0)" ], [ "getReal", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double getReal()" ], [ "tanh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure tanh()" ], [ "cbrt", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure cbrt()" ], [ "hypot", "org.apache.commons.math3", "RealFieldElement", "public abstract T hypot(T arg0) throws DimensionMismatchException" ], [ "cosh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure cosh()" ], [ "sqrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T sqrt()" ], [ "ceil", "org.apache.commons.math3", "RealFieldElement", "public abstract T ceil()" ], [ "negate", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure negate()" ], [ "remainder", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure remainder(final DerivativeStructure a) throws DimensionMismatchException" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "getReal", "org.apache.commons.math3", "RealFieldElement", "public abstract double getReal()" ], [ "round", "org.apache.commons.math3", "RealFieldElement", "public abstract long round()" ], [ "reciprocal", "org.apache.commons.math3", "FieldElement", "public abstract T reciprocal() throws MathArithmeticException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 13512,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.analysis.differentiation",
  "className" : "DerivativeStructure",
  "javadocTag" : "@throws DimensionMismatchException if number of free parameters\nor orders do not match",
  "methodJavadoc" : "    /** {@inheritDoc}\n     * @throws DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */",
  "methodSourceCode" : "public DerivativeStructure divide(final DerivativeStructure a) throws DimensionMismatchException{\n    compiler.checkCompatibility(a.compiler);\n    final DerivativeStructure result = new DerivativeStructure(compiler);\n    compiler.divide(data, 0, a.data, 0, result.data, 0);\n    return result;\n}",
  "classJavadoc" : "/** Class representing both the value and the differentials of a function.\n * <p>This class is the workhorse of the differentiation package.</p>\n * <p>This class is an implementation of the extension to Rall's\n * numbers described in Dan Kalman's paper <a\n * href=\"http://www1.american.edu/cas/mathstat/People/kalman/pdffiles/mmgautodiff.pdf\">Doubly\n * Recursive Multivariate Automatic Differentiation</a>, Mathematics Magazine, vol. 75,\n * no. 3, June 2002. Rall's numbers are an extension to the real numbers used\n * throughout mathematical expressions; they hold the derivative together with the\n * value of a function. Dan Kalman's derivative structures hold all partial derivatives\n * up to any specified order, with respect to any number of free parameters. Rall's\n * numbers therefore can be seen as derivative structures for order one derivative and\n * one free parameter, and real numbers can be seen as derivative structures with zero\n * order derivative and no free parameters.</p>\n * <p>{@link DerivativeStructure} instances can be used directly thanks to\n * the arithmetic operators to the mathematical functions provided as\n * methods by this class (+, -, *, /, %, sin, cos ...).</p>\n * <p>Implementing complex expressions by hand using these classes is\n * a tedious and error-prone task but has the advantage of having no limitation\n * on the derivation order despite no requiring users to compute the derivatives by\n * themselves. Implementing complex expression can also be done by developing computation\n * code using standard primitive double values and to use {@link\n * UnivariateFunctionDifferentiator differentiators} to create the {@link\n * DerivativeStructure}-based instances. This method is simpler but may be limited in\n * the accuracy and derivation orders and may be computationally intensive (this is\n * typically the case for {@link FiniteDifferencesDifferentiator finite differences\n * differentiator}.</p>\n * <p>Instances of this class are guaranteed to be immutable.</p>\n * @see DSCompiler\n * @since 3.1\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math3.analysis.differentiation;\n\nimport java.io.Serializable;\n\nimport org.apache.commons.math3.Field;\nimport org.apache.commons.math3.FieldElement;\nimport org.apache.commons.math3.RealFieldElement;\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.exception.MathArithmeticException;\nimport org.apache.commons.math3.exception.NumberIsTooLargeException;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathArrays;\nimport org.apache.commons.math3.util.MathUtils;\n\n/** Class representing both the value and the differentials of a function.\n * <p>This class is the workhorse of the differentiation package.</p>\n * <p>This class is an implementation of the extension to Rall's\n * numbers described in Dan Kalman's paper <a\n * href=\"http://www1.american.edu/cas/mathstat/People/kalman/pdffiles/mmgautodiff.pdf\">Doubly\n * Recursive Multivariate Automatic Differentiation</a>, Mathematics Magazine, vol. 75,\n * no. 3, June 2002. Rall's numbers are an extension to the real numbers used\n * throughout mathematical expressions; they hold the derivative together with the\n * value of a function. Dan Kalman's derivative structures hold all partial derivatives\n * up to any specified order, with respect to any number of free parameters. Rall's\n * numbers therefore can be seen as derivative structures for order one derivative and\n * one free parameter, and real numbers can be seen as derivative structures with zero\n * order derivative and no free parameters.</p>\n * <p>{@link DerivativeStructure} instances can be used directly thanks to\n * the arithmetic operators to the mathematical functions provided as\n * methods by this class (+, -, *, /, %, sin, cos ...).</p>\n * <p>Implementing complex expressions by hand using these classes is\n * a tedious and error-prone task but has the advantage of having no limitation\n * on the derivation order despite no requiring users to compute the derivatives by\n * themselves. Implementing complex expression can also be done by developing computation\n * code using standard primitive double values and to use {@link\n * UnivariateFunctionDifferentiator differentiators} to create the {@link\n * DerivativeStructure}-based instances. This method is simpler but may be limited in\n * the accuracy and derivation orders and may be computationally intensive (this is\n * typically the case for {@link FiniteDifferencesDifferentiator finite differences\n * differentiator}.</p>\n * <p>Instances of this class are guaranteed to be immutable.</p>\n * @see DSCompiler\n * @since 3.1\n */\npublic class DerivativeStructure implements RealFieldElement<DerivativeStructure>, Serializable {\n\n    /** Serializable UID. */\n    private static final long serialVersionUID = 20120730L;\n\n    /** Compiler for the current dimensions. */\n    private transient DSCompiler compiler;\n\n    /** Combined array holding all values. */\n    private final double[] data;\n\n    /** Build an instance with all values and derivatives set to 0.\n     * @param compiler compiler to use for computation\n     */\n    private DerivativeStructure(final DSCompiler compiler) {\n        this.compiler = compiler;\n        this.data     = new double[compiler.getSize()];\n    }\n\n    /** Build an instance with all values and derivatives set to 0.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @throws NumberIsTooLargeException if order is too large\n     */\n    public DerivativeStructure(final int parameters, final int order)\n        throws NumberIsTooLargeException {\n        this(DSCompiler.getCompiler(parameters, order));\n    }\n\n    /** Build an instance representing a constant value.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param value value of the constant\n     * @throws NumberIsTooLargeException if order is too large\n     * @see #DerivativeStructure(int, int, int, double)\n     */\n    public DerivativeStructure(final int parameters, final int order, final double value)\n        throws NumberIsTooLargeException {\n        this(parameters, order);\n        this.data[0] = value;\n    }\n\n    /** Build an instance representing a variable.\n     * <p>Instances built using this constructor are considered\n     * to be the free variables with respect to which differentials\n     * are computed. As such, their differential with respect to\n     * themselves is +1.</p>\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param index index of the variable (from 0 to {@code parameters - 1})\n     * @param value value of the variable\n     * @exception NumberIsTooLargeException if {@code index >= parameters}.\n     * @see #DerivativeStructure(int, int, double)\n     */\n    public DerivativeStructure(final int parameters, final int order,\n                               final int index, final double value)\n        throws NumberIsTooLargeException {\n        this(parameters, order, value);\n\n        if (index >= parameters) {\n            throw new NumberIsTooLargeException(index, parameters, false);\n        }\n\n        if (order > 0) {\n            // the derivative of the variable with respect to itself is 1.\n            data[DSCompiler.getCompiler(index, order).getSize()] = 1.0;\n        }\n\n    }\n\n    /** Linear combination constructor.\n     * The derivative structure built will be a1 * ds1 + a2 * ds2\n     * @param a1 first scale factor\n     * @param ds1 first base (unscaled) derivative structure\n     * @param a2 second scale factor\n     * @param ds2 second base (unscaled) derivative structure\n     * @exception DimensionMismatchException if number of free parameters or orders are inconsistent\n     */\n    public DerivativeStructure(final double a1, final DerivativeStructure ds1,\n                               final double a2, final DerivativeStructure ds2)\n        throws DimensionMismatchException {\n        this(ds1.compiler);\n        compiler.checkCompatibility(ds2.compiler);\n        compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, data, 0);\n    }\n\n    /** Linear combination constructor.\n     * The derivative structure built will be a1 * ds1 + a2 * ds2 + a3 * ds3\n     * @param a1 first scale factor\n     * @param ds1 first base (unscaled) derivative structure\n     * @param a2 second scale factor\n     * @param ds2 second base (unscaled) derivative structure\n     * @param a3 third scale factor\n     * @param ds3 third base (unscaled) derivative structure\n     * @exception DimensionMismatchException if number of free parameters or orders are inconsistent\n     */\n    public DerivativeStructure(final double a1, final DerivativeStructure ds1,\n                               final double a2, final DerivativeStructure ds2,\n                               final double a3, final DerivativeStructure ds3)\n        throws DimensionMismatchException {\n        this(ds1.compiler);\n        compiler.checkCompatibility(ds2.compiler);\n        compiler.checkCompatibility(ds3.compiler);\n        compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, a3, ds3.data, 0, data, 0);\n    }\n\n    /** Linear combination constructor.\n     * The derivative structure built will be a1 * ds1 + a2 * ds2 + a3 * ds3 + a4 * ds4\n     * @param a1 first scale factor\n     * @param ds1 first base (unscaled) derivative structure\n     * @param a2 second scale factor\n     * @param ds2 second base (unscaled) derivative structure\n     * @param a3 third scale factor\n     * @param ds3 third base (unscaled) derivative structure\n     * @param a4 fourth scale factor\n     * @param ds4 fourth base (unscaled) derivative structure\n     * @exception DimensionMismatchException if number of free parameters or orders are inconsistent\n     */\n    public DerivativeStructure(final double a1, final DerivativeStructure ds1,\n                               final double a2, final DerivativeStructure ds2,\n                               final double a3, final DerivativeStructure ds3,\n                               final double a4, final DerivativeStructure ds4)\n        throws DimensionMismatchException {\n        this(ds1.compiler);\n        compiler.checkCompatibility(ds2.compiler);\n        compiler.checkCompatibility(ds3.compiler);\n        compiler.checkCompatibility(ds4.compiler);\n        compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0,\n                                   a3, ds3.data, 0, a4, ds4.data, 0,\n                                   data, 0);\n    }\n\n    /** Build an instance from all its derivatives.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param derivatives derivatives sorted according to\n     * {@link DSCompiler#getPartialDerivativeIndex(int...)}\n     * @exception DimensionMismatchException if derivatives array does not match the\n     * {@link DSCompiler#getSize() size} expected by the compiler\n     * @throws NumberIsTooLargeException if order is too large\n     * @see #getAllDerivatives()\n     */\n    public DerivativeStructure(final int parameters, final int order, final double ... derivatives)\n        throws DimensionMismatchException, NumberIsTooLargeException {\n        this(parameters, order);\n        if (derivatives.length != data.length) {\n            throw new DimensionMismatchException(derivatives.length, data.length);\n        }\n        System.arraycopy(derivatives, 0, data, 0, data.length);\n    }\n\n    /** Copy constructor.\n     * @param ds instance to copy\n     */\n    private DerivativeStructure(final DerivativeStructure ds) {\n        this.compiler = ds.compiler;\n        this.data     = ds.data.clone();\n    }\n\n    /** Get the number of free parameters.\n     * @return number of free parameters\n     */\n    public int getFreeParameters() {\n        return compiler.getFreeParameters();\n    }\n\n    /** Get the derivation order.\n     * @return derivation order\n     */\n    public int getOrder() {\n        return compiler.getOrder();\n    }\n\n    /** Create a constant compatible with instance order and number of parameters.\n     * <p>\n     * This method is a convenience factory method, it simply calls\n     * {@code new DerivativeStructure(getFreeParameters(), getOrder(), c)}\n     * </p>\n     * @param c value of the constant\n     * @return a constant compatible with instance order and number of parameters\n     * @see #DerivativeStructure(int, int, double)\n     * @since 3.3\n     */\n    public DerivativeStructure createConstant(final double c) {\n        return new DerivativeStructure(getFreeParameters(), getOrder(), c);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public double getReal() {\n        return data[0];\n    }\n\n    /** Get the value part of the derivative structure.\n     * @return value part of the derivative structure\n     * @see #getPartialDerivative(int...)\n     */\n    public double getValue() {\n        return data[0];\n    }\n\n    /** Get a partial derivative.\n     * @param orders derivation orders with respect to each variable (if all orders are 0,\n     * the value is returned)\n     * @return partial derivative\n     * @see #getValue()\n     * @exception DimensionMismatchException if the numbers of variables does not\n     * match the instance\n     * @exception NumberIsTooLargeException if sum of derivation orders is larger\n     * than the instance limits\n     */\n    public double getPartialDerivative(final int ... orders)\n        throws DimensionMismatchException, NumberIsTooLargeException {\n        return data[compiler.getPartialDerivativeIndex(orders)];\n    }\n\n    /** Get all partial derivatives.\n     * @return a fresh copy of partial derivatives, in an array sorted according to\n     * {@link DSCompiler#getPartialDerivativeIndex(int...)}\n     */\n    public double[] getAllDerivatives() {\n        return data.clone();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure add(final double a) {\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        ds.data[0] += a;\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */\n    public DerivativeStructure add(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        compiler.add(data, 0, a.data, 0, ds.data, 0);\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure subtract(final double a) {\n        return add(-a);\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */\n    public DerivativeStructure subtract(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        compiler.subtract(data, 0, a.data, 0, ds.data, 0);\n        return ds;\n    }\n\n    /** {@inheritDoc} */\n    public DerivativeStructure multiply(final int n) {\n        return multiply((double) n);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure multiply(final double a) {\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] *= a;\n        }\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */\n    public DerivativeStructure multiply(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.multiply(data, 0, a.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure divide(final double a) {\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] /= a;\n        }\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */\n    public DerivativeStructure divide(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.divide(data, 0, a.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc} */\n    public DerivativeStructure remainder(final double a) {\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        ds.data[0] = FastMath.IEEEremainder(ds.data[0], a);\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure remainder(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.remainder(data, 0, a.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc} */\n    public DerivativeStructure negate() {\n        final DerivativeStructure ds = new DerivativeStructure(compiler);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] = -data[i];\n        }\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure abs() {\n        if (Double.doubleToLongBits(data[0]) < 0) {\n            // we use the bits representation to also handle -0.0\n            return negate();\n        } else {\n            return this;\n        }\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure ceil() {\n        return new DerivativeStructure(compiler.getFreeParameters(),\n                                       compiler.getOrder(),\n                                       FastMath.ceil(data[0]));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure floor() {\n        return new DerivativeStructure(compiler.getFreeParameters(),\n                                       compiler.getOrder(),\n                                       FastMath.floor(data[0]));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure rint() {\n        return new DerivativeStructure(compiler.getFreeParameters(),\n                                       compiler.getOrder(),\n                                       FastMath.rint(data[0]));\n    }\n\n    /** {@inheritDoc} */\n    public long round() {\n        return FastMath.round(data[0]);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure signum() {\n        return new DerivativeStructure(compiler.getFreeParameters(),\n                                       compiler.getOrder(),\n                                       FastMath.signum(data[0]));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure copySign(final DerivativeStructure sign){\n        long m = Double.doubleToLongBits(data[0]);\n        long s = Double.doubleToLongBits(sign.data[0]);\n        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure copySign(final double sign) {\n        long m = Double.doubleToLongBits(data[0]);\n        long s = Double.doubleToLongBits(sign);\n        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /**\n     * Return the exponent of the instance value, removing the bias.\n     * <p>\n     * For double numbers of the form 2<sup>x</sup>, the unbiased\n     * exponent is exactly x.\n     * </p>\n     * @return exponent for instance in IEEE754 representation, without bias\n     */\n    public int getExponent() {\n        return FastMath.getExponent(data[0]);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure scalb(final int n) {\n        final DerivativeStructure ds = new DerivativeStructure(compiler);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] = FastMath.scalb(data[i], n);\n        }\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure hypot(final DerivativeStructure y)\n        throws DimensionMismatchException {\n\n        compiler.checkCompatibility(y.compiler);\n\n        if (Double.isInfinite(data[0]) || Double.isInfinite(y.data[0])) {\n            return new DerivativeStructure(compiler.getFreeParameters(),\n                                           compiler.getFreeParameters(),\n                                           Double.POSITIVE_INFINITY);\n        } else if (Double.isNaN(data[0]) || Double.isNaN(y.data[0])) {\n            return new DerivativeStructure(compiler.getFreeParameters(),\n                                           compiler.getFreeParameters(),\n                                           Double.NaN);\n        } else {\n\n            final int expX = getExponent();\n            final int expY = y.getExponent();\n            if (expX > expY + 27) {\n                // y is neglectible with respect to x\n                return abs();\n            } else if (expY > expX + 27) {\n                // x is neglectible with respect to y\n                return y.abs();\n            } else {\n\n                // find an intermediate scale to avoid both overflow and underflow\n                final int middleExp = (expX + expY) / 2;\n\n                // scale parameters without losing precision\n                final DerivativeStructure scaledX = scalb(-middleExp);\n                final DerivativeStructure scaledY = y.scalb(-middleExp);\n\n                // compute scaled hypotenuse\n                final DerivativeStructure scaledH =\n                        scaledX.multiply(scaledX).add(scaledY.multiply(scaledY)).sqrt();\n\n                // remove scaling\n                return scaledH.scalb(middleExp);\n\n            }\n\n        }\n    }\n\n    /**\n     * Returns the hypotenuse of a triangle with sides {@code x} and {@code y}\n     * - sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)\n     * avoiding intermediate overflow or underflow.\n     *\n     * <ul>\n     * <li> If either argument is infinite, then the result is positive infinity.</li>\n     * <li> else, if either argument is NaN then the result is NaN.</li>\n     * </ul>\n     *\n     * @param x a value\n     * @param y a value\n     * @return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y)\n        throws DimensionMismatchException {\n        return x.hypot(y);\n    }\n\n    /** Compute composition of the instance by a univariate function.\n     * @param f array of value and derivatives of the function at\n     * the current point (i.e. [f({@link #getValue()}),\n     * f'({@link #getValue()}), f''({@link #getValue()})...]).\n     * @return f(this)\n     * @exception DimensionMismatchException if the number of derivatives\n     * in the array is not equal to {@link #getOrder() order} + 1\n     */\n    public DerivativeStructure compose(final double ... f)\n        throws DimensionMismatchException {\n        if (f.length != getOrder() + 1) {\n            throw new DimensionMismatchException(f.length, getOrder() + 1);\n        }\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.compose(data, 0, f, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc} */\n    public DerivativeStructure reciprocal() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.pow(data, 0, -1, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure sqrt() {\n        return rootN(2);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure cbrt() {\n        return rootN(3);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure rootN(final int n) {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.rootN(data, 0, n, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc} */\n    public Field<DerivativeStructure> getField() {\n        return new Field<DerivativeStructure>() {\n\n            /** {@inheritDoc} */\n            public DerivativeStructure getZero() {\n                return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 0.0);\n            }\n\n            /** {@inheritDoc} */\n            public DerivativeStructure getOne() {\n                return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 1.0);\n            }\n\n            /** {@inheritDoc} */\n            public Class<? extends FieldElement<DerivativeStructure>> getRuntimeClass() {\n                return DerivativeStructure.class;\n            }\n\n        };\n    }\n\n    /** Compute a<sup>x</sup> where a is a double and x a {@link DerivativeStructure}\n     * @param a number to exponentiate\n     * @param x power to apply\n     * @return a<sup>x</sup>\n     * @since 3.3\n     */\n    public static DerivativeStructure pow(final double a, final DerivativeStructure x) {\n        final DerivativeStructure result = new DerivativeStructure(x.compiler);\n        x.compiler.pow(a, x.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure pow(final double p) {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.pow(data, 0, p, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure pow(final int n) {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.pow(data, 0, n, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure pow(final DerivativeStructure e)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(e.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.pow(data, 0, e.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure exp() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.exp(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure expm1() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.expm1(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure log() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.log(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure log1p() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.log1p(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** Base 10 logarithm.\n     * @return base 10 logarithm of the instance\n     */\n    public DerivativeStructure log10() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.log10(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure cos() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.cos(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure sin() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.sin(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure tan() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.tan(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure acos() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.acos(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure asin() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.asin(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure atan() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.atan(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure atan2(final DerivativeStructure x)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(x.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.atan2(data, 0, x.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** Two arguments arc tangent operation.\n     * @param y first argument of the arc tangent\n     * @param x second argument of the arc tangent\n     * @return atan2(y, x)\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x)\n        throws DimensionMismatchException {\n        return y.atan2(x);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure cosh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.cosh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure sinh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.sinh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure tanh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.tanh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure acosh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.acosh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure asinh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.asinh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure atanh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.atanh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** Convert radians to degrees, with error of less than 0.5 ULP\n     *  @return instance converted into degrees\n     */\n    public DerivativeStructure toDegrees() {\n        final DerivativeStructure ds = new DerivativeStructure(compiler);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] = FastMath.toDegrees(data[i]);\n        }\n        return ds;\n    }\n\n    /** Convert degrees to radians, with error of less than 0.5 ULP\n     *  @return instance converted into radians\n     */\n    public DerivativeStructure toRadians() {\n        final DerivativeStructure ds = new DerivativeStructure(compiler);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] = FastMath.toRadians(data[i]);\n        }\n        return ds;\n    }\n\n    /** Evaluate Taylor expansion a derivative structure.\n     * @param delta parameters offsets (&Delta;x, &Delta;y, ...)\n     * @return value of the Taylor expansion at x + &Delta;x, y + &Delta;y, ...\n     * @throws MathArithmeticException if factorials becomes too large\n     */\n    public double taylor(final double ... delta) throws MathArithmeticException {\n        return compiler.taylor(data, 0, delta);\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final DerivativeStructure[] a, final DerivativeStructure[] b)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double[] aDouble = new double[a.length];\n        for (int i = 0; i < a.length; ++i) {\n            aDouble[i] = a[i].getValue();\n        }\n        final double[] bDouble = new double[b.length];\n        for (int i = 0; i < b.length; ++i) {\n            bDouble[i] = b[i].getValue();\n        }\n        final double accurateValue = MathArrays.linearCombination(aDouble, bDouble);\n\n        // compute a simple value, with all partial derivatives\n        DerivativeStructure simpleValue = a[0].getField().getZero();\n        for (int i = 0; i < a.length; ++i) {\n            simpleValue = simpleValue.add(a[i].multiply(b[i]));\n        }\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final double[] a, final DerivativeStructure[] b)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double[] bDouble = new double[b.length];\n        for (int i = 0; i < b.length; ++i) {\n            bDouble[i] = b[i].getValue();\n        }\n        final double accurateValue = MathArrays.linearCombination(a, bDouble);\n\n        // compute a simple value, with all partial derivatives\n        DerivativeStructure simpleValue = b[0].getField().getZero();\n        for (int i = 0; i < a.length; ++i) {\n            simpleValue = simpleValue.add(b[i].multiply(a[i]));\n        }\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,\n                                                 final DerivativeStructure a2, final DerivativeStructure b2)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),\n                                                                  a2.getValue(), b2.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,\n                                                 final double a2, final DerivativeStructure b2)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),\n                                                                  a2, b2.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,\n                                                 final DerivativeStructure a2, final DerivativeStructure b2,\n                                                 final DerivativeStructure a3, final DerivativeStructure b3)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),\n                                                                  a2.getValue(), b2.getValue(),\n                                                                  a3.getValue(), b3.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,\n                                                 final double a2, final DerivativeStructure b2,\n                                                 final double a3, final DerivativeStructure b3)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),\n                                                                  a2, b2.getValue(),\n                                                                  a3, b3.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,\n                                                 final DerivativeStructure a2, final DerivativeStructure b2,\n                                                 final DerivativeStructure a3, final DerivativeStructure b3,\n                                                 final DerivativeStructure a4, final DerivativeStructure b4)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),\n                                                                  a2.getValue(), b2.getValue(),\n                                                                  a3.getValue(), b3.getValue(),\n                                                                  a4.getValue(), b4.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3)).add(a4.multiply(b4));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,\n                                                 final double a2, final DerivativeStructure b2,\n                                                 final double a3, final DerivativeStructure b3,\n                                                 final double a4, final DerivativeStructure b4)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),\n                                                                  a2, b2.getValue(),\n                                                                  a3, b3.getValue(),\n                                                                  a4, b4.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3)).add(b4.multiply(a4));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /**\n     * Test for the equality of two derivative structures.\n     * <p>\n     * Derivative structures are considered equal if they have the same number\n     * of free parameters, the same derivation order, and the same derivatives.\n     * </p>\n     * @param other Object to test for equality to this\n     * @return true if two derivative structures are equal\n     * @since 3.2\n     */\n    @Override\n    public boolean equals(Object other) {\n\n        if (this == other) {\n            return true;\n        }\n\n        if (other instanceof DerivativeStructure) {\n            final DerivativeStructure rhs = (DerivativeStructure)other;\n            return (getFreeParameters() == rhs.getFreeParameters()) &&\n                   (getOrder() == rhs.getOrder()) &&\n                   MathArrays.equals(data, rhs.data);\n        }\n\n        return false;\n\n    }\n\n    /**\n     * Get a hashCode for the derivative structure.\n     * @return a hash code value for this object\n     * @since 3.2\n     */\n    @Override\n    public int hashCode() {\n        return 227 + 229 * getFreeParameters() + 233 * getOrder() + 239 * MathUtils.hash(data);\n    }\n\n    /**\n     * Replace the instance with a data transfer object for serialization.\n     * @return data transfer object that will be serialized\n     */\n    private Object writeReplace() {\n        return new DataTransferObject(compiler.getFreeParameters(), compiler.getOrder(), data);\n    }\n\n    /** Internal class used only for serialization. */\n    private static class DataTransferObject implements Serializable {\n\n        /** Serializable UID. */\n        private static final long serialVersionUID = 20120730L;\n\n        /** Number of variables.\n         * @serial\n         */\n        private final int variables;\n\n        /** Derivation order.\n         * @serial\n         */\n        private final int order;\n\n        /** Partial derivatives.\n         * @serial\n         */\n        private final double[] data;\n\n        /** Simple constructor.\n         * @param variables number of variables\n         * @param order derivation order\n         * @param data partial derivatives\n         */\n        DataTransferObject(final int variables, final int order, final double[] data) {\n            this.variables = variables;\n            this.order     = order;\n            this.data      = data;\n        }\n\n        /** Replace the deserialized data transfer object with a {@link DerivativeStructure}.\n         * @return replacement {@link DerivativeStructure}\n         */\n        private Object readResolve() {\n            return new DerivativeStructure(variables, order, data);\n        }\n\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "a", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "atanh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure atanh()" ], [ "cosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T cosh()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1, final double a2, final DerivativeStructure b2) throws DimensionMismatchException" ], [ "sinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T sinh()" ], [ "sin", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure sin()" ], [ "cos", "org.apache.commons.math3", "RealFieldElement", "public abstract T cos()" ], [ "expm1", "org.apache.commons.math3", "RealFieldElement", "public abstract T expm1()" ], [ "getField", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public Field<DerivativeStructure> getField()" ], [ "reciprocal", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure reciprocal()" ], [ "add", "org.apache.commons.math3", "RealFieldElement", "public abstract T add(double arg0)" ], [ "rint", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure rint()" ], [ "log", "org.apache.commons.math3", "RealFieldElement", "public abstract T log()" ], [ "abs", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure abs()" ], [ "remainder", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure remainder(final DerivativeStructure a) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1, final DerivativeStructure a2, final DerivativeStructure b2, final DerivativeStructure a3, final DerivativeStructure b3, final DerivativeStructure a4, final DerivativeStructure b4) throws DimensionMismatchException" ], [ "cos", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure cos()" ], [ "add", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure add(final DerivativeStructure a) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final double[] a, final DerivativeStructure[] b) throws DimensionMismatchException" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "tan", "org.apache.commons.math3", "RealFieldElement", "public abstract T tan()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1, final DerivativeStructure a2, final DerivativeStructure b2, final DerivativeStructure a3, final DerivativeStructure b3) throws DimensionMismatchException" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(double arg0)" ], [ "taylor", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double taylor(final double... delta) throws MathArithmeticException" ], [ "log", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure log()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure pow(final DerivativeStructure e) throws DimensionMismatchException" ], [ "getReal", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double getReal()" ], [ "negate", "org.apache.commons.math3", "FieldElement", "public abstract T negate()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "subtract", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure subtract(final double a)" ], [ "floor", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure floor()" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(T arg0) throws NullArgumentException" ], [ "subtract", "org.apache.commons.math3", "FieldElement", "public abstract T subtract(T arg0) throws NullArgumentException" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure hypot(final DerivativeStructure y) throws DimensionMismatchException" ], [ "exp", "org.apache.commons.math3", "RealFieldElement", "public abstract T exp()" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(T arg0) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3)" ], [ "getExponent", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int getExponent()" ], [ "sinh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure sinh()" ], [ "asin", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure asin()" ], [ "tanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T tanh()" ], [ "subtract", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure subtract(final DerivativeStructure a) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure pow(final int n)" ], [ "remainder", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure remainder(final double a)" ], [ "tanh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure tanh()" ], [ "acosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T acosh()" ], [ "cosh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure cosh()" ], [ "toRadians", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure toRadians()" ], [ "copySign", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure copySign(final DerivativeStructure sign)" ], [ "getValue", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double getValue()" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure multiply(final DerivativeStructure a) throws DimensionMismatchException" ], [ "atanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T atanh()" ], [ "add", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure add(final double a)" ], [ "log1p", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure log1p()" ], [ "getAllDerivatives", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double[] getAllDerivatives()" ], [ "getOrder", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int getOrder()" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure multiply(final double a)" ], [ "cbrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T cbrt()" ], [ "hashCode", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int hashCode()" ], [ "floor", "org.apache.commons.math3", "RealFieldElement", "public abstract T floor()" ], [ "getPartialDerivative", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double getPartialDerivative(final int... orders) throws DimensionMismatchException, NumberIsTooLargeException" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure multiply(final int n)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure atan2(final DerivativeStructure x) throws DimensionMismatchException" ], [ "exp", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure exp()" ], [ "abs", "org.apache.commons.math3", "RealFieldElement", "public abstract T abs()" ], [ "log10", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure log10()" ], [ "signum", "org.apache.commons.math3", "RealFieldElement", "public abstract T signum()" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(T arg0)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5, T arg6, T arg7)" ], [ "toDegrees", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure toDegrees()" ], [ "equals", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public boolean equals(Object other)" ], [ "log1p", "org.apache.commons.math3", "RealFieldElement", "public abstract T log1p()" ], [ "atan", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure atan()" ], [ "sin", "org.apache.commons.math3", "RealFieldElement", "public abstract T sin()" ], [ "add", "org.apache.commons.math3", "FieldElement", "public abstract T add(T arg0) throws NullArgumentException" ], [ "acos", "org.apache.commons.math3", "RealFieldElement", "public abstract T acos()" ], [ "hypot", "org.apache.commons.math3", "RealFieldElement", "public abstract T hypot(T arg0) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1, final double a2, final DerivativeStructure b2, final double a3, final DerivativeStructure b3, final double a4, final DerivativeStructure b4) throws DimensionMismatchException" ], [ "round", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public long round()" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure pow(final double p)" ], [ "asinh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure asinh()" ], [ "signum", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure signum()" ], [ "divide", "org.apache.commons.math3", "RealFieldElement", "public abstract T divide(double arg0)" ], [ "sqrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T sqrt()" ], [ "getField", "org.apache.commons.math3", "FieldElement", "public abstract Field<T> getField()" ], [ "atan", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan()" ], [ "acos", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure acos()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final DerivativeStructure[] a, final DerivativeStructure[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1, final double a2, final DerivativeStructure b2, final double a3, final DerivativeStructure b3) throws DimensionMismatchException" ], [ "cbrt", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure cbrt()" ], [ "ceil", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure ceil()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5)" ], [ "copySign", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure copySign(final double sign)" ], [ "rootN", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure rootN(final int n)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(int arg0)" ], [ "divide", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure divide(final double a)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "acosh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure acosh()" ], [ "tan", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure tan()" ], [ "getFreeParameters", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int getFreeParameters()" ], [ "negate", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure negate()" ], [ "rint", "org.apache.commons.math3", "RealFieldElement", "public abstract T rint()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5, double arg6, T arg7)" ], [ "divide", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure divide(final DerivativeStructure a) throws DimensionMismatchException" ], [ "compose", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure compose(final double... f) throws DimensionMismatchException" ], [ "rootN", "org.apache.commons.math3", "RealFieldElement", "public abstract T rootN(int arg0)" ], [ "multiply", "org.apache.commons.math3", "RealFieldElement", "public abstract T multiply(double arg0)" ], [ "divide", "org.apache.commons.math3", "FieldElement", "public abstract T divide(T arg0) throws NullArgumentException, MathArithmeticException" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(int arg0)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3)" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure createConstant(final double c)" ], [ "sqrt", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure sqrt()" ], [ "subtract", "org.apache.commons.math3", "RealFieldElement", "public abstract T subtract(double arg0)" ], [ "asinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T asinh()" ], [ "reciprocal", "org.apache.commons.math3", "RealFieldElement", "public abstract T reciprocal()" ], [ "ceil", "org.apache.commons.math3", "RealFieldElement", "public abstract T ceil()" ], [ "scalb", "org.apache.commons.math3", "RealFieldElement", "public abstract T scalb(int arg0)" ], [ "expm1", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure expm1()" ], [ "scalb", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure scalb(final int n)" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(double arg0)" ], [ "atan2", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan2(T arg0) throws DimensionMismatchException" ], [ "asin", "org.apache.commons.math3", "RealFieldElement", "public abstract T asin()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1, final DerivativeStructure a2, final DerivativeStructure b2) throws DimensionMismatchException" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(T arg0) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(double arg0)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "round", "org.apache.commons.math3", "RealFieldElement", "public abstract long round()" ], [ "getReal", "org.apache.commons.math3", "RealFieldElement", "public abstract double getReal()" ], [ "reciprocal", "org.apache.commons.math3", "FieldElement", "public abstract T reciprocal() throws MathArithmeticException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 13515,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.analysis.differentiation",
  "className" : "DerivativeStructure",
  "javadocTag" : "@throws DimensionMismatchException if number of free parameters\nor orders do not match",
  "methodJavadoc" : "    /** {@inheritDoc}\n     * @throws DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */",
  "methodSourceCode" : "public DerivativeStructure hypot(final DerivativeStructure y) throws DimensionMismatchException{\n    compiler.checkCompatibility(y.compiler);\n    if (Double.isInfinite(data[0]) || Double.isInfinite(y.data[0])) {\n        return new DerivativeStructure(compiler.getFreeParameters(), compiler.getFreeParameters(), Double.POSITIVE_INFINITY);\n    } else if (Double.isNaN(data[0]) || Double.isNaN(y.data[0])) {\n        return new DerivativeStructure(compiler.getFreeParameters(), compiler.getFreeParameters(), Double.NaN);\n    } else {\n        final int expX = getExponent();\n        final int expY = y.getExponent();\n        if (expX > expY + 27) {\n            // y is neglectible with respect to x\n            return abs();\n        } else if (expY > expX + 27) {\n            // x is neglectible with respect to y\n            return y.abs();\n        } else {\n            // find an intermediate scale to avoid both overflow and underflow\n            final int middleExp = (expX + expY) / 2;\n            // scale parameters without losing precision\n            final DerivativeStructure scaledX = scalb(-middleExp);\n            final DerivativeStructure scaledY = y.scalb(-middleExp);\n            // compute scaled hypotenuse\n            final DerivativeStructure scaledH = scaledX.multiply(scaledX).add(scaledY.multiply(scaledY)).sqrt();\n            // remove scaling\n            return scaledH.scalb(middleExp);\n        }\n    }\n}",
  "classJavadoc" : "/** Class representing both the value and the differentials of a function.\n * <p>This class is the workhorse of the differentiation package.</p>\n * <p>This class is an implementation of the extension to Rall's\n * numbers described in Dan Kalman's paper <a\n * href=\"http://www1.american.edu/cas/mathstat/People/kalman/pdffiles/mmgautodiff.pdf\">Doubly\n * Recursive Multivariate Automatic Differentiation</a>, Mathematics Magazine, vol. 75,\n * no. 3, June 2002. Rall's numbers are an extension to the real numbers used\n * throughout mathematical expressions; they hold the derivative together with the\n * value of a function. Dan Kalman's derivative structures hold all partial derivatives\n * up to any specified order, with respect to any number of free parameters. Rall's\n * numbers therefore can be seen as derivative structures for order one derivative and\n * one free parameter, and real numbers can be seen as derivative structures with zero\n * order derivative and no free parameters.</p>\n * <p>{@link DerivativeStructure} instances can be used directly thanks to\n * the arithmetic operators to the mathematical functions provided as\n * methods by this class (+, -, *, /, %, sin, cos ...).</p>\n * <p>Implementing complex expressions by hand using these classes is\n * a tedious and error-prone task but has the advantage of having no limitation\n * on the derivation order despite no requiring users to compute the derivatives by\n * themselves. Implementing complex expression can also be done by developing computation\n * code using standard primitive double values and to use {@link\n * UnivariateFunctionDifferentiator differentiators} to create the {@link\n * DerivativeStructure}-based instances. This method is simpler but may be limited in\n * the accuracy and derivation orders and may be computationally intensive (this is\n * typically the case for {@link FiniteDifferencesDifferentiator finite differences\n * differentiator}.</p>\n * <p>Instances of this class are guaranteed to be immutable.</p>\n * @see DSCompiler\n * @since 3.1\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math3.analysis.differentiation;\n\nimport java.io.Serializable;\n\nimport org.apache.commons.math3.Field;\nimport org.apache.commons.math3.FieldElement;\nimport org.apache.commons.math3.RealFieldElement;\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.exception.MathArithmeticException;\nimport org.apache.commons.math3.exception.NumberIsTooLargeException;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathArrays;\nimport org.apache.commons.math3.util.MathUtils;\n\n/** Class representing both the value and the differentials of a function.\n * <p>This class is the workhorse of the differentiation package.</p>\n * <p>This class is an implementation of the extension to Rall's\n * numbers described in Dan Kalman's paper <a\n * href=\"http://www1.american.edu/cas/mathstat/People/kalman/pdffiles/mmgautodiff.pdf\">Doubly\n * Recursive Multivariate Automatic Differentiation</a>, Mathematics Magazine, vol. 75,\n * no. 3, June 2002. Rall's numbers are an extension to the real numbers used\n * throughout mathematical expressions; they hold the derivative together with the\n * value of a function. Dan Kalman's derivative structures hold all partial derivatives\n * up to any specified order, with respect to any number of free parameters. Rall's\n * numbers therefore can be seen as derivative structures for order one derivative and\n * one free parameter, and real numbers can be seen as derivative structures with zero\n * order derivative and no free parameters.</p>\n * <p>{@link DerivativeStructure} instances can be used directly thanks to\n * the arithmetic operators to the mathematical functions provided as\n * methods by this class (+, -, *, /, %, sin, cos ...).</p>\n * <p>Implementing complex expressions by hand using these classes is\n * a tedious and error-prone task but has the advantage of having no limitation\n * on the derivation order despite no requiring users to compute the derivatives by\n * themselves. Implementing complex expression can also be done by developing computation\n * code using standard primitive double values and to use {@link\n * UnivariateFunctionDifferentiator differentiators} to create the {@link\n * DerivativeStructure}-based instances. This method is simpler but may be limited in\n * the accuracy and derivation orders and may be computationally intensive (this is\n * typically the case for {@link FiniteDifferencesDifferentiator finite differences\n * differentiator}.</p>\n * <p>Instances of this class are guaranteed to be immutable.</p>\n * @see DSCompiler\n * @since 3.1\n */\npublic class DerivativeStructure implements RealFieldElement<DerivativeStructure>, Serializable {\n\n    /** Serializable UID. */\n    private static final long serialVersionUID = 20120730L;\n\n    /** Compiler for the current dimensions. */\n    private transient DSCompiler compiler;\n\n    /** Combined array holding all values. */\n    private final double[] data;\n\n    /** Build an instance with all values and derivatives set to 0.\n     * @param compiler compiler to use for computation\n     */\n    private DerivativeStructure(final DSCompiler compiler) {\n        this.compiler = compiler;\n        this.data     = new double[compiler.getSize()];\n    }\n\n    /** Build an instance with all values and derivatives set to 0.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @throws NumberIsTooLargeException if order is too large\n     */\n    public DerivativeStructure(final int parameters, final int order)\n        throws NumberIsTooLargeException {\n        this(DSCompiler.getCompiler(parameters, order));\n    }\n\n    /** Build an instance representing a constant value.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param value value of the constant\n     * @throws NumberIsTooLargeException if order is too large\n     * @see #DerivativeStructure(int, int, int, double)\n     */\n    public DerivativeStructure(final int parameters, final int order, final double value)\n        throws NumberIsTooLargeException {\n        this(parameters, order);\n        this.data[0] = value;\n    }\n\n    /** Build an instance representing a variable.\n     * <p>Instances built using this constructor are considered\n     * to be the free variables with respect to which differentials\n     * are computed. As such, their differential with respect to\n     * themselves is +1.</p>\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param index index of the variable (from 0 to {@code parameters - 1})\n     * @param value value of the variable\n     * @exception NumberIsTooLargeException if {@code index >= parameters}.\n     * @see #DerivativeStructure(int, int, double)\n     */\n    public DerivativeStructure(final int parameters, final int order,\n                               final int index, final double value)\n        throws NumberIsTooLargeException {\n        this(parameters, order, value);\n\n        if (index >= parameters) {\n            throw new NumberIsTooLargeException(index, parameters, false);\n        }\n\n        if (order > 0) {\n            // the derivative of the variable with respect to itself is 1.\n            data[DSCompiler.getCompiler(index, order).getSize()] = 1.0;\n        }\n\n    }\n\n    /** Linear combination constructor.\n     * The derivative structure built will be a1 * ds1 + a2 * ds2\n     * @param a1 first scale factor\n     * @param ds1 first base (unscaled) derivative structure\n     * @param a2 second scale factor\n     * @param ds2 second base (unscaled) derivative structure\n     * @exception DimensionMismatchException if number of free parameters or orders are inconsistent\n     */\n    public DerivativeStructure(final double a1, final DerivativeStructure ds1,\n                               final double a2, final DerivativeStructure ds2)\n        throws DimensionMismatchException {\n        this(ds1.compiler);\n        compiler.checkCompatibility(ds2.compiler);\n        compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, data, 0);\n    }\n\n    /** Linear combination constructor.\n     * The derivative structure built will be a1 * ds1 + a2 * ds2 + a3 * ds3\n     * @param a1 first scale factor\n     * @param ds1 first base (unscaled) derivative structure\n     * @param a2 second scale factor\n     * @param ds2 second base (unscaled) derivative structure\n     * @param a3 third scale factor\n     * @param ds3 third base (unscaled) derivative structure\n     * @exception DimensionMismatchException if number of free parameters or orders are inconsistent\n     */\n    public DerivativeStructure(final double a1, final DerivativeStructure ds1,\n                               final double a2, final DerivativeStructure ds2,\n                               final double a3, final DerivativeStructure ds3)\n        throws DimensionMismatchException {\n        this(ds1.compiler);\n        compiler.checkCompatibility(ds2.compiler);\n        compiler.checkCompatibility(ds3.compiler);\n        compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, a3, ds3.data, 0, data, 0);\n    }\n\n    /** Linear combination constructor.\n     * The derivative structure built will be a1 * ds1 + a2 * ds2 + a3 * ds3 + a4 * ds4\n     * @param a1 first scale factor\n     * @param ds1 first base (unscaled) derivative structure\n     * @param a2 second scale factor\n     * @param ds2 second base (unscaled) derivative structure\n     * @param a3 third scale factor\n     * @param ds3 third base (unscaled) derivative structure\n     * @param a4 fourth scale factor\n     * @param ds4 fourth base (unscaled) derivative structure\n     * @exception DimensionMismatchException if number of free parameters or orders are inconsistent\n     */\n    public DerivativeStructure(final double a1, final DerivativeStructure ds1,\n                               final double a2, final DerivativeStructure ds2,\n                               final double a3, final DerivativeStructure ds3,\n                               final double a4, final DerivativeStructure ds4)\n        throws DimensionMismatchException {\n        this(ds1.compiler);\n        compiler.checkCompatibility(ds2.compiler);\n        compiler.checkCompatibility(ds3.compiler);\n        compiler.checkCompatibility(ds4.compiler);\n        compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0,\n                                   a3, ds3.data, 0, a4, ds4.data, 0,\n                                   data, 0);\n    }\n\n    /** Build an instance from all its derivatives.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param derivatives derivatives sorted according to\n     * {@link DSCompiler#getPartialDerivativeIndex(int...)}\n     * @exception DimensionMismatchException if derivatives array does not match the\n     * {@link DSCompiler#getSize() size} expected by the compiler\n     * @throws NumberIsTooLargeException if order is too large\n     * @see #getAllDerivatives()\n     */\n    public DerivativeStructure(final int parameters, final int order, final double ... derivatives)\n        throws DimensionMismatchException, NumberIsTooLargeException {\n        this(parameters, order);\n        if (derivatives.length != data.length) {\n            throw new DimensionMismatchException(derivatives.length, data.length);\n        }\n        System.arraycopy(derivatives, 0, data, 0, data.length);\n    }\n\n    /** Copy constructor.\n     * @param ds instance to copy\n     */\n    private DerivativeStructure(final DerivativeStructure ds) {\n        this.compiler = ds.compiler;\n        this.data     = ds.data.clone();\n    }\n\n    /** Get the number of free parameters.\n     * @return number of free parameters\n     */\n    public int getFreeParameters() {\n        return compiler.getFreeParameters();\n    }\n\n    /** Get the derivation order.\n     * @return derivation order\n     */\n    public int getOrder() {\n        return compiler.getOrder();\n    }\n\n    /** Create a constant compatible with instance order and number of parameters.\n     * <p>\n     * This method is a convenience factory method, it simply calls\n     * {@code new DerivativeStructure(getFreeParameters(), getOrder(), c)}\n     * </p>\n     * @param c value of the constant\n     * @return a constant compatible with instance order and number of parameters\n     * @see #DerivativeStructure(int, int, double)\n     * @since 3.3\n     */\n    public DerivativeStructure createConstant(final double c) {\n        return new DerivativeStructure(getFreeParameters(), getOrder(), c);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public double getReal() {\n        return data[0];\n    }\n\n    /** Get the value part of the derivative structure.\n     * @return value part of the derivative structure\n     * @see #getPartialDerivative(int...)\n     */\n    public double getValue() {\n        return data[0];\n    }\n\n    /** Get a partial derivative.\n     * @param orders derivation orders with respect to each variable (if all orders are 0,\n     * the value is returned)\n     * @return partial derivative\n     * @see #getValue()\n     * @exception DimensionMismatchException if the numbers of variables does not\n     * match the instance\n     * @exception NumberIsTooLargeException if sum of derivation orders is larger\n     * than the instance limits\n     */\n    public double getPartialDerivative(final int ... orders)\n        throws DimensionMismatchException, NumberIsTooLargeException {\n        return data[compiler.getPartialDerivativeIndex(orders)];\n    }\n\n    /** Get all partial derivatives.\n     * @return a fresh copy of partial derivatives, in an array sorted according to\n     * {@link DSCompiler#getPartialDerivativeIndex(int...)}\n     */\n    public double[] getAllDerivatives() {\n        return data.clone();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure add(final double a) {\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        ds.data[0] += a;\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */\n    public DerivativeStructure add(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        compiler.add(data, 0, a.data, 0, ds.data, 0);\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure subtract(final double a) {\n        return add(-a);\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */\n    public DerivativeStructure subtract(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        compiler.subtract(data, 0, a.data, 0, ds.data, 0);\n        return ds;\n    }\n\n    /** {@inheritDoc} */\n    public DerivativeStructure multiply(final int n) {\n        return multiply((double) n);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure multiply(final double a) {\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] *= a;\n        }\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */\n    public DerivativeStructure multiply(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.multiply(data, 0, a.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure divide(final double a) {\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] /= a;\n        }\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */\n    public DerivativeStructure divide(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.divide(data, 0, a.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc} */\n    public DerivativeStructure remainder(final double a) {\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        ds.data[0] = FastMath.IEEEremainder(ds.data[0], a);\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure remainder(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.remainder(data, 0, a.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc} */\n    public DerivativeStructure negate() {\n        final DerivativeStructure ds = new DerivativeStructure(compiler);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] = -data[i];\n        }\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure abs() {\n        if (Double.doubleToLongBits(data[0]) < 0) {\n            // we use the bits representation to also handle -0.0\n            return negate();\n        } else {\n            return this;\n        }\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure ceil() {\n        return new DerivativeStructure(compiler.getFreeParameters(),\n                                       compiler.getOrder(),\n                                       FastMath.ceil(data[0]));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure floor() {\n        return new DerivativeStructure(compiler.getFreeParameters(),\n                                       compiler.getOrder(),\n                                       FastMath.floor(data[0]));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure rint() {\n        return new DerivativeStructure(compiler.getFreeParameters(),\n                                       compiler.getOrder(),\n                                       FastMath.rint(data[0]));\n    }\n\n    /** {@inheritDoc} */\n    public long round() {\n        return FastMath.round(data[0]);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure signum() {\n        return new DerivativeStructure(compiler.getFreeParameters(),\n                                       compiler.getOrder(),\n                                       FastMath.signum(data[0]));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure copySign(final DerivativeStructure sign){\n        long m = Double.doubleToLongBits(data[0]);\n        long s = Double.doubleToLongBits(sign.data[0]);\n        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure copySign(final double sign) {\n        long m = Double.doubleToLongBits(data[0]);\n        long s = Double.doubleToLongBits(sign);\n        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /**\n     * Return the exponent of the instance value, removing the bias.\n     * <p>\n     * For double numbers of the form 2<sup>x</sup>, the unbiased\n     * exponent is exactly x.\n     * </p>\n     * @return exponent for instance in IEEE754 representation, without bias\n     */\n    public int getExponent() {\n        return FastMath.getExponent(data[0]);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure scalb(final int n) {\n        final DerivativeStructure ds = new DerivativeStructure(compiler);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] = FastMath.scalb(data[i], n);\n        }\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure hypot(final DerivativeStructure y)\n        throws DimensionMismatchException {\n\n        compiler.checkCompatibility(y.compiler);\n\n        if (Double.isInfinite(data[0]) || Double.isInfinite(y.data[0])) {\n            return new DerivativeStructure(compiler.getFreeParameters(),\n                                           compiler.getFreeParameters(),\n                                           Double.POSITIVE_INFINITY);\n        } else if (Double.isNaN(data[0]) || Double.isNaN(y.data[0])) {\n            return new DerivativeStructure(compiler.getFreeParameters(),\n                                           compiler.getFreeParameters(),\n                                           Double.NaN);\n        } else {\n\n            final int expX = getExponent();\n            final int expY = y.getExponent();\n            if (expX > expY + 27) {\n                // y is neglectible with respect to x\n                return abs();\n            } else if (expY > expX + 27) {\n                // x is neglectible with respect to y\n                return y.abs();\n            } else {\n\n                // find an intermediate scale to avoid both overflow and underflow\n                final int middleExp = (expX + expY) / 2;\n\n                // scale parameters without losing precision\n                final DerivativeStructure scaledX = scalb(-middleExp);\n                final DerivativeStructure scaledY = y.scalb(-middleExp);\n\n                // compute scaled hypotenuse\n                final DerivativeStructure scaledH =\n                        scaledX.multiply(scaledX).add(scaledY.multiply(scaledY)).sqrt();\n\n                // remove scaling\n                return scaledH.scalb(middleExp);\n\n            }\n\n        }\n    }\n\n    /**\n     * Returns the hypotenuse of a triangle with sides {@code x} and {@code y}\n     * - sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)\n     * avoiding intermediate overflow or underflow.\n     *\n     * <ul>\n     * <li> If either argument is infinite, then the result is positive infinity.</li>\n     * <li> else, if either argument is NaN then the result is NaN.</li>\n     * </ul>\n     *\n     * @param x a value\n     * @param y a value\n     * @return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y)\n        throws DimensionMismatchException {\n        return x.hypot(y);\n    }\n\n    /** Compute composition of the instance by a univariate function.\n     * @param f array of value and derivatives of the function at\n     * the current point (i.e. [f({@link #getValue()}),\n     * f'({@link #getValue()}), f''({@link #getValue()})...]).\n     * @return f(this)\n     * @exception DimensionMismatchException if the number of derivatives\n     * in the array is not equal to {@link #getOrder() order} + 1\n     */\n    public DerivativeStructure compose(final double ... f)\n        throws DimensionMismatchException {\n        if (f.length != getOrder() + 1) {\n            throw new DimensionMismatchException(f.length, getOrder() + 1);\n        }\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.compose(data, 0, f, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc} */\n    public DerivativeStructure reciprocal() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.pow(data, 0, -1, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure sqrt() {\n        return rootN(2);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure cbrt() {\n        return rootN(3);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure rootN(final int n) {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.rootN(data, 0, n, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc} */\n    public Field<DerivativeStructure> getField() {\n        return new Field<DerivativeStructure>() {\n\n            /** {@inheritDoc} */\n            public DerivativeStructure getZero() {\n                return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 0.0);\n            }\n\n            /** {@inheritDoc} */\n            public DerivativeStructure getOne() {\n                return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 1.0);\n            }\n\n            /** {@inheritDoc} */\n            public Class<? extends FieldElement<DerivativeStructure>> getRuntimeClass() {\n                return DerivativeStructure.class;\n            }\n\n        };\n    }\n\n    /** Compute a<sup>x</sup> where a is a double and x a {@link DerivativeStructure}\n     * @param a number to exponentiate\n     * @param x power to apply\n     * @return a<sup>x</sup>\n     * @since 3.3\n     */\n    public static DerivativeStructure pow(final double a, final DerivativeStructure x) {\n        final DerivativeStructure result = new DerivativeStructure(x.compiler);\n        x.compiler.pow(a, x.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure pow(final double p) {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.pow(data, 0, p, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure pow(final int n) {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.pow(data, 0, n, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure pow(final DerivativeStructure e)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(e.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.pow(data, 0, e.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure exp() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.exp(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure expm1() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.expm1(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure log() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.log(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure log1p() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.log1p(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** Base 10 logarithm.\n     * @return base 10 logarithm of the instance\n     */\n    public DerivativeStructure log10() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.log10(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure cos() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.cos(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure sin() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.sin(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure tan() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.tan(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure acos() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.acos(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure asin() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.asin(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure atan() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.atan(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure atan2(final DerivativeStructure x)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(x.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.atan2(data, 0, x.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** Two arguments arc tangent operation.\n     * @param y first argument of the arc tangent\n     * @param x second argument of the arc tangent\n     * @return atan2(y, x)\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x)\n        throws DimensionMismatchException {\n        return y.atan2(x);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure cosh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.cosh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure sinh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.sinh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure tanh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.tanh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure acosh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.acosh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure asinh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.asinh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure atanh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.atanh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** Convert radians to degrees, with error of less than 0.5 ULP\n     *  @return instance converted into degrees\n     */\n    public DerivativeStructure toDegrees() {\n        final DerivativeStructure ds = new DerivativeStructure(compiler);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] = FastMath.toDegrees(data[i]);\n        }\n        return ds;\n    }\n\n    /** Convert degrees to radians, with error of less than 0.5 ULP\n     *  @return instance converted into radians\n     */\n    public DerivativeStructure toRadians() {\n        final DerivativeStructure ds = new DerivativeStructure(compiler);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] = FastMath.toRadians(data[i]);\n        }\n        return ds;\n    }\n\n    /** Evaluate Taylor expansion a derivative structure.\n     * @param delta parameters offsets (&Delta;x, &Delta;y, ...)\n     * @return value of the Taylor expansion at x + &Delta;x, y + &Delta;y, ...\n     * @throws MathArithmeticException if factorials becomes too large\n     */\n    public double taylor(final double ... delta) throws MathArithmeticException {\n        return compiler.taylor(data, 0, delta);\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final DerivativeStructure[] a, final DerivativeStructure[] b)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double[] aDouble = new double[a.length];\n        for (int i = 0; i < a.length; ++i) {\n            aDouble[i] = a[i].getValue();\n        }\n        final double[] bDouble = new double[b.length];\n        for (int i = 0; i < b.length; ++i) {\n            bDouble[i] = b[i].getValue();\n        }\n        final double accurateValue = MathArrays.linearCombination(aDouble, bDouble);\n\n        // compute a simple value, with all partial derivatives\n        DerivativeStructure simpleValue = a[0].getField().getZero();\n        for (int i = 0; i < a.length; ++i) {\n            simpleValue = simpleValue.add(a[i].multiply(b[i]));\n        }\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final double[] a, final DerivativeStructure[] b)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double[] bDouble = new double[b.length];\n        for (int i = 0; i < b.length; ++i) {\n            bDouble[i] = b[i].getValue();\n        }\n        final double accurateValue = MathArrays.linearCombination(a, bDouble);\n\n        // compute a simple value, with all partial derivatives\n        DerivativeStructure simpleValue = b[0].getField().getZero();\n        for (int i = 0; i < a.length; ++i) {\n            simpleValue = simpleValue.add(b[i].multiply(a[i]));\n        }\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,\n                                                 final DerivativeStructure a2, final DerivativeStructure b2)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),\n                                                                  a2.getValue(), b2.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,\n                                                 final double a2, final DerivativeStructure b2)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),\n                                                                  a2, b2.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,\n                                                 final DerivativeStructure a2, final DerivativeStructure b2,\n                                                 final DerivativeStructure a3, final DerivativeStructure b3)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),\n                                                                  a2.getValue(), b2.getValue(),\n                                                                  a3.getValue(), b3.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,\n                                                 final double a2, final DerivativeStructure b2,\n                                                 final double a3, final DerivativeStructure b3)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),\n                                                                  a2, b2.getValue(),\n                                                                  a3, b3.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,\n                                                 final DerivativeStructure a2, final DerivativeStructure b2,\n                                                 final DerivativeStructure a3, final DerivativeStructure b3,\n                                                 final DerivativeStructure a4, final DerivativeStructure b4)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),\n                                                                  a2.getValue(), b2.getValue(),\n                                                                  a3.getValue(), b3.getValue(),\n                                                                  a4.getValue(), b4.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3)).add(a4.multiply(b4));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,\n                                                 final double a2, final DerivativeStructure b2,\n                                                 final double a3, final DerivativeStructure b3,\n                                                 final double a4, final DerivativeStructure b4)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),\n                                                                  a2, b2.getValue(),\n                                                                  a3, b3.getValue(),\n                                                                  a4, b4.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3)).add(b4.multiply(a4));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /**\n     * Test for the equality of two derivative structures.\n     * <p>\n     * Derivative structures are considered equal if they have the same number\n     * of free parameters, the same derivation order, and the same derivatives.\n     * </p>\n     * @param other Object to test for equality to this\n     * @return true if two derivative structures are equal\n     * @since 3.2\n     */\n    @Override\n    public boolean equals(Object other) {\n\n        if (this == other) {\n            return true;\n        }\n\n        if (other instanceof DerivativeStructure) {\n            final DerivativeStructure rhs = (DerivativeStructure)other;\n            return (getFreeParameters() == rhs.getFreeParameters()) &&\n                   (getOrder() == rhs.getOrder()) &&\n                   MathArrays.equals(data, rhs.data);\n        }\n\n        return false;\n\n    }\n\n    /**\n     * Get a hashCode for the derivative structure.\n     * @return a hash code value for this object\n     * @since 3.2\n     */\n    @Override\n    public int hashCode() {\n        return 227 + 229 * getFreeParameters() + 233 * getOrder() + 239 * MathUtils.hash(data);\n    }\n\n    /**\n     * Replace the instance with a data transfer object for serialization.\n     * @return data transfer object that will be serialized\n     */\n    private Object writeReplace() {\n        return new DataTransferObject(compiler.getFreeParameters(), compiler.getOrder(), data);\n    }\n\n    /** Internal class used only for serialization. */\n    private static class DataTransferObject implements Serializable {\n\n        /** Serializable UID. */\n        private static final long serialVersionUID = 20120730L;\n\n        /** Number of variables.\n         * @serial\n         */\n        private final int variables;\n\n        /** Derivation order.\n         * @serial\n         */\n        private final int order;\n\n        /** Partial derivatives.\n         * @serial\n         */\n        private final double[] data;\n\n        /** Simple constructor.\n         * @param variables number of variables\n         * @param order derivation order\n         * @param data partial derivatives\n         */\n        DataTransferObject(final int variables, final int order, final double[] data) {\n            this.variables = variables;\n            this.order     = order;\n            this.data      = data;\n        }\n\n        /** Replace the deserialized data transfer object with a {@link DerivativeStructure}.\n         * @return replacement {@link DerivativeStructure}\n         */\n        private Object readResolve() {\n            return new DerivativeStructure(variables, order, data);\n        }\n\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ [ "3.2", "double" ] ],
  "tokensMethodArguments" : [ [ "y", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getExponent", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int getExponent()" ], [ "getFreeParameters", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int getFreeParameters()" ], [ "cosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T cosh()" ], [ "remainder", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure remainder(final DerivativeStructure a) throws DimensionMismatchException" ], [ "signum", "org.apache.commons.math3", "RealFieldElement", "public abstract T signum()" ], [ "cos", "org.apache.commons.math3", "RealFieldElement", "public abstract T cos()" ], [ "log", "org.apache.commons.math3", "RealFieldElement", "public abstract T log()" ], [ "log1p", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure log1p()" ], [ "exp", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure exp()" ], [ "acos", "org.apache.commons.math3", "RealFieldElement", "public abstract T acos()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5, T arg6, T arg7)" ], [ "asinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T asinh()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1, final DerivativeStructure a2, final DerivativeStructure b2, final DerivativeStructure a3, final DerivativeStructure b3, final DerivativeStructure a4, final DerivativeStructure b4) throws DimensionMismatchException" ], [ "atan", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure atan()" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure pow(final DerivativeStructure e) throws DimensionMismatchException" ], [ "acosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T acosh()" ], [ "sqrt", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure sqrt()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3)" ], [ "acos", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure acos()" ], [ "atanh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure atanh()" ], [ "ceil", "org.apache.commons.math3", "RealFieldElement", "public abstract T ceil()" ], [ "remainder", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure remainder(final double a)" ], [ "getReal", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double getReal()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1, final double a2, final DerivativeStructure b2, final double a3, final DerivativeStructure b3) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3)" ], [ "tanh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure tanh()" ], [ "rootN", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure rootN(final int n)" ], [ "abs", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure abs()" ], [ "rint", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure rint()" ], [ "sinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T sinh()" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure createConstant(final double c)" ], [ "divide", "org.apache.commons.math3", "RealFieldElement", "public abstract T divide(double arg0)" ], [ "expm1", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure expm1()" ], [ "tan", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure tan()" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(T arg0) throws NullArgumentException" ], [ "rootN", "org.apache.commons.math3", "RealFieldElement", "public abstract T rootN(int arg0)" ], [ "round", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public long round()" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure multiply(final int n)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5)" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(T arg0) throws DimensionMismatchException" ], [ "negate", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure negate()" ], [ "subtract", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure subtract(final double a)" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final double[] a, final DerivativeStructure[] b) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(int arg0)" ], [ "getOrder", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int getOrder()" ], [ "atan2", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan2(T arg0) throws DimensionMismatchException" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure multiply(final double a)" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(double arg0)" ], [ "log10", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure log10()" ], [ "sinh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure sinh()" ], [ "multiply", "org.apache.commons.math3", "RealFieldElement", "public abstract T multiply(double arg0)" ], [ "subtract", "org.apache.commons.math3", "RealFieldElement", "public abstract T subtract(double arg0)" ], [ "scalb", "org.apache.commons.math3", "RealFieldElement", "public abstract T scalb(int arg0)" ], [ "getField", "org.apache.commons.math3", "FieldElement", "public abstract Field<T> getField()" ], [ "getValue", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double getValue()" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure atan2(final DerivativeStructure x) throws DimensionMismatchException" ], [ "log1p", "org.apache.commons.math3", "RealFieldElement", "public abstract T log1p()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final DerivativeStructure[] a, final DerivativeStructure[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1, final double a2, final DerivativeStructure b2, final double a3, final DerivativeStructure b3, final double a4, final DerivativeStructure b4) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure pow(final double p)" ], [ "taylor", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double taylor(final double... delta) throws MathArithmeticException" ], [ "reciprocal", "org.apache.commons.math3", "RealFieldElement", "public abstract T reciprocal()" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(int arg0)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5)" ], [ "divide", "org.apache.commons.math3", "FieldElement", "public abstract T divide(T arg0) throws NullArgumentException, MathArithmeticException" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5, double arg6, T arg7)" ], [ "divide", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure divide(final DerivativeStructure a) throws DimensionMismatchException" ], [ "scalb", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure scalb(final int n)" ], [ "getPartialDerivative", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double getPartialDerivative(final int... orders) throws DimensionMismatchException, NumberIsTooLargeException" ], [ "toDegrees", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure toDegrees()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "cos", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure cos()" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(double arg0)" ], [ "hashCode", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int hashCode()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "cbrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T cbrt()" ], [ "equals", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public boolean equals(Object other)" ], [ "tan", "org.apache.commons.math3", "RealFieldElement", "public abstract T tan()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1, final double a2, final DerivativeStructure b2) throws DimensionMismatchException" ], [ "add", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure add(final double a)" ], [ "copySign", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure copySign(final double sign)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "negate", "org.apache.commons.math3", "FieldElement", "public abstract T negate()" ], [ "add", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure add(final DerivativeStructure a) throws DimensionMismatchException" ], [ "abs", "org.apache.commons.math3", "RealFieldElement", "public abstract T abs()" ], [ "asin", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure asin()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "getField", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public Field<DerivativeStructure> getField()" ], [ "hypot", "org.apache.commons.math3", "RealFieldElement", "public abstract T hypot(T arg0) throws DimensionMismatchException" ], [ "atan", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan()" ], [ "sin", "org.apache.commons.math3", "RealFieldElement", "public abstract T sin()" ], [ "toRadians", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure toRadians()" ], [ "getAllDerivatives", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double[] getAllDerivatives()" ], [ "compose", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure compose(final double... f) throws DimensionMismatchException" ], [ "exp", "org.apache.commons.math3", "RealFieldElement", "public abstract T exp()" ], [ "floor", "org.apache.commons.math3", "RealFieldElement", "public abstract T floor()" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure multiply(final DerivativeStructure a) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(T arg0) throws DimensionMismatchException" ], [ "floor", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure floor()" ], [ "expm1", "org.apache.commons.math3", "RealFieldElement", "public abstract T expm1()" ], [ "subtract", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure subtract(final DerivativeStructure a) throws DimensionMismatchException" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure hypot(final DerivativeStructure y) throws DimensionMismatchException" ], [ "asin", "org.apache.commons.math3", "RealFieldElement", "public abstract T asin()" ], [ "signum", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure signum()" ], [ "cbrt", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure cbrt()" ], [ "rint", "org.apache.commons.math3", "RealFieldElement", "public abstract T rint()" ], [ "divide", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure divide(final double a)" ], [ "sin", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure sin()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1, final DerivativeStructure a2, final DerivativeStructure b2) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1, final DerivativeStructure a2, final DerivativeStructure b2, final DerivativeStructure a3, final DerivativeStructure b3) throws DimensionMismatchException" ], [ "reciprocal", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure reciprocal()" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(double arg0)" ], [ "cosh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure cosh()" ], [ "atanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T atanh()" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure pow(final int n)" ], [ "acosh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure acosh()" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(T arg0)" ], [ "asinh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure asinh()" ], [ "log", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure log()" ], [ "add", "org.apache.commons.math3", "RealFieldElement", "public abstract T add(double arg0)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "copySign", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure copySign(final DerivativeStructure sign)" ], [ "subtract", "org.apache.commons.math3", "FieldElement", "public abstract T subtract(T arg0) throws NullArgumentException" ], [ "sqrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T sqrt()" ], [ "add", "org.apache.commons.math3", "FieldElement", "public abstract T add(T arg0) throws NullArgumentException" ], [ "tanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T tanh()" ], [ "ceil", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure ceil()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "getReal", "org.apache.commons.math3", "RealFieldElement", "public abstract double getReal()" ], [ "round", "org.apache.commons.math3", "RealFieldElement", "public abstract long round()" ], [ "reciprocal", "org.apache.commons.math3", "FieldElement", "public abstract T reciprocal() throws MathArithmeticException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 13518,
  "oracle" : "true ? x.hypot(y) : true;",
  "oracleType" : "NORMAL_POST",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.analysis.differentiation",
  "className" : "DerivativeStructure",
  "javadocTag" : "@return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)",
  "methodJavadoc" : "    /**\n     * Returns the hypotenuse of a triangle with sides {@code x} and {@code y}\n     * - sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)\n     * avoiding intermediate overflow or underflow.\n     *\n     * <ul>\n     * <li> If either argument is infinite, then the result is positive infinity.</li>\n     * <li> else, if either argument is NaN then the result is NaN.</li>\n     * </ul>\n     *\n     * @param x a value\n     * @param y a value\n     * @return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)\n     * @throws DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */",
  "methodSourceCode" : "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException{\n    return x.hypot(y);\n}",
  "classJavadoc" : "/** Class representing both the value and the differentials of a function.\n * <p>This class is the workhorse of the differentiation package.</p>\n * <p>This class is an implementation of the extension to Rall's\n * numbers described in Dan Kalman's paper <a\n * href=\"http://www1.american.edu/cas/mathstat/People/kalman/pdffiles/mmgautodiff.pdf\">Doubly\n * Recursive Multivariate Automatic Differentiation</a>, Mathematics Magazine, vol. 75,\n * no. 3, June 2002. Rall's numbers are an extension to the real numbers used\n * throughout mathematical expressions; they hold the derivative together with the\n * value of a function. Dan Kalman's derivative structures hold all partial derivatives\n * up to any specified order, with respect to any number of free parameters. Rall's\n * numbers therefore can be seen as derivative structures for order one derivative and\n * one free parameter, and real numbers can be seen as derivative structures with zero\n * order derivative and no free parameters.</p>\n * <p>{@link DerivativeStructure} instances can be used directly thanks to\n * the arithmetic operators to the mathematical functions provided as\n * methods by this class (+, -, *, /, %, sin, cos ...).</p>\n * <p>Implementing complex expressions by hand using these classes is\n * a tedious and error-prone task but has the advantage of having no limitation\n * on the derivation order despite no requiring users to compute the derivatives by\n * themselves. Implementing complex expression can also be done by developing computation\n * code using standard primitive double values and to use {@link\n * UnivariateFunctionDifferentiator differentiators} to create the {@link\n * DerivativeStructure}-based instances. This method is simpler but may be limited in\n * the accuracy and derivation orders and may be computationally intensive (this is\n * typically the case for {@link FiniteDifferencesDifferentiator finite differences\n * differentiator}.</p>\n * <p>Instances of this class are guaranteed to be immutable.</p>\n * @see DSCompiler\n * @since 3.1\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math3.analysis.differentiation;\n\nimport java.io.Serializable;\n\nimport org.apache.commons.math3.Field;\nimport org.apache.commons.math3.FieldElement;\nimport org.apache.commons.math3.RealFieldElement;\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.exception.MathArithmeticException;\nimport org.apache.commons.math3.exception.NumberIsTooLargeException;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathArrays;\nimport org.apache.commons.math3.util.MathUtils;\n\n/** Class representing both the value and the differentials of a function.\n * <p>This class is the workhorse of the differentiation package.</p>\n * <p>This class is an implementation of the extension to Rall's\n * numbers described in Dan Kalman's paper <a\n * href=\"http://www1.american.edu/cas/mathstat/People/kalman/pdffiles/mmgautodiff.pdf\">Doubly\n * Recursive Multivariate Automatic Differentiation</a>, Mathematics Magazine, vol. 75,\n * no. 3, June 2002. Rall's numbers are an extension to the real numbers used\n * throughout mathematical expressions; they hold the derivative together with the\n * value of a function. Dan Kalman's derivative structures hold all partial derivatives\n * up to any specified order, with respect to any number of free parameters. Rall's\n * numbers therefore can be seen as derivative structures for order one derivative and\n * one free parameter, and real numbers can be seen as derivative structures with zero\n * order derivative and no free parameters.</p>\n * <p>{@link DerivativeStructure} instances can be used directly thanks to\n * the arithmetic operators to the mathematical functions provided as\n * methods by this class (+, -, *, /, %, sin, cos ...).</p>\n * <p>Implementing complex expressions by hand using these classes is\n * a tedious and error-prone task but has the advantage of having no limitation\n * on the derivation order despite no requiring users to compute the derivatives by\n * themselves. Implementing complex expression can also be done by developing computation\n * code using standard primitive double values and to use {@link\n * UnivariateFunctionDifferentiator differentiators} to create the {@link\n * DerivativeStructure}-based instances. This method is simpler but may be limited in\n * the accuracy and derivation orders and may be computationally intensive (this is\n * typically the case for {@link FiniteDifferencesDifferentiator finite differences\n * differentiator}.</p>\n * <p>Instances of this class are guaranteed to be immutable.</p>\n * @see DSCompiler\n * @since 3.1\n */\npublic class DerivativeStructure implements RealFieldElement<DerivativeStructure>, Serializable {\n\n    /** Serializable UID. */\n    private static final long serialVersionUID = 20120730L;\n\n    /** Compiler for the current dimensions. */\n    private transient DSCompiler compiler;\n\n    /** Combined array holding all values. */\n    private final double[] data;\n\n    /** Build an instance with all values and derivatives set to 0.\n     * @param compiler compiler to use for computation\n     */\n    private DerivativeStructure(final DSCompiler compiler) {\n        this.compiler = compiler;\n        this.data     = new double[compiler.getSize()];\n    }\n\n    /** Build an instance with all values and derivatives set to 0.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @throws NumberIsTooLargeException if order is too large\n     */\n    public DerivativeStructure(final int parameters, final int order)\n        throws NumberIsTooLargeException {\n        this(DSCompiler.getCompiler(parameters, order));\n    }\n\n    /** Build an instance representing a constant value.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param value value of the constant\n     * @throws NumberIsTooLargeException if order is too large\n     * @see #DerivativeStructure(int, int, int, double)\n     */\n    public DerivativeStructure(final int parameters, final int order, final double value)\n        throws NumberIsTooLargeException {\n        this(parameters, order);\n        this.data[0] = value;\n    }\n\n    /** Build an instance representing a variable.\n     * <p>Instances built using this constructor are considered\n     * to be the free variables with respect to which differentials\n     * are computed. As such, their differential with respect to\n     * themselves is +1.</p>\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param index index of the variable (from 0 to {@code parameters - 1})\n     * @param value value of the variable\n     * @exception NumberIsTooLargeException if {@code index >= parameters}.\n     * @see #DerivativeStructure(int, int, double)\n     */\n    public DerivativeStructure(final int parameters, final int order,\n                               final int index, final double value)\n        throws NumberIsTooLargeException {\n        this(parameters, order, value);\n\n        if (index >= parameters) {\n            throw new NumberIsTooLargeException(index, parameters, false);\n        }\n\n        if (order > 0) {\n            // the derivative of the variable with respect to itself is 1.\n            data[DSCompiler.getCompiler(index, order).getSize()] = 1.0;\n        }\n\n    }\n\n    /** Linear combination constructor.\n     * The derivative structure built will be a1 * ds1 + a2 * ds2\n     * @param a1 first scale factor\n     * @param ds1 first base (unscaled) derivative structure\n     * @param a2 second scale factor\n     * @param ds2 second base (unscaled) derivative structure\n     * @exception DimensionMismatchException if number of free parameters or orders are inconsistent\n     */\n    public DerivativeStructure(final double a1, final DerivativeStructure ds1,\n                               final double a2, final DerivativeStructure ds2)\n        throws DimensionMismatchException {\n        this(ds1.compiler);\n        compiler.checkCompatibility(ds2.compiler);\n        compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, data, 0);\n    }\n\n    /** Linear combination constructor.\n     * The derivative structure built will be a1 * ds1 + a2 * ds2 + a3 * ds3\n     * @param a1 first scale factor\n     * @param ds1 first base (unscaled) derivative structure\n     * @param a2 second scale factor\n     * @param ds2 second base (unscaled) derivative structure\n     * @param a3 third scale factor\n     * @param ds3 third base (unscaled) derivative structure\n     * @exception DimensionMismatchException if number of free parameters or orders are inconsistent\n     */\n    public DerivativeStructure(final double a1, final DerivativeStructure ds1,\n                               final double a2, final DerivativeStructure ds2,\n                               final double a3, final DerivativeStructure ds3)\n        throws DimensionMismatchException {\n        this(ds1.compiler);\n        compiler.checkCompatibility(ds2.compiler);\n        compiler.checkCompatibility(ds3.compiler);\n        compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, a3, ds3.data, 0, data, 0);\n    }\n\n    /** Linear combination constructor.\n     * The derivative structure built will be a1 * ds1 + a2 * ds2 + a3 * ds3 + a4 * ds4\n     * @param a1 first scale factor\n     * @param ds1 first base (unscaled) derivative structure\n     * @param a2 second scale factor\n     * @param ds2 second base (unscaled) derivative structure\n     * @param a3 third scale factor\n     * @param ds3 third base (unscaled) derivative structure\n     * @param a4 fourth scale factor\n     * @param ds4 fourth base (unscaled) derivative structure\n     * @exception DimensionMismatchException if number of free parameters or orders are inconsistent\n     */\n    public DerivativeStructure(final double a1, final DerivativeStructure ds1,\n                               final double a2, final DerivativeStructure ds2,\n                               final double a3, final DerivativeStructure ds3,\n                               final double a4, final DerivativeStructure ds4)\n        throws DimensionMismatchException {\n        this(ds1.compiler);\n        compiler.checkCompatibility(ds2.compiler);\n        compiler.checkCompatibility(ds3.compiler);\n        compiler.checkCompatibility(ds4.compiler);\n        compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0,\n                                   a3, ds3.data, 0, a4, ds4.data, 0,\n                                   data, 0);\n    }\n\n    /** Build an instance from all its derivatives.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param derivatives derivatives sorted according to\n     * {@link DSCompiler#getPartialDerivativeIndex(int...)}\n     * @exception DimensionMismatchException if derivatives array does not match the\n     * {@link DSCompiler#getSize() size} expected by the compiler\n     * @throws NumberIsTooLargeException if order is too large\n     * @see #getAllDerivatives()\n     */\n    public DerivativeStructure(final int parameters, final int order, final double ... derivatives)\n        throws DimensionMismatchException, NumberIsTooLargeException {\n        this(parameters, order);\n        if (derivatives.length != data.length) {\n            throw new DimensionMismatchException(derivatives.length, data.length);\n        }\n        System.arraycopy(derivatives, 0, data, 0, data.length);\n    }\n\n    /** Copy constructor.\n     * @param ds instance to copy\n     */\n    private DerivativeStructure(final DerivativeStructure ds) {\n        this.compiler = ds.compiler;\n        this.data     = ds.data.clone();\n    }\n\n    /** Get the number of free parameters.\n     * @return number of free parameters\n     */\n    public int getFreeParameters() {\n        return compiler.getFreeParameters();\n    }\n\n    /** Get the derivation order.\n     * @return derivation order\n     */\n    public int getOrder() {\n        return compiler.getOrder();\n    }\n\n    /** Create a constant compatible with instance order and number of parameters.\n     * <p>\n     * This method is a convenience factory method, it simply calls\n     * {@code new DerivativeStructure(getFreeParameters(), getOrder(), c)}\n     * </p>\n     * @param c value of the constant\n     * @return a constant compatible with instance order and number of parameters\n     * @see #DerivativeStructure(int, int, double)\n     * @since 3.3\n     */\n    public DerivativeStructure createConstant(final double c) {\n        return new DerivativeStructure(getFreeParameters(), getOrder(), c);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public double getReal() {\n        return data[0];\n    }\n\n    /** Get the value part of the derivative structure.\n     * @return value part of the derivative structure\n     * @see #getPartialDerivative(int...)\n     */\n    public double getValue() {\n        return data[0];\n    }\n\n    /** Get a partial derivative.\n     * @param orders derivation orders with respect to each variable (if all orders are 0,\n     * the value is returned)\n     * @return partial derivative\n     * @see #getValue()\n     * @exception DimensionMismatchException if the numbers of variables does not\n     * match the instance\n     * @exception NumberIsTooLargeException if sum of derivation orders is larger\n     * than the instance limits\n     */\n    public double getPartialDerivative(final int ... orders)\n        throws DimensionMismatchException, NumberIsTooLargeException {\n        return data[compiler.getPartialDerivativeIndex(orders)];\n    }\n\n    /** Get all partial derivatives.\n     * @return a fresh copy of partial derivatives, in an array sorted according to\n     * {@link DSCompiler#getPartialDerivativeIndex(int...)}\n     */\n    public double[] getAllDerivatives() {\n        return data.clone();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure add(final double a) {\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        ds.data[0] += a;\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */\n    public DerivativeStructure add(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        compiler.add(data, 0, a.data, 0, ds.data, 0);\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure subtract(final double a) {\n        return add(-a);\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */\n    public DerivativeStructure subtract(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        compiler.subtract(data, 0, a.data, 0, ds.data, 0);\n        return ds;\n    }\n\n    /** {@inheritDoc} */\n    public DerivativeStructure multiply(final int n) {\n        return multiply((double) n);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure multiply(final double a) {\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] *= a;\n        }\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */\n    public DerivativeStructure multiply(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.multiply(data, 0, a.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure divide(final double a) {\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] /= a;\n        }\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */\n    public DerivativeStructure divide(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.divide(data, 0, a.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc} */\n    public DerivativeStructure remainder(final double a) {\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        ds.data[0] = FastMath.IEEEremainder(ds.data[0], a);\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure remainder(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.remainder(data, 0, a.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc} */\n    public DerivativeStructure negate() {\n        final DerivativeStructure ds = new DerivativeStructure(compiler);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] = -data[i];\n        }\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure abs() {\n        if (Double.doubleToLongBits(data[0]) < 0) {\n            // we use the bits representation to also handle -0.0\n            return negate();\n        } else {\n            return this;\n        }\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure ceil() {\n        return new DerivativeStructure(compiler.getFreeParameters(),\n                                       compiler.getOrder(),\n                                       FastMath.ceil(data[0]));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure floor() {\n        return new DerivativeStructure(compiler.getFreeParameters(),\n                                       compiler.getOrder(),\n                                       FastMath.floor(data[0]));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure rint() {\n        return new DerivativeStructure(compiler.getFreeParameters(),\n                                       compiler.getOrder(),\n                                       FastMath.rint(data[0]));\n    }\n\n    /** {@inheritDoc} */\n    public long round() {\n        return FastMath.round(data[0]);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure signum() {\n        return new DerivativeStructure(compiler.getFreeParameters(),\n                                       compiler.getOrder(),\n                                       FastMath.signum(data[0]));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure copySign(final DerivativeStructure sign){\n        long m = Double.doubleToLongBits(data[0]);\n        long s = Double.doubleToLongBits(sign.data[0]);\n        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure copySign(final double sign) {\n        long m = Double.doubleToLongBits(data[0]);\n        long s = Double.doubleToLongBits(sign);\n        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /**\n     * Return the exponent of the instance value, removing the bias.\n     * <p>\n     * For double numbers of the form 2<sup>x</sup>, the unbiased\n     * exponent is exactly x.\n     * </p>\n     * @return exponent for instance in IEEE754 representation, without bias\n     */\n    public int getExponent() {\n        return FastMath.getExponent(data[0]);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure scalb(final int n) {\n        final DerivativeStructure ds = new DerivativeStructure(compiler);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] = FastMath.scalb(data[i], n);\n        }\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure hypot(final DerivativeStructure y)\n        throws DimensionMismatchException {\n\n        compiler.checkCompatibility(y.compiler);\n\n        if (Double.isInfinite(data[0]) || Double.isInfinite(y.data[0])) {\n            return new DerivativeStructure(compiler.getFreeParameters(),\n                                           compiler.getFreeParameters(),\n                                           Double.POSITIVE_INFINITY);\n        } else if (Double.isNaN(data[0]) || Double.isNaN(y.data[0])) {\n            return new DerivativeStructure(compiler.getFreeParameters(),\n                                           compiler.getFreeParameters(),\n                                           Double.NaN);\n        } else {\n\n            final int expX = getExponent();\n            final int expY = y.getExponent();\n            if (expX > expY + 27) {\n                // y is neglectible with respect to x\n                return abs();\n            } else if (expY > expX + 27) {\n                // x is neglectible with respect to y\n                return y.abs();\n            } else {\n\n                // find an intermediate scale to avoid both overflow and underflow\n                final int middleExp = (expX + expY) / 2;\n\n                // scale parameters without losing precision\n                final DerivativeStructure scaledX = scalb(-middleExp);\n                final DerivativeStructure scaledY = y.scalb(-middleExp);\n\n                // compute scaled hypotenuse\n                final DerivativeStructure scaledH =\n                        scaledX.multiply(scaledX).add(scaledY.multiply(scaledY)).sqrt();\n\n                // remove scaling\n                return scaledH.scalb(middleExp);\n\n            }\n\n        }\n    }\n\n    /**\n     * Returns the hypotenuse of a triangle with sides {@code x} and {@code y}\n     * - sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)\n     * avoiding intermediate overflow or underflow.\n     *\n     * <ul>\n     * <li> If either argument is infinite, then the result is positive infinity.</li>\n     * <li> else, if either argument is NaN then the result is NaN.</li>\n     * </ul>\n     *\n     * @param x a value\n     * @param y a value\n     * @return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y)\n        throws DimensionMismatchException {\n        return x.hypot(y);\n    }\n\n    /** Compute composition of the instance by a univariate function.\n     * @param f array of value and derivatives of the function at\n     * the current point (i.e. [f({@link #getValue()}),\n     * f'({@link #getValue()}), f''({@link #getValue()})...]).\n     * @return f(this)\n     * @exception DimensionMismatchException if the number of derivatives\n     * in the array is not equal to {@link #getOrder() order} + 1\n     */\n    public DerivativeStructure compose(final double ... f)\n        throws DimensionMismatchException {\n        if (f.length != getOrder() + 1) {\n            throw new DimensionMismatchException(f.length, getOrder() + 1);\n        }\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.compose(data, 0, f, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc} */\n    public DerivativeStructure reciprocal() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.pow(data, 0, -1, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure sqrt() {\n        return rootN(2);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure cbrt() {\n        return rootN(3);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure rootN(final int n) {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.rootN(data, 0, n, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc} */\n    public Field<DerivativeStructure> getField() {\n        return new Field<DerivativeStructure>() {\n\n            /** {@inheritDoc} */\n            public DerivativeStructure getZero() {\n                return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 0.0);\n            }\n\n            /** {@inheritDoc} */\n            public DerivativeStructure getOne() {\n                return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 1.0);\n            }\n\n            /** {@inheritDoc} */\n            public Class<? extends FieldElement<DerivativeStructure>> getRuntimeClass() {\n                return DerivativeStructure.class;\n            }\n\n        };\n    }\n\n    /** Compute a<sup>x</sup> where a is a double and x a {@link DerivativeStructure}\n     * @param a number to exponentiate\n     * @param x power to apply\n     * @return a<sup>x</sup>\n     * @since 3.3\n     */\n    public static DerivativeStructure pow(final double a, final DerivativeStructure x) {\n        final DerivativeStructure result = new DerivativeStructure(x.compiler);\n        x.compiler.pow(a, x.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure pow(final double p) {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.pow(data, 0, p, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure pow(final int n) {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.pow(data, 0, n, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure pow(final DerivativeStructure e)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(e.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.pow(data, 0, e.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure exp() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.exp(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure expm1() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.expm1(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure log() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.log(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure log1p() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.log1p(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** Base 10 logarithm.\n     * @return base 10 logarithm of the instance\n     */\n    public DerivativeStructure log10() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.log10(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure cos() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.cos(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure sin() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.sin(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure tan() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.tan(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure acos() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.acos(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure asin() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.asin(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure atan() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.atan(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure atan2(final DerivativeStructure x)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(x.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.atan2(data, 0, x.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** Two arguments arc tangent operation.\n     * @param y first argument of the arc tangent\n     * @param x second argument of the arc tangent\n     * @return atan2(y, x)\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x)\n        throws DimensionMismatchException {\n        return y.atan2(x);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure cosh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.cosh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure sinh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.sinh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure tanh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.tanh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure acosh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.acosh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure asinh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.asinh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure atanh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.atanh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** Convert radians to degrees, with error of less than 0.5 ULP\n     *  @return instance converted into degrees\n     */\n    public DerivativeStructure toDegrees() {\n        final DerivativeStructure ds = new DerivativeStructure(compiler);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] = FastMath.toDegrees(data[i]);\n        }\n        return ds;\n    }\n\n    /** Convert degrees to radians, with error of less than 0.5 ULP\n     *  @return instance converted into radians\n     */\n    public DerivativeStructure toRadians() {\n        final DerivativeStructure ds = new DerivativeStructure(compiler);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] = FastMath.toRadians(data[i]);\n        }\n        return ds;\n    }\n\n    /** Evaluate Taylor expansion a derivative structure.\n     * @param delta parameters offsets (&Delta;x, &Delta;y, ...)\n     * @return value of the Taylor expansion at x + &Delta;x, y + &Delta;y, ...\n     * @throws MathArithmeticException if factorials becomes too large\n     */\n    public double taylor(final double ... delta) throws MathArithmeticException {\n        return compiler.taylor(data, 0, delta);\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final DerivativeStructure[] a, final DerivativeStructure[] b)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double[] aDouble = new double[a.length];\n        for (int i = 0; i < a.length; ++i) {\n            aDouble[i] = a[i].getValue();\n        }\n        final double[] bDouble = new double[b.length];\n        for (int i = 0; i < b.length; ++i) {\n            bDouble[i] = b[i].getValue();\n        }\n        final double accurateValue = MathArrays.linearCombination(aDouble, bDouble);\n\n        // compute a simple value, with all partial derivatives\n        DerivativeStructure simpleValue = a[0].getField().getZero();\n        for (int i = 0; i < a.length; ++i) {\n            simpleValue = simpleValue.add(a[i].multiply(b[i]));\n        }\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final double[] a, final DerivativeStructure[] b)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double[] bDouble = new double[b.length];\n        for (int i = 0; i < b.length; ++i) {\n            bDouble[i] = b[i].getValue();\n        }\n        final double accurateValue = MathArrays.linearCombination(a, bDouble);\n\n        // compute a simple value, with all partial derivatives\n        DerivativeStructure simpleValue = b[0].getField().getZero();\n        for (int i = 0; i < a.length; ++i) {\n            simpleValue = simpleValue.add(b[i].multiply(a[i]));\n        }\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,\n                                                 final DerivativeStructure a2, final DerivativeStructure b2)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),\n                                                                  a2.getValue(), b2.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,\n                                                 final double a2, final DerivativeStructure b2)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),\n                                                                  a2, b2.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,\n                                                 final DerivativeStructure a2, final DerivativeStructure b2,\n                                                 final DerivativeStructure a3, final DerivativeStructure b3)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),\n                                                                  a2.getValue(), b2.getValue(),\n                                                                  a3.getValue(), b3.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,\n                                                 final double a2, final DerivativeStructure b2,\n                                                 final double a3, final DerivativeStructure b3)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),\n                                                                  a2, b2.getValue(),\n                                                                  a3, b3.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,\n                                                 final DerivativeStructure a2, final DerivativeStructure b2,\n                                                 final DerivativeStructure a3, final DerivativeStructure b3,\n                                                 final DerivativeStructure a4, final DerivativeStructure b4)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),\n                                                                  a2.getValue(), b2.getValue(),\n                                                                  a3.getValue(), b3.getValue(),\n                                                                  a4.getValue(), b4.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3)).add(a4.multiply(b4));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,\n                                                 final double a2, final DerivativeStructure b2,\n                                                 final double a3, final DerivativeStructure b3,\n                                                 final double a4, final DerivativeStructure b4)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),\n                                                                  a2, b2.getValue(),\n                                                                  a3, b3.getValue(),\n                                                                  a4, b4.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3)).add(b4.multiply(a4));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /**\n     * Test for the equality of two derivative structures.\n     * <p>\n     * Derivative structures are considered equal if they have the same number\n     * of free parameters, the same derivation order, and the same derivatives.\n     * </p>\n     * @param other Object to test for equality to this\n     * @return true if two derivative structures are equal\n     * @since 3.2\n     */\n    @Override\n    public boolean equals(Object other) {\n\n        if (this == other) {\n            return true;\n        }\n\n        if (other instanceof DerivativeStructure) {\n            final DerivativeStructure rhs = (DerivativeStructure)other;\n            return (getFreeParameters() == rhs.getFreeParameters()) &&\n                   (getOrder() == rhs.getOrder()) &&\n                   MathArrays.equals(data, rhs.data);\n        }\n\n        return false;\n\n    }\n\n    /**\n     * Get a hashCode for the derivative structure.\n     * @return a hash code value for this object\n     * @since 3.2\n     */\n    @Override\n    public int hashCode() {\n        return 227 + 229 * getFreeParameters() + 233 * getOrder() + 239 * MathUtils.hash(data);\n    }\n\n    /**\n     * Replace the instance with a data transfer object for serialization.\n     * @return data transfer object that will be serialized\n     */\n    private Object writeReplace() {\n        return new DataTransferObject(compiler.getFreeParameters(), compiler.getOrder(), data);\n    }\n\n    /** Internal class used only for serialization. */\n    private static class DataTransferObject implements Serializable {\n\n        /** Serializable UID. */\n        private static final long serialVersionUID = 20120730L;\n\n        /** Number of variables.\n         * @serial\n         */\n        private final int variables;\n\n        /** Derivation order.\n         * @serial\n         */\n        private final int order;\n\n        /** Partial derivatives.\n         * @serial\n         */\n        private final double[] data;\n\n        /** Simple constructor.\n         * @param variables number of variables\n         * @param order derivation order\n         * @param data partial derivatives\n         */\n        DataTransferObject(final int variables, final int order, final double[] data) {\n            this.variables = variables;\n            this.order     = order;\n            this.data      = data;\n        }\n\n        /** Replace the deserialized data transfer object with a {@link DerivativeStructure}.\n         * @return replacement {@link DerivativeStructure}\n         */\n        private Object readResolve() {\n            return new DerivativeStructure(variables, order, data);\n        }\n\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ [ "2", "int" ], [ "2", "int" ], [ "2", "int" ], [ "2", "int" ], [ "3.2", "double" ] ],
  "tokensMethodArguments" : [ [ "x", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure" ], [ "y", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "cbrt", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure cbrt()" ], [ "taylor", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double taylor(final double... delta) throws MathArithmeticException" ], [ "getFreeParameters", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int getFreeParameters()" ], [ "atan", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure atan()" ], [ "log", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure log()" ], [ "getField", "org.apache.commons.math3", "FieldElement", "public abstract Field<T> getField()" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(double arg0)" ], [ "divide", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure divide(final double a)" ], [ "subtract", "org.apache.commons.math3", "FieldElement", "public abstract T subtract(T arg0) throws NullArgumentException" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1, final DerivativeStructure a2, final DerivativeStructure b2, final DerivativeStructure a3, final DerivativeStructure b3, final DerivativeStructure a4, final DerivativeStructure b4) throws DimensionMismatchException" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "cos", "org.apache.commons.math3", "RealFieldElement", "public abstract T cos()" ], [ "asinh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure asinh()" ], [ "divide", "org.apache.commons.math3", "FieldElement", "public abstract T divide(T arg0) throws NullArgumentException, MathArithmeticException" ], [ "getField", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public Field<DerivativeStructure> getField()" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure multiply(final double a)" ], [ "negate", "org.apache.commons.math3", "FieldElement", "public abstract T negate()" ], [ "abs", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure abs()" ], [ "multiply", "org.apache.commons.math3", "RealFieldElement", "public abstract T multiply(double arg0)" ], [ "negate", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure negate()" ], [ "log", "org.apache.commons.math3", "RealFieldElement", "public abstract T log()" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(T arg0) throws NullArgumentException" ], [ "tanh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure tanh()" ], [ "rootN", "org.apache.commons.math3", "RealFieldElement", "public abstract T rootN(int arg0)" ], [ "getPartialDerivative", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double getPartialDerivative(final int... orders) throws DimensionMismatchException, NumberIsTooLargeException" ], [ "acos", "org.apache.commons.math3", "RealFieldElement", "public abstract T acos()" ], [ "atan2", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan2(T arg0) throws DimensionMismatchException" ], [ "hypot", "org.apache.commons.math3", "RealFieldElement", "public abstract T hypot(T arg0) throws DimensionMismatchException" ], [ "acosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T acosh()" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure multiply(final DerivativeStructure a) throws DimensionMismatchException" ], [ "acosh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure acosh()" ], [ "getAllDerivatives", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double[] getAllDerivatives()" ], [ "cosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T cosh()" ], [ "sqrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T sqrt()" ], [ "atanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T atanh()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(int arg0)" ], [ "getOrder", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int getOrder()" ], [ "divide", "org.apache.commons.math3", "RealFieldElement", "public abstract T divide(double arg0)" ], [ "divide", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure divide(final DerivativeStructure a) throws DimensionMismatchException" ], [ "rootN", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure rootN(final int n)" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final DerivativeStructure[] a, final DerivativeStructure[] b) throws DimensionMismatchException" ], [ "round", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public long round()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1, final double a2, final DerivativeStructure b2, final double a3, final DerivativeStructure b3, final double a4, final DerivativeStructure b4) throws DimensionMismatchException" ], [ "asin", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure asin()" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure atan2(final DerivativeStructure x) throws DimensionMismatchException" ], [ "scalb", "org.apache.commons.math3", "RealFieldElement", "public abstract T scalb(int arg0)" ], [ "reciprocal", "org.apache.commons.math3", "RealFieldElement", "public abstract T reciprocal()" ], [ "cosh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure cosh()" ], [ "add", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure add(final DerivativeStructure a) throws DimensionMismatchException" ], [ "add", "org.apache.commons.math3", "FieldElement", "public abstract T add(T arg0) throws NullArgumentException" ], [ "log10", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure log10()" ], [ "toDegrees", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure toDegrees()" ], [ "expm1", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure expm1()" ], [ "getReal", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double getReal()" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure multiply(final int n)" ], [ "sin", "org.apache.commons.math3", "RealFieldElement", "public abstract T sin()" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure hypot(final DerivativeStructure y) throws DimensionMismatchException" ], [ "asin", "org.apache.commons.math3", "RealFieldElement", "public abstract T asin()" ], [ "copySign", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure copySign(final DerivativeStructure sign)" ], [ "abs", "org.apache.commons.math3", "RealFieldElement", "public abstract T abs()" ], [ "compose", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure compose(final double... f) throws DimensionMismatchException" ], [ "rint", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure rint()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3)" ], [ "subtract", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure subtract(final double a)" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final double[] a, final DerivativeStructure[] b) throws DimensionMismatchException" ], [ "ceil", "org.apache.commons.math3", "RealFieldElement", "public abstract T ceil()" ], [ "equals", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public boolean equals(Object other)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1, final DerivativeStructure a2, final DerivativeStructure b2) throws DimensionMismatchException" ], [ "tan", "org.apache.commons.math3", "RealFieldElement", "public abstract T tan()" ], [ "exp", "org.apache.commons.math3", "RealFieldElement", "public abstract T exp()" ], [ "expm1", "org.apache.commons.math3", "RealFieldElement", "public abstract T expm1()" ], [ "floor", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure floor()" ], [ "atanh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure atanh()" ], [ "sinh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure sinh()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5, double arg6, T arg7)" ], [ "remainder", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure remainder(final double a)" ], [ "add", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure add(final double a)" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure createConstant(final double c)" ], [ "toRadians", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure toRadians()" ], [ "atan", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan()" ], [ "cbrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T cbrt()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5, T arg6, T arg7)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure pow(final int n)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5)" ], [ "add", "org.apache.commons.math3", "RealFieldElement", "public abstract T add(double arg0)" ], [ "log1p", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure log1p()" ], [ "cos", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure cos()" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(T arg0)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure pow(final double p)" ], [ "hashCode", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int hashCode()" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(double arg0)" ], [ "rint", "org.apache.commons.math3", "RealFieldElement", "public abstract T rint()" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(double arg0)" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1, final DerivativeStructure a2, final DerivativeStructure b2, final DerivativeStructure a3, final DerivativeStructure b3) throws DimensionMismatchException" ], [ "sinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T sinh()" ], [ "signum", "org.apache.commons.math3", "RealFieldElement", "public abstract T signum()" ], [ "asinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T asinh()" ], [ "reciprocal", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure reciprocal()" ], [ "signum", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure signum()" ], [ "tan", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure tan()" ], [ "getValue", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double getValue()" ], [ "log1p", "org.apache.commons.math3", "RealFieldElement", "public abstract T log1p()" ], [ "tanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T tanh()" ], [ "ceil", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure ceil()" ], [ "sin", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure sin()" ], [ "exp", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure exp()" ], [ "copySign", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure copySign(final double sign)" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(int arg0)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5)" ], [ "acos", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure acos()" ], [ "subtract", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure subtract(final DerivativeStructure a) throws DimensionMismatchException" ], [ "subtract", "org.apache.commons.math3", "RealFieldElement", "public abstract T subtract(double arg0)" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(T arg0) throws DimensionMismatchException" ], [ "getExponent", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int getExponent()" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure pow(final DerivativeStructure e) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1, final double a2, final DerivativeStructure b2) throws DimensionMismatchException" ], [ "remainder", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure remainder(final DerivativeStructure a) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1, final double a2, final DerivativeStructure b2, final double a3, final DerivativeStructure b3) throws DimensionMismatchException" ], [ "sqrt", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure sqrt()" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(T arg0) throws DimensionMismatchException" ], [ "scalb", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure scalb(final int n)" ], [ "floor", "org.apache.commons.math3", "RealFieldElement", "public abstract T floor()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "getReal", "org.apache.commons.math3", "RealFieldElement", "public abstract double getReal()" ], [ "round", "org.apache.commons.math3", "RealFieldElement", "public abstract long round()" ], [ "reciprocal", "org.apache.commons.math3", "FieldElement", "public abstract T reciprocal() throws MathArithmeticException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 13519,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.analysis.differentiation",
  "className" : "DerivativeStructure",
  "javadocTag" : "@throws DimensionMismatchException if number of free parameters\nor orders do not match",
  "methodJavadoc" : "    /**\n     * Returns the hypotenuse of a triangle with sides {@code x} and {@code y}\n     * - sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)\n     * avoiding intermediate overflow or underflow.\n     *\n     * <ul>\n     * <li> If either argument is infinite, then the result is positive infinity.</li>\n     * <li> else, if either argument is NaN then the result is NaN.</li>\n     * </ul>\n     *\n     * @param x a value\n     * @param y a value\n     * @return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)\n     * @throws DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */",
  "methodSourceCode" : "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException{\n    return x.hypot(y);\n}",
  "classJavadoc" : "/** Class representing both the value and the differentials of a function.\n * <p>This class is the workhorse of the differentiation package.</p>\n * <p>This class is an implementation of the extension to Rall's\n * numbers described in Dan Kalman's paper <a\n * href=\"http://www1.american.edu/cas/mathstat/People/kalman/pdffiles/mmgautodiff.pdf\">Doubly\n * Recursive Multivariate Automatic Differentiation</a>, Mathematics Magazine, vol. 75,\n * no. 3, June 2002. Rall's numbers are an extension to the real numbers used\n * throughout mathematical expressions; they hold the derivative together with the\n * value of a function. Dan Kalman's derivative structures hold all partial derivatives\n * up to any specified order, with respect to any number of free parameters. Rall's\n * numbers therefore can be seen as derivative structures for order one derivative and\n * one free parameter, and real numbers can be seen as derivative structures with zero\n * order derivative and no free parameters.</p>\n * <p>{@link DerivativeStructure} instances can be used directly thanks to\n * the arithmetic operators to the mathematical functions provided as\n * methods by this class (+, -, *, /, %, sin, cos ...).</p>\n * <p>Implementing complex expressions by hand using these classes is\n * a tedious and error-prone task but has the advantage of having no limitation\n * on the derivation order despite no requiring users to compute the derivatives by\n * themselves. Implementing complex expression can also be done by developing computation\n * code using standard primitive double values and to use {@link\n * UnivariateFunctionDifferentiator differentiators} to create the {@link\n * DerivativeStructure}-based instances. This method is simpler but may be limited in\n * the accuracy and derivation orders and may be computationally intensive (this is\n * typically the case for {@link FiniteDifferencesDifferentiator finite differences\n * differentiator}.</p>\n * <p>Instances of this class are guaranteed to be immutable.</p>\n * @see DSCompiler\n * @since 3.1\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math3.analysis.differentiation;\n\nimport java.io.Serializable;\n\nimport org.apache.commons.math3.Field;\nimport org.apache.commons.math3.FieldElement;\nimport org.apache.commons.math3.RealFieldElement;\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.exception.MathArithmeticException;\nimport org.apache.commons.math3.exception.NumberIsTooLargeException;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathArrays;\nimport org.apache.commons.math3.util.MathUtils;\n\n/** Class representing both the value and the differentials of a function.\n * <p>This class is the workhorse of the differentiation package.</p>\n * <p>This class is an implementation of the extension to Rall's\n * numbers described in Dan Kalman's paper <a\n * href=\"http://www1.american.edu/cas/mathstat/People/kalman/pdffiles/mmgautodiff.pdf\">Doubly\n * Recursive Multivariate Automatic Differentiation</a>, Mathematics Magazine, vol. 75,\n * no. 3, June 2002. Rall's numbers are an extension to the real numbers used\n * throughout mathematical expressions; they hold the derivative together with the\n * value of a function. Dan Kalman's derivative structures hold all partial derivatives\n * up to any specified order, with respect to any number of free parameters. Rall's\n * numbers therefore can be seen as derivative structures for order one derivative and\n * one free parameter, and real numbers can be seen as derivative structures with zero\n * order derivative and no free parameters.</p>\n * <p>{@link DerivativeStructure} instances can be used directly thanks to\n * the arithmetic operators to the mathematical functions provided as\n * methods by this class (+, -, *, /, %, sin, cos ...).</p>\n * <p>Implementing complex expressions by hand using these classes is\n * a tedious and error-prone task but has the advantage of having no limitation\n * on the derivation order despite no requiring users to compute the derivatives by\n * themselves. Implementing complex expression can also be done by developing computation\n * code using standard primitive double values and to use {@link\n * UnivariateFunctionDifferentiator differentiators} to create the {@link\n * DerivativeStructure}-based instances. This method is simpler but may be limited in\n * the accuracy and derivation orders and may be computationally intensive (this is\n * typically the case for {@link FiniteDifferencesDifferentiator finite differences\n * differentiator}.</p>\n * <p>Instances of this class are guaranteed to be immutable.</p>\n * @see DSCompiler\n * @since 3.1\n */\npublic class DerivativeStructure implements RealFieldElement<DerivativeStructure>, Serializable {\n\n    /** Serializable UID. */\n    private static final long serialVersionUID = 20120730L;\n\n    /** Compiler for the current dimensions. */\n    private transient DSCompiler compiler;\n\n    /** Combined array holding all values. */\n    private final double[] data;\n\n    /** Build an instance with all values and derivatives set to 0.\n     * @param compiler compiler to use for computation\n     */\n    private DerivativeStructure(final DSCompiler compiler) {\n        this.compiler = compiler;\n        this.data     = new double[compiler.getSize()];\n    }\n\n    /** Build an instance with all values and derivatives set to 0.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @throws NumberIsTooLargeException if order is too large\n     */\n    public DerivativeStructure(final int parameters, final int order)\n        throws NumberIsTooLargeException {\n        this(DSCompiler.getCompiler(parameters, order));\n    }\n\n    /** Build an instance representing a constant value.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param value value of the constant\n     * @throws NumberIsTooLargeException if order is too large\n     * @see #DerivativeStructure(int, int, int, double)\n     */\n    public DerivativeStructure(final int parameters, final int order, final double value)\n        throws NumberIsTooLargeException {\n        this(parameters, order);\n        this.data[0] = value;\n    }\n\n    /** Build an instance representing a variable.\n     * <p>Instances built using this constructor are considered\n     * to be the free variables with respect to which differentials\n     * are computed. As such, their differential with respect to\n     * themselves is +1.</p>\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param index index of the variable (from 0 to {@code parameters - 1})\n     * @param value value of the variable\n     * @exception NumberIsTooLargeException if {@code index >= parameters}.\n     * @see #DerivativeStructure(int, int, double)\n     */\n    public DerivativeStructure(final int parameters, final int order,\n                               final int index, final double value)\n        throws NumberIsTooLargeException {\n        this(parameters, order, value);\n\n        if (index >= parameters) {\n            throw new NumberIsTooLargeException(index, parameters, false);\n        }\n\n        if (order > 0) {\n            // the derivative of the variable with respect to itself is 1.\n            data[DSCompiler.getCompiler(index, order).getSize()] = 1.0;\n        }\n\n    }\n\n    /** Linear combination constructor.\n     * The derivative structure built will be a1 * ds1 + a2 * ds2\n     * @param a1 first scale factor\n     * @param ds1 first base (unscaled) derivative structure\n     * @param a2 second scale factor\n     * @param ds2 second base (unscaled) derivative structure\n     * @exception DimensionMismatchException if number of free parameters or orders are inconsistent\n     */\n    public DerivativeStructure(final double a1, final DerivativeStructure ds1,\n                               final double a2, final DerivativeStructure ds2)\n        throws DimensionMismatchException {\n        this(ds1.compiler);\n        compiler.checkCompatibility(ds2.compiler);\n        compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, data, 0);\n    }\n\n    /** Linear combination constructor.\n     * The derivative structure built will be a1 * ds1 + a2 * ds2 + a3 * ds3\n     * @param a1 first scale factor\n     * @param ds1 first base (unscaled) derivative structure\n     * @param a2 second scale factor\n     * @param ds2 second base (unscaled) derivative structure\n     * @param a3 third scale factor\n     * @param ds3 third base (unscaled) derivative structure\n     * @exception DimensionMismatchException if number of free parameters or orders are inconsistent\n     */\n    public DerivativeStructure(final double a1, final DerivativeStructure ds1,\n                               final double a2, final DerivativeStructure ds2,\n                               final double a3, final DerivativeStructure ds3)\n        throws DimensionMismatchException {\n        this(ds1.compiler);\n        compiler.checkCompatibility(ds2.compiler);\n        compiler.checkCompatibility(ds3.compiler);\n        compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, a3, ds3.data, 0, data, 0);\n    }\n\n    /** Linear combination constructor.\n     * The derivative structure built will be a1 * ds1 + a2 * ds2 + a3 * ds3 + a4 * ds4\n     * @param a1 first scale factor\n     * @param ds1 first base (unscaled) derivative structure\n     * @param a2 second scale factor\n     * @param ds2 second base (unscaled) derivative structure\n     * @param a3 third scale factor\n     * @param ds3 third base (unscaled) derivative structure\n     * @param a4 fourth scale factor\n     * @param ds4 fourth base (unscaled) derivative structure\n     * @exception DimensionMismatchException if number of free parameters or orders are inconsistent\n     */\n    public DerivativeStructure(final double a1, final DerivativeStructure ds1,\n                               final double a2, final DerivativeStructure ds2,\n                               final double a3, final DerivativeStructure ds3,\n                               final double a4, final DerivativeStructure ds4)\n        throws DimensionMismatchException {\n        this(ds1.compiler);\n        compiler.checkCompatibility(ds2.compiler);\n        compiler.checkCompatibility(ds3.compiler);\n        compiler.checkCompatibility(ds4.compiler);\n        compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0,\n                                   a3, ds3.data, 0, a4, ds4.data, 0,\n                                   data, 0);\n    }\n\n    /** Build an instance from all its derivatives.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param derivatives derivatives sorted according to\n     * {@link DSCompiler#getPartialDerivativeIndex(int...)}\n     * @exception DimensionMismatchException if derivatives array does not match the\n     * {@link DSCompiler#getSize() size} expected by the compiler\n     * @throws NumberIsTooLargeException if order is too large\n     * @see #getAllDerivatives()\n     */\n    public DerivativeStructure(final int parameters, final int order, final double ... derivatives)\n        throws DimensionMismatchException, NumberIsTooLargeException {\n        this(parameters, order);\n        if (derivatives.length != data.length) {\n            throw new DimensionMismatchException(derivatives.length, data.length);\n        }\n        System.arraycopy(derivatives, 0, data, 0, data.length);\n    }\n\n    /** Copy constructor.\n     * @param ds instance to copy\n     */\n    private DerivativeStructure(final DerivativeStructure ds) {\n        this.compiler = ds.compiler;\n        this.data     = ds.data.clone();\n    }\n\n    /** Get the number of free parameters.\n     * @return number of free parameters\n     */\n    public int getFreeParameters() {\n        return compiler.getFreeParameters();\n    }\n\n    /** Get the derivation order.\n     * @return derivation order\n     */\n    public int getOrder() {\n        return compiler.getOrder();\n    }\n\n    /** Create a constant compatible with instance order and number of parameters.\n     * <p>\n     * This method is a convenience factory method, it simply calls\n     * {@code new DerivativeStructure(getFreeParameters(), getOrder(), c)}\n     * </p>\n     * @param c value of the constant\n     * @return a constant compatible with instance order and number of parameters\n     * @see #DerivativeStructure(int, int, double)\n     * @since 3.3\n     */\n    public DerivativeStructure createConstant(final double c) {\n        return new DerivativeStructure(getFreeParameters(), getOrder(), c);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public double getReal() {\n        return data[0];\n    }\n\n    /** Get the value part of the derivative structure.\n     * @return value part of the derivative structure\n     * @see #getPartialDerivative(int...)\n     */\n    public double getValue() {\n        return data[0];\n    }\n\n    /** Get a partial derivative.\n     * @param orders derivation orders with respect to each variable (if all orders are 0,\n     * the value is returned)\n     * @return partial derivative\n     * @see #getValue()\n     * @exception DimensionMismatchException if the numbers of variables does not\n     * match the instance\n     * @exception NumberIsTooLargeException if sum of derivation orders is larger\n     * than the instance limits\n     */\n    public double getPartialDerivative(final int ... orders)\n        throws DimensionMismatchException, NumberIsTooLargeException {\n        return data[compiler.getPartialDerivativeIndex(orders)];\n    }\n\n    /** Get all partial derivatives.\n     * @return a fresh copy of partial derivatives, in an array sorted according to\n     * {@link DSCompiler#getPartialDerivativeIndex(int...)}\n     */\n    public double[] getAllDerivatives() {\n        return data.clone();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure add(final double a) {\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        ds.data[0] += a;\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */\n    public DerivativeStructure add(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        compiler.add(data, 0, a.data, 0, ds.data, 0);\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure subtract(final double a) {\n        return add(-a);\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */\n    public DerivativeStructure subtract(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        compiler.subtract(data, 0, a.data, 0, ds.data, 0);\n        return ds;\n    }\n\n    /** {@inheritDoc} */\n    public DerivativeStructure multiply(final int n) {\n        return multiply((double) n);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure multiply(final double a) {\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] *= a;\n        }\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */\n    public DerivativeStructure multiply(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.multiply(data, 0, a.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure divide(final double a) {\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] /= a;\n        }\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */\n    public DerivativeStructure divide(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.divide(data, 0, a.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc} */\n    public DerivativeStructure remainder(final double a) {\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        ds.data[0] = FastMath.IEEEremainder(ds.data[0], a);\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure remainder(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.remainder(data, 0, a.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc} */\n    public DerivativeStructure negate() {\n        final DerivativeStructure ds = new DerivativeStructure(compiler);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] = -data[i];\n        }\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure abs() {\n        if (Double.doubleToLongBits(data[0]) < 0) {\n            // we use the bits representation to also handle -0.0\n            return negate();\n        } else {\n            return this;\n        }\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure ceil() {\n        return new DerivativeStructure(compiler.getFreeParameters(),\n                                       compiler.getOrder(),\n                                       FastMath.ceil(data[0]));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure floor() {\n        return new DerivativeStructure(compiler.getFreeParameters(),\n                                       compiler.getOrder(),\n                                       FastMath.floor(data[0]));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure rint() {\n        return new DerivativeStructure(compiler.getFreeParameters(),\n                                       compiler.getOrder(),\n                                       FastMath.rint(data[0]));\n    }\n\n    /** {@inheritDoc} */\n    public long round() {\n        return FastMath.round(data[0]);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure signum() {\n        return new DerivativeStructure(compiler.getFreeParameters(),\n                                       compiler.getOrder(),\n                                       FastMath.signum(data[0]));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure copySign(final DerivativeStructure sign){\n        long m = Double.doubleToLongBits(data[0]);\n        long s = Double.doubleToLongBits(sign.data[0]);\n        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure copySign(final double sign) {\n        long m = Double.doubleToLongBits(data[0]);\n        long s = Double.doubleToLongBits(sign);\n        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /**\n     * Return the exponent of the instance value, removing the bias.\n     * <p>\n     * For double numbers of the form 2<sup>x</sup>, the unbiased\n     * exponent is exactly x.\n     * </p>\n     * @return exponent for instance in IEEE754 representation, without bias\n     */\n    public int getExponent() {\n        return FastMath.getExponent(data[0]);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure scalb(final int n) {\n        final DerivativeStructure ds = new DerivativeStructure(compiler);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] = FastMath.scalb(data[i], n);\n        }\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure hypot(final DerivativeStructure y)\n        throws DimensionMismatchException {\n\n        compiler.checkCompatibility(y.compiler);\n\n        if (Double.isInfinite(data[0]) || Double.isInfinite(y.data[0])) {\n            return new DerivativeStructure(compiler.getFreeParameters(),\n                                           compiler.getFreeParameters(),\n                                           Double.POSITIVE_INFINITY);\n        } else if (Double.isNaN(data[0]) || Double.isNaN(y.data[0])) {\n            return new DerivativeStructure(compiler.getFreeParameters(),\n                                           compiler.getFreeParameters(),\n                                           Double.NaN);\n        } else {\n\n            final int expX = getExponent();\n            final int expY = y.getExponent();\n            if (expX > expY + 27) {\n                // y is neglectible with respect to x\n                return abs();\n            } else if (expY > expX + 27) {\n                // x is neglectible with respect to y\n                return y.abs();\n            } else {\n\n                // find an intermediate scale to avoid both overflow and underflow\n                final int middleExp = (expX + expY) / 2;\n\n                // scale parameters without losing precision\n                final DerivativeStructure scaledX = scalb(-middleExp);\n                final DerivativeStructure scaledY = y.scalb(-middleExp);\n\n                // compute scaled hypotenuse\n                final DerivativeStructure scaledH =\n                        scaledX.multiply(scaledX).add(scaledY.multiply(scaledY)).sqrt();\n\n                // remove scaling\n                return scaledH.scalb(middleExp);\n\n            }\n\n        }\n    }\n\n    /**\n     * Returns the hypotenuse of a triangle with sides {@code x} and {@code y}\n     * - sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)\n     * avoiding intermediate overflow or underflow.\n     *\n     * <ul>\n     * <li> If either argument is infinite, then the result is positive infinity.</li>\n     * <li> else, if either argument is NaN then the result is NaN.</li>\n     * </ul>\n     *\n     * @param x a value\n     * @param y a value\n     * @return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y)\n        throws DimensionMismatchException {\n        return x.hypot(y);\n    }\n\n    /** Compute composition of the instance by a univariate function.\n     * @param f array of value and derivatives of the function at\n     * the current point (i.e. [f({@link #getValue()}),\n     * f'({@link #getValue()}), f''({@link #getValue()})...]).\n     * @return f(this)\n     * @exception DimensionMismatchException if the number of derivatives\n     * in the array is not equal to {@link #getOrder() order} + 1\n     */\n    public DerivativeStructure compose(final double ... f)\n        throws DimensionMismatchException {\n        if (f.length != getOrder() + 1) {\n            throw new DimensionMismatchException(f.length, getOrder() + 1);\n        }\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.compose(data, 0, f, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc} */\n    public DerivativeStructure reciprocal() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.pow(data, 0, -1, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure sqrt() {\n        return rootN(2);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure cbrt() {\n        return rootN(3);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure rootN(final int n) {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.rootN(data, 0, n, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc} */\n    public Field<DerivativeStructure> getField() {\n        return new Field<DerivativeStructure>() {\n\n            /** {@inheritDoc} */\n            public DerivativeStructure getZero() {\n                return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 0.0);\n            }\n\n            /** {@inheritDoc} */\n            public DerivativeStructure getOne() {\n                return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 1.0);\n            }\n\n            /** {@inheritDoc} */\n            public Class<? extends FieldElement<DerivativeStructure>> getRuntimeClass() {\n                return DerivativeStructure.class;\n            }\n\n        };\n    }\n\n    /** Compute a<sup>x</sup> where a is a double and x a {@link DerivativeStructure}\n     * @param a number to exponentiate\n     * @param x power to apply\n     * @return a<sup>x</sup>\n     * @since 3.3\n     */\n    public static DerivativeStructure pow(final double a, final DerivativeStructure x) {\n        final DerivativeStructure result = new DerivativeStructure(x.compiler);\n        x.compiler.pow(a, x.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure pow(final double p) {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.pow(data, 0, p, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure pow(final int n) {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.pow(data, 0, n, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure pow(final DerivativeStructure e)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(e.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.pow(data, 0, e.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure exp() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.exp(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure expm1() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.expm1(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure log() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.log(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure log1p() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.log1p(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** Base 10 logarithm.\n     * @return base 10 logarithm of the instance\n     */\n    public DerivativeStructure log10() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.log10(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure cos() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.cos(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure sin() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.sin(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure tan() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.tan(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure acos() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.acos(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure asin() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.asin(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure atan() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.atan(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure atan2(final DerivativeStructure x)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(x.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.atan2(data, 0, x.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** Two arguments arc tangent operation.\n     * @param y first argument of the arc tangent\n     * @param x second argument of the arc tangent\n     * @return atan2(y, x)\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x)\n        throws DimensionMismatchException {\n        return y.atan2(x);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure cosh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.cosh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure sinh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.sinh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure tanh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.tanh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure acosh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.acosh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure asinh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.asinh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure atanh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.atanh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** Convert radians to degrees, with error of less than 0.5 ULP\n     *  @return instance converted into degrees\n     */\n    public DerivativeStructure toDegrees() {\n        final DerivativeStructure ds = new DerivativeStructure(compiler);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] = FastMath.toDegrees(data[i]);\n        }\n        return ds;\n    }\n\n    /** Convert degrees to radians, with error of less than 0.5 ULP\n     *  @return instance converted into radians\n     */\n    public DerivativeStructure toRadians() {\n        final DerivativeStructure ds = new DerivativeStructure(compiler);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] = FastMath.toRadians(data[i]);\n        }\n        return ds;\n    }\n\n    /** Evaluate Taylor expansion a derivative structure.\n     * @param delta parameters offsets (&Delta;x, &Delta;y, ...)\n     * @return value of the Taylor expansion at x + &Delta;x, y + &Delta;y, ...\n     * @throws MathArithmeticException if factorials becomes too large\n     */\n    public double taylor(final double ... delta) throws MathArithmeticException {\n        return compiler.taylor(data, 0, delta);\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final DerivativeStructure[] a, final DerivativeStructure[] b)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double[] aDouble = new double[a.length];\n        for (int i = 0; i < a.length; ++i) {\n            aDouble[i] = a[i].getValue();\n        }\n        final double[] bDouble = new double[b.length];\n        for (int i = 0; i < b.length; ++i) {\n            bDouble[i] = b[i].getValue();\n        }\n        final double accurateValue = MathArrays.linearCombination(aDouble, bDouble);\n\n        // compute a simple value, with all partial derivatives\n        DerivativeStructure simpleValue = a[0].getField().getZero();\n        for (int i = 0; i < a.length; ++i) {\n            simpleValue = simpleValue.add(a[i].multiply(b[i]));\n        }\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final double[] a, final DerivativeStructure[] b)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double[] bDouble = new double[b.length];\n        for (int i = 0; i < b.length; ++i) {\n            bDouble[i] = b[i].getValue();\n        }\n        final double accurateValue = MathArrays.linearCombination(a, bDouble);\n\n        // compute a simple value, with all partial derivatives\n        DerivativeStructure simpleValue = b[0].getField().getZero();\n        for (int i = 0; i < a.length; ++i) {\n            simpleValue = simpleValue.add(b[i].multiply(a[i]));\n        }\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,\n                                                 final DerivativeStructure a2, final DerivativeStructure b2)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),\n                                                                  a2.getValue(), b2.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,\n                                                 final double a2, final DerivativeStructure b2)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),\n                                                                  a2, b2.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,\n                                                 final DerivativeStructure a2, final DerivativeStructure b2,\n                                                 final DerivativeStructure a3, final DerivativeStructure b3)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),\n                                                                  a2.getValue(), b2.getValue(),\n                                                                  a3.getValue(), b3.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,\n                                                 final double a2, final DerivativeStructure b2,\n                                                 final double a3, final DerivativeStructure b3)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),\n                                                                  a2, b2.getValue(),\n                                                                  a3, b3.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,\n                                                 final DerivativeStructure a2, final DerivativeStructure b2,\n                                                 final DerivativeStructure a3, final DerivativeStructure b3,\n                                                 final DerivativeStructure a4, final DerivativeStructure b4)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),\n                                                                  a2.getValue(), b2.getValue(),\n                                                                  a3.getValue(), b3.getValue(),\n                                                                  a4.getValue(), b4.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3)).add(a4.multiply(b4));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,\n                                                 final double a2, final DerivativeStructure b2,\n                                                 final double a3, final DerivativeStructure b3,\n                                                 final double a4, final DerivativeStructure b4)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),\n                                                                  a2, b2.getValue(),\n                                                                  a3, b3.getValue(),\n                                                                  a4, b4.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3)).add(b4.multiply(a4));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /**\n     * Test for the equality of two derivative structures.\n     * <p>\n     * Derivative structures are considered equal if they have the same number\n     * of free parameters, the same derivation order, and the same derivatives.\n     * </p>\n     * @param other Object to test for equality to this\n     * @return true if two derivative structures are equal\n     * @since 3.2\n     */\n    @Override\n    public boolean equals(Object other) {\n\n        if (this == other) {\n            return true;\n        }\n\n        if (other instanceof DerivativeStructure) {\n            final DerivativeStructure rhs = (DerivativeStructure)other;\n            return (getFreeParameters() == rhs.getFreeParameters()) &&\n                   (getOrder() == rhs.getOrder()) &&\n                   MathArrays.equals(data, rhs.data);\n        }\n\n        return false;\n\n    }\n\n    /**\n     * Get a hashCode for the derivative structure.\n     * @return a hash code value for this object\n     * @since 3.2\n     */\n    @Override\n    public int hashCode() {\n        return 227 + 229 * getFreeParameters() + 233 * getOrder() + 239 * MathUtils.hash(data);\n    }\n\n    /**\n     * Replace the instance with a data transfer object for serialization.\n     * @return data transfer object that will be serialized\n     */\n    private Object writeReplace() {\n        return new DataTransferObject(compiler.getFreeParameters(), compiler.getOrder(), data);\n    }\n\n    /** Internal class used only for serialization. */\n    private static class DataTransferObject implements Serializable {\n\n        /** Serializable UID. */\n        private static final long serialVersionUID = 20120730L;\n\n        /** Number of variables.\n         * @serial\n         */\n        private final int variables;\n\n        /** Derivation order.\n         * @serial\n         */\n        private final int order;\n\n        /** Partial derivatives.\n         * @serial\n         */\n        private final double[] data;\n\n        /** Simple constructor.\n         * @param variables number of variables\n         * @param order derivation order\n         * @param data partial derivatives\n         */\n        DataTransferObject(final int variables, final int order, final double[] data) {\n            this.variables = variables;\n            this.order     = order;\n            this.data      = data;\n        }\n\n        /** Replace the deserialized data transfer object with a {@link DerivativeStructure}.\n         * @return replacement {@link DerivativeStructure}\n         */\n        private Object readResolve() {\n            return new DerivativeStructure(variables, order, data);\n        }\n\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ [ "2", "int" ], [ "2", "int" ], [ "2", "int" ], [ "2", "int" ], [ "3.2", "double" ] ],
  "tokensMethodArguments" : [ [ "x", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure" ], [ "y", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "multiply", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure multiply(final DerivativeStructure a) throws DimensionMismatchException" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(double arg0)" ], [ "log", "org.apache.commons.math3", "RealFieldElement", "public abstract T log()" ], [ "cosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T cosh()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1, final double a2, final DerivativeStructure b2, final double a3, final DerivativeStructure b3, final double a4, final DerivativeStructure b4) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1, final DerivativeStructure a2, final DerivativeStructure b2) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1, final double a2, final DerivativeStructure b2, final double a3, final DerivativeStructure b3) throws DimensionMismatchException" ], [ "acosh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure acosh()" ], [ "atanh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure atanh()" ], [ "signum", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure signum()" ], [ "divide", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure divide(final double a)" ], [ "acos", "org.apache.commons.math3", "RealFieldElement", "public abstract T acos()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final double[] a, final DerivativeStructure[] b) throws DimensionMismatchException" ], [ "floor", "org.apache.commons.math3", "RealFieldElement", "public abstract T floor()" ], [ "getField", "org.apache.commons.math3", "FieldElement", "public abstract Field<T> getField()" ], [ "toRadians", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure toRadians()" ], [ "negate", "org.apache.commons.math3", "FieldElement", "public abstract T negate()" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(double arg0)" ], [ "getPartialDerivative", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double getPartialDerivative(final int... orders) throws DimensionMismatchException, NumberIsTooLargeException" ], [ "getFreeParameters", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int getFreeParameters()" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure createConstant(final double c)" ], [ "divide", "org.apache.commons.math3", "RealFieldElement", "public abstract T divide(double arg0)" ], [ "asinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T asinh()" ], [ "reciprocal", "org.apache.commons.math3", "RealFieldElement", "public abstract T reciprocal()" ], [ "cos", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure cos()" ], [ "rint", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure rint()" ], [ "sinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T sinh()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(int arg0)" ], [ "acos", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure acos()" ], [ "log1p", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure log1p()" ], [ "hypot", "org.apache.commons.math3", "RealFieldElement", "public abstract T hypot(T arg0) throws DimensionMismatchException" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure multiply(final double a)" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final DerivativeStructure[] a, final DerivativeStructure[] b) throws DimensionMismatchException" ], [ "exp", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure exp()" ], [ "abs", "org.apache.commons.math3", "RealFieldElement", "public abstract T abs()" ], [ "cos", "org.apache.commons.math3", "RealFieldElement", "public abstract T cos()" ], [ "add", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure add(final DerivativeStructure a) throws DimensionMismatchException" ], [ "copySign", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure copySign(final DerivativeStructure sign)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3)" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(T arg0)" ], [ "add", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure add(final double a)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "sqrt", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure sqrt()" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(T arg0) throws NullArgumentException" ], [ "cosh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure cosh()" ], [ "tanh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure tanh()" ], [ "equals", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public boolean equals(Object other)" ], [ "tan", "org.apache.commons.math3", "RealFieldElement", "public abstract T tan()" ], [ "cbrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T cbrt()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1, final double a2, final DerivativeStructure b2) throws DimensionMismatchException" ], [ "log10", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure log10()" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure atan2(final DerivativeStructure x) throws DimensionMismatchException" ], [ "log", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure log()" ], [ "negate", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure negate()" ], [ "taylor", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double taylor(final double... delta) throws MathArithmeticException" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure hypot(final DerivativeStructure y) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5)" ], [ "acosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T acosh()" ], [ "remainder", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure remainder(final double a)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "sinh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure sinh()" ], [ "atan2", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan2(T arg0) throws DimensionMismatchException" ], [ "add", "org.apache.commons.math3", "RealFieldElement", "public abstract T add(double arg0)" ], [ "subtract", "org.apache.commons.math3", "RealFieldElement", "public abstract T subtract(double arg0)" ], [ "atanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T atanh()" ], [ "getReal", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double getReal()" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure pow(final int n)" ], [ "getOrder", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int getOrder()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5, T arg6, T arg7)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3)" ], [ "abs", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure abs()" ], [ "sin", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure sin()" ], [ "getValue", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double getValue()" ], [ "rootN", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure rootN(final int n)" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(T arg0) throws DimensionMismatchException" ], [ "hashCode", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int hashCode()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "copySign", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure copySign(final double sign)" ], [ "expm1", "org.apache.commons.math3", "RealFieldElement", "public abstract T expm1()" ], [ "scalb", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure scalb(final int n)" ], [ "toDegrees", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure toDegrees()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1, final DerivativeStructure a2, final DerivativeStructure b2, final DerivativeStructure a3, final DerivativeStructure b3, final DerivativeStructure a4, final DerivativeStructure b4) throws DimensionMismatchException" ], [ "rint", "org.apache.commons.math3", "RealFieldElement", "public abstract T rint()" ], [ "scalb", "org.apache.commons.math3", "RealFieldElement", "public abstract T scalb(int arg0)" ], [ "cbrt", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure cbrt()" ], [ "multiply", "org.apache.commons.math3", "RealFieldElement", "public abstract T multiply(double arg0)" ], [ "ceil", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure ceil()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5, double arg6, T arg7)" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(int arg0)" ], [ "sqrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T sqrt()" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(T arg0) throws DimensionMismatchException" ], [ "round", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public long round()" ], [ "exp", "org.apache.commons.math3", "RealFieldElement", "public abstract T exp()" ], [ "subtract", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure subtract(final double a)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure pow(final double p)" ], [ "getExponent", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int getExponent()" ], [ "remainder", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure remainder(final DerivativeStructure a) throws DimensionMismatchException" ], [ "asin", "org.apache.commons.math3", "RealFieldElement", "public abstract T asin()" ], [ "rootN", "org.apache.commons.math3", "RealFieldElement", "public abstract T rootN(int arg0)" ], [ "compose", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure compose(final double... f) throws DimensionMismatchException" ], [ "ceil", "org.apache.commons.math3", "RealFieldElement", "public abstract T ceil()" ], [ "log1p", "org.apache.commons.math3", "RealFieldElement", "public abstract T log1p()" ], [ "divide", "org.apache.commons.math3", "FieldElement", "public abstract T divide(T arg0) throws NullArgumentException, MathArithmeticException" ], [ "tan", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure tan()" ], [ "tanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T tanh()" ], [ "asinh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure asinh()" ], [ "asin", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure asin()" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure multiply(final int n)" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(double arg0)" ], [ "floor", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure floor()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1, final DerivativeStructure a2, final DerivativeStructure b2, final DerivativeStructure a3, final DerivativeStructure b3) throws DimensionMismatchException" ], [ "atan", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure atan()" ], [ "atan", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan()" ], [ "subtract", "org.apache.commons.math3", "FieldElement", "public abstract T subtract(T arg0) throws NullArgumentException" ], [ "signum", "org.apache.commons.math3", "RealFieldElement", "public abstract T signum()" ], [ "add", "org.apache.commons.math3", "FieldElement", "public abstract T add(T arg0) throws NullArgumentException" ], [ "subtract", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure subtract(final DerivativeStructure a) throws DimensionMismatchException" ], [ "expm1", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure expm1()" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure pow(final DerivativeStructure e) throws DimensionMismatchException" ], [ "divide", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure divide(final DerivativeStructure a) throws DimensionMismatchException" ], [ "sin", "org.apache.commons.math3", "RealFieldElement", "public abstract T sin()" ], [ "getField", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public Field<DerivativeStructure> getField()" ], [ "reciprocal", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure reciprocal()" ], [ "getAllDerivatives", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double[] getAllDerivatives()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "round", "org.apache.commons.math3", "RealFieldElement", "public abstract long round()" ], [ "getReal", "org.apache.commons.math3", "RealFieldElement", "public abstract double getReal()" ], [ "reciprocal", "org.apache.commons.math3", "FieldElement", "public abstract T reciprocal() throws MathArithmeticException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 13530,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.analysis.differentiation",
  "className" : "DerivativeStructure",
  "javadocTag" : "@throws DimensionMismatchException if number of free parameters\nor orders do not match",
  "methodJavadoc" : "    /** Two arguments arc tangent operation.\n     * @param y first argument of the arc tangent\n     * @param x second argument of the arc tangent\n     * @return atan2(y, x)\n     * @throws DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */",
  "methodSourceCode" : "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException{\n    return y.atan2(x);\n}",
  "classJavadoc" : "/** Class representing both the value and the differentials of a function.\n * <p>This class is the workhorse of the differentiation package.</p>\n * <p>This class is an implementation of the extension to Rall's\n * numbers described in Dan Kalman's paper <a\n * href=\"http://www1.american.edu/cas/mathstat/People/kalman/pdffiles/mmgautodiff.pdf\">Doubly\n * Recursive Multivariate Automatic Differentiation</a>, Mathematics Magazine, vol. 75,\n * no. 3, June 2002. Rall's numbers are an extension to the real numbers used\n * throughout mathematical expressions; they hold the derivative together with the\n * value of a function. Dan Kalman's derivative structures hold all partial derivatives\n * up to any specified order, with respect to any number of free parameters. Rall's\n * numbers therefore can be seen as derivative structures for order one derivative and\n * one free parameter, and real numbers can be seen as derivative structures with zero\n * order derivative and no free parameters.</p>\n * <p>{@link DerivativeStructure} instances can be used directly thanks to\n * the arithmetic operators to the mathematical functions provided as\n * methods by this class (+, -, *, /, %, sin, cos ...).</p>\n * <p>Implementing complex expressions by hand using these classes is\n * a tedious and error-prone task but has the advantage of having no limitation\n * on the derivation order despite no requiring users to compute the derivatives by\n * themselves. Implementing complex expression can also be done by developing computation\n * code using standard primitive double values and to use {@link\n * UnivariateFunctionDifferentiator differentiators} to create the {@link\n * DerivativeStructure}-based instances. This method is simpler but may be limited in\n * the accuracy and derivation orders and may be computationally intensive (this is\n * typically the case for {@link FiniteDifferencesDifferentiator finite differences\n * differentiator}.</p>\n * <p>Instances of this class are guaranteed to be immutable.</p>\n * @see DSCompiler\n * @since 3.1\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math3.analysis.differentiation;\n\nimport java.io.Serializable;\n\nimport org.apache.commons.math3.Field;\nimport org.apache.commons.math3.FieldElement;\nimport org.apache.commons.math3.RealFieldElement;\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.exception.MathArithmeticException;\nimport org.apache.commons.math3.exception.NumberIsTooLargeException;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathArrays;\nimport org.apache.commons.math3.util.MathUtils;\n\n/** Class representing both the value and the differentials of a function.\n * <p>This class is the workhorse of the differentiation package.</p>\n * <p>This class is an implementation of the extension to Rall's\n * numbers described in Dan Kalman's paper <a\n * href=\"http://www1.american.edu/cas/mathstat/People/kalman/pdffiles/mmgautodiff.pdf\">Doubly\n * Recursive Multivariate Automatic Differentiation</a>, Mathematics Magazine, vol. 75,\n * no. 3, June 2002. Rall's numbers are an extension to the real numbers used\n * throughout mathematical expressions; they hold the derivative together with the\n * value of a function. Dan Kalman's derivative structures hold all partial derivatives\n * up to any specified order, with respect to any number of free parameters. Rall's\n * numbers therefore can be seen as derivative structures for order one derivative and\n * one free parameter, and real numbers can be seen as derivative structures with zero\n * order derivative and no free parameters.</p>\n * <p>{@link DerivativeStructure} instances can be used directly thanks to\n * the arithmetic operators to the mathematical functions provided as\n * methods by this class (+, -, *, /, %, sin, cos ...).</p>\n * <p>Implementing complex expressions by hand using these classes is\n * a tedious and error-prone task but has the advantage of having no limitation\n * on the derivation order despite no requiring users to compute the derivatives by\n * themselves. Implementing complex expression can also be done by developing computation\n * code using standard primitive double values and to use {@link\n * UnivariateFunctionDifferentiator differentiators} to create the {@link\n * DerivativeStructure}-based instances. This method is simpler but may be limited in\n * the accuracy and derivation orders and may be computationally intensive (this is\n * typically the case for {@link FiniteDifferencesDifferentiator finite differences\n * differentiator}.</p>\n * <p>Instances of this class are guaranteed to be immutable.</p>\n * @see DSCompiler\n * @since 3.1\n */\npublic class DerivativeStructure implements RealFieldElement<DerivativeStructure>, Serializable {\n\n    /** Serializable UID. */\n    private static final long serialVersionUID = 20120730L;\n\n    /** Compiler for the current dimensions. */\n    private transient DSCompiler compiler;\n\n    /** Combined array holding all values. */\n    private final double[] data;\n\n    /** Build an instance with all values and derivatives set to 0.\n     * @param compiler compiler to use for computation\n     */\n    private DerivativeStructure(final DSCompiler compiler) {\n        this.compiler = compiler;\n        this.data     = new double[compiler.getSize()];\n    }\n\n    /** Build an instance with all values and derivatives set to 0.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @throws NumberIsTooLargeException if order is too large\n     */\n    public DerivativeStructure(final int parameters, final int order)\n        throws NumberIsTooLargeException {\n        this(DSCompiler.getCompiler(parameters, order));\n    }\n\n    /** Build an instance representing a constant value.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param value value of the constant\n     * @throws NumberIsTooLargeException if order is too large\n     * @see #DerivativeStructure(int, int, int, double)\n     */\n    public DerivativeStructure(final int parameters, final int order, final double value)\n        throws NumberIsTooLargeException {\n        this(parameters, order);\n        this.data[0] = value;\n    }\n\n    /** Build an instance representing a variable.\n     * <p>Instances built using this constructor are considered\n     * to be the free variables with respect to which differentials\n     * are computed. As such, their differential with respect to\n     * themselves is +1.</p>\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param index index of the variable (from 0 to {@code parameters - 1})\n     * @param value value of the variable\n     * @exception NumberIsTooLargeException if {@code index >= parameters}.\n     * @see #DerivativeStructure(int, int, double)\n     */\n    public DerivativeStructure(final int parameters, final int order,\n                               final int index, final double value)\n        throws NumberIsTooLargeException {\n        this(parameters, order, value);\n\n        if (index >= parameters) {\n            throw new NumberIsTooLargeException(index, parameters, false);\n        }\n\n        if (order > 0) {\n            // the derivative of the variable with respect to itself is 1.\n            data[DSCompiler.getCompiler(index, order).getSize()] = 1.0;\n        }\n\n    }\n\n    /** Linear combination constructor.\n     * The derivative structure built will be a1 * ds1 + a2 * ds2\n     * @param a1 first scale factor\n     * @param ds1 first base (unscaled) derivative structure\n     * @param a2 second scale factor\n     * @param ds2 second base (unscaled) derivative structure\n     * @exception DimensionMismatchException if number of free parameters or orders are inconsistent\n     */\n    public DerivativeStructure(final double a1, final DerivativeStructure ds1,\n                               final double a2, final DerivativeStructure ds2)\n        throws DimensionMismatchException {\n        this(ds1.compiler);\n        compiler.checkCompatibility(ds2.compiler);\n        compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, data, 0);\n    }\n\n    /** Linear combination constructor.\n     * The derivative structure built will be a1 * ds1 + a2 * ds2 + a3 * ds3\n     * @param a1 first scale factor\n     * @param ds1 first base (unscaled) derivative structure\n     * @param a2 second scale factor\n     * @param ds2 second base (unscaled) derivative structure\n     * @param a3 third scale factor\n     * @param ds3 third base (unscaled) derivative structure\n     * @exception DimensionMismatchException if number of free parameters or orders are inconsistent\n     */\n    public DerivativeStructure(final double a1, final DerivativeStructure ds1,\n                               final double a2, final DerivativeStructure ds2,\n                               final double a3, final DerivativeStructure ds3)\n        throws DimensionMismatchException {\n        this(ds1.compiler);\n        compiler.checkCompatibility(ds2.compiler);\n        compiler.checkCompatibility(ds3.compiler);\n        compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, a3, ds3.data, 0, data, 0);\n    }\n\n    /** Linear combination constructor.\n     * The derivative structure built will be a1 * ds1 + a2 * ds2 + a3 * ds3 + a4 * ds4\n     * @param a1 first scale factor\n     * @param ds1 first base (unscaled) derivative structure\n     * @param a2 second scale factor\n     * @param ds2 second base (unscaled) derivative structure\n     * @param a3 third scale factor\n     * @param ds3 third base (unscaled) derivative structure\n     * @param a4 fourth scale factor\n     * @param ds4 fourth base (unscaled) derivative structure\n     * @exception DimensionMismatchException if number of free parameters or orders are inconsistent\n     */\n    public DerivativeStructure(final double a1, final DerivativeStructure ds1,\n                               final double a2, final DerivativeStructure ds2,\n                               final double a3, final DerivativeStructure ds3,\n                               final double a4, final DerivativeStructure ds4)\n        throws DimensionMismatchException {\n        this(ds1.compiler);\n        compiler.checkCompatibility(ds2.compiler);\n        compiler.checkCompatibility(ds3.compiler);\n        compiler.checkCompatibility(ds4.compiler);\n        compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0,\n                                   a3, ds3.data, 0, a4, ds4.data, 0,\n                                   data, 0);\n    }\n\n    /** Build an instance from all its derivatives.\n     * @param parameters number of free parameters\n     * @param order derivation order\n     * @param derivatives derivatives sorted according to\n     * {@link DSCompiler#getPartialDerivativeIndex(int...)}\n     * @exception DimensionMismatchException if derivatives array does not match the\n     * {@link DSCompiler#getSize() size} expected by the compiler\n     * @throws NumberIsTooLargeException if order is too large\n     * @see #getAllDerivatives()\n     */\n    public DerivativeStructure(final int parameters, final int order, final double ... derivatives)\n        throws DimensionMismatchException, NumberIsTooLargeException {\n        this(parameters, order);\n        if (derivatives.length != data.length) {\n            throw new DimensionMismatchException(derivatives.length, data.length);\n        }\n        System.arraycopy(derivatives, 0, data, 0, data.length);\n    }\n\n    /** Copy constructor.\n     * @param ds instance to copy\n     */\n    private DerivativeStructure(final DerivativeStructure ds) {\n        this.compiler = ds.compiler;\n        this.data     = ds.data.clone();\n    }\n\n    /** Get the number of free parameters.\n     * @return number of free parameters\n     */\n    public int getFreeParameters() {\n        return compiler.getFreeParameters();\n    }\n\n    /** Get the derivation order.\n     * @return derivation order\n     */\n    public int getOrder() {\n        return compiler.getOrder();\n    }\n\n    /** Create a constant compatible with instance order and number of parameters.\n     * <p>\n     * This method is a convenience factory method, it simply calls\n     * {@code new DerivativeStructure(getFreeParameters(), getOrder(), c)}\n     * </p>\n     * @param c value of the constant\n     * @return a constant compatible with instance order and number of parameters\n     * @see #DerivativeStructure(int, int, double)\n     * @since 3.3\n     */\n    public DerivativeStructure createConstant(final double c) {\n        return new DerivativeStructure(getFreeParameters(), getOrder(), c);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public double getReal() {\n        return data[0];\n    }\n\n    /** Get the value part of the derivative structure.\n     * @return value part of the derivative structure\n     * @see #getPartialDerivative(int...)\n     */\n    public double getValue() {\n        return data[0];\n    }\n\n    /** Get a partial derivative.\n     * @param orders derivation orders with respect to each variable (if all orders are 0,\n     * the value is returned)\n     * @return partial derivative\n     * @see #getValue()\n     * @exception DimensionMismatchException if the numbers of variables does not\n     * match the instance\n     * @exception NumberIsTooLargeException if sum of derivation orders is larger\n     * than the instance limits\n     */\n    public double getPartialDerivative(final int ... orders)\n        throws DimensionMismatchException, NumberIsTooLargeException {\n        return data[compiler.getPartialDerivativeIndex(orders)];\n    }\n\n    /** Get all partial derivatives.\n     * @return a fresh copy of partial derivatives, in an array sorted according to\n     * {@link DSCompiler#getPartialDerivativeIndex(int...)}\n     */\n    public double[] getAllDerivatives() {\n        return data.clone();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure add(final double a) {\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        ds.data[0] += a;\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */\n    public DerivativeStructure add(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        compiler.add(data, 0, a.data, 0, ds.data, 0);\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure subtract(final double a) {\n        return add(-a);\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */\n    public DerivativeStructure subtract(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        compiler.subtract(data, 0, a.data, 0, ds.data, 0);\n        return ds;\n    }\n\n    /** {@inheritDoc} */\n    public DerivativeStructure multiply(final int n) {\n        return multiply((double) n);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure multiply(final double a) {\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] *= a;\n        }\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */\n    public DerivativeStructure multiply(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.multiply(data, 0, a.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure divide(final double a) {\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] /= a;\n        }\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     */\n    public DerivativeStructure divide(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.divide(data, 0, a.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc} */\n    public DerivativeStructure remainder(final double a) {\n        final DerivativeStructure ds = new DerivativeStructure(this);\n        ds.data[0] = FastMath.IEEEremainder(ds.data[0], a);\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure remainder(final DerivativeStructure a)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(a.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.remainder(data, 0, a.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc} */\n    public DerivativeStructure negate() {\n        final DerivativeStructure ds = new DerivativeStructure(compiler);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] = -data[i];\n        }\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure abs() {\n        if (Double.doubleToLongBits(data[0]) < 0) {\n            // we use the bits representation to also handle -0.0\n            return negate();\n        } else {\n            return this;\n        }\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure ceil() {\n        return new DerivativeStructure(compiler.getFreeParameters(),\n                                       compiler.getOrder(),\n                                       FastMath.ceil(data[0]));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure floor() {\n        return new DerivativeStructure(compiler.getFreeParameters(),\n                                       compiler.getOrder(),\n                                       FastMath.floor(data[0]));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure rint() {\n        return new DerivativeStructure(compiler.getFreeParameters(),\n                                       compiler.getOrder(),\n                                       FastMath.rint(data[0]));\n    }\n\n    /** {@inheritDoc} */\n    public long round() {\n        return FastMath.round(data[0]);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure signum() {\n        return new DerivativeStructure(compiler.getFreeParameters(),\n                                       compiler.getOrder(),\n                                       FastMath.signum(data[0]));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure copySign(final DerivativeStructure sign){\n        long m = Double.doubleToLongBits(data[0]);\n        long s = Double.doubleToLongBits(sign.data[0]);\n        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure copySign(final double sign) {\n        long m = Double.doubleToLongBits(data[0]);\n        long s = Double.doubleToLongBits(sign);\n        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /**\n     * Return the exponent of the instance value, removing the bias.\n     * <p>\n     * For double numbers of the form 2<sup>x</sup>, the unbiased\n     * exponent is exactly x.\n     * </p>\n     * @return exponent for instance in IEEE754 representation, without bias\n     */\n    public int getExponent() {\n        return FastMath.getExponent(data[0]);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure scalb(final int n) {\n        final DerivativeStructure ds = new DerivativeStructure(compiler);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] = FastMath.scalb(data[i], n);\n        }\n        return ds;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure hypot(final DerivativeStructure y)\n        throws DimensionMismatchException {\n\n        compiler.checkCompatibility(y.compiler);\n\n        if (Double.isInfinite(data[0]) || Double.isInfinite(y.data[0])) {\n            return new DerivativeStructure(compiler.getFreeParameters(),\n                                           compiler.getFreeParameters(),\n                                           Double.POSITIVE_INFINITY);\n        } else if (Double.isNaN(data[0]) || Double.isNaN(y.data[0])) {\n            return new DerivativeStructure(compiler.getFreeParameters(),\n                                           compiler.getFreeParameters(),\n                                           Double.NaN);\n        } else {\n\n            final int expX = getExponent();\n            final int expY = y.getExponent();\n            if (expX > expY + 27) {\n                // y is neglectible with respect to x\n                return abs();\n            } else if (expY > expX + 27) {\n                // x is neglectible with respect to y\n                return y.abs();\n            } else {\n\n                // find an intermediate scale to avoid both overflow and underflow\n                final int middleExp = (expX + expY) / 2;\n\n                // scale parameters without losing precision\n                final DerivativeStructure scaledX = scalb(-middleExp);\n                final DerivativeStructure scaledY = y.scalb(-middleExp);\n\n                // compute scaled hypotenuse\n                final DerivativeStructure scaledH =\n                        scaledX.multiply(scaledX).add(scaledY.multiply(scaledY)).sqrt();\n\n                // remove scaling\n                return scaledH.scalb(middleExp);\n\n            }\n\n        }\n    }\n\n    /**\n     * Returns the hypotenuse of a triangle with sides {@code x} and {@code y}\n     * - sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)\n     * avoiding intermediate overflow or underflow.\n     *\n     * <ul>\n     * <li> If either argument is infinite, then the result is positive infinity.</li>\n     * <li> else, if either argument is NaN then the result is NaN.</li>\n     * </ul>\n     *\n     * @param x a value\n     * @param y a value\n     * @return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y)\n        throws DimensionMismatchException {\n        return x.hypot(y);\n    }\n\n    /** Compute composition of the instance by a univariate function.\n     * @param f array of value and derivatives of the function at\n     * the current point (i.e. [f({@link #getValue()}),\n     * f'({@link #getValue()}), f''({@link #getValue()})...]).\n     * @return f(this)\n     * @exception DimensionMismatchException if the number of derivatives\n     * in the array is not equal to {@link #getOrder() order} + 1\n     */\n    public DerivativeStructure compose(final double ... f)\n        throws DimensionMismatchException {\n        if (f.length != getOrder() + 1) {\n            throw new DimensionMismatchException(f.length, getOrder() + 1);\n        }\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.compose(data, 0, f, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc} */\n    public DerivativeStructure reciprocal() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.pow(data, 0, -1, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure sqrt() {\n        return rootN(2);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure cbrt() {\n        return rootN(3);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure rootN(final int n) {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.rootN(data, 0, n, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc} */\n    public Field<DerivativeStructure> getField() {\n        return new Field<DerivativeStructure>() {\n\n            /** {@inheritDoc} */\n            public DerivativeStructure getZero() {\n                return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 0.0);\n            }\n\n            /** {@inheritDoc} */\n            public DerivativeStructure getOne() {\n                return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 1.0);\n            }\n\n            /** {@inheritDoc} */\n            public Class<? extends FieldElement<DerivativeStructure>> getRuntimeClass() {\n                return DerivativeStructure.class;\n            }\n\n        };\n    }\n\n    /** Compute a<sup>x</sup> where a is a double and x a {@link DerivativeStructure}\n     * @param a number to exponentiate\n     * @param x power to apply\n     * @return a<sup>x</sup>\n     * @since 3.3\n     */\n    public static DerivativeStructure pow(final double a, final DerivativeStructure x) {\n        final DerivativeStructure result = new DerivativeStructure(x.compiler);\n        x.compiler.pow(a, x.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure pow(final double p) {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.pow(data, 0, p, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure pow(final int n) {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.pow(data, 0, n, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure pow(final DerivativeStructure e)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(e.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.pow(data, 0, e.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure exp() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.exp(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure expm1() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.expm1(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure log() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.log(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure log1p() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.log1p(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** Base 10 logarithm.\n     * @return base 10 logarithm of the instance\n     */\n    public DerivativeStructure log10() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.log10(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure cos() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.cos(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure sin() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.sin(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure tan() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.tan(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure acos() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.acos(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure asin() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.asin(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure atan() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.atan(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure atan2(final DerivativeStructure x)\n        throws DimensionMismatchException {\n        compiler.checkCompatibility(x.compiler);\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.atan2(data, 0, x.data, 0, result.data, 0);\n        return result;\n    }\n\n    /** Two arguments arc tangent operation.\n     * @param y first argument of the arc tangent\n     * @param x second argument of the arc tangent\n     * @return atan2(y, x)\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x)\n        throws DimensionMismatchException {\n        return y.atan2(x);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure cosh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.cosh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure sinh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.sinh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure tanh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.tanh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure acosh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.acosh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure asinh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.asinh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public DerivativeStructure atanh() {\n        final DerivativeStructure result = new DerivativeStructure(compiler);\n        compiler.atanh(data, 0, result.data, 0);\n        return result;\n    }\n\n    /** Convert radians to degrees, with error of less than 0.5 ULP\n     *  @return instance converted into degrees\n     */\n    public DerivativeStructure toDegrees() {\n        final DerivativeStructure ds = new DerivativeStructure(compiler);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] = FastMath.toDegrees(data[i]);\n        }\n        return ds;\n    }\n\n    /** Convert degrees to radians, with error of less than 0.5 ULP\n     *  @return instance converted into radians\n     */\n    public DerivativeStructure toRadians() {\n        final DerivativeStructure ds = new DerivativeStructure(compiler);\n        for (int i = 0; i < ds.data.length; ++i) {\n            ds.data[i] = FastMath.toRadians(data[i]);\n        }\n        return ds;\n    }\n\n    /** Evaluate Taylor expansion a derivative structure.\n     * @param delta parameters offsets (&Delta;x, &Delta;y, ...)\n     * @return value of the Taylor expansion at x + &Delta;x, y + &Delta;y, ...\n     * @throws MathArithmeticException if factorials becomes too large\n     */\n    public double taylor(final double ... delta) throws MathArithmeticException {\n        return compiler.taylor(data, 0, delta);\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final DerivativeStructure[] a, final DerivativeStructure[] b)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double[] aDouble = new double[a.length];\n        for (int i = 0; i < a.length; ++i) {\n            aDouble[i] = a[i].getValue();\n        }\n        final double[] bDouble = new double[b.length];\n        for (int i = 0; i < b.length; ++i) {\n            bDouble[i] = b[i].getValue();\n        }\n        final double accurateValue = MathArrays.linearCombination(aDouble, bDouble);\n\n        // compute a simple value, with all partial derivatives\n        DerivativeStructure simpleValue = a[0].getField().getZero();\n        for (int i = 0; i < a.length; ++i) {\n            simpleValue = simpleValue.add(a[i].multiply(b[i]));\n        }\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final double[] a, final DerivativeStructure[] b)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double[] bDouble = new double[b.length];\n        for (int i = 0; i < b.length; ++i) {\n            bDouble[i] = b[i].getValue();\n        }\n        final double accurateValue = MathArrays.linearCombination(a, bDouble);\n\n        // compute a simple value, with all partial derivatives\n        DerivativeStructure simpleValue = b[0].getField().getZero();\n        for (int i = 0; i < a.length; ++i) {\n            simpleValue = simpleValue.add(b[i].multiply(a[i]));\n        }\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,\n                                                 final DerivativeStructure a2, final DerivativeStructure b2)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),\n                                                                  a2.getValue(), b2.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,\n                                                 final double a2, final DerivativeStructure b2)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),\n                                                                  a2, b2.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,\n                                                 final DerivativeStructure a2, final DerivativeStructure b2,\n                                                 final DerivativeStructure a3, final DerivativeStructure b3)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),\n                                                                  a2.getValue(), b2.getValue(),\n                                                                  a3.getValue(), b3.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,\n                                                 final double a2, final DerivativeStructure b2,\n                                                 final double a3, final DerivativeStructure b3)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),\n                                                                  a2, b2.getValue(),\n                                                                  a3, b3.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,\n                                                 final DerivativeStructure a2, final DerivativeStructure b2,\n                                                 final DerivativeStructure a3, final DerivativeStructure b3,\n                                                 final DerivativeStructure a4, final DerivativeStructure b4)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),\n                                                                  a2.getValue(), b2.getValue(),\n                                                                  a3.getValue(), b3.getValue(),\n                                                                  a4.getValue(), b4.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3)).add(a4.multiply(b4));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /** {@inheritDoc}\n     * @exception DimensionMismatchException if number of free parameters\n     * or orders do not match\n     * @since 3.2\n     */\n    public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,\n                                                 final double a2, final DerivativeStructure b2,\n                                                 final double a3, final DerivativeStructure b3,\n                                                 final double a4, final DerivativeStructure b4)\n        throws DimensionMismatchException {\n\n        // compute an accurate value, taking care of cancellations\n        final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),\n                                                                  a2, b2.getValue(),\n                                                                  a3, b3.getValue(),\n                                                                  a4, b4.getValue());\n\n        // compute a simple value, with all partial derivatives\n        final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3)).add(b4.multiply(a4));\n\n        // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n        final double[] all = simpleValue.getAllDerivatives();\n        all[0] = accurateValue;\n        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n\n    }\n\n    /**\n     * Test for the equality of two derivative structures.\n     * <p>\n     * Derivative structures are considered equal if they have the same number\n     * of free parameters, the same derivation order, and the same derivatives.\n     * </p>\n     * @param other Object to test for equality to this\n     * @return true if two derivative structures are equal\n     * @since 3.2\n     */\n    @Override\n    public boolean equals(Object other) {\n\n        if (this == other) {\n            return true;\n        }\n\n        if (other instanceof DerivativeStructure) {\n            final DerivativeStructure rhs = (DerivativeStructure)other;\n            return (getFreeParameters() == rhs.getFreeParameters()) &&\n                   (getOrder() == rhs.getOrder()) &&\n                   MathArrays.equals(data, rhs.data);\n        }\n\n        return false;\n\n    }\n\n    /**\n     * Get a hashCode for the derivative structure.\n     * @return a hash code value for this object\n     * @since 3.2\n     */\n    @Override\n    public int hashCode() {\n        return 227 + 229 * getFreeParameters() + 233 * getOrder() + 239 * MathUtils.hash(data);\n    }\n\n    /**\n     * Replace the instance with a data transfer object for serialization.\n     * @return data transfer object that will be serialized\n     */\n    private Object writeReplace() {\n        return new DataTransferObject(compiler.getFreeParameters(), compiler.getOrder(), data);\n    }\n\n    /** Internal class used only for serialization. */\n    private static class DataTransferObject implements Serializable {\n\n        /** Serializable UID. */\n        private static final long serialVersionUID = 20120730L;\n\n        /** Number of variables.\n         * @serial\n         */\n        private final int variables;\n\n        /** Derivation order.\n         * @serial\n         */\n        private final int order;\n\n        /** Partial derivatives.\n         * @serial\n         */\n        private final double[] data;\n\n        /** Simple constructor.\n         * @param variables number of variables\n         * @param order derivation order\n         * @param data partial derivatives\n         */\n        DataTransferObject(final int variables, final int order, final double[] data) {\n            this.variables = variables;\n            this.order     = order;\n            this.data      = data;\n        }\n\n        /** Replace the deserialized data transfer object with a {@link DerivativeStructure}.\n         * @return replacement {@link DerivativeStructure}\n         */\n        private Object readResolve() {\n            return new DerivativeStructure(variables, order, data);\n        }\n\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ [ "2", "int" ], [ "3.2", "double" ] ],
  "tokensMethodArguments" : [ [ "y", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure" ], [ "x", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "copySign", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure copySign(final double sign)" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(T arg0)" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(int arg0)" ], [ "tan", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure tan()" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(double arg0)" ], [ "getField", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public Field<DerivativeStructure> getField()" ], [ "subtract", "org.apache.commons.math3", "FieldElement", "public abstract T subtract(T arg0) throws NullArgumentException" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1, final double a2, final DerivativeStructure b2, final double a3, final DerivativeStructure b3) throws DimensionMismatchException" ], [ "cos", "org.apache.commons.math3", "RealFieldElement", "public abstract T cos()" ], [ "round", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public long round()" ], [ "copySign", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure copySign(final DerivativeStructure sign)" ], [ "sinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T sinh()" ], [ "toRadians", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure toRadians()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "sqrt", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure sqrt()" ], [ "exp", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure exp()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final double[] a, final DerivativeStructure[] b) throws DimensionMismatchException" ], [ "subtract", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure subtract(final DerivativeStructure a) throws DimensionMismatchException" ], [ "tanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T tanh()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1, final DerivativeStructure a2, final DerivativeStructure b2, final DerivativeStructure a3, final DerivativeStructure b3) throws DimensionMismatchException" ], [ "atan", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan()" ], [ "getAllDerivatives", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double[] getAllDerivatives()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3)" ], [ "reciprocal", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure reciprocal()" ], [ "expm1", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure expm1()" ], [ "rootN", "org.apache.commons.math3", "RealFieldElement", "public abstract T rootN(int arg0)" ], [ "sinh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure sinh()" ], [ "abs", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure abs()" ], [ "acos", "org.apache.commons.math3", "RealFieldElement", "public abstract T acos()" ], [ "divide", "org.apache.commons.math3", "FieldElement", "public abstract T divide(T arg0) throws NullArgumentException, MathArithmeticException" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure multiply(final double a)" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1, final double a2, final DerivativeStructure b2, final double a3, final DerivativeStructure b3, final double a4, final DerivativeStructure b4) throws DimensionMismatchException" ], [ "getPartialDerivative", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double getPartialDerivative(final int... orders) throws DimensionMismatchException, NumberIsTooLargeException" ], [ "add", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure add(final DerivativeStructure a) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1, final DerivativeStructure a2, final DerivativeStructure b2, final DerivativeStructure a3, final DerivativeStructure b3, final DerivativeStructure a4, final DerivativeStructure b4) throws DimensionMismatchException" ], [ "negate", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure negate()" ], [ "sin", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure sin()" ], [ "reciprocal", "org.apache.commons.math3", "RealFieldElement", "public abstract T reciprocal()" ], [ "ceil", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure ceil()" ], [ "hashCode", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int hashCode()" ], [ "asinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T asinh()" ], [ "abs", "org.apache.commons.math3", "RealFieldElement", "public abstract T abs()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5)" ], [ "cosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T cosh()" ], [ "sin", "org.apache.commons.math3", "RealFieldElement", "public abstract T sin()" ], [ "add", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure add(final double a)" ], [ "getField", "org.apache.commons.math3", "FieldElement", "public abstract Field<T> getField()" ], [ "getValue", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double getValue()" ], [ "scalb", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure scalb(final int n)" ], [ "tanh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure tanh()" ], [ "atanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T atanh()" ], [ "remainder", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure remainder(final DerivativeStructure a) throws DimensionMismatchException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure createConstant(final double c)" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(double arg0)" ], [ "atan2", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan2(T arg0) throws DimensionMismatchException" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(T arg0) throws DimensionMismatchException" ], [ "atan", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure atan()" ], [ "atanh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure atanh()" ], [ "getReal", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double getReal()" ], [ "signum", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure signum()" ], [ "tan", "org.apache.commons.math3", "RealFieldElement", "public abstract T tan()" ], [ "hypot", "org.apache.commons.math3", "RealFieldElement", "public abstract T hypot(T arg0) throws DimensionMismatchException" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "cosh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure cosh()" ], [ "subtract", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure subtract(final double a)" ], [ "compose", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure compose(final double... f) throws DimensionMismatchException" ], [ "add", "org.apache.commons.math3", "RealFieldElement", "public abstract T add(double arg0)" ], [ "rootN", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure rootN(final int n)" ], [ "exp", "org.apache.commons.math3", "RealFieldElement", "public abstract T exp()" ], [ "ceil", "org.apache.commons.math3", "RealFieldElement", "public abstract T ceil()" ], [ "taylor", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public double taylor(final double... delta) throws MathArithmeticException" ], [ "acosh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure acosh()" ], [ "add", "org.apache.commons.math3", "FieldElement", "public abstract T add(T arg0) throws NullArgumentException" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "expm1", "org.apache.commons.math3", "RealFieldElement", "public abstract T expm1()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1, final double a2, final DerivativeStructure b2) throws DimensionMismatchException" ], [ "log", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure log()" ], [ "divide", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure divide(final double a)" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure multiply(final int n)" ], [ "signum", "org.apache.commons.math3", "RealFieldElement", "public abstract T signum()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final DerivativeStructure[] a, final DerivativeStructure[] b) throws DimensionMismatchException" ], [ "log", "org.apache.commons.math3", "RealFieldElement", "public abstract T log()" ], [ "divide", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure divide(final DerivativeStructure a) throws DimensionMismatchException" ], [ "subtract", "org.apache.commons.math3", "RealFieldElement", "public abstract T subtract(double arg0)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure hypot(final DerivativeStructure y) throws DimensionMismatchException" ], [ "floor", "org.apache.commons.math3", "RealFieldElement", "public abstract T floor()" ], [ "asinh", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure asinh()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5, double arg6, T arg7)" ], [ "divide", "org.apache.commons.math3", "RealFieldElement", "public abstract T divide(double arg0)" ], [ "rint", "org.apache.commons.math3", "RealFieldElement", "public abstract T rint()" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure atan2(final DerivativeStructure x) throws DimensionMismatchException" ], [ "equals", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public boolean equals(Object other)" ], [ "multiply", "org.apache.commons.math3", "RealFieldElement", "public abstract T multiply(double arg0)" ], [ "asin", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure asin()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5, T arg6, T arg7)" ], [ "multiply", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure multiply(final DerivativeStructure a) throws DimensionMismatchException" ], [ "log1p", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure log1p()" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(int arg0)" ], [ "log10", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure log10()" ], [ "rint", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure rint()" ], [ "linearCombination", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1, final DerivativeStructure a2, final DerivativeStructure b2) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure pow(final DerivativeStructure e) throws DimensionMismatchException" ], [ "floor", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure floor()" ], [ "getOrder", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int getOrder()" ], [ "cos", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure cos()" ], [ "scalb", "org.apache.commons.math3", "RealFieldElement", "public abstract T scalb(int arg0)" ], [ "cbrt", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure cbrt()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "log1p", "org.apache.commons.math3", "RealFieldElement", "public abstract T log1p()" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure pow(final double p)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5)" ], [ "acos", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure acos()" ], [ "sqrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T sqrt()" ], [ "toDegrees", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure toDegrees()" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure pow(final int n)" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(T arg0) throws DimensionMismatchException" ], [ "remainder", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public DerivativeStructure remainder(final double a)" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(T arg0) throws NullArgumentException" ], [ "getFreeParameters", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int getFreeParameters()" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(double arg0)" ], [ "cbrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T cbrt()" ], [ "acosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T acosh()" ], [ "getExponent", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public int getExponent()" ], [ "negate", "org.apache.commons.math3", "FieldElement", "public abstract T negate()" ], [ "asin", "org.apache.commons.math3", "RealFieldElement", "public abstract T asin()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "round", "org.apache.commons.math3", "RealFieldElement", "public abstract long round()" ], [ "getReal", "org.apache.commons.math3", "RealFieldElement", "public abstract double getReal()" ], [ "reciprocal", "org.apache.commons.math3", "FieldElement", "public abstract T reciprocal() throws MathArithmeticException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
} ]