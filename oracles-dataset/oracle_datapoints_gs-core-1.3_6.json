[ {
  "id" : 3210,
  "oracle" : ";",
  "oracleType" : "NORMAL_POST",
  "projectName" : "gs-core-1.3",
  "packageName" : "org.graphstream.ui.graphicGraph",
  "className" : "StyleGroupSet",
  "javadocTag" : "@return The shadow groups iterator.",
  "methodJavadoc" : "    /**\n\t * Iterator on the style groups that cast a shadow.\n\t * \n\t * @return The shadow groups iterator.\n\t */",
  "methodSourceCode" : "public Iterator<StyleGroup> getShadowIterator(){\n    return shadow.getIterator();\n}",
  "classJavadoc" : "/**\n * A set of style groups.\n * \n * <p>\n * This class is in charge or storing all the style groups and to update them.\n * Each time an element is added or removed the groups are updated. Each time\n * the style sheet changes the groups are updated.\n * </p>\n * \n * @author Antoine Dutot\n */",
  "classSourceCode" : "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign√©      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.ui.graphicGraph;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.TreeMap;\nimport org.graphstream.graph.Edge;\nimport org.graphstream.graph.Element;\nimport org.graphstream.graph.Graph;\nimport org.graphstream.graph.Node;\nimport org.graphstream.ui.graphicGraph.stylesheet.Rule;\nimport org.graphstream.ui.graphicGraph.stylesheet.Selector;\nimport org.graphstream.ui.graphicGraph.stylesheet.StyleConstants.ShadowMode;\nimport org.graphstream.ui.graphicGraph.stylesheet.StyleSheet;\nimport org.graphstream.ui.graphicGraph.stylesheet.StyleSheetListener;\n\n/**\n * A set of style groups.\n * \n * <p>\n * This class is in charge or storing all the style groups and to update them.\n * Each time an element is added or removed the groups are updated. Each time\n * the style sheet changes the groups are updated.\n * </p>\n * \n * @author Antoine Dutot\n */\npublic class StyleGroupSet implements StyleSheetListener {\n\t// Attribute\n\n\t/**\n\t * The style sheet.\n\t */\n\tprotected StyleSheet stylesheet;\n\n\t/**\n\t * All the groups indexed by their unique identifier.\n\t */\n\tprotected final Map<String, StyleGroup> groups = new TreeMap<String, StyleGroup>();\n\n\t/**\n\t * Allows to retrieve the group containing a node knowing the node id.\n\t */\n\tprotected final Map<String, String> byNodeIdGroups = new TreeMap<String, String>();\n\n\t/**\n\t * Allows to retrieve the group containing an edge knowing the node id.\n\t */\n\tprotected final Map<String, String> byEdgeIdGroups = new TreeMap<String, String>();\n\n\t/**\n\t * Allows to retrieve the group containing a sprite knowing the node id.\n\t */\n\tprotected final Map<String, String> bySpriteIdGroups = new TreeMap<String, String>();\n\n\t/**\n\t * Allows to retrieve the group containing a graph knowing the node id.\n\t */\n\tprotected final Map<String, String> byGraphIdGroups = new TreeMap<String, String>();\n\n\t/**\n\t * Virtual set of nodes. This set provides fake methods to make it appear as\n\t * a set of nodes whereas it only maps on the node style groups.\n\t */\n\tprotected NodeSet nodeSet = new NodeSet();\n\n\t/**\n\t * Virtual set of edges. This set provides fake methods to make it appear as\n\t * a set of edges whereas it only maps on the edge style groups.\n\t */\n\tprotected EdgeSet edgeSet = new EdgeSet();\n\n\t/**\n\t * Virtual set of sprites. This set provides fake methods to make it appear\n\t * as a set of sprites whereas it only maps on the sprite style groups.\n\t */\n\tprotected SpriteSet spriteSet = new SpriteSet();\n\n\t/**\n\t * Virtual set of graphs. This set provides fake methods to make it appear\n\t * as a set of graphs whereas it only maps on the graph style groups.\n\t */\n\tprotected GraphSet graphSet = new GraphSet();\n\n\t/**\n\t * The set of events actually occurring.\n\t */\n\tprotected EventSet eventSet = new EventSet();\n\n\t/**\n\t * The groups sorted by their Z index.\n\t */\n\tprotected ZIndex zIndex = new ZIndex();\n\n\t/**\n\t * Set of groups that cast shadow.\n\t */\n\tprotected ShadowSet shadow = new ShadowSet();\n\n\t/**\n\t * Remove groups if they become empty?.\n\t */\n\tprotected boolean removeEmptyGroups = true;\n\n\t/**\n\t * Set of listeners.\n\t */\n\tprotected ArrayList<StyleGroupListener> listeners = new ArrayList<StyleGroupListener>();\n\n\t// Construction\n\n\t/**\n\t * New empty style group set, using the given style sheet to create style\n\t * groups. The group set installs itself as a listener of the style sheet.\n\t * So in order to completely stop using such a group, you must call\n\t * {@link #release()}.\n\t * \n\t * @param stylesheet\n\t *            The style sheet to use to create groups.\n\t */\n\tpublic StyleGroupSet(StyleSheet stylesheet) {\n\t\tthis.stylesheet = stylesheet;\n\n\t\tstylesheet.addListener(this);\n\t}\n\n\t// Access\n\n\t/**\n\t * Number of groups.\n\t * \n\t * @return The number of groups.\n\t */\n\tpublic int getGroupCount() {\n\t\treturn groups.size();\n\t}\n\n\t/**\n\t * Return a group by its unique identifier. The way group identifier are\n\t * constructed reflects their contents.\n\t * \n\t * @param groupId\n\t *            The group identifier.\n\t * @return The corresponding group or null if not found.\n\t */\n\tpublic StyleGroup getGroup(String groupId) {\n\t\treturn groups.get(groupId);\n\t}\n\n\t/**\n\t * Iterator on the set of groups in no particular order.\n\t * \n\t * @return An iterator on the group set.\n\t */\n\tpublic Iterator<? extends StyleGroup> getGroupIterator() {\n\t\treturn groups.values().iterator();\n\t}\n\n\t/**\n\t * Iterable set of groups elements, in no particular order.\n\t * \n\t * @return An iterable on the set of groups.\n\t */\n\tpublic Iterable<? extends StyleGroup> groups() {\n\t\treturn groups.values();\n\t}\n\n\t/**\n\t * Iterator on the Z index.\n\t * \n\t * @return The z index iterator.\n\t */\n\tpublic Iterator<HashSet<StyleGroup>> getZIterator() {\n\t\treturn zIndex.getIterator();\n\t}\n\n\t/**\n\t * Iterable set of \"subsets of groups\" sorted by Z level. Each subset of\n\t * groups is at the same Z level.\n\t * \n\t * @return The z levels.\n\t */\n\tpublic Iterable<HashSet<StyleGroup>> zIndex() {\n\t\treturn zIndex;\n\t}\n\n\t/**\n\t * Iterator on the style groups that cast a shadow.\n\t * \n\t * @return The shadow groups iterator.\n\t */\n\tpublic Iterator<StyleGroup> getShadowIterator() {\n\t\treturn shadow.getIterator();\n\t}\n\n\t/**\n\t * Iterable set of groups that cast shadow.\n\t * \n\t * @return All the groups that cast a shadow.\n\t */\n\tpublic Iterable<StyleGroup> shadows() {\n\t\treturn shadow;\n\t}\n\n\t/**\n\t * True if the set contains and styles the node whose identifier is given.\n\t * \n\t * @param id\n\t *            The node identifier.\n\t * @return True if the node is in this set.\n\t */\n\tpublic boolean containsNode(String id) {\n\t\treturn byNodeIdGroups.containsKey(id);\n\t}\n\n\t/**\n\t * True if the set contains and styles the edge whose identifier is given.\n\t * \n\t * @param id\n\t *            The edge identifier.\n\t * @return True if the edge is in this set.\n\t */\n\tpublic boolean containsEdge(String id) {\n\t\treturn byEdgeIdGroups.containsKey(id);\n\t}\n\n\t/**\n\t * True if the set contains and styles the sprite whose identifier is given.\n\t * \n\t * @param id\n\t *            The sprite identifier.\n\t * @return True if the sprite is in this set.\n\t */\n\tpublic boolean containsSprite(String id) {\n\t\treturn bySpriteIdGroups.containsKey(id);\n\t}\n\n\t/**\n\t * True if the set contains and styles the graph whose identifier is given.\n\t * \n\t * @param id\n\t *            The graph identifier.\n\t * @return True if the graph is in this set.\n\t */\n\tpublic boolean containsGraph(String id) {\n\t\treturn byGraphIdGroups.containsKey(id);\n\t}\n\n\t/**\n\t * Get an element.\n\t * \n\t * @param id\n\t *            The element id.\n\t * @param elt2grp\n\t *            The kind of element.\n\t * @return The element or null if not found.\n\t */\n\tprotected Element getElement(String id, Map<String, String> elt2grp) {\n\t\tString gid = elt2grp.get(id);\n\n\t\tif (gid != null) {\n\t\t\tStyleGroup group = groups.get(gid);\n\t\t\treturn group.getElement(id);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Get a node element knowing its identifier.\n\t * \n\t * @param id\n\t *            The node identifier.\n\t * @return The node if it is in this set, else null.\n\t */\n\tpublic Node getNode(String id) {\n\t\treturn (Node) getElement(id, byNodeIdGroups);\n\t}\n\n\t/**\n\t * Get an edge element knowing its identifier.\n\t * \n\t * @param id\n\t *            The edge identifier.\n\t * @return The edge if it is in this set, else null.\n\t */\n\tpublic Edge getEdge(String id) {\n\t\treturn (Edge) getElement(id, byEdgeIdGroups);\n\t}\n\n\t/**\n\t * Get a sprite element knowing its identifier.\n\t * \n\t * @param id\n\t *            The sprite identifier.\n\t * @return The sprite if it is in this set, else null.\n\t */\n\tpublic GraphicSprite getSprite(String id) {\n\t\treturn (GraphicSprite) getElement(id, bySpriteIdGroups);\n\t}\n\n\t/**\n\t * Get a graph element knowing its identifier.\n\t * \n\t * @param id\n\t *            The graph identifier.\n\t * @return The graph if it is in this set, else null.\n\t */\n\tpublic Graph getGraph(String id) {\n\t\treturn (Graph) getElement(id, byGraphIdGroups);\n\t}\n\n\t/**\n\t * The number of nodes referenced.\n\t * \n\t * @return The node count.\n\t */\n\tpublic int getNodeCount() {\n\t\treturn byNodeIdGroups.size();\n\t}\n\n\t/**\n\t * The number of edges referenced.\n\t * \n\t * @return The edge count.\n\t */\n\tpublic int getEdgeCount() {\n\t\treturn byEdgeIdGroups.size();\n\t}\n\n\t/**\n\t * The number of sprites referenced.\n\t * \n\t * @return The sprite count.\n\t */\n\tpublic int getSpriteCount() {\n\t\treturn bySpriteIdGroups.size();\n\t}\n\n\t/**\n\t * Iterator on the set of nodes.\n\t * \n\t * @return An iterator on all node elements contained in style groups.\n\t */\n\tpublic Iterator<? extends Node> getNodeIterator() {\n\t\treturn new ElementIterator<Node>(byNodeIdGroups);\n\t}\n\n\t/**\n\t * Iterator on the set of graphs.\n\t * \n\t * @return An iterator on all graph elements contained in style groups.\n\t */\n\tpublic Iterator<? extends Graph> getGraphIterator() {\n\t\treturn new ElementIterator<Graph>(byGraphIdGroups);\n\t}\n\n\t/**\n\t * Iterable set of nodes.\n\t * \n\t * @return The set of all nodes.\n\t */\n\tpublic Iterable<? extends Node> nodes() {\n\t\treturn nodeSet;\n\t}\n\n\t/**\n\t * Iterable set of graphs.\n\t * \n\t * @return The set of all graphs.\n\t */\n\tpublic Iterable<? extends Graph> graphs() {\n\t\treturn graphSet;\n\t}\n\n\t/**\n\t * Iterator on the set of edges.\n\t * \n\t * @return An iterator on all edge elements contained in style groups.\n\t */\n\tpublic Iterator<? extends Edge> getEdgeIterator() {\n\t\treturn new ElementIterator<Edge>(byEdgeIdGroups);\n\t}\n\n\t/**\n\t * Iterable set of edges.\n\t * \n\t * @return The set of all edges.\n\t */\n\tpublic Iterable<? extends Edge> edges() {\n\t\treturn edgeSet;\n\t}\n\n\t/**\n\t * Iterator on the set of sprite.\n\t * \n\t * @return An iterator on all sprite elements contained in style groups.\n\t */\n\tpublic Iterator<? extends GraphicSprite> getSpriteIterator() {\n\t\treturn new ElementIterator<GraphicSprite>(bySpriteIdGroups);\n\t}\n\n\t/**\n\t * Iterable set of sprites.\n\t * \n\t * @return The set of all sprites.\n\t */\n\tpublic Iterable<? extends GraphicSprite> sprites() {\n\t\treturn spriteSet;\n\t}\n\n\t/**\n\t * Retrieve the group identifier of an element knowing the element\n\t * identifier.\n\t * \n\t * @param element\n\t *            The element to search for.\n\t * @return Identifier of the group containing the element.\n\t */\n\tpublic String getElementGroup(Element element) {\n\t\tif (element instanceof Node) {\n\t\t\treturn byNodeIdGroups.get(element.getId());\n\t\t} else if (element instanceof Edge) {\n\t\t\treturn byEdgeIdGroups.get(element.getId());\n\t\t} else if (element instanceof GraphicSprite) {\n\t\t\treturn bySpriteIdGroups.get(element.getId());\n\t\t} else if (element instanceof Graph) {\n\t\t\treturn byGraphIdGroups.get(element.getId());\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"What ?\");\n\t\t}\n\t}\n\n\t/**\n\t * Get the style of an element.\n\t * \n\t * @param element\n\t *            The element to search for.\n\t * @return The style group of the element (which is also a style).\n\t */\n\tpublic StyleGroup getStyleForElement(Element element) {\n\t\tString gid = getElementGroup(element);\n\n\t\treturn groups.get(gid);\n\t}\n\n\t/**\n\t * Get the style of a given node.\n\t * \n\t * @param node\n\t *            The node to search for.\n\t * @return The node style.\n\t */\n\tpublic StyleGroup getStyleFor(Node node) {\n\t\tString gid = byNodeIdGroups.get(node.getId());\n\t\treturn groups.get(gid);\n\t}\n\n\t/**\n\t * Get the style of a given edge.\n\t * \n\t * @param edge\n\t *            The edge to search for.\n\t * @return The edge style.\n\t */\n\tpublic StyleGroup getStyleFor(Edge edge) {\n\t\tString gid = byEdgeIdGroups.get(edge.getId());\n\t\treturn groups.get(gid);\n\t}\n\n\t/**\n\t * Get the style of a given sprite.\n\t * \n\t * @param sprite\n\t *            The node to search for.\n\t * @return The sprite style.\n\t */\n\tpublic StyleGroup getStyleFor(GraphicSprite sprite) {\n\t\tString gid = bySpriteIdGroups.get(sprite.getId());\n\t\treturn groups.get(gid);\n\t}\n\n\t/**\n\t * Get the style of a given graph.\n\t * \n\t * @param graph\n\t *            The node to search for.\n\t * @return The graph style.\n\t */\n\tpublic StyleGroup getStyleFor(Graph graph) {\n\t\tString gid = byGraphIdGroups.get(graph.getId());\n\t\treturn groups.get(gid);\n\t}\n\n\t/**\n\t * True if groups are removed when becoming empty. This setting allows to\n\t * keep empty group when the set of elements is quite dynamic. This allows\n\t * to avoid recreting groups when an element appears and disappears\n\t * regularly.\n\t * \n\t * @return True if the groups are removed when empty.\n\t */\n\tpublic boolean areEmptyGroupRemoved() {\n\t\treturn removeEmptyGroups;\n\t}\n\n\t/**\n\t * The Z index object.\n\t * \n\t * @return The Z index.\n\t */\n\tpublic ZIndex getZIndex() {\n\t\treturn zIndex;\n\t}\n\n\t/**\n\t * The set of style groups that cast a shadow.\n\t * \n\t * @return The set of shadowed style groups.\n\t */\n\tpublic ShadowSet getShadowSet() {\n\t\treturn shadow;\n\t}\n\n\t// Command\n\n\t/**\n\t * Release any dependency to the style sheet.\n\t */\n\tpublic void release() {\n\t\tstylesheet.removeListener(this);\n\t}\n\n\t/**\n\t * Empties this style group set. The style sheet is listener is not removed,\n\t * use {@link #release()} to do that.\n\t */\n\tpublic void clear() {\n\t\tbyEdgeIdGroups.clear();\n\t\tbyNodeIdGroups.clear();\n\t\tbySpriteIdGroups.clear();\n\t\tbyGraphIdGroups.clear();\n\t\tgroups.clear();\n\t\tzIndex.clear();\n\t\tshadow.clear();\n\t}\n\n\t/**\n\t * Remove or keep groups that becomes empty, if true the groups are removed.\n\t * If this setting was set to false, and is now true, the group set is\n\t * purged of the empty groups.\n\t * \n\t * @param on\n\t *            If true the groups will be removed.\n\t */\n\tpublic void setRemoveEmptyGroups(boolean on) {\n\t\tif (removeEmptyGroups == false && on == true) {\n\t\t\tIterator<? extends StyleGroup> i = groups.values().iterator();\n\n\t\t\twhile (i.hasNext()) {\n\t\t\t\tStyleGroup g = i.next();\n\n\t\t\t\tif (g.isEmpty())\n\t\t\t\t\ti.remove();\n\t\t\t}\n\t\t}\n\n\t\tremoveEmptyGroups = on;\n\t}\n\n\tprotected StyleGroup addGroup(String id, ArrayList<Rule> rules,\n\t\t\tElement firstElement) {\n\t\tStyleGroup group = new StyleGroup(id, rules, firstElement, eventSet);\n\n\t\tgroups.put(id, group);\n\t\tzIndex.groupAdded(group);\n\t\tshadow.groupAdded(group);\n\n\t\treturn group;\n\t}\n\n\tprotected void removeGroup(StyleGroup group) {\n\t\tzIndex.groupRemoved(group);\n\t\tshadow.groupRemoved(group);\n\t\tgroups.remove(group.getId());\n\t\tgroup.release();\n\t}\n\n\t/**\n\t * Add an element and bind it to its style group. The group is created if\n\t * needed.\n\t * \n\t * @param element\n\t *            The element to add.\n\t * @return The style group where the element was added.\n\t */\n\tpublic StyleGroup addElement(Element element) {\n\t\tStyleGroup group = addElement_(element);\n\n\t\tfor (StyleGroupListener listener : listeners)\n\t\t\tlistener.elementStyleChanged(element, null, group);\n\n\t\treturn group;\n\t}\n\n\tprotected StyleGroup addElement_(Element element) {\n\t\tArrayList<Rule> rules = stylesheet.getRulesFor(element);\n\t\tString gid = stylesheet.getStyleGroupIdFor(element, rules);\n\t\tStyleGroup group = groups.get(gid);\n\n\t\tif (group == null)\n\t\t\tgroup = addGroup(gid, rules, element);\n\t\telse\n\t\t\tgroup.addElement(element);\n\n\t\taddElementToReverseSearch(element, gid);\n\n\t\treturn group;\n\t}\n\n\t/**\n\t * Remove an element from the group set. If the group becomes empty after\n\t * the element removal, depending on the setting of\n\t * {@link #areEmptyGroupRemoved()}, the group is deleted or kept. Keeping\n\t * groups allows to handle faster elements that constantly appear and\n\t * disappear.\n\t * \n\t * @param element\n\t *            The element to remove.\n\t */\n\tpublic void removeElement(Element element) {\n\t\tString gid = getElementGroup(element);\n        if (null == gid)\n        {\n            return;\n        }\n\t\tStyleGroup group = groups.get(gid);\n\n\t\tif (group != null) {\n\t\t\tgroup.removeElement(element);\n\t\t\tremoveElementFromReverseSearch(element);\n\n\t\t\tif (removeEmptyGroups && group.isEmpty())\n\t\t\t\tremoveGroup(group);\n\t\t}\n\t}\n\n\t/**\n\t * Check if an element need to change from a style group to another.\n\t * \n\t * <p>\n\t * When an element can have potentially changed style due to some of its\n\t * attributes (ui.class for example), instead of removing it then reading\n\t * it, use this method to move the element from its current style group to a\n\t * potentially different style group.\n\t * </p>\n\t * \n\t * <p>\n\t * Explanation of this method : checking the style of an element may be done\n\t * by removing it ({@link #removeElement(Element)}) and then re-adding it (\n\t * {@link #addElement(Element)}). This must be done by the element since it\n\t * knows when to check this. However you cannot only remove and add, since\n\t * the style group inside which the element is can have events occurring on\n\t * it, and these events must be passed from its old style to its new style.\n\t * This method does all this information passing.\n\t * </p>\n\t * \n\t * @param element\n\t *            The element to move.\n\t */\n\tpublic void checkElementStyleGroup(Element element) {\n\t\tStyleGroup oldGroup = getGroup(getElementGroup(element));\n\n\t\t// Get the old element \"dynamic\" status.\n\n\t\tboolean isDyn = false;\n\n\t\t// Get the old event set for the given element.\n\n\t\tStyleGroup.ElementEvents events = null;\n\n\t\tif (oldGroup != null) {\n\t\t\tisDyn = oldGroup.isElementDynamic(element);\n\t\t\tevents = oldGroup.getEventsFor(element);\n\t\t}\n\n\t\t// Remove the element from its old style and add it to insert it in the\n\t\t// correct style.\n\n\t\tremoveElement(element);\n\t\taddElement_(element);\n\n\t\t// Eventually push the events on the new style group.\n\n\t\tStyleGroup newGroup = getGroup(getElementGroup(element));\n\n\t\tif (newGroup != null && events != null) {\n\t\t\tfor (String event : events.events)\n\t\t\t\tpushEventFor(element, event);\n\t\t}\n\n\t\tfor (StyleGroupListener listener : listeners)\n\t\t\tlistener.elementStyleChanged(element, oldGroup, newGroup);\n\n\t\t// Eventually set the element as dynamic, if it was.\n\n\t\tif (newGroup != null && isDyn)\n\t\t\tnewGroup.pushElementAsDynamic(element);\n\t}\n\n\tprotected void addElementToReverseSearch(Element element, String groupId) {\n\t\tif (element instanceof Node) {\n\t\t\tbyNodeIdGroups.put(element.getId(), groupId);\n\t\t} else if (element instanceof Edge) {\n\t\t\tbyEdgeIdGroups.put(element.getId(), groupId);\n\t\t} else if (element instanceof GraphicSprite) {\n\t\t\tbySpriteIdGroups.put(element.getId(), groupId);\n\t\t} else if (element instanceof Graph) {\n\t\t\tbyGraphIdGroups.put(element.getId(), groupId);\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"What ?\");\n\t\t}\n\t}\n\n\tprotected void removeElementFromReverseSearch(Element element) {\n\t\tif (element instanceof Node) {\n\t\t\tbyNodeIdGroups.remove(element.getId());\n\t\t} else if (element instanceof Edge) {\n\t\t\tbyEdgeIdGroups.remove(element.getId());\n\t\t} else if (element instanceof GraphicSprite) {\n\t\t\tbySpriteIdGroups.remove(element.getId());\n\t\t} else if (element instanceof Graph) {\n\t\t\tbyGraphIdGroups.remove(element.getId());\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"What ?\");\n\t\t}\n\t}\n\n\t/**\n\t * Push a global event on the event stack. Events trigger the replacement of\n\t * a style by an alternative style (or meta-class) when possible. If an\n\t * event is on the event stack, each time a style has an alternative\n\t * corresponding to the event, the alternative is used instead of the style.\n\t * \n\t * @param event\n\t *            The event to push.\n\t */\n\tpublic void pushEvent(String event) {\n\t\teventSet.pushEvent(event);\n\t}\n\n\t/**\n\t * Push an event specifically for a given element. This is normally done\n\t * automatically by the graphic element.\n\t * \n\t * @param element\n\t *            The element considered.\n\t * @param event\n\t *            The event to push.\n\t */\n\tpublic void pushEventFor(Element element, String event) {\n\t\tStyleGroup group = getGroup(getElementGroup(element));\n\n\t\tif (group != null)\n\t\t\tgroup.pushEventFor(element, event);\n\t}\n\n\t/**\n\t * Pop a global event from the event set.\n\t * \n\t * @param event\n\t *            The event to remove.\n\t */\n\tpublic void popEvent(String event) {\n\t\teventSet.popEvent(event);\n\t}\n\n\t/**\n\t * Pop an event specifically for a given element. This is normally done\n\t * automatically by the graphic element.\n\t * \n\t * @param element\n\t *            The element considered.\n\t * @param event\n\t *            The event to pop.\n\t */\n\tpublic void popEventFor(Element element, String event) {\n\t\tStyleGroup group = getGroup(getElementGroup(element));\n\n\t\tif (group != null)\n\t\t\tgroup.popEventFor(element, event);\n\t}\n\n\t/**\n\t * Specify the given element has dynamic style attribute values. This is\n\t * normally done automatically by the graphic element.\n\t * \n\t * @param element\n\t *            The element to add to the dynamic subset.\n\t */\n\tpublic void pushElementAsDynamic(Element element) {\n\t\tStyleGroup group = getGroup(getElementGroup(element));\n\n\t\tif (group != null)\n\t\t\tgroup.pushElementAsDynamic(element);\n\t}\n\n\t/**\n\t * Remove the given element from the subset of elements having dynamic style\n\t * attribute values. This is normally done automatically by the graphic\n\t * element.\n\t * \n\t * @param element\n\t *            The element to remove from the dynamic subset.\n\t */\n\tpublic void popElementAsDynamic(Element element) {\n\t\tStyleGroup group = getGroup(getElementGroup(element));\n\n\t\tif (group != null)\n\t\t\tgroup.popElementAsDynamic(element);\n\t}\n\n\t/**\n\t * Add a listener for element style changes.\n\t * \n\t * @param listener\n\t *            The listener to add.\n\t */\n\tpublic void addListener(StyleGroupListener listener) {\n\t\tlisteners.add(listener);\n\t}\n\n\t/**\n\t * Remove a style change listener.\n\t * \n\t * @param listener\n\t *            The listener to remove.\n\t */\n\tpublic void removeListener(StyleGroupListener listener) {\n\t\tint index = listeners.lastIndexOf(listener);\n\n\t\tif (index >= 0) {\n\t\t\tlisteners.remove(index);\n\t\t}\n\t}\n\n\t// Listener -- What to do when a change occurs in the style sheet.\n\n\tpublic void styleAdded(Rule oldRule, Rule newRule) {\n\t\t// When a style change, we need to update groups.\n\t\t// Several cases :\n\t\t// 1. The style already exists\n\t\t// * Nothing to do in fact. All the elements are still in place.\n\t\t// No style rule (selectors) changed, and therefore we do not have\n\t\t// to change the groups since they are built using the selectors.\n\t\t// 2. The style is new\n\t\t// * we need to check all the groups concerning this kind of element (we\n\t\t// can\n\t\t// restrict our search to these groups, since other will not be\n\t\t// impacted),\n\t\t// and check all elements of these groups.\n\n\t\tif (oldRule == null)\n\t\t\tcheckForNewStyle(newRule); // no need to check Z and shadow, done\n\t\t\t\t\t\t\t\t\t\t// when adding/changing group.\n\t\telse\n\t\t\tcheckZIndexAndShadow(oldRule, newRule);\n\t}\n\n\tpublic void styleSheetCleared() {\n\t\tArrayList<Element> elements = new ArrayList<Element>();\n\n\t\tfor (Element element : graphs())\n\t\t\telements.add(element);\n\n\t\tfor (Element element : nodes())\n\t\t\telements.add(element);\n\n\t\tfor (Element element : edges())\n\t\t\telements.add(element);\n\n\t\tfor (Element element : sprites())\n\t\t\telements.add(element);\n\n\t\tclear();\n\n\t\tfor (Element element : elements)\n\t\t\tremoveElement(element);\n\n\t\tfor (Element element : elements)\n\t\t\taddElement(element);\n\t}\n\n\t/**\n\t * Check each group that may have changed, for example to rebuild the Z\n\t * index and the shadow set.\n\t * \n\t * @param oldRule\n\t *            The old rule that changed.\n\t * @param newRule\n\t *            The new rule that participated in the change.\n\t */\n\tprotected void checkZIndexAndShadow(Rule oldRule, Rule newRule) {\n\t\tif (oldRule != null) {\n\t\t\tif (oldRule.selector.getId() != null\n\t\t\t\t\t|| oldRule.selector.getClazz() != null) {\n\t\t\t\t// We may accelerate things a bit when a class or id style is\n\t\t\t\t// modified,\n\t\t\t\t// since only the groups listed in the style are concerned (we\n\t\t\t\t// are at the\n\t\t\t\t// bottom of the inheritance tree).\n\t\t\t\tif (oldRule.getGroups() != null)\n\t\t\t\t\tfor (String s : oldRule.getGroups()) {\n\t\t\t\t\t\tStyleGroup group = groups.get(s);\n\t\t\t\t\t\tif (group != null) {\n\t\t\t\t\t\t\tzIndex.groupChanged(group);\n\t\t\t\t\t\t\tshadow.groupChanged(group);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// For kind styles \"NODE\", \"EDGE\", \"GRAPH\", \"SPRITE\", we must\n\t\t\t\t// reset\n\t\t\t\t// the whole Z and shadows for the kind, since several styles\n\t\t\t\t// may\n\t\t\t\t// have changed.\n\n\t\t\t\tSelector.Type type = oldRule.selector.type;\n\n\t\t\t\tfor (StyleGroup group : groups.values()) {\n\t\t\t\t\tif (group.getType() == type) {\n\t\t\t\t\t\tzIndex.groupChanged(group);\n\t\t\t\t\t\tshadow.groupChanged(group);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * We try to avoid at most to affect anew styles to elements and to recreate\n\t * groups, which is time consuming.\n\t * \n\t * Two cases :\n\t * <ol>\n\t * <li>The style is an specific (id) style. In this case a new group may be\n\t * added.\n\t * <ul>\n\t * <li>check an element matches the style and in this case create the group\n\t * by adding the element.</li>\n\t * <li>else do nothing.</li>\n\t * </ul>\n\t * </li>\n\t * <li>The style is a kind or class style.\n\t * <ul>\n\t * <li>check all the groups in the kind of the style (graph, node, edge,\n\t * sprite) and only in this kind (since other will never be affected).</li>\n\t * <li>remove all groups of this kind.</li>\n\t * <li>add all elements of this kind anew to recreate the group.</li>\n\t * </ul>\n\t * </li>\n\t * </ol>\n\t */\n\tprotected void checkForNewStyle(Rule newRule) {\n\t\tswitch (newRule.selector.type) {\n\t\tcase GRAPH:\n\t\t\tif (newRule.selector.getId() != null)\n\t\t\t\tcheckForNewIdStyle(newRule, byGraphIdGroups);\n\t\t\telse\n\t\t\t\tcheckForNewStyle(newRule, byGraphIdGroups);\n\t\t\tbreak;\n\t\tcase NODE:\n\t\t\tif (newRule.selector.getId() != null)\n\t\t\t\tcheckForNewIdStyle(newRule, byNodeIdGroups);\n\t\t\telse\n\t\t\t\tcheckForNewStyle(newRule, byNodeIdGroups);\n\t\t\tbreak;\n\t\tcase EDGE:\n\t\t\tif (newRule.selector.getId() != null)\n\t\t\t\tcheckForNewIdStyle(newRule, byEdgeIdGroups);\n\t\t\telse\n\t\t\t\tcheckForNewStyle(newRule, byEdgeIdGroups);\n\t\t\tbreak;\n\t\tcase SPRITE:\n\t\t\tif (newRule.selector.getId() != null)\n\t\t\t\tcheckForNewIdStyle(newRule, bySpriteIdGroups);\n\t\t\telse\n\t\t\t\tcheckForNewStyle(newRule, bySpriteIdGroups);\n\t\t\tbreak;\n\t\tcase ANY:\n\t\tdefault:\n\t\t\tthrow new RuntimeException(\"What ?\");\n\t\t}\n\t}\n\n\t/**\n\t * Check for a new specific style (applies only to one element).\n\t * \n\t * @param newRule\n\t *            The new style rule.\n\t * @param elt2grp\n\t *            The name space.\n\t */\n\tprotected void checkForNewIdStyle(Rule newRule,\n\t\t\tMap<String, String> elt2grp) {\n\t\t// There is only one element that matches the identifier.\n\n\t\tElement element = getElement(newRule.selector.getId(), elt2grp);\n\n\t\tif (element != null) {\n\t\t\tcheckElementStyleGroup(element);\n\t\t\t// removeElement( element ); // Remove the element from its old\n\t\t\t// group. Potentially delete a group.\n\t\t\t// addElement( element ); // Add the element to its new own group\n\t\t\t// (since this is an ID style).\n\t\t}\n\t}\n\n\t/**\n\t * Check for a new kind or class style in a given name space (node, edge,\n\t * sprite, graph).\n\t * \n\t * @param newRule\n\t *            The new style rule.\n\t * @param elt2grp\n\t *            The name space.\n\t */\n\tprotected void checkForNewStyle(Rule newRule,\n\t\t\tMap<String, String> elt2grp) {\n\t\tCollection<Element> elementsToCheck = new ArrayList<Element>();\n\n\t\tfor (String eltId : elt2grp.keySet())\n\t\t\telementsToCheck.add(getElement(eltId, elt2grp));\n\n\t\tfor (Element element : elementsToCheck) {\n\t\t\tcheckElementStyleGroup(element);\n\t\t\t// removeElement( element );\n\t\t\t// addElement( element );\n\t\t}\n\t}\n\n\t// Utility\n\n\t@Override\n\tpublic String toString() {\n\t\tStringBuilder builder = new StringBuilder();\n\n\t\tbuilder.append(String.format(\"Style groups (%d) :%n\", groups.size()));\n\n\t\tfor (StyleGroup group : groups.values()) {\n\t\t\tbuilder.append(group.toString(1));\n\t\t\tbuilder.append(String.format(\"%n\"));\n\t\t}\n\n\t\treturn builder.toString();\n\t}\n\n\t// Inner classes\n\n\t/**\n\t * Set of events (meta-classes) actually active.\n\t * \n\t * <p>\n\t * The event set contains the set of events actually occurring. This is used\n\t * to select alternate styles. The events actually occurring are in\n\t * precedence order. The last one is the most important.\n\t * </p>\n\t * \n\t * @author Antoine Dutot\n\t */\n\tpublic class EventSet {\n\t\tpublic ArrayList<String> eventSet = new ArrayList<String>();\n\n\t\tpublic String events[] = new String[0];\n\n\t\t/**\n\t\t * Add an event to the set.\n\t\t * \n\t\t * @param event\n\t\t *            The event to add.\n\t\t */\n\t\tpublic void pushEvent(String event) {\n\t\t\teventSet.add(event);\n\t\t\tevents = eventSet.toArray(events);\n\t\t}\n\n\t\t/**\n\t\t * Remove an event from the set.\n\t\t * \n\t\t * @param event\n\t\t *            The event to remove.\n\t\t */\n\t\tpublic void popEvent(String event) {\n\t\t\tint index = eventSet.lastIndexOf(event);\n\n\t\t\tif (index >= 0)\n\t\t\t\teventSet.remove(index);\n\n\t\t\tevents = eventSet.toArray(events);\n\t\t}\n\n\t\t/**\n\t\t * The set of events in order, the most important at the end.\n\t\t * \n\t\t * @return The event set.\n\t\t */\n\t\tpublic String[] getEvents() {\n\t\t\treturn events;\n\t\t}\n\t}\n\n\t/**\n\t * All the style groups sorted by their Z index.\n\t * \n\t * <p>\n\t * This structure is maintained by each time a group is added or removed, or\n\t * when the style of a group changed.\n\t * </p>\n\t * \n\t * @author Antoine Dutot\n\t */\n\tpublic class ZIndex implements Iterable<HashSet<StyleGroup>> {\n\t\t/**\n\t\t * Ordered set of groups.\n\t\t */\n\t\tpublic ArrayList<HashSet<StyleGroup>> zIndex = new ArrayList<HashSet<StyleGroup>>();\n\n\t\t/**\n\t\t * Knowing a group, tell if its Z index.\n\t\t */\n\t\tpublic HashMap<String, Integer> reverseZIndex = new HashMap<String, Integer>();\n\n\t\t/**\n\t\t * New empty Z index.\n\t\t */\n\t\tpublic ZIndex() {\n\t\t\tinitZIndex();\n\t\t}\n\n\t\tprotected void initZIndex() {\n\t\t\tzIndex.ensureCapacity(256);\n\n\t\t\tfor (int i = 0; i < 256; i++)\n\t\t\t\tzIndex.add(null);\n\t\t}\n\n\t\t/**\n\t\t * Iterator on the set of Z index cells. Each item is a set of style\n\t\t * groups that pertain to the same Z index.\n\t\t * \n\t\t * @return Iterator on the Z index.\n\t\t */\n\t\tprotected Iterator<HashSet<StyleGroup>> getIterator() {\n\t\t\treturn new ZIndexIterator();\n\t\t}\n\n\t\tpublic Iterator<HashSet<StyleGroup>> iterator() {\n\t\t\treturn getIterator();\n\t\t}\n\n\t\t/**\n\t\t * A new group appeared, put it in the z index.\n\t\t * \n\t\t * @param group\n\t\t *            The group to add.\n\t\t */\n\t\tprotected void groupAdded(StyleGroup group) {\n\t\t\tint z = convertZ(group.getZIndex());\n\n\t\t\tif (zIndex.get(z) == null)\n\t\t\t\tzIndex.set(z, new HashSet<StyleGroup>());\n\n\t\t\tzIndex.get(z).add(group);\n\t\t\treverseZIndex.put(group.getId(), z);\n\t\t}\n\n\t\t/**\n\t\t * A group eventually changed, check its location.\n\t\t * \n\t\t * @param group\n\t\t *            The group to check.\n\t\t */\n\t\tprotected void groupChanged(StyleGroup group) {\n\t\t\tint oldZ = reverseZIndex.get(group.getId());\n\t\t\tint newZ = convertZ(group.getZIndex());\n\n\t\t\tif (oldZ != newZ) {\n\t\t\t\tHashSet<StyleGroup> map = zIndex.get(oldZ);\n\n\t\t\t\tif (map != null) {\n\t\t\t\t\tmap.remove(group);\n\t\t\t\t\treverseZIndex.remove(group.getId());\n\n\t\t\t\t\tif (map.isEmpty())\n\t\t\t\t\t\tzIndex.set(oldZ, null);\n\t\t\t\t}\n\n\t\t\t\tgroupAdded(group);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * A group was removed, remove it from the Z index.\n\t\t * \n\t\t * @param group\n\t\t *            The group to remove.\n\t\t */\n\t\tprotected void groupRemoved(StyleGroup group) {\n\t\t\tint z = convertZ(group.getZIndex());\n\n\t\t\tHashSet<StyleGroup> map = zIndex.get(z);\n\n\t\t\tif (map != null) {\n\t\t\t\tmap.remove(group);\n\t\t\t\treverseZIndex.remove(group.getId());\n\n\t\t\t\tif (map.isEmpty())\n\t\t\t\t\tzIndex.set(z, null);\n\t\t\t} else {\n\t\t\t\tthrow new RuntimeException(\"Inconsistency in Z-index\");\n\t\t\t}\n\t\t}\n\n\t\tpublic void clear() {\n\t\t\tzIndex.clear();\n\t\t\treverseZIndex.clear();\n\t\t\tinitZIndex();\n\t\t}\n\n\t\t/**\n\t\t * Convert a [-127,127] value into a [0,255] value and check bounds.\n\t\t * \n\t\t * @param z\n\t\t *            The Z value to convert.\n\t\t * @return The Z value converted and bounded to [0,255].\n\t\t */\n\t\tprotected int convertZ(int z) {\n\t\t\tz += 127;\n\n\t\t\tif (z < 0)\n\t\t\t\tz = 0;\n\t\t\telse if (z > 255)\n\t\t\t\tz = 255;\n\n\t\t\treturn z;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\tStringBuilder sb = new StringBuilder();\n\n\t\t\tsb.append(String.format(\"Z index :%n\"));\n\n\t\t\tfor (int i = 0; i < 256; i++) {\n\t\t\t\tif (zIndex.get(i) != null) {\n\t\t\t\t\tsb.append(String.format(\"    * %d -> \", i - 127));\n\n\t\t\t\t\tHashSet<StyleGroup> map = zIndex.get(i);\n\n\t\t\t\t\tfor (StyleGroup g : map)\n\t\t\t\t\t\tsb.append(String.format(\"%s \", g.getId()));\n\n\t\t\t\t\tsb.append(String.format(\"%n\"));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn sb.toString();\n\t\t}\n\n\t\tpublic class ZIndexIterator implements Iterator<HashSet<StyleGroup>> {\n\t\t\tpublic int index = 0;\n\n\t\t\tpublic ZIndexIterator() {\n\t\t\t\tzapUntilACell();\n\t\t\t}\n\n\t\t\tprotected void zapUntilACell() {\n\t\t\t\twhile (index < 256 && zIndex.get(index) == null)\n\t\t\t\t\tindex++;\n\t\t\t}\n\n\t\t\tpublic boolean hasNext() {\n\t\t\t\treturn (index < 256);\n\t\t\t}\n\n\t\t\tpublic HashSet<StyleGroup> next() {\n\t\t\t\tif (hasNext()) {\n\t\t\t\t\tHashSet<StyleGroup> cell = zIndex.get(index);\n\t\t\t\t\tindex++;\n\t\t\t\t\tzapUntilACell();\n\t\t\t\t\treturn cell;\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tpublic void remove() {\n\t\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\t\"This iterator does not support removal.\");\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Set of groups that cast a shadow.\n\t * \n\t * @author Antoine Dutot\n\t */\n\tpublic class ShadowSet implements Iterable<StyleGroup> {\n\t\t/**\n\t\t * The set of groups casting shadow.\n\t\t */\n\t\tprotected HashSet<StyleGroup> shadowSet = new HashSet<StyleGroup>();\n\n\t\t/**\n\t\t * Iterator on the set of groups that cast a shadow.\n\t\t * \n\t\t * @return An iterator on the shadow style group set.\n\t\t */\n\t\tprotected Iterator<StyleGroup> getIterator() {\n\t\t\treturn shadowSet.iterator();\n\t\t}\n\n\t\tpublic Iterator<StyleGroup> iterator() {\n\t\t\treturn getIterator();\n\t\t}\n\n\t\t/**\n\t\t * A group appeared, check its shadow status.\n\t\t * \n\t\t * @param group\n\t\t *            The group added.\n\t\t */\n\t\tprotected void groupAdded(StyleGroup group) {\n\t\t\tif (group.getShadowMode() != ShadowMode.NONE)\n\t\t\t\tshadowSet.add(group);\n\t\t}\n\n\t\t/**\n\t\t * A group eventually changed, check its shadow status.\n\t\t * \n\t\t * @param group\n\t\t *            The group that changed.\n\t\t */\n\t\tprotected void groupChanged(StyleGroup group) {\n\t\t\tif (group.getShadowMode() == ShadowMode.NONE)\n\t\t\t\tshadowSet.remove(group);\n\t\t\telse\n\t\t\t\tshadowSet.add(group);\n\t\t}\n\n\t\t/**\n\t\t * A group was removed, remove it from the shadow if needed.\n\t\t * \n\t\t * @param group\n\t\t *            The group removed.\n\t\t */\n\t\tprotected void groupRemoved(StyleGroup group) {\n\t\t\t// Faster than to first test its existence or shadow status :\n\n\t\t\tshadowSet.remove(group);\n\t\t}\n\n\t\tprotected void clear() {\n\t\t\tshadowSet.clear();\n\t\t}\n\t}\n\n\t/**\n\t * Iterator that allows to browse all graph elements of a given kind (nodes,\n\t * edges, sprites, graphs) as if they where in a single set, whereas they\n\t * are in style groups.\n\t * \n\t * @author Antoine Dutot\n\t * @param <E>\n\t *            The kind of graph element.\n\t */\n\tprotected class ElementIterator<E extends Element> implements Iterator<E> {\n\t\tprotected Map<String, String> elt2grp;\n\n\t\tprotected Iterator<String> elts;\n\n\t\tpublic ElementIterator(final Map<String, String> elements2groups) {\n\t\t\telt2grp = elements2groups;\n\t\t\telts = elements2groups.keySet().iterator();\n\t\t}\n\n\t\tpublic boolean hasNext() {\n\t\t\treturn elts.hasNext();\n\t\t}\n\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tpublic E next() {\n\t\t\tString eid = elts.next();\n\t\t\tString gid = elt2grp.get(eid);\n\t\t\tStyleGroup grp = groups.get(gid);\n\n\t\t\treturn (E) grp.getElement(eid);\n\t\t}\n\n\t\tpublic void remove() {\n\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\"remove not implemented in this iterator\");\n\t\t}\n\t}\n\n\t/**\n\t * Dummy set of nodes.\n\t */\n\tprotected class NodeSet implements Iterable<Node> {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tpublic Iterator<Node> iterator() {\n\t\t\treturn (Iterator<Node>) getNodeIterator();\n\t\t}\n\t}\n\n\t/**\n\t * Dummy set of edges.\n\t */\n\tprotected class EdgeSet implements Iterable<Edge> {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tpublic Iterator<Edge> iterator() {\n\t\t\treturn (Iterator<Edge>) getEdgeIterator();\n\t\t}\n\t}\n\n\t/**\n\t * Dummy set of sprites.\n\t */\n\tprotected class SpriteSet implements Iterable<GraphicSprite> {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tpublic Iterator<GraphicSprite> iterator() {\n\t\t\treturn (Iterator<GraphicSprite>) getSpriteIterator();\n\t\t}\n\t}\n\n\tprotected class GraphSet implements Iterable<GraphicGraph> {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tpublic Iterator<GraphicGraph> iterator() {\n\t\t\treturn (Iterator<GraphicGraph>) getGraphIterator();\n\t\t}\n\t}\n\n}",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "DefaultCamera", "org.graphstream.ui.swingViewer.util" ], [ "GradientFactory", "org.graphstream.ui.swingViewer.util" ], [ "GraphMetrics", "org.graphstream.ui.swingViewer.util" ], [ "Graphics2DOutput", "org.graphstream.ui.swingViewer.util" ], [ "ImageCache", "org.graphstream.ui.swingViewer.util" ], [ "StrokeFactory", "org.graphstream.ui.swingViewer.util" ], [ "FontCache", "org.graphstream.ui.swingViewer.util" ], [ "FontSlot", "org.graphstream.ui.swingViewer.util" ], [ "DefaultView", "org.graphstream.ui.swingViewer" ], [ "SpriteRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "ElementRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "NodeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "Arrow", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "Shape", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "EdgeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "SwingBasicGraphRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "GraphRendererBase", "org.graphstream.ui.swingViewer" ], [ "GraphRenderer", "org.graphstream.ui.swingViewer" ], [ "LayerRenderer", "org.graphstream.ui.swingViewer" ], [ "ViewPanel", "org.graphstream.ui.swingViewer" ], [ "Layouts", "org.graphstream.ui.layout" ], [ "Layout", "org.graphstream.ui.layout" ], [ "LayoutRunner", "org.graphstream.ui.layout" ], [ "NodeParticle", "org.graphstream.ui.layout.springbox" ], [ "GraphCellData", "org.graphstream.ui.layout.springbox" ], [ "EdgeSpring", "org.graphstream.ui.layout.springbox" ], [ "Energies", "org.graphstream.ui.layout.springbox" ], [ "BarnesHutLayout", "org.graphstream.ui.layout.springbox" ], [ "LinLog", "org.graphstream.ui.layout.springbox.implementations" ], [ "LinLogNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBoxNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBox", "org.graphstream.ui.layout.springbox.implementations" ], [ "Point2", "org.graphstream.ui.geom" ], [ "Vector2", "org.graphstream.ui.geom" ], [ "Vector3", "org.graphstream.ui.geom" ], [ "Point3", "org.graphstream.ui.geom" ], [ "ViewerListener", "org.graphstream.ui.view" ], [ "MouseManager", "org.graphstream.ui.view.util" ], [ "ShortcutManager", "org.graphstream.ui.view.util" ], [ "DefaultShortcutManager", "org.graphstream.ui.view.util" ], [ "FpsCounter", "org.graphstream.ui.view.util" ], [ "CubicCurve", "org.graphstream.ui.view.util" ], [ "DefaultMouseManager", "org.graphstream.ui.view.util" ], [ "Selection", "org.graphstream.ui.view" ], [ "ViewerPipe", "org.graphstream.ui.view" ], [ "Viewer", "org.graphstream.ui.view" ], [ "View", "org.graphstream.ui.view" ], [ "Camera", "org.graphstream.ui.view" ], [ "Sprite", "org.graphstream.ui.spriteManager" ], [ "InvalidSpriteIDException", "org.graphstream.ui.spriteManager" ], [ "SpriteManager", "org.graphstream.ui.spriteManager" ], [ "SpriteFactory", "org.graphstream.ui.spriteManager" ], [ "StyleGroupListener", "org.graphstream.ui.graphicGraph" ], [ "Colors", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Values", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetListener", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetParserTokenManager", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParserConstants", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParser", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "Style", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheet", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleConstants", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Selector", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Value", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Rule", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "GraphicNode", "org.graphstream.ui.graphicGraph" ], [ "StyleGroup", "org.graphstream.ui.graphicGraph" ], [ "GraphPosLengthUtils", "org.graphstream.ui.graphicGraph" ], [ "GraphicEdge", "org.graphstream.ui.graphicGraph" ], [ "GraphicElementChangeListener", "org.graphstream.ui.graphicGraph" ], [ "GraphicGraph", "org.graphstream.ui.graphicGraph" ], [ "StyleGroupSet", "org.graphstream.ui.graphicGraph" ], [ "GraphicSprite", "org.graphstream.ui.graphicGraph" ], [ "GraphicElement", "org.graphstream.ui.graphicGraph" ], [ "VerboseSink", "org.graphstream.util" ], [ "GraphListeners", "org.graphstream.util" ], [ "Environment", "org.graphstream.util" ], [ "GraphDiff", "org.graphstream.util" ], [ "Filters", "org.graphstream.util" ], [ "FilteredEdgeIterator", "org.graphstream.util" ], [ "Parser", "org.graphstream.util.parser" ], [ "ParserFactory", "org.graphstream.util.parser" ], [ "TokenMgrError", "org.graphstream.util.parser" ], [ "ParseException", "org.graphstream.util.parser" ], [ "SimpleCharStream", "org.graphstream.util.parser" ], [ "Token", "org.graphstream.util.parser" ], [ "ISODateIO", "org.graphstream.util.time" ], [ "ISODateComponent", "org.graphstream.util.time" ], [ "FilteredNodeIterator", "org.graphstream.util" ], [ "FixedArrayList", "org.graphstream.util.set" ], [ "StepCounter", "org.graphstream.util" ], [ "GraphSpells", "org.graphstream.util.cumulative" ], [ "CumulativeAttributes", "org.graphstream.util.cumulative" ], [ "CumulativeSpells", "org.graphstream.util.cumulative" ], [ "Filter", "org.graphstream.util" ], [ "PipeAdapter", "org.graphstream.stream" ], [ "GraphParseException", "org.graphstream.stream" ], [ "ElementSink", "org.graphstream.stream" ], [ "URLSource", "org.graphstream.stream.net" ], [ "HTTPSource", "org.graphstream.stream.net" ], [ "SourceAdapter", "org.graphstream.stream" ], [ "AttributeSink", "org.graphstream.stream" ], [ "GMLParserConstants", "org.graphstream.stream.file.gml" ], [ "GMLParserTokenManager", "org.graphstream.stream.file.gml" ], [ "GMLContext", "org.graphstream.stream.file.gml" ], [ "Graphics", "org.graphstream.stream.file.gml" ], [ "KeyValues", "org.graphstream.stream.file.gml" ], [ "GMLParser", "org.graphstream.stream.file.gml" ], [ "FileSinkGraphML", "org.graphstream.stream.file" ], [ "TLPParserConstants", "org.graphstream.stream.file.tlp" ], [ "TLPParser", "org.graphstream.stream.file.tlp" ], [ "TLPParserTokenManager", "org.graphstream.stream.file.tlp" ], [ "FileSinkFactory", "org.graphstream.stream.file" ], [ "FileSourceEdge", "org.graphstream.stream.file" ], [ "FileSinkBase", "org.graphstream.stream.file" ], [ "FileSinkTikZ", "org.graphstream.stream.file" ], [ "FileSourceGEXF", "org.graphstream.stream.file" ], [ "DOTParser", "org.graphstream.stream.file.dot" ], [ "DOTParserConstants", "org.graphstream.stream.file.dot" ], [ "DOTParserTokenManager", "org.graphstream.stream.file.dot" ], [ "FileSink", "org.graphstream.stream.file" ], [ "PajekContext", "org.graphstream.stream.file.pajek" ], [ "Graphics", "org.graphstream.stream.file.pajek" ], [ "NodeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeMatrix", "org.graphstream.stream.file.pajek" ], [ "PajekParserTokenManager", "org.graphstream.stream.file.pajek" ], [ "PajekParserConstants", "org.graphstream.stream.file.pajek" ], [ "FileSourceXML", "org.graphstream.stream.file" ], [ "FileSinkBaseFiltered", "org.graphstream.stream.file" ], [ "FileSinkDOT", "org.graphstream.stream.file" ], [ "FileSourceParser", "org.graphstream.stream.file" ], [ "FileSinkDGSFiltered", "org.graphstream.stream.file" ], [ "FileSourceDOT", "org.graphstream.stream.file" ], [ "FileSourceDGS1And2", "org.graphstream.stream.file" ], [ "FileSourceGraphML", "org.graphstream.stream.file" ], [ "FileSourceFactory", "org.graphstream.stream.file" ], [ "FileSinkImages", "org.graphstream.stream.file" ], [ "FileSinkDynamicGML", "org.graphstream.stream.file" ], [ "FileSinkSVG", "org.graphstream.stream.file" ], [ "GEXFSpell", "org.graphstream.stream.file.gexf" ], [ "SmartXMLWriter", "org.graphstream.stream.file.gexf" ], [ "GEXFElement", "org.graphstream.stream.file.gexf" ], [ "GEXFEdges", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValues", "org.graphstream.stream.file.gexf" ], [ "GEXFEdge", "org.graphstream.stream.file.gexf" ], [ "GEXFSpells", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValue", "org.graphstream.stream.file.gexf" ], [ "GEXFNodes", "org.graphstream.stream.file.gexf" ], [ "GEXFNode", "org.graphstream.stream.file.gexf" ], [ "GEXFMeta", "org.graphstream.stream.file.gexf" ], [ "GEXFAttributes", "org.graphstream.stream.file.gexf" ], [ "GEXF", "org.graphstream.stream.file.gexf" ], [ "GEXFGraph", "org.graphstream.stream.file.gexf" ], [ "GEXFAttribute", "org.graphstream.stream.file.gexf" ], [ "OldFileSourceDGS", "org.graphstream.stream.file.dgs" ], [ "DGSParser", "org.graphstream.stream.file.dgs" ], [ "FileSourceBase", "org.graphstream.stream.file" ], [ "FileSinkGML", "org.graphstream.stream.file" ], [ "FileSourceDGS", "org.graphstream.stream.file" ], [ "FileSinkDGSUtility", "org.graphstream.stream.file" ], [ "FileSourceTLP", "org.graphstream.stream.file" ], [ "FileSinkSVG2", "org.graphstream.stream.file" ], [ "FileSource", "org.graphstream.stream.file" ], [ "FileSourceNCol", "org.graphstream.stream.file" ], [ "FileSourcePajek", "org.graphstream.stream.file" ], [ "FileSourceGPX", "org.graphstream.stream.file" ], [ "FileSourceLGL", "org.graphstream.stream.file" ], [ "FileSinkGEXF2", "org.graphstream.stream.file" ], [ "FileSourceGML", "org.graphstream.stream.file" ], [ "FileSinkGEXF", "org.graphstream.stream.file" ], [ "FileSinkDGS", "org.graphstream.stream.file" ], [ "ProxyPipe", "org.graphstream.stream" ], [ "Sink", "org.graphstream.stream" ], [ "Timeline", "org.graphstream.stream" ], [ "Pipe", "org.graphstream.stream" ], [ "SinkAdapter", "org.graphstream.stream" ], [ "Replayable", "org.graphstream.stream" ], [ "Source", "org.graphstream.stream" ], [ "AnnotatedSink", "org.graphstream.stream" ], [ "GraphReplay", "org.graphstream.stream" ], [ "AttributePipe", "org.graphstream.stream" ], [ "SinkTime", "org.graphstream.stream.sync" ], [ "SourceTime", "org.graphstream.stream.sync" ], [ "PipeBase", "org.graphstream.stream" ], [ "ThreadProxyPipe", "org.graphstream.stream.thread" ], [ "ThreadProxyPipeOld", "org.graphstream.stream.thread" ], [ "RMISource", "org.graphstream.stream.rmi" ], [ "RMIAdapterOut", "org.graphstream.stream.rmi" ], [ "RMISink", "org.graphstream.stream.rmi" ], [ "RMIAdapterIn", "org.graphstream.stream.rmi" ], [ "SourceBase", "org.graphstream.stream" ], [ "NetStreamDecoder", "org.graphstream.stream.netstream" ], [ "NetStreamReceiver", "org.graphstream.stream.netstream" ], [ "NetStreamConstants", "org.graphstream.stream.netstream" ], [ "NetStreamSender", "org.graphstream.stream.netstream" ], [ "DefaultNetStreamDecoder", "org.graphstream.stream.netstream" ], [ "Base64", "org.graphstream.stream.netstream.packing" ], [ "NetStreamUnpacker", "org.graphstream.stream.netstream.packing" ], [ "Base64Packer", "org.graphstream.stream.netstream.packing" ], [ "Base64Unpacker", "org.graphstream.stream.netstream.packing" ], [ "NetStreamPacker", "org.graphstream.stream.netstream.packing" ], [ "AttributePredicate", "org.graphstream.stream" ], [ "Element", "org.graphstream.graph" ], [ "Node", "org.graphstream.graph" ], [ "BreadthFirstIterator", "org.graphstream.graph" ], [ "Graph", "org.graphstream.graph" ], [ "EdgeRejectedException", "org.graphstream.graph" ], [ "CompoundAttribute", "org.graphstream.graph" ], [ "Structure", "org.graphstream.graph" ], [ "DepthFirstIterator", "org.graphstream.graph" ], [ "NullAttributeException", "org.graphstream.graph" ], [ "IdAlreadyInUseException", "org.graphstream.graph" ], [ "EdgeFactory", "org.graphstream.graph" ], [ "ElementNotFoundException", "org.graphstream.graph" ], [ "OneAttributeElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListNode", "org.graphstream.graph.implementations" ], [ "SingleNode", "org.graphstream.graph.implementations" ], [ "AbstractElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListGraph", "org.graphstream.graph.implementations" ], [ "AbstractNode", "org.graphstream.graph.implementations" ], [ "DefaultGraph", "org.graphstream.graph.implementations" ], [ "MultiGraph", "org.graphstream.graph.implementations" ], [ "Graphs", "org.graphstream.graph.implementations" ], [ "SingleGraph", "org.graphstream.graph.implementations" ], [ "MultiNode", "org.graphstream.graph.implementations" ], [ "AbstractGraph", "org.graphstream.graph.implementations" ], [ "AbstractEdge", "org.graphstream.graph.implementations" ], [ "GraphFactory", "org.graphstream.graph" ], [ "NodeFactory", "org.graphstream.graph" ], [ "Edge", "org.graphstream.graph" ], [ "Path", "org.graphstream.graph" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "gradientInArea", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)" ], [ "linearGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)" ], [ "createFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static float[] createFractions(Style style)" ], [ "createColors", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static Color[] createColors(Style style)" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "public static ImageCache defaultImageCache()" ], [ "generateStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "public static Stroke generateStroke(Style style, GraphMetrics metrics)" ], [ "generatePlainStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)" ], [ "generateDotsStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)" ], [ "generateDashesStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache()" ], [ "newLayoutAlgorithm", "org.graphstream.ui.layout", "Layouts", "public static Layout newLayoutAlgorithm()" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static double eval(double x0, double x1, double x2, double x3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static double derivative(double x0, double x1, double x2, double x3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "newGraphRenderer", "org.graphstream.ui.view", "Viewer", "public static GraphRenderer newGraphRenderer()" ], [ "getPositionValue", "org.graphstream.ui.spriteManager", "SpriteManager", "protected static Values getPositionValue(Object value)" ], [ "convertColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Color convertColor(Object anyValue)" ], [ "convertLabel", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static String convertLabel(Object value)" ], [ "convertWidth", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static float convertWidth(Object value)" ], [ "convertValue", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Value convertValue(Object value)" ], [ "convertUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Units convertUnit(String unit)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Graph graph, String id)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Graph graph, String id)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Node node)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Node node)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Graph graph, String id)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Edge edge)" ], [ "getGlobalEnvironment", "org.graphstream.util", "Environment", "public static Environment getGlobalEnvironment()" ], [ "falseFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> falseFilter()" ], [ "trueFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> trueFilter()" ], [ "byAttributeFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)" ], [ "separateNodeAndEdgeFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)" ], [ "byExtremitiesFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)" ], [ "byIdFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byIdFilter(String idPattern)" ], [ "isContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)" ], [ "isIdContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)" ], [ "and", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)" ], [ "or", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)" ], [ "xor", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)" ], [ "not", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> not(Filter<T> f)" ], [ "addEscapes", "org.graphstream.util.parser", "TokenMgrError", "protected static final String addEscapes(String str)" ], [ "LexicalError", "org.graphstream.util.parser", "TokenMgrError", "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)" ], [ "add_escapes", "org.graphstream.util.parser", "ParseException", "static String add_escapes(String str)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind, String image)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind)" ], [ "countStepInFile", "org.graphstream.util", "StepCounter", "public static int countStepInFile(String path) throws IOException" ], [ "GET", "org.graphstream.stream.net", "HTTPSource", "protected static HashMap<String, Object> GET(HttpExchange ex)" ], [ "sinkFor", "org.graphstream.stream.file", "FileSinkFactory", "public static FileSink sinkFor(String filename)" ], [ "formatId", "org.graphstream.stream.file", "FileSinkTikZ", "protected static String formatId(String id)" ], [ "getInt", "org.graphstream.stream.file.pajek", "PajekContext", "protected static int getInt(Token nb) throws ParseException" ], [ "getReal", "org.graphstream.stream.file.pajek", "PajekContext", "protected static double getReal(Token nb) throws ParseException" ], [ "toColorValue", "org.graphstream.stream.file.pajek", "PajekContext", "public static String toColorValue(Token R, Token G, Token B) throws ParseException" ], [ "sourceFor", "org.graphstream.stream.file", "FileSourceFactory", "public static FileSource sourceFor(String fileName) throws IOException" ], [ "getXMLRootElement", "org.graphstream.stream.file", "FileSourceFactory", "public static String getXMLRootElement(String fileName) throws IOException" ], [ "formatStringForQuoting", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String formatStringForQuoting(String str)" ], [ "attributeString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String attributeString(String key, Object value, boolean remove)" ], [ "arrayString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String arrayString(Object value)" ], [ "valueString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String valueString(Object value)" ], [ "hashToString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String hashToString(HashMap<?, ?> hash)" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source)" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s, int options) throws java.io.IOException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decodeFromFile(String filename) throws java.io.IOException" ], [ "encodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeFromFile(String filename) throws java.io.IOException" ], [ "unmutableGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph unmutableGraph(Graph g)" ], [ "synchronizedGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph synchronizedGraph(Graph g)" ], [ "merge", "org.graphstream.graph.implementations", "Graphs", "public static Graph merge(Graph... graphs)" ], [ "clone", "org.graphstream.graph.implementations", "Graphs", "public static Graph clone(Graph g)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "version16", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static boolean version16 = false;" ], [ "predefFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[][] predefFractions = new float[11][];" ], [ "predefFractions2", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions2 = { 0f, 1f };" ], [ "predefFractions3", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions3 = { 0f, 0.5f, 1f };" ], [ "predefFractions4", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };" ], [ "predefFractions5", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };" ], [ "predefFractions6", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };" ], [ "predefFractions7", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };" ], [ "predefFractions8", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };" ], [ "predefFractions9", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };" ], [ "predefFractions10", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "protected static ImageCache defaultImageCache;" ], [ "dots", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dots = { 1f, 1f };" ], [ "dashes", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dashes = { 3f, 3f };" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache;" ], [ "NULL_POINT2", "org.graphstream.ui.geom", "Point2", "public static final Point2 NULL_POINT2 = new Point2(0, 0);" ], [ "NULL_POINT3", "org.graphstream.ui.geom", "Point3", "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);" ], [ "DEFAULT_VIEW_ID", "org.graphstream.ui.view", "Viewer", "public static String DEFAULT_VIEW_ID = \"defaultView\";" ], [ "jjbitVec0", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };" ], [ "jjstrLiteralImages", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };" ], [ "lexStateNames", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };" ], [ "jjtoSkip", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };" ], [ "colorMap", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static HashMap<String,Color> colorMap;" ], [ "sharpColor1", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor1;" ], [ "sharpColor2", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor2;" ], [ "cssColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColor;" ], [ "cssColorA", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColorA;" ], [ "awtColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern awtColor;" ], [ "hexaColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern hexaColor;" ], [ "numberUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern numberUnit;" ], [ "number", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern number;" ], [ "acceptedAttribute", "org.graphstream.ui.graphicGraph", "GraphicElement", "protected static Pattern acceptedAttribute;" ], [ "DEFAULT_AN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_CNA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_AE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";" ], [ "DEFAULT_CEA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CEC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CER_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";" ], [ "DEFAULT_CGA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_CL_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";" ], [ "DEFAULT_ST_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";" ], [ "GLOBAL_ENV", "org.graphstream.util", "Environment", "public static Environment GLOBAL_ENV;" ], [ "LEXICAL_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int LEXICAL_ERROR = 0;" ], [ "STATIC_LEXER_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int STATIC_LEXER_ERROR = 1;" ], [ "INVALID_LEXICAL_STATE", "org.graphstream.util.parser", "TokenMgrError", "public static final int INVALID_LEXICAL_STATE = 2;" ], [ "LOOP_DETECTED", "org.graphstream.util.parser", "TokenMgrError", "public static final int LOOP_DETECTED = 3;" ], [ "staticFlag", "org.graphstream.util.parser", "SimpleCharStream", "public static final boolean staticFlag = false;" ], [ "ABBREVIATED_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");" ], [ "FULL_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");" ], [ "ABBREVIATED_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");" ], [ "FULL_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");" ], [ "LOCALE_DATE_AND_TIME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);" ], [ "CENTURY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");" ], [ "DAY_OF_MONTH_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");" ], [ "DATE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");" ], [ "DAY_OF_MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");" ], [ "DATE_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");" ], [ "WEEK_BASED_YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "WEEK_BASED_YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "ABBREVIATED_MONTH_NAME_ALIAS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");" ], [ "HOUR_OF_DAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");" ], [ "HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");" ], [ "DAY_OF_YEAR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");" ], [ "MILLISECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");" ], [ "EPOCH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent EPOCH = new EpochComponent();" ], [ "MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");" ], [ "MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");" ], [ "NEW_LINE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");" ], [ "AM_PM", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent AM_PM = new AMPMComponent();" ], [ "LOCALE_CLOCK_TIME_12_HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");" ], [ "HOUR_AND_MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");" ], [ "SECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");" ], [ "TABULATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");" ], [ "TIME_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");" ], [ "DAY_OF_WEEK_1_7", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");" ], [ "WEEK_OF_YEAR_FROM_SUNDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");" ], [ "WEEK_NUMBER_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");" ], [ "DAY_OF_WEEK_0_6", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");" ], [ "WEEK_OF_YEAR_FROM_MONDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");" ], [ "LOCALE_DATE_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");" ], [ "LOCALE_TIME_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");" ], [ "YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "UTC_OFFSET", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();" ], [ "LOCALE_TIME_ZONE_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");" ], [ "PERCENT", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");" ], [ "jjbitVec0", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoToken = { 0xff01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoSkip = { 0x1eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoToken = { 0xffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "XYZ_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String XYZ_ATTR = \"xyz\";" ], [ "WIDTH_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String WIDTH_ATTR = \"ui.tikz.width\";" ], [ "HEIGHT_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String HEIGHT_ATTR = \"ui.tikz.height\";" ], [ "DEFAULT_WIDTH", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_WIDTH = 10;" ], [ "DEFAULT_HEIGHT", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_HEIGHT = 10;" ], [ "DISPLAY_MIN_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;" ], [ "DISPLAY_MAX_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;" ], [ "jjbitVec0", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };" ], [ "lexStateNames", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoToken = { 0x3ffffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoToken = { 0x3fffffffffffc9L };" ], [ "jjtoSkip", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoSkip = { 0x6L };" ], [ "XMLNS", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";" ], [ "XMLNS_XSI", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";" ], [ "XMLNS_SL", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";" ], [ "XMLNS_VIZ", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";" ], [ "VERSION", "org.graphstream.stream.file.gexf", "GEXF", "public static final String VERSION = \"1.2\";" ], [ "BUFFER_SIZE", "org.graphstream.stream.file.dgs", "DGSParser", "protected static final int BUFFER_SIZE = 4096;" ], [ "ARRAY_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_OPEN = '{';" ], [ "ARRAY_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_CLOSE = '}';" ], [ "MAP_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_OPEN = '[';" ], [ "MAP_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_CLOSE = ']';" ], [ "gradientId", "org.graphstream.stream.file", "FileSinkSVG2", "static int gradientId = 0;" ], [ "gradientId", "org.graphstream.stream.file", "SVGStyle", "static int gradientId = 0;" ], [ "TIME_PREFIX", "org.graphstream.stream", "Timeline", "public static final String TIME_PREFIX = \"time\";" ], [ "SYNC_DISABLE_KEY", "org.graphstream.stream.sync", "SinkTime", "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";" ], [ "disableSync", "org.graphstream.stream.sync", "SinkTime", "protected static final boolean disableSync;" ], [ "LIGHT_YELLOW", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String LIGHT_YELLOW = \"\u001B[33;1m\";" ], [ "RESET", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String RESET = \"\u001B[0m\";" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "IncomingBuffer", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "EVENT_GETVERSION", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_GETVERSION = 0x00;" ], [ "EVENT_START", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_START = 0x01;" ], [ "EVENT_END", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_END = 0x02;" ], [ "EVENT_ADD_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE = 0x10;" ], [ "EVENT_DEL_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE = 0x11;" ], [ "EVENT_ADD_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE = 0x12;" ], [ "EVENT_DEL_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE = 0x13;" ], [ "EVENT_STEP", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_STEP = 0x14;" ], [ "EVENT_CLEARED", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CLEARED = 0x15;" ], [ "EVENT_ADD_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_GRAPH_ATTR = 0x16;" ], [ "EVENT_CHG_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_GRAPH_ATTR = 0x17;" ], [ "EVENT_DEL_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_GRAPH_ATTR = 0x18;" ], [ "EVENT_ADD_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE_ATTR = 0x19;" ], [ "EVENT_CHG_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_NODE_ATTR = 0x1a;" ], [ "EVENT_DEL_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE_ATTR = 0x1b;" ], [ "EVENT_ADD_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE_ATTR = 0x1c;" ], [ "EVENT_CHG_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_EDGE_ATTR = 0x1d;" ], [ "EVENT_DEL_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE_ATTR = 0x1e;" ], [ "TYPE_UNKNOWN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_UNKNOWN = 0x00;" ], [ "TYPE_BOOLEAN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN = 0x50;" ], [ "TYPE_BOOLEAN_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN_ARRAY = 0x51;" ], [ "TYPE_BYTE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE = 0x52;" ], [ "TYPE_BYTE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE_ARRAY = 0x53;" ], [ "TYPE_SHORT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT = 0x54;" ], [ "TYPE_SHORT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT_ARRAY = 0x55;" ], [ "TYPE_INT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT = 0x56;" ], [ "TYPE_INT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT_ARRAY = 0x57;" ], [ "TYPE_LONG", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG = 0x58;" ], [ "TYPE_LONG_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG_ARRAY = 0x59;" ], [ "TYPE_FLOAT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT = 0x5a;" ], [ "TYPE_FLOAT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT_ARRAY = 0x5b;" ], [ "TYPE_DOUBLE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE = 0x5c;" ], [ "TYPE_DOUBLE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE_ARRAY = 0x5d;" ], [ "TYPE_STRING", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_STRING = 0x5e;" ], [ "TYPE_RAW", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_RAW = 0x5f;" ], [ "TYPE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static byte TYPE_ARRAY = 0x60;" ], [ "TYPE_NULL", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_NULL = 0x61;" ], [ "COMMAND", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int COMMAND = 0x70;" ], [ "NO_OPTIONS", "org.graphstream.stream.netstream.packing", "Base64", "public final static int NO_OPTIONS = 0;" ], [ "ENCODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ENCODE = 1;" ], [ "DECODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DECODE = 0;" ], [ "GZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int GZIP = 2;" ], [ "DONT_GUNZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DONT_GUNZIP = 4;" ], [ "DO_BREAK_LINES", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DO_BREAK_LINES = 8;" ], [ "URL_SAFE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int URL_SAFE = 16;" ], [ "ORDERED", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ORDERED = 32;" ], [ "INITIAL_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final int INITIAL_EDGE_CAPACITY;" ], [ "GROWTH_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final double GROWTH_FACTOR = 1.1;" ], [ "I_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char I_EDGE = 0;" ], [ "IO_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char IO_EDGE = 1;" ], [ "O_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char O_EDGE = 2;" ], [ "GROW_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final double GROW_FACTOR = 1.1;" ], [ "DEFAULT_NODE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_NODE_CAPACITY = 128;" ], [ "DEFAULT_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_EDGE_CAPACITY = 1024;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getNodeCount", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public int getNodeCount()" ], [ "getGraphIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<? extends Graph> getGraphIterator()" ], [ "getStyleFor", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup getStyleFor(GraphicSprite sprite)" ], [ "getElementGroup", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public String getElementGroup(Element element)" ], [ "getGraph", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Graph getGraph(String id)" ], [ "groups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<? extends StyleGroup> groups()" ], [ "nodes", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<? extends Node> nodes()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "getGroupCount", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public int getGroupCount()" ], [ "getStyleFor", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup getStyleFor(Graph graph)" ], [ "getSpriteCount", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public int getSpriteCount()" ], [ "addElement_", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected StyleGroup addElement_(Element element)" ], [ "addElement", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup addElement(Element element)" ], [ "getStyleForElement", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup getStyleForElement(Element element)" ], [ "getSpriteIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<? extends GraphicSprite> getSpriteIterator()" ], [ "containsEdge", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public boolean containsEdge(String id)" ], [ "getZIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<HashSet<StyleGroup>> getZIterator()" ], [ "getNodeIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<? extends Node> getNodeIterator()" ], [ "edges", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<? extends Edge> edges()" ], [ "zIndex", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<HashSet<StyleGroup>> zIndex()" ], [ "containsNode", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public boolean containsNode(String id)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "getZIndex", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public ZIndex getZIndex()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "areEmptyGroupRemoved", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public boolean areEmptyGroupRemoved()" ], [ "getShadowIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<StyleGroup> getShadowIterator()" ], [ "toString", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public String toString()" ], [ "getSprite", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public GraphicSprite getSprite(String id)" ], [ "graphs", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<? extends Graph> graphs()" ], [ "getEdgeCount", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public int getEdgeCount()" ], [ "getGroupIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<? extends StyleGroup> getGroupIterator()" ], [ "getStyleFor", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup getStyleFor(Node node)" ], [ "sprites", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<? extends GraphicSprite> sprites()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "getEdgeIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<? extends Edge> getEdgeIterator()" ], [ "getElement", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected Element getElement(String id, Map<String, String> elt2grp)" ], [ "getStyleFor", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup getStyleFor(Edge edge)" ], [ "getEdge", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Edge getEdge(String id)" ], [ "shadows", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<StyleGroup> shadows()" ], [ "containsGraph", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public boolean containsGraph(String id)" ], [ "getNode", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Node getNode(String id)" ], [ "getGroup", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup getGroup(String groupId)" ], [ "addGroup", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected StyleGroup addGroup(String id, ArrayList<Rule> rules, Element firstElement)" ], [ "getShadowSet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public ShadowSet getShadowSet()" ], [ "containsSprite", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public boolean containsSprite(String id)" ], [ "next", "java.util", "Iterator", "public abstract E next()" ], [ "hasNext", "java.util", "Iterator", "public abstract boolean hasNext()" ], [ "toString", "java.lang", "Object", "public String toString()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "stylesheet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected StyleSheet stylesheet;" ], [ "groups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected final Map<String,StyleGroup> groups = new TreeMap<String, StyleGroup>();" ], [ "byNodeIdGroups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected final Map<String,String> byNodeIdGroups = new TreeMap<String, String>();" ], [ "byEdgeIdGroups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected final Map<String,String> byEdgeIdGroups = new TreeMap<String, String>();" ], [ "bySpriteIdGroups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected final Map<String,String> bySpriteIdGroups = new TreeMap<String, String>();" ], [ "byGraphIdGroups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected final Map<String,String> byGraphIdGroups = new TreeMap<String, String>();" ], [ "nodeSet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected NodeSet nodeSet = new NodeSet();" ], [ "edgeSet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected EdgeSet edgeSet = new EdgeSet();" ], [ "spriteSet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected SpriteSet spriteSet = new SpriteSet();" ], [ "graphSet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected GraphSet graphSet = new GraphSet();" ], [ "eventSet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected EventSet eventSet = new EventSet();" ], [ "zIndex", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected ZIndex zIndex = new ZIndex();" ], [ "shadow", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected ShadowSet shadow = new ShadowSet();" ], [ "removeEmptyGroups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected boolean removeEmptyGroups = true;" ], [ "listeners", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected ArrayList<StyleGroupListener> listeners = new ArrayList<StyleGroupListener>();" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 3220,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "gs-core-1.3",
  "packageName" : "org.graphstream.ui.graphicGraph",
  "className" : "StyleGroupSet",
  "javadocTag" : "@param id The element id.",
  "methodJavadoc" : "    /**\n\t * Get an element.\n\t * \n\t * @param id\n\t *            The element id.\n\t * @param elt2grp\n\t *            The kind of element.\n\t * @return The element or null if not found.\n\t */",
  "methodSourceCode" : "protected Element getElement(String id, Map<String, String> elt2grp){\n    String gid = elt2grp.get(id);\n    if (gid != null) {\n        StyleGroup group = groups.get(gid);\n        return group.getElement(id);\n    }\n    return null;\n}",
  "classJavadoc" : "/**\n * A set of style groups.\n * \n * <p>\n * This class is in charge or storing all the style groups and to update them.\n * Each time an element is added or removed the groups are updated. Each time\n * the style sheet changes the groups are updated.\n * </p>\n * \n * @author Antoine Dutot\n */",
  "classSourceCode" : "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign√©      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.ui.graphicGraph;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.TreeMap;\nimport org.graphstream.graph.Edge;\nimport org.graphstream.graph.Element;\nimport org.graphstream.graph.Graph;\nimport org.graphstream.graph.Node;\nimport org.graphstream.ui.graphicGraph.stylesheet.Rule;\nimport org.graphstream.ui.graphicGraph.stylesheet.Selector;\nimport org.graphstream.ui.graphicGraph.stylesheet.StyleConstants.ShadowMode;\nimport org.graphstream.ui.graphicGraph.stylesheet.StyleSheet;\nimport org.graphstream.ui.graphicGraph.stylesheet.StyleSheetListener;\n\n/**\n * A set of style groups.\n * \n * <p>\n * This class is in charge or storing all the style groups and to update them.\n * Each time an element is added or removed the groups are updated. Each time\n * the style sheet changes the groups are updated.\n * </p>\n * \n * @author Antoine Dutot\n */\npublic class StyleGroupSet implements StyleSheetListener {\n\t// Attribute\n\n\t/**\n\t * The style sheet.\n\t */\n\tprotected StyleSheet stylesheet;\n\n\t/**\n\t * All the groups indexed by their unique identifier.\n\t */\n\tprotected final Map<String, StyleGroup> groups = new TreeMap<String, StyleGroup>();\n\n\t/**\n\t * Allows to retrieve the group containing a node knowing the node id.\n\t */\n\tprotected final Map<String, String> byNodeIdGroups = new TreeMap<String, String>();\n\n\t/**\n\t * Allows to retrieve the group containing an edge knowing the node id.\n\t */\n\tprotected final Map<String, String> byEdgeIdGroups = new TreeMap<String, String>();\n\n\t/**\n\t * Allows to retrieve the group containing a sprite knowing the node id.\n\t */\n\tprotected final Map<String, String> bySpriteIdGroups = new TreeMap<String, String>();\n\n\t/**\n\t * Allows to retrieve the group containing a graph knowing the node id.\n\t */\n\tprotected final Map<String, String> byGraphIdGroups = new TreeMap<String, String>();\n\n\t/**\n\t * Virtual set of nodes. This set provides fake methods to make it appear as\n\t * a set of nodes whereas it only maps on the node style groups.\n\t */\n\tprotected NodeSet nodeSet = new NodeSet();\n\n\t/**\n\t * Virtual set of edges. This set provides fake methods to make it appear as\n\t * a set of edges whereas it only maps on the edge style groups.\n\t */\n\tprotected EdgeSet edgeSet = new EdgeSet();\n\n\t/**\n\t * Virtual set of sprites. This set provides fake methods to make it appear\n\t * as a set of sprites whereas it only maps on the sprite style groups.\n\t */\n\tprotected SpriteSet spriteSet = new SpriteSet();\n\n\t/**\n\t * Virtual set of graphs. This set provides fake methods to make it appear\n\t * as a set of graphs whereas it only maps on the graph style groups.\n\t */\n\tprotected GraphSet graphSet = new GraphSet();\n\n\t/**\n\t * The set of events actually occurring.\n\t */\n\tprotected EventSet eventSet = new EventSet();\n\n\t/**\n\t * The groups sorted by their Z index.\n\t */\n\tprotected ZIndex zIndex = new ZIndex();\n\n\t/**\n\t * Set of groups that cast shadow.\n\t */\n\tprotected ShadowSet shadow = new ShadowSet();\n\n\t/**\n\t * Remove groups if they become empty?.\n\t */\n\tprotected boolean removeEmptyGroups = true;\n\n\t/**\n\t * Set of listeners.\n\t */\n\tprotected ArrayList<StyleGroupListener> listeners = new ArrayList<StyleGroupListener>();\n\n\t// Construction\n\n\t/**\n\t * New empty style group set, using the given style sheet to create style\n\t * groups. The group set installs itself as a listener of the style sheet.\n\t * So in order to completely stop using such a group, you must call\n\t * {@link #release()}.\n\t * \n\t * @param stylesheet\n\t *            The style sheet to use to create groups.\n\t */\n\tpublic StyleGroupSet(StyleSheet stylesheet) {\n\t\tthis.stylesheet = stylesheet;\n\n\t\tstylesheet.addListener(this);\n\t}\n\n\t// Access\n\n\t/**\n\t * Number of groups.\n\t * \n\t * @return The number of groups.\n\t */\n\tpublic int getGroupCount() {\n\t\treturn groups.size();\n\t}\n\n\t/**\n\t * Return a group by its unique identifier. The way group identifier are\n\t * constructed reflects their contents.\n\t * \n\t * @param groupId\n\t *            The group identifier.\n\t * @return The corresponding group or null if not found.\n\t */\n\tpublic StyleGroup getGroup(String groupId) {\n\t\treturn groups.get(groupId);\n\t}\n\n\t/**\n\t * Iterator on the set of groups in no particular order.\n\t * \n\t * @return An iterator on the group set.\n\t */\n\tpublic Iterator<? extends StyleGroup> getGroupIterator() {\n\t\treturn groups.values().iterator();\n\t}\n\n\t/**\n\t * Iterable set of groups elements, in no particular order.\n\t * \n\t * @return An iterable on the set of groups.\n\t */\n\tpublic Iterable<? extends StyleGroup> groups() {\n\t\treturn groups.values();\n\t}\n\n\t/**\n\t * Iterator on the Z index.\n\t * \n\t * @return The z index iterator.\n\t */\n\tpublic Iterator<HashSet<StyleGroup>> getZIterator() {\n\t\treturn zIndex.getIterator();\n\t}\n\n\t/**\n\t * Iterable set of \"subsets of groups\" sorted by Z level. Each subset of\n\t * groups is at the same Z level.\n\t * \n\t * @return The z levels.\n\t */\n\tpublic Iterable<HashSet<StyleGroup>> zIndex() {\n\t\treturn zIndex;\n\t}\n\n\t/**\n\t * Iterator on the style groups that cast a shadow.\n\t * \n\t * @return The shadow groups iterator.\n\t */\n\tpublic Iterator<StyleGroup> getShadowIterator() {\n\t\treturn shadow.getIterator();\n\t}\n\n\t/**\n\t * Iterable set of groups that cast shadow.\n\t * \n\t * @return All the groups that cast a shadow.\n\t */\n\tpublic Iterable<StyleGroup> shadows() {\n\t\treturn shadow;\n\t}\n\n\t/**\n\t * True if the set contains and styles the node whose identifier is given.\n\t * \n\t * @param id\n\t *            The node identifier.\n\t * @return True if the node is in this set.\n\t */\n\tpublic boolean containsNode(String id) {\n\t\treturn byNodeIdGroups.containsKey(id);\n\t}\n\n\t/**\n\t * True if the set contains and styles the edge whose identifier is given.\n\t * \n\t * @param id\n\t *            The edge identifier.\n\t * @return True if the edge is in this set.\n\t */\n\tpublic boolean containsEdge(String id) {\n\t\treturn byEdgeIdGroups.containsKey(id);\n\t}\n\n\t/**\n\t * True if the set contains and styles the sprite whose identifier is given.\n\t * \n\t * @param id\n\t *            The sprite identifier.\n\t * @return True if the sprite is in this set.\n\t */\n\tpublic boolean containsSprite(String id) {\n\t\treturn bySpriteIdGroups.containsKey(id);\n\t}\n\n\t/**\n\t * True if the set contains and styles the graph whose identifier is given.\n\t * \n\t * @param id\n\t *            The graph identifier.\n\t * @return True if the graph is in this set.\n\t */\n\tpublic boolean containsGraph(String id) {\n\t\treturn byGraphIdGroups.containsKey(id);\n\t}\n\n\t/**\n\t * Get an element.\n\t * \n\t * @param id\n\t *            The element id.\n\t * @param elt2grp\n\t *            The kind of element.\n\t * @return The element or null if not found.\n\t */\n\tprotected Element getElement(String id, Map<String, String> elt2grp) {\n\t\tString gid = elt2grp.get(id);\n\n\t\tif (gid != null) {\n\t\t\tStyleGroup group = groups.get(gid);\n\t\t\treturn group.getElement(id);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Get a node element knowing its identifier.\n\t * \n\t * @param id\n\t *            The node identifier.\n\t * @return The node if it is in this set, else null.\n\t */\n\tpublic Node getNode(String id) {\n\t\treturn (Node) getElement(id, byNodeIdGroups);\n\t}\n\n\t/**\n\t * Get an edge element knowing its identifier.\n\t * \n\t * @param id\n\t *            The edge identifier.\n\t * @return The edge if it is in this set, else null.\n\t */\n\tpublic Edge getEdge(String id) {\n\t\treturn (Edge) getElement(id, byEdgeIdGroups);\n\t}\n\n\t/**\n\t * Get a sprite element knowing its identifier.\n\t * \n\t * @param id\n\t *            The sprite identifier.\n\t * @return The sprite if it is in this set, else null.\n\t */\n\tpublic GraphicSprite getSprite(String id) {\n\t\treturn (GraphicSprite) getElement(id, bySpriteIdGroups);\n\t}\n\n\t/**\n\t * Get a graph element knowing its identifier.\n\t * \n\t * @param id\n\t *            The graph identifier.\n\t * @return The graph if it is in this set, else null.\n\t */\n\tpublic Graph getGraph(String id) {\n\t\treturn (Graph) getElement(id, byGraphIdGroups);\n\t}\n\n\t/**\n\t * The number of nodes referenced.\n\t * \n\t * @return The node count.\n\t */\n\tpublic int getNodeCount() {\n\t\treturn byNodeIdGroups.size();\n\t}\n\n\t/**\n\t * The number of edges referenced.\n\t * \n\t * @return The edge count.\n\t */\n\tpublic int getEdgeCount() {\n\t\treturn byEdgeIdGroups.size();\n\t}\n\n\t/**\n\t * The number of sprites referenced.\n\t * \n\t * @return The sprite count.\n\t */\n\tpublic int getSpriteCount() {\n\t\treturn bySpriteIdGroups.size();\n\t}\n\n\t/**\n\t * Iterator on the set of nodes.\n\t * \n\t * @return An iterator on all node elements contained in style groups.\n\t */\n\tpublic Iterator<? extends Node> getNodeIterator() {\n\t\treturn new ElementIterator<Node>(byNodeIdGroups);\n\t}\n\n\t/**\n\t * Iterator on the set of graphs.\n\t * \n\t * @return An iterator on all graph elements contained in style groups.\n\t */\n\tpublic Iterator<? extends Graph> getGraphIterator() {\n\t\treturn new ElementIterator<Graph>(byGraphIdGroups);\n\t}\n\n\t/**\n\t * Iterable set of nodes.\n\t * \n\t * @return The set of all nodes.\n\t */\n\tpublic Iterable<? extends Node> nodes() {\n\t\treturn nodeSet;\n\t}\n\n\t/**\n\t * Iterable set of graphs.\n\t * \n\t * @return The set of all graphs.\n\t */\n\tpublic Iterable<? extends Graph> graphs() {\n\t\treturn graphSet;\n\t}\n\n\t/**\n\t * Iterator on the set of edges.\n\t * \n\t * @return An iterator on all edge elements contained in style groups.\n\t */\n\tpublic Iterator<? extends Edge> getEdgeIterator() {\n\t\treturn new ElementIterator<Edge>(byEdgeIdGroups);\n\t}\n\n\t/**\n\t * Iterable set of edges.\n\t * \n\t * @return The set of all edges.\n\t */\n\tpublic Iterable<? extends Edge> edges() {\n\t\treturn edgeSet;\n\t}\n\n\t/**\n\t * Iterator on the set of sprite.\n\t * \n\t * @return An iterator on all sprite elements contained in style groups.\n\t */\n\tpublic Iterator<? extends GraphicSprite> getSpriteIterator() {\n\t\treturn new ElementIterator<GraphicSprite>(bySpriteIdGroups);\n\t}\n\n\t/**\n\t * Iterable set of sprites.\n\t * \n\t * @return The set of all sprites.\n\t */\n\tpublic Iterable<? extends GraphicSprite> sprites() {\n\t\treturn spriteSet;\n\t}\n\n\t/**\n\t * Retrieve the group identifier of an element knowing the element\n\t * identifier.\n\t * \n\t * @param element\n\t *            The element to search for.\n\t * @return Identifier of the group containing the element.\n\t */\n\tpublic String getElementGroup(Element element) {\n\t\tif (element instanceof Node) {\n\t\t\treturn byNodeIdGroups.get(element.getId());\n\t\t} else if (element instanceof Edge) {\n\t\t\treturn byEdgeIdGroups.get(element.getId());\n\t\t} else if (element instanceof GraphicSprite) {\n\t\t\treturn bySpriteIdGroups.get(element.getId());\n\t\t} else if (element instanceof Graph) {\n\t\t\treturn byGraphIdGroups.get(element.getId());\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"What ?\");\n\t\t}\n\t}\n\n\t/**\n\t * Get the style of an element.\n\t * \n\t * @param element\n\t *            The element to search for.\n\t * @return The style group of the element (which is also a style).\n\t */\n\tpublic StyleGroup getStyleForElement(Element element) {\n\t\tString gid = getElementGroup(element);\n\n\t\treturn groups.get(gid);\n\t}\n\n\t/**\n\t * Get the style of a given node.\n\t * \n\t * @param node\n\t *            The node to search for.\n\t * @return The node style.\n\t */\n\tpublic StyleGroup getStyleFor(Node node) {\n\t\tString gid = byNodeIdGroups.get(node.getId());\n\t\treturn groups.get(gid);\n\t}\n\n\t/**\n\t * Get the style of a given edge.\n\t * \n\t * @param edge\n\t *            The edge to search for.\n\t * @return The edge style.\n\t */\n\tpublic StyleGroup getStyleFor(Edge edge) {\n\t\tString gid = byEdgeIdGroups.get(edge.getId());\n\t\treturn groups.get(gid);\n\t}\n\n\t/**\n\t * Get the style of a given sprite.\n\t * \n\t * @param sprite\n\t *            The node to search for.\n\t * @return The sprite style.\n\t */\n\tpublic StyleGroup getStyleFor(GraphicSprite sprite) {\n\t\tString gid = bySpriteIdGroups.get(sprite.getId());\n\t\treturn groups.get(gid);\n\t}\n\n\t/**\n\t * Get the style of a given graph.\n\t * \n\t * @param graph\n\t *            The node to search for.\n\t * @return The graph style.\n\t */\n\tpublic StyleGroup getStyleFor(Graph graph) {\n\t\tString gid = byGraphIdGroups.get(graph.getId());\n\t\treturn groups.get(gid);\n\t}\n\n\t/**\n\t * True if groups are removed when becoming empty. This setting allows to\n\t * keep empty group when the set of elements is quite dynamic. This allows\n\t * to avoid recreting groups when an element appears and disappears\n\t * regularly.\n\t * \n\t * @return True if the groups are removed when empty.\n\t */\n\tpublic boolean areEmptyGroupRemoved() {\n\t\treturn removeEmptyGroups;\n\t}\n\n\t/**\n\t * The Z index object.\n\t * \n\t * @return The Z index.\n\t */\n\tpublic ZIndex getZIndex() {\n\t\treturn zIndex;\n\t}\n\n\t/**\n\t * The set of style groups that cast a shadow.\n\t * \n\t * @return The set of shadowed style groups.\n\t */\n\tpublic ShadowSet getShadowSet() {\n\t\treturn shadow;\n\t}\n\n\t// Command\n\n\t/**\n\t * Release any dependency to the style sheet.\n\t */\n\tpublic void release() {\n\t\tstylesheet.removeListener(this);\n\t}\n\n\t/**\n\t * Empties this style group set. The style sheet is listener is not removed,\n\t * use {@link #release()} to do that.\n\t */\n\tpublic void clear() {\n\t\tbyEdgeIdGroups.clear();\n\t\tbyNodeIdGroups.clear();\n\t\tbySpriteIdGroups.clear();\n\t\tbyGraphIdGroups.clear();\n\t\tgroups.clear();\n\t\tzIndex.clear();\n\t\tshadow.clear();\n\t}\n\n\t/**\n\t * Remove or keep groups that becomes empty, if true the groups are removed.\n\t * If this setting was set to false, and is now true, the group set is\n\t * purged of the empty groups.\n\t * \n\t * @param on\n\t *            If true the groups will be removed.\n\t */\n\tpublic void setRemoveEmptyGroups(boolean on) {\n\t\tif (removeEmptyGroups == false && on == true) {\n\t\t\tIterator<? extends StyleGroup> i = groups.values().iterator();\n\n\t\t\twhile (i.hasNext()) {\n\t\t\t\tStyleGroup g = i.next();\n\n\t\t\t\tif (g.isEmpty())\n\t\t\t\t\ti.remove();\n\t\t\t}\n\t\t}\n\n\t\tremoveEmptyGroups = on;\n\t}\n\n\tprotected StyleGroup addGroup(String id, ArrayList<Rule> rules,\n\t\t\tElement firstElement) {\n\t\tStyleGroup group = new StyleGroup(id, rules, firstElement, eventSet);\n\n\t\tgroups.put(id, group);\n\t\tzIndex.groupAdded(group);\n\t\tshadow.groupAdded(group);\n\n\t\treturn group;\n\t}\n\n\tprotected void removeGroup(StyleGroup group) {\n\t\tzIndex.groupRemoved(group);\n\t\tshadow.groupRemoved(group);\n\t\tgroups.remove(group.getId());\n\t\tgroup.release();\n\t}\n\n\t/**\n\t * Add an element and bind it to its style group. The group is created if\n\t * needed.\n\t * \n\t * @param element\n\t *            The element to add.\n\t * @return The style group where the element was added.\n\t */\n\tpublic StyleGroup addElement(Element element) {\n\t\tStyleGroup group = addElement_(element);\n\n\t\tfor (StyleGroupListener listener : listeners)\n\t\t\tlistener.elementStyleChanged(element, null, group);\n\n\t\treturn group;\n\t}\n\n\tprotected StyleGroup addElement_(Element element) {\n\t\tArrayList<Rule> rules = stylesheet.getRulesFor(element);\n\t\tString gid = stylesheet.getStyleGroupIdFor(element, rules);\n\t\tStyleGroup group = groups.get(gid);\n\n\t\tif (group == null)\n\t\t\tgroup = addGroup(gid, rules, element);\n\t\telse\n\t\t\tgroup.addElement(element);\n\n\t\taddElementToReverseSearch(element, gid);\n\n\t\treturn group;\n\t}\n\n\t/**\n\t * Remove an element from the group set. If the group becomes empty after\n\t * the element removal, depending on the setting of\n\t * {@link #areEmptyGroupRemoved()}, the group is deleted or kept. Keeping\n\t * groups allows to handle faster elements that constantly appear and\n\t * disappear.\n\t * \n\t * @param element\n\t *            The element to remove.\n\t */\n\tpublic void removeElement(Element element) {\n\t\tString gid = getElementGroup(element);\n        if (null == gid)\n        {\n            return;\n        }\n\t\tStyleGroup group = groups.get(gid);\n\n\t\tif (group != null) {\n\t\t\tgroup.removeElement(element);\n\t\t\tremoveElementFromReverseSearch(element);\n\n\t\t\tif (removeEmptyGroups && group.isEmpty())\n\t\t\t\tremoveGroup(group);\n\t\t}\n\t}\n\n\t/**\n\t * Check if an element need to change from a style group to another.\n\t * \n\t * <p>\n\t * When an element can have potentially changed style due to some of its\n\t * attributes (ui.class for example), instead of removing it then reading\n\t * it, use this method to move the element from its current style group to a\n\t * potentially different style group.\n\t * </p>\n\t * \n\t * <p>\n\t * Explanation of this method : checking the style of an element may be done\n\t * by removing it ({@link #removeElement(Element)}) and then re-adding it (\n\t * {@link #addElement(Element)}). This must be done by the element since it\n\t * knows when to check this. However you cannot only remove and add, since\n\t * the style group inside which the element is can have events occurring on\n\t * it, and these events must be passed from its old style to its new style.\n\t * This method does all this information passing.\n\t * </p>\n\t * \n\t * @param element\n\t *            The element to move.\n\t */\n\tpublic void checkElementStyleGroup(Element element) {\n\t\tStyleGroup oldGroup = getGroup(getElementGroup(element));\n\n\t\t// Get the old element \"dynamic\" status.\n\n\t\tboolean isDyn = false;\n\n\t\t// Get the old event set for the given element.\n\n\t\tStyleGroup.ElementEvents events = null;\n\n\t\tif (oldGroup != null) {\n\t\t\tisDyn = oldGroup.isElementDynamic(element);\n\t\t\tevents = oldGroup.getEventsFor(element);\n\t\t}\n\n\t\t// Remove the element from its old style and add it to insert it in the\n\t\t// correct style.\n\n\t\tremoveElement(element);\n\t\taddElement_(element);\n\n\t\t// Eventually push the events on the new style group.\n\n\t\tStyleGroup newGroup = getGroup(getElementGroup(element));\n\n\t\tif (newGroup != null && events != null) {\n\t\t\tfor (String event : events.events)\n\t\t\t\tpushEventFor(element, event);\n\t\t}\n\n\t\tfor (StyleGroupListener listener : listeners)\n\t\t\tlistener.elementStyleChanged(element, oldGroup, newGroup);\n\n\t\t// Eventually set the element as dynamic, if it was.\n\n\t\tif (newGroup != null && isDyn)\n\t\t\tnewGroup.pushElementAsDynamic(element);\n\t}\n\n\tprotected void addElementToReverseSearch(Element element, String groupId) {\n\t\tif (element instanceof Node) {\n\t\t\tbyNodeIdGroups.put(element.getId(), groupId);\n\t\t} else if (element instanceof Edge) {\n\t\t\tbyEdgeIdGroups.put(element.getId(), groupId);\n\t\t} else if (element instanceof GraphicSprite) {\n\t\t\tbySpriteIdGroups.put(element.getId(), groupId);\n\t\t} else if (element instanceof Graph) {\n\t\t\tbyGraphIdGroups.put(element.getId(), groupId);\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"What ?\");\n\t\t}\n\t}\n\n\tprotected void removeElementFromReverseSearch(Element element) {\n\t\tif (element instanceof Node) {\n\t\t\tbyNodeIdGroups.remove(element.getId());\n\t\t} else if (element instanceof Edge) {\n\t\t\tbyEdgeIdGroups.remove(element.getId());\n\t\t} else if (element instanceof GraphicSprite) {\n\t\t\tbySpriteIdGroups.remove(element.getId());\n\t\t} else if (element instanceof Graph) {\n\t\t\tbyGraphIdGroups.remove(element.getId());\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"What ?\");\n\t\t}\n\t}\n\n\t/**\n\t * Push a global event on the event stack. Events trigger the replacement of\n\t * a style by an alternative style (or meta-class) when possible. If an\n\t * event is on the event stack, each time a style has an alternative\n\t * corresponding to the event, the alternative is used instead of the style.\n\t * \n\t * @param event\n\t *            The event to push.\n\t */\n\tpublic void pushEvent(String event) {\n\t\teventSet.pushEvent(event);\n\t}\n\n\t/**\n\t * Push an event specifically for a given element. This is normally done\n\t * automatically by the graphic element.\n\t * \n\t * @param element\n\t *            The element considered.\n\t * @param event\n\t *            The event to push.\n\t */\n\tpublic void pushEventFor(Element element, String event) {\n\t\tStyleGroup group = getGroup(getElementGroup(element));\n\n\t\tif (group != null)\n\t\t\tgroup.pushEventFor(element, event);\n\t}\n\n\t/**\n\t * Pop a global event from the event set.\n\t * \n\t * @param event\n\t *            The event to remove.\n\t */\n\tpublic void popEvent(String event) {\n\t\teventSet.popEvent(event);\n\t}\n\n\t/**\n\t * Pop an event specifically for a given element. This is normally done\n\t * automatically by the graphic element.\n\t * \n\t * @param element\n\t *            The element considered.\n\t * @param event\n\t *            The event to pop.\n\t */\n\tpublic void popEventFor(Element element, String event) {\n\t\tStyleGroup group = getGroup(getElementGroup(element));\n\n\t\tif (group != null)\n\t\t\tgroup.popEventFor(element, event);\n\t}\n\n\t/**\n\t * Specify the given element has dynamic style attribute values. This is\n\t * normally done automatically by the graphic element.\n\t * \n\t * @param element\n\t *            The element to add to the dynamic subset.\n\t */\n\tpublic void pushElementAsDynamic(Element element) {\n\t\tStyleGroup group = getGroup(getElementGroup(element));\n\n\t\tif (group != null)\n\t\t\tgroup.pushElementAsDynamic(element);\n\t}\n\n\t/**\n\t * Remove the given element from the subset of elements having dynamic style\n\t * attribute values. This is normally done automatically by the graphic\n\t * element.\n\t * \n\t * @param element\n\t *            The element to remove from the dynamic subset.\n\t */\n\tpublic void popElementAsDynamic(Element element) {\n\t\tStyleGroup group = getGroup(getElementGroup(element));\n\n\t\tif (group != null)\n\t\t\tgroup.popElementAsDynamic(element);\n\t}\n\n\t/**\n\t * Add a listener for element style changes.\n\t * \n\t * @param listener\n\t *            The listener to add.\n\t */\n\tpublic void addListener(StyleGroupListener listener) {\n\t\tlisteners.add(listener);\n\t}\n\n\t/**\n\t * Remove a style change listener.\n\t * \n\t * @param listener\n\t *            The listener to remove.\n\t */\n\tpublic void removeListener(StyleGroupListener listener) {\n\t\tint index = listeners.lastIndexOf(listener);\n\n\t\tif (index >= 0) {\n\t\t\tlisteners.remove(index);\n\t\t}\n\t}\n\n\t// Listener -- What to do when a change occurs in the style sheet.\n\n\tpublic void styleAdded(Rule oldRule, Rule newRule) {\n\t\t// When a style change, we need to update groups.\n\t\t// Several cases :\n\t\t// 1. The style already exists\n\t\t// * Nothing to do in fact. All the elements are still in place.\n\t\t// No style rule (selectors) changed, and therefore we do not have\n\t\t// to change the groups since they are built using the selectors.\n\t\t// 2. The style is new\n\t\t// * we need to check all the groups concerning this kind of element (we\n\t\t// can\n\t\t// restrict our search to these groups, since other will not be\n\t\t// impacted),\n\t\t// and check all elements of these groups.\n\n\t\tif (oldRule == null)\n\t\t\tcheckForNewStyle(newRule); // no need to check Z and shadow, done\n\t\t\t\t\t\t\t\t\t\t// when adding/changing group.\n\t\telse\n\t\t\tcheckZIndexAndShadow(oldRule, newRule);\n\t}\n\n\tpublic void styleSheetCleared() {\n\t\tArrayList<Element> elements = new ArrayList<Element>();\n\n\t\tfor (Element element : graphs())\n\t\t\telements.add(element);\n\n\t\tfor (Element element : nodes())\n\t\t\telements.add(element);\n\n\t\tfor (Element element : edges())\n\t\t\telements.add(element);\n\n\t\tfor (Element element : sprites())\n\t\t\telements.add(element);\n\n\t\tclear();\n\n\t\tfor (Element element : elements)\n\t\t\tremoveElement(element);\n\n\t\tfor (Element element : elements)\n\t\t\taddElement(element);\n\t}\n\n\t/**\n\t * Check each group that may have changed, for example to rebuild the Z\n\t * index and the shadow set.\n\t * \n\t * @param oldRule\n\t *            The old rule that changed.\n\t * @param newRule\n\t *            The new rule that participated in the change.\n\t */\n\tprotected void checkZIndexAndShadow(Rule oldRule, Rule newRule) {\n\t\tif (oldRule != null) {\n\t\t\tif (oldRule.selector.getId() != null\n\t\t\t\t\t|| oldRule.selector.getClazz() != null) {\n\t\t\t\t// We may accelerate things a bit when a class or id style is\n\t\t\t\t// modified,\n\t\t\t\t// since only the groups listed in the style are concerned (we\n\t\t\t\t// are at the\n\t\t\t\t// bottom of the inheritance tree).\n\t\t\t\tif (oldRule.getGroups() != null)\n\t\t\t\t\tfor (String s : oldRule.getGroups()) {\n\t\t\t\t\t\tStyleGroup group = groups.get(s);\n\t\t\t\t\t\tif (group != null) {\n\t\t\t\t\t\t\tzIndex.groupChanged(group);\n\t\t\t\t\t\t\tshadow.groupChanged(group);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// For kind styles \"NODE\", \"EDGE\", \"GRAPH\", \"SPRITE\", we must\n\t\t\t\t// reset\n\t\t\t\t// the whole Z and shadows for the kind, since several styles\n\t\t\t\t// may\n\t\t\t\t// have changed.\n\n\t\t\t\tSelector.Type type = oldRule.selector.type;\n\n\t\t\t\tfor (StyleGroup group : groups.values()) {\n\t\t\t\t\tif (group.getType() == type) {\n\t\t\t\t\t\tzIndex.groupChanged(group);\n\t\t\t\t\t\tshadow.groupChanged(group);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * We try to avoid at most to affect anew styles to elements and to recreate\n\t * groups, which is time consuming.\n\t * \n\t * Two cases :\n\t * <ol>\n\t * <li>The style is an specific (id) style. In this case a new group may be\n\t * added.\n\t * <ul>\n\t * <li>check an element matches the style and in this case create the group\n\t * by adding the element.</li>\n\t * <li>else do nothing.</li>\n\t * </ul>\n\t * </li>\n\t * <li>The style is a kind or class style.\n\t * <ul>\n\t * <li>check all the groups in the kind of the style (graph, node, edge,\n\t * sprite) and only in this kind (since other will never be affected).</li>\n\t * <li>remove all groups of this kind.</li>\n\t * <li>add all elements of this kind anew to recreate the group.</li>\n\t * </ul>\n\t * </li>\n\t * </ol>\n\t */\n\tprotected void checkForNewStyle(Rule newRule) {\n\t\tswitch (newRule.selector.type) {\n\t\tcase GRAPH:\n\t\t\tif (newRule.selector.getId() != null)\n\t\t\t\tcheckForNewIdStyle(newRule, byGraphIdGroups);\n\t\t\telse\n\t\t\t\tcheckForNewStyle(newRule, byGraphIdGroups);\n\t\t\tbreak;\n\t\tcase NODE:\n\t\t\tif (newRule.selector.getId() != null)\n\t\t\t\tcheckForNewIdStyle(newRule, byNodeIdGroups);\n\t\t\telse\n\t\t\t\tcheckForNewStyle(newRule, byNodeIdGroups);\n\t\t\tbreak;\n\t\tcase EDGE:\n\t\t\tif (newRule.selector.getId() != null)\n\t\t\t\tcheckForNewIdStyle(newRule, byEdgeIdGroups);\n\t\t\telse\n\t\t\t\tcheckForNewStyle(newRule, byEdgeIdGroups);\n\t\t\tbreak;\n\t\tcase SPRITE:\n\t\t\tif (newRule.selector.getId() != null)\n\t\t\t\tcheckForNewIdStyle(newRule, bySpriteIdGroups);\n\t\t\telse\n\t\t\t\tcheckForNewStyle(newRule, bySpriteIdGroups);\n\t\t\tbreak;\n\t\tcase ANY:\n\t\tdefault:\n\t\t\tthrow new RuntimeException(\"What ?\");\n\t\t}\n\t}\n\n\t/**\n\t * Check for a new specific style (applies only to one element).\n\t * \n\t * @param newRule\n\t *            The new style rule.\n\t * @param elt2grp\n\t *            The name space.\n\t */\n\tprotected void checkForNewIdStyle(Rule newRule,\n\t\t\tMap<String, String> elt2grp) {\n\t\t// There is only one element that matches the identifier.\n\n\t\tElement element = getElement(newRule.selector.getId(), elt2grp);\n\n\t\tif (element != null) {\n\t\t\tcheckElementStyleGroup(element);\n\t\t\t// removeElement( element ); // Remove the element from its old\n\t\t\t// group. Potentially delete a group.\n\t\t\t// addElement( element ); // Add the element to its new own group\n\t\t\t// (since this is an ID style).\n\t\t}\n\t}\n\n\t/**\n\t * Check for a new kind or class style in a given name space (node, edge,\n\t * sprite, graph).\n\t * \n\t * @param newRule\n\t *            The new style rule.\n\t * @param elt2grp\n\t *            The name space.\n\t */\n\tprotected void checkForNewStyle(Rule newRule,\n\t\t\tMap<String, String> elt2grp) {\n\t\tCollection<Element> elementsToCheck = new ArrayList<Element>();\n\n\t\tfor (String eltId : elt2grp.keySet())\n\t\t\telementsToCheck.add(getElement(eltId, elt2grp));\n\n\t\tfor (Element element : elementsToCheck) {\n\t\t\tcheckElementStyleGroup(element);\n\t\t\t// removeElement( element );\n\t\t\t// addElement( element );\n\t\t}\n\t}\n\n\t// Utility\n\n\t@Override\n\tpublic String toString() {\n\t\tStringBuilder builder = new StringBuilder();\n\n\t\tbuilder.append(String.format(\"Style groups (%d) :%n\", groups.size()));\n\n\t\tfor (StyleGroup group : groups.values()) {\n\t\t\tbuilder.append(group.toString(1));\n\t\t\tbuilder.append(String.format(\"%n\"));\n\t\t}\n\n\t\treturn builder.toString();\n\t}\n\n\t// Inner classes\n\n\t/**\n\t * Set of events (meta-classes) actually active.\n\t * \n\t * <p>\n\t * The event set contains the set of events actually occurring. This is used\n\t * to select alternate styles. The events actually occurring are in\n\t * precedence order. The last one is the most important.\n\t * </p>\n\t * \n\t * @author Antoine Dutot\n\t */\n\tpublic class EventSet {\n\t\tpublic ArrayList<String> eventSet = new ArrayList<String>();\n\n\t\tpublic String events[] = new String[0];\n\n\t\t/**\n\t\t * Add an event to the set.\n\t\t * \n\t\t * @param event\n\t\t *            The event to add.\n\t\t */\n\t\tpublic void pushEvent(String event) {\n\t\t\teventSet.add(event);\n\t\t\tevents = eventSet.toArray(events);\n\t\t}\n\n\t\t/**\n\t\t * Remove an event from the set.\n\t\t * \n\t\t * @param event\n\t\t *            The event to remove.\n\t\t */\n\t\tpublic void popEvent(String event) {\n\t\t\tint index = eventSet.lastIndexOf(event);\n\n\t\t\tif (index >= 0)\n\t\t\t\teventSet.remove(index);\n\n\t\t\tevents = eventSet.toArray(events);\n\t\t}\n\n\t\t/**\n\t\t * The set of events in order, the most important at the end.\n\t\t * \n\t\t * @return The event set.\n\t\t */\n\t\tpublic String[] getEvents() {\n\t\t\treturn events;\n\t\t}\n\t}\n\n\t/**\n\t * All the style groups sorted by their Z index.\n\t * \n\t * <p>\n\t * This structure is maintained by each time a group is added or removed, or\n\t * when the style of a group changed.\n\t * </p>\n\t * \n\t * @author Antoine Dutot\n\t */\n\tpublic class ZIndex implements Iterable<HashSet<StyleGroup>> {\n\t\t/**\n\t\t * Ordered set of groups.\n\t\t */\n\t\tpublic ArrayList<HashSet<StyleGroup>> zIndex = new ArrayList<HashSet<StyleGroup>>();\n\n\t\t/**\n\t\t * Knowing a group, tell if its Z index.\n\t\t */\n\t\tpublic HashMap<String, Integer> reverseZIndex = new HashMap<String, Integer>();\n\n\t\t/**\n\t\t * New empty Z index.\n\t\t */\n\t\tpublic ZIndex() {\n\t\t\tinitZIndex();\n\t\t}\n\n\t\tprotected void initZIndex() {\n\t\t\tzIndex.ensureCapacity(256);\n\n\t\t\tfor (int i = 0; i < 256; i++)\n\t\t\t\tzIndex.add(null);\n\t\t}\n\n\t\t/**\n\t\t * Iterator on the set of Z index cells. Each item is a set of style\n\t\t * groups that pertain to the same Z index.\n\t\t * \n\t\t * @return Iterator on the Z index.\n\t\t */\n\t\tprotected Iterator<HashSet<StyleGroup>> getIterator() {\n\t\t\treturn new ZIndexIterator();\n\t\t}\n\n\t\tpublic Iterator<HashSet<StyleGroup>> iterator() {\n\t\t\treturn getIterator();\n\t\t}\n\n\t\t/**\n\t\t * A new group appeared, put it in the z index.\n\t\t * \n\t\t * @param group\n\t\t *            The group to add.\n\t\t */\n\t\tprotected void groupAdded(StyleGroup group) {\n\t\t\tint z = convertZ(group.getZIndex());\n\n\t\t\tif (zIndex.get(z) == null)\n\t\t\t\tzIndex.set(z, new HashSet<StyleGroup>());\n\n\t\t\tzIndex.get(z).add(group);\n\t\t\treverseZIndex.put(group.getId(), z);\n\t\t}\n\n\t\t/**\n\t\t * A group eventually changed, check its location.\n\t\t * \n\t\t * @param group\n\t\t *            The group to check.\n\t\t */\n\t\tprotected void groupChanged(StyleGroup group) {\n\t\t\tint oldZ = reverseZIndex.get(group.getId());\n\t\t\tint newZ = convertZ(group.getZIndex());\n\n\t\t\tif (oldZ != newZ) {\n\t\t\t\tHashSet<StyleGroup> map = zIndex.get(oldZ);\n\n\t\t\t\tif (map != null) {\n\t\t\t\t\tmap.remove(group);\n\t\t\t\t\treverseZIndex.remove(group.getId());\n\n\t\t\t\t\tif (map.isEmpty())\n\t\t\t\t\t\tzIndex.set(oldZ, null);\n\t\t\t\t}\n\n\t\t\t\tgroupAdded(group);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * A group was removed, remove it from the Z index.\n\t\t * \n\t\t * @param group\n\t\t *            The group to remove.\n\t\t */\n\t\tprotected void groupRemoved(StyleGroup group) {\n\t\t\tint z = convertZ(group.getZIndex());\n\n\t\t\tHashSet<StyleGroup> map = zIndex.get(z);\n\n\t\t\tif (map != null) {\n\t\t\t\tmap.remove(group);\n\t\t\t\treverseZIndex.remove(group.getId());\n\n\t\t\t\tif (map.isEmpty())\n\t\t\t\t\tzIndex.set(z, null);\n\t\t\t} else {\n\t\t\t\tthrow new RuntimeException(\"Inconsistency in Z-index\");\n\t\t\t}\n\t\t}\n\n\t\tpublic void clear() {\n\t\t\tzIndex.clear();\n\t\t\treverseZIndex.clear();\n\t\t\tinitZIndex();\n\t\t}\n\n\t\t/**\n\t\t * Convert a [-127,127] value into a [0,255] value and check bounds.\n\t\t * \n\t\t * @param z\n\t\t *            The Z value to convert.\n\t\t * @return The Z value converted and bounded to [0,255].\n\t\t */\n\t\tprotected int convertZ(int z) {\n\t\t\tz += 127;\n\n\t\t\tif (z < 0)\n\t\t\t\tz = 0;\n\t\t\telse if (z > 255)\n\t\t\t\tz = 255;\n\n\t\t\treturn z;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\tStringBuilder sb = new StringBuilder();\n\n\t\t\tsb.append(String.format(\"Z index :%n\"));\n\n\t\t\tfor (int i = 0; i < 256; i++) {\n\t\t\t\tif (zIndex.get(i) != null) {\n\t\t\t\t\tsb.append(String.format(\"    * %d -> \", i - 127));\n\n\t\t\t\t\tHashSet<StyleGroup> map = zIndex.get(i);\n\n\t\t\t\t\tfor (StyleGroup g : map)\n\t\t\t\t\t\tsb.append(String.format(\"%s \", g.getId()));\n\n\t\t\t\t\tsb.append(String.format(\"%n\"));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn sb.toString();\n\t\t}\n\n\t\tpublic class ZIndexIterator implements Iterator<HashSet<StyleGroup>> {\n\t\t\tpublic int index = 0;\n\n\t\t\tpublic ZIndexIterator() {\n\t\t\t\tzapUntilACell();\n\t\t\t}\n\n\t\t\tprotected void zapUntilACell() {\n\t\t\t\twhile (index < 256 && zIndex.get(index) == null)\n\t\t\t\t\tindex++;\n\t\t\t}\n\n\t\t\tpublic boolean hasNext() {\n\t\t\t\treturn (index < 256);\n\t\t\t}\n\n\t\t\tpublic HashSet<StyleGroup> next() {\n\t\t\t\tif (hasNext()) {\n\t\t\t\t\tHashSet<StyleGroup> cell = zIndex.get(index);\n\t\t\t\t\tindex++;\n\t\t\t\t\tzapUntilACell();\n\t\t\t\t\treturn cell;\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tpublic void remove() {\n\t\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\t\"This iterator does not support removal.\");\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Set of groups that cast a shadow.\n\t * \n\t * @author Antoine Dutot\n\t */\n\tpublic class ShadowSet implements Iterable<StyleGroup> {\n\t\t/**\n\t\t * The set of groups casting shadow.\n\t\t */\n\t\tprotected HashSet<StyleGroup> shadowSet = new HashSet<StyleGroup>();\n\n\t\t/**\n\t\t * Iterator on the set of groups that cast a shadow.\n\t\t * \n\t\t * @return An iterator on the shadow style group set.\n\t\t */\n\t\tprotected Iterator<StyleGroup> getIterator() {\n\t\t\treturn shadowSet.iterator();\n\t\t}\n\n\t\tpublic Iterator<StyleGroup> iterator() {\n\t\t\treturn getIterator();\n\t\t}\n\n\t\t/**\n\t\t * A group appeared, check its shadow status.\n\t\t * \n\t\t * @param group\n\t\t *            The group added.\n\t\t */\n\t\tprotected void groupAdded(StyleGroup group) {\n\t\t\tif (group.getShadowMode() != ShadowMode.NONE)\n\t\t\t\tshadowSet.add(group);\n\t\t}\n\n\t\t/**\n\t\t * A group eventually changed, check its shadow status.\n\t\t * \n\t\t * @param group\n\t\t *            The group that changed.\n\t\t */\n\t\tprotected void groupChanged(StyleGroup group) {\n\t\t\tif (group.getShadowMode() == ShadowMode.NONE)\n\t\t\t\tshadowSet.remove(group);\n\t\t\telse\n\t\t\t\tshadowSet.add(group);\n\t\t}\n\n\t\t/**\n\t\t * A group was removed, remove it from the shadow if needed.\n\t\t * \n\t\t * @param group\n\t\t *            The group removed.\n\t\t */\n\t\tprotected void groupRemoved(StyleGroup group) {\n\t\t\t// Faster than to first test its existence or shadow status :\n\n\t\t\tshadowSet.remove(group);\n\t\t}\n\n\t\tprotected void clear() {\n\t\t\tshadowSet.clear();\n\t\t}\n\t}\n\n\t/**\n\t * Iterator that allows to browse all graph elements of a given kind (nodes,\n\t * edges, sprites, graphs) as if they where in a single set, whereas they\n\t * are in style groups.\n\t * \n\t * @author Antoine Dutot\n\t * @param <E>\n\t *            The kind of graph element.\n\t */\n\tprotected class ElementIterator<E extends Element> implements Iterator<E> {\n\t\tprotected Map<String, String> elt2grp;\n\n\t\tprotected Iterator<String> elts;\n\n\t\tpublic ElementIterator(final Map<String, String> elements2groups) {\n\t\t\telt2grp = elements2groups;\n\t\t\telts = elements2groups.keySet().iterator();\n\t\t}\n\n\t\tpublic boolean hasNext() {\n\t\t\treturn elts.hasNext();\n\t\t}\n\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tpublic E next() {\n\t\t\tString eid = elts.next();\n\t\t\tString gid = elt2grp.get(eid);\n\t\t\tStyleGroup grp = groups.get(gid);\n\n\t\t\treturn (E) grp.getElement(eid);\n\t\t}\n\n\t\tpublic void remove() {\n\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\"remove not implemented in this iterator\");\n\t\t}\n\t}\n\n\t/**\n\t * Dummy set of nodes.\n\t */\n\tprotected class NodeSet implements Iterable<Node> {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tpublic Iterator<Node> iterator() {\n\t\t\treturn (Iterator<Node>) getNodeIterator();\n\t\t}\n\t}\n\n\t/**\n\t * Dummy set of edges.\n\t */\n\tprotected class EdgeSet implements Iterable<Edge> {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tpublic Iterator<Edge> iterator() {\n\t\t\treturn (Iterator<Edge>) getEdgeIterator();\n\t\t}\n\t}\n\n\t/**\n\t * Dummy set of sprites.\n\t */\n\tprotected class SpriteSet implements Iterable<GraphicSprite> {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tpublic Iterator<GraphicSprite> iterator() {\n\t\t\treturn (Iterator<GraphicSprite>) getSpriteIterator();\n\t\t}\n\t}\n\n\tprotected class GraphSet implements Iterable<GraphicGraph> {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tpublic Iterator<GraphicGraph> iterator() {\n\t\t\treturn (Iterator<GraphicGraph>) getGraphIterator();\n\t\t}\n\t}\n\n}",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "DefaultCamera", "org.graphstream.ui.swingViewer.util" ], [ "GradientFactory", "org.graphstream.ui.swingViewer.util" ], [ "GraphMetrics", "org.graphstream.ui.swingViewer.util" ], [ "Graphics2DOutput", "org.graphstream.ui.swingViewer.util" ], [ "ImageCache", "org.graphstream.ui.swingViewer.util" ], [ "StrokeFactory", "org.graphstream.ui.swingViewer.util" ], [ "FontCache", "org.graphstream.ui.swingViewer.util" ], [ "FontSlot", "org.graphstream.ui.swingViewer.util" ], [ "DefaultView", "org.graphstream.ui.swingViewer" ], [ "SpriteRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "ElementRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "NodeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "Arrow", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "Shape", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "EdgeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "SwingBasicGraphRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "GraphRendererBase", "org.graphstream.ui.swingViewer" ], [ "GraphRenderer", "org.graphstream.ui.swingViewer" ], [ "LayerRenderer", "org.graphstream.ui.swingViewer" ], [ "ViewPanel", "org.graphstream.ui.swingViewer" ], [ "Layouts", "org.graphstream.ui.layout" ], [ "Layout", "org.graphstream.ui.layout" ], [ "LayoutRunner", "org.graphstream.ui.layout" ], [ "NodeParticle", "org.graphstream.ui.layout.springbox" ], [ "GraphCellData", "org.graphstream.ui.layout.springbox" ], [ "EdgeSpring", "org.graphstream.ui.layout.springbox" ], [ "Energies", "org.graphstream.ui.layout.springbox" ], [ "BarnesHutLayout", "org.graphstream.ui.layout.springbox" ], [ "LinLog", "org.graphstream.ui.layout.springbox.implementations" ], [ "LinLogNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBoxNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBox", "org.graphstream.ui.layout.springbox.implementations" ], [ "Point2", "org.graphstream.ui.geom" ], [ "Vector2", "org.graphstream.ui.geom" ], [ "Vector3", "org.graphstream.ui.geom" ], [ "Point3", "org.graphstream.ui.geom" ], [ "ViewerListener", "org.graphstream.ui.view" ], [ "MouseManager", "org.graphstream.ui.view.util" ], [ "ShortcutManager", "org.graphstream.ui.view.util" ], [ "DefaultShortcutManager", "org.graphstream.ui.view.util" ], [ "FpsCounter", "org.graphstream.ui.view.util" ], [ "CubicCurve", "org.graphstream.ui.view.util" ], [ "DefaultMouseManager", "org.graphstream.ui.view.util" ], [ "Selection", "org.graphstream.ui.view" ], [ "ViewerPipe", "org.graphstream.ui.view" ], [ "Viewer", "org.graphstream.ui.view" ], [ "View", "org.graphstream.ui.view" ], [ "Camera", "org.graphstream.ui.view" ], [ "Sprite", "org.graphstream.ui.spriteManager" ], [ "InvalidSpriteIDException", "org.graphstream.ui.spriteManager" ], [ "SpriteManager", "org.graphstream.ui.spriteManager" ], [ "SpriteFactory", "org.graphstream.ui.spriteManager" ], [ "StyleGroupListener", "org.graphstream.ui.graphicGraph" ], [ "Colors", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Values", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetListener", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetParserTokenManager", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParserConstants", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParser", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "Style", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheet", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleConstants", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Selector", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Value", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Rule", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "GraphicNode", "org.graphstream.ui.graphicGraph" ], [ "StyleGroup", "org.graphstream.ui.graphicGraph" ], [ "GraphPosLengthUtils", "org.graphstream.ui.graphicGraph" ], [ "GraphicEdge", "org.graphstream.ui.graphicGraph" ], [ "GraphicElementChangeListener", "org.graphstream.ui.graphicGraph" ], [ "GraphicGraph", "org.graphstream.ui.graphicGraph" ], [ "StyleGroupSet", "org.graphstream.ui.graphicGraph" ], [ "GraphicSprite", "org.graphstream.ui.graphicGraph" ], [ "GraphicElement", "org.graphstream.ui.graphicGraph" ], [ "VerboseSink", "org.graphstream.util" ], [ "GraphListeners", "org.graphstream.util" ], [ "Environment", "org.graphstream.util" ], [ "GraphDiff", "org.graphstream.util" ], [ "Filters", "org.graphstream.util" ], [ "FilteredEdgeIterator", "org.graphstream.util" ], [ "Parser", "org.graphstream.util.parser" ], [ "ParserFactory", "org.graphstream.util.parser" ], [ "TokenMgrError", "org.graphstream.util.parser" ], [ "ParseException", "org.graphstream.util.parser" ], [ "SimpleCharStream", "org.graphstream.util.parser" ], [ "Token", "org.graphstream.util.parser" ], [ "ISODateIO", "org.graphstream.util.time" ], [ "ISODateComponent", "org.graphstream.util.time" ], [ "FilteredNodeIterator", "org.graphstream.util" ], [ "FixedArrayList", "org.graphstream.util.set" ], [ "StepCounter", "org.graphstream.util" ], [ "GraphSpells", "org.graphstream.util.cumulative" ], [ "CumulativeAttributes", "org.graphstream.util.cumulative" ], [ "CumulativeSpells", "org.graphstream.util.cumulative" ], [ "Filter", "org.graphstream.util" ], [ "PipeAdapter", "org.graphstream.stream" ], [ "GraphParseException", "org.graphstream.stream" ], [ "ElementSink", "org.graphstream.stream" ], [ "URLSource", "org.graphstream.stream.net" ], [ "HTTPSource", "org.graphstream.stream.net" ], [ "SourceAdapter", "org.graphstream.stream" ], [ "AttributeSink", "org.graphstream.stream" ], [ "GMLParserConstants", "org.graphstream.stream.file.gml" ], [ "GMLParserTokenManager", "org.graphstream.stream.file.gml" ], [ "GMLContext", "org.graphstream.stream.file.gml" ], [ "Graphics", "org.graphstream.stream.file.gml" ], [ "KeyValues", "org.graphstream.stream.file.gml" ], [ "GMLParser", "org.graphstream.stream.file.gml" ], [ "FileSinkGraphML", "org.graphstream.stream.file" ], [ "TLPParserConstants", "org.graphstream.stream.file.tlp" ], [ "TLPParser", "org.graphstream.stream.file.tlp" ], [ "TLPParserTokenManager", "org.graphstream.stream.file.tlp" ], [ "FileSinkFactory", "org.graphstream.stream.file" ], [ "FileSourceEdge", "org.graphstream.stream.file" ], [ "FileSinkBase", "org.graphstream.stream.file" ], [ "FileSinkTikZ", "org.graphstream.stream.file" ], [ "FileSourceGEXF", "org.graphstream.stream.file" ], [ "DOTParser", "org.graphstream.stream.file.dot" ], [ "DOTParserConstants", "org.graphstream.stream.file.dot" ], [ "DOTParserTokenManager", "org.graphstream.stream.file.dot" ], [ "FileSink", "org.graphstream.stream.file" ], [ "PajekContext", "org.graphstream.stream.file.pajek" ], [ "Graphics", "org.graphstream.stream.file.pajek" ], [ "NodeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeMatrix", "org.graphstream.stream.file.pajek" ], [ "PajekParserTokenManager", "org.graphstream.stream.file.pajek" ], [ "PajekParserConstants", "org.graphstream.stream.file.pajek" ], [ "FileSourceXML", "org.graphstream.stream.file" ], [ "FileSinkBaseFiltered", "org.graphstream.stream.file" ], [ "FileSinkDOT", "org.graphstream.stream.file" ], [ "FileSourceParser", "org.graphstream.stream.file" ], [ "FileSinkDGSFiltered", "org.graphstream.stream.file" ], [ "FileSourceDOT", "org.graphstream.stream.file" ], [ "FileSourceDGS1And2", "org.graphstream.stream.file" ], [ "FileSourceGraphML", "org.graphstream.stream.file" ], [ "FileSourceFactory", "org.graphstream.stream.file" ], [ "FileSinkImages", "org.graphstream.stream.file" ], [ "FileSinkDynamicGML", "org.graphstream.stream.file" ], [ "FileSinkSVG", "org.graphstream.stream.file" ], [ "GEXFSpell", "org.graphstream.stream.file.gexf" ], [ "SmartXMLWriter", "org.graphstream.stream.file.gexf" ], [ "GEXFElement", "org.graphstream.stream.file.gexf" ], [ "GEXFEdges", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValues", "org.graphstream.stream.file.gexf" ], [ "GEXFEdge", "org.graphstream.stream.file.gexf" ], [ "GEXFSpells", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValue", "org.graphstream.stream.file.gexf" ], [ "GEXFNodes", "org.graphstream.stream.file.gexf" ], [ "GEXFNode", "org.graphstream.stream.file.gexf" ], [ "GEXFMeta", "org.graphstream.stream.file.gexf" ], [ "GEXFAttributes", "org.graphstream.stream.file.gexf" ], [ "GEXF", "org.graphstream.stream.file.gexf" ], [ "GEXFGraph", "org.graphstream.stream.file.gexf" ], [ "GEXFAttribute", "org.graphstream.stream.file.gexf" ], [ "OldFileSourceDGS", "org.graphstream.stream.file.dgs" ], [ "DGSParser", "org.graphstream.stream.file.dgs" ], [ "FileSourceBase", "org.graphstream.stream.file" ], [ "FileSinkGML", "org.graphstream.stream.file" ], [ "FileSourceDGS", "org.graphstream.stream.file" ], [ "FileSinkDGSUtility", "org.graphstream.stream.file" ], [ "FileSourceTLP", "org.graphstream.stream.file" ], [ "FileSinkSVG2", "org.graphstream.stream.file" ], [ "FileSource", "org.graphstream.stream.file" ], [ "FileSourceNCol", "org.graphstream.stream.file" ], [ "FileSourcePajek", "org.graphstream.stream.file" ], [ "FileSourceGPX", "org.graphstream.stream.file" ], [ "FileSourceLGL", "org.graphstream.stream.file" ], [ "FileSinkGEXF2", "org.graphstream.stream.file" ], [ "FileSourceGML", "org.graphstream.stream.file" ], [ "FileSinkGEXF", "org.graphstream.stream.file" ], [ "FileSinkDGS", "org.graphstream.stream.file" ], [ "ProxyPipe", "org.graphstream.stream" ], [ "Sink", "org.graphstream.stream" ], [ "Timeline", "org.graphstream.stream" ], [ "Pipe", "org.graphstream.stream" ], [ "SinkAdapter", "org.graphstream.stream" ], [ "Replayable", "org.graphstream.stream" ], [ "Source", "org.graphstream.stream" ], [ "AnnotatedSink", "org.graphstream.stream" ], [ "GraphReplay", "org.graphstream.stream" ], [ "AttributePipe", "org.graphstream.stream" ], [ "SinkTime", "org.graphstream.stream.sync" ], [ "SourceTime", "org.graphstream.stream.sync" ], [ "PipeBase", "org.graphstream.stream" ], [ "ThreadProxyPipe", "org.graphstream.stream.thread" ], [ "ThreadProxyPipeOld", "org.graphstream.stream.thread" ], [ "RMISource", "org.graphstream.stream.rmi" ], [ "RMIAdapterOut", "org.graphstream.stream.rmi" ], [ "RMISink", "org.graphstream.stream.rmi" ], [ "RMIAdapterIn", "org.graphstream.stream.rmi" ], [ "SourceBase", "org.graphstream.stream" ], [ "NetStreamDecoder", "org.graphstream.stream.netstream" ], [ "NetStreamReceiver", "org.graphstream.stream.netstream" ], [ "NetStreamConstants", "org.graphstream.stream.netstream" ], [ "NetStreamSender", "org.graphstream.stream.netstream" ], [ "DefaultNetStreamDecoder", "org.graphstream.stream.netstream" ], [ "Base64", "org.graphstream.stream.netstream.packing" ], [ "NetStreamUnpacker", "org.graphstream.stream.netstream.packing" ], [ "Base64Packer", "org.graphstream.stream.netstream.packing" ], [ "Base64Unpacker", "org.graphstream.stream.netstream.packing" ], [ "NetStreamPacker", "org.graphstream.stream.netstream.packing" ], [ "AttributePredicate", "org.graphstream.stream" ], [ "Element", "org.graphstream.graph" ], [ "Node", "org.graphstream.graph" ], [ "BreadthFirstIterator", "org.graphstream.graph" ], [ "Graph", "org.graphstream.graph" ], [ "EdgeRejectedException", "org.graphstream.graph" ], [ "CompoundAttribute", "org.graphstream.graph" ], [ "Structure", "org.graphstream.graph" ], [ "DepthFirstIterator", "org.graphstream.graph" ], [ "NullAttributeException", "org.graphstream.graph" ], [ "IdAlreadyInUseException", "org.graphstream.graph" ], [ "EdgeFactory", "org.graphstream.graph" ], [ "ElementNotFoundException", "org.graphstream.graph" ], [ "OneAttributeElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListNode", "org.graphstream.graph.implementations" ], [ "SingleNode", "org.graphstream.graph.implementations" ], [ "AbstractElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListGraph", "org.graphstream.graph.implementations" ], [ "AbstractNode", "org.graphstream.graph.implementations" ], [ "DefaultGraph", "org.graphstream.graph.implementations" ], [ "MultiGraph", "org.graphstream.graph.implementations" ], [ "Graphs", "org.graphstream.graph.implementations" ], [ "SingleGraph", "org.graphstream.graph.implementations" ], [ "MultiNode", "org.graphstream.graph.implementations" ], [ "AbstractGraph", "org.graphstream.graph.implementations" ], [ "AbstractEdge", "org.graphstream.graph.implementations" ], [ "GraphFactory", "org.graphstream.graph" ], [ "NodeFactory", "org.graphstream.graph" ], [ "Edge", "org.graphstream.graph" ], [ "Path", "org.graphstream.graph" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "gradientInArea", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)" ], [ "linearGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)" ], [ "createFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static float[] createFractions(Style style)" ], [ "createColors", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static Color[] createColors(Style style)" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "public static ImageCache defaultImageCache()" ], [ "generateStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "public static Stroke generateStroke(Style style, GraphMetrics metrics)" ], [ "generatePlainStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)" ], [ "generateDotsStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)" ], [ "generateDashesStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache()" ], [ "newLayoutAlgorithm", "org.graphstream.ui.layout", "Layouts", "public static Layout newLayoutAlgorithm()" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static double eval(double x0, double x1, double x2, double x3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static double derivative(double x0, double x1, double x2, double x3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "newGraphRenderer", "org.graphstream.ui.view", "Viewer", "public static GraphRenderer newGraphRenderer()" ], [ "getPositionValue", "org.graphstream.ui.spriteManager", "SpriteManager", "protected static Values getPositionValue(Object value)" ], [ "convertColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Color convertColor(Object anyValue)" ], [ "convertLabel", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static String convertLabel(Object value)" ], [ "convertWidth", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static float convertWidth(Object value)" ], [ "convertValue", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Value convertValue(Object value)" ], [ "convertUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Units convertUnit(String unit)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Graph graph, String id)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Graph graph, String id)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Node node)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Node node)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Graph graph, String id)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Edge edge)" ], [ "getGlobalEnvironment", "org.graphstream.util", "Environment", "public static Environment getGlobalEnvironment()" ], [ "falseFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> falseFilter()" ], [ "trueFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> trueFilter()" ], [ "byAttributeFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)" ], [ "separateNodeAndEdgeFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)" ], [ "byExtremitiesFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)" ], [ "byIdFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byIdFilter(String idPattern)" ], [ "isContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)" ], [ "isIdContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)" ], [ "and", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)" ], [ "or", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)" ], [ "xor", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)" ], [ "not", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> not(Filter<T> f)" ], [ "addEscapes", "org.graphstream.util.parser", "TokenMgrError", "protected static final String addEscapes(String str)" ], [ "LexicalError", "org.graphstream.util.parser", "TokenMgrError", "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)" ], [ "add_escapes", "org.graphstream.util.parser", "ParseException", "static String add_escapes(String str)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind, String image)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind)" ], [ "countStepInFile", "org.graphstream.util", "StepCounter", "public static int countStepInFile(String path) throws IOException" ], [ "GET", "org.graphstream.stream.net", "HTTPSource", "protected static HashMap<String, Object> GET(HttpExchange ex)" ], [ "sinkFor", "org.graphstream.stream.file", "FileSinkFactory", "public static FileSink sinkFor(String filename)" ], [ "formatId", "org.graphstream.stream.file", "FileSinkTikZ", "protected static String formatId(String id)" ], [ "getInt", "org.graphstream.stream.file.pajek", "PajekContext", "protected static int getInt(Token nb) throws ParseException" ], [ "getReal", "org.graphstream.stream.file.pajek", "PajekContext", "protected static double getReal(Token nb) throws ParseException" ], [ "toColorValue", "org.graphstream.stream.file.pajek", "PajekContext", "public static String toColorValue(Token R, Token G, Token B) throws ParseException" ], [ "sourceFor", "org.graphstream.stream.file", "FileSourceFactory", "public static FileSource sourceFor(String fileName) throws IOException" ], [ "getXMLRootElement", "org.graphstream.stream.file", "FileSourceFactory", "public static String getXMLRootElement(String fileName) throws IOException" ], [ "formatStringForQuoting", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String formatStringForQuoting(String str)" ], [ "attributeString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String attributeString(String key, Object value, boolean remove)" ], [ "arrayString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String arrayString(Object value)" ], [ "valueString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String valueString(Object value)" ], [ "hashToString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String hashToString(HashMap<?, ?> hash)" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source)" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s, int options) throws java.io.IOException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decodeFromFile(String filename) throws java.io.IOException" ], [ "encodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeFromFile(String filename) throws java.io.IOException" ], [ "unmutableGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph unmutableGraph(Graph g)" ], [ "synchronizedGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph synchronizedGraph(Graph g)" ], [ "merge", "org.graphstream.graph.implementations", "Graphs", "public static Graph merge(Graph... graphs)" ], [ "clone", "org.graphstream.graph.implementations", "Graphs", "public static Graph clone(Graph g)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "version16", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static boolean version16 = false;" ], [ "predefFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[][] predefFractions = new float[11][];" ], [ "predefFractions2", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions2 = { 0f, 1f };" ], [ "predefFractions3", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions3 = { 0f, 0.5f, 1f };" ], [ "predefFractions4", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };" ], [ "predefFractions5", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };" ], [ "predefFractions6", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };" ], [ "predefFractions7", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };" ], [ "predefFractions8", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };" ], [ "predefFractions9", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };" ], [ "predefFractions10", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "protected static ImageCache defaultImageCache;" ], [ "dots", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dots = { 1f, 1f };" ], [ "dashes", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dashes = { 3f, 3f };" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache;" ], [ "NULL_POINT2", "org.graphstream.ui.geom", "Point2", "public static final Point2 NULL_POINT2 = new Point2(0, 0);" ], [ "NULL_POINT3", "org.graphstream.ui.geom", "Point3", "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);" ], [ "DEFAULT_VIEW_ID", "org.graphstream.ui.view", "Viewer", "public static String DEFAULT_VIEW_ID = \"defaultView\";" ], [ "jjbitVec0", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };" ], [ "jjstrLiteralImages", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };" ], [ "lexStateNames", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };" ], [ "jjtoSkip", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };" ], [ "colorMap", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static HashMap<String,Color> colorMap;" ], [ "sharpColor1", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor1;" ], [ "sharpColor2", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor2;" ], [ "cssColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColor;" ], [ "cssColorA", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColorA;" ], [ "awtColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern awtColor;" ], [ "hexaColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern hexaColor;" ], [ "numberUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern numberUnit;" ], [ "number", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern number;" ], [ "acceptedAttribute", "org.graphstream.ui.graphicGraph", "GraphicElement", "protected static Pattern acceptedAttribute;" ], [ "DEFAULT_AN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_CNA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_AE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";" ], [ "DEFAULT_CEA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CEC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CER_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";" ], [ "DEFAULT_CGA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_CL_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";" ], [ "DEFAULT_ST_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";" ], [ "GLOBAL_ENV", "org.graphstream.util", "Environment", "public static Environment GLOBAL_ENV;" ], [ "LEXICAL_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int LEXICAL_ERROR = 0;" ], [ "STATIC_LEXER_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int STATIC_LEXER_ERROR = 1;" ], [ "INVALID_LEXICAL_STATE", "org.graphstream.util.parser", "TokenMgrError", "public static final int INVALID_LEXICAL_STATE = 2;" ], [ "LOOP_DETECTED", "org.graphstream.util.parser", "TokenMgrError", "public static final int LOOP_DETECTED = 3;" ], [ "staticFlag", "org.graphstream.util.parser", "SimpleCharStream", "public static final boolean staticFlag = false;" ], [ "ABBREVIATED_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");" ], [ "FULL_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");" ], [ "ABBREVIATED_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");" ], [ "FULL_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");" ], [ "LOCALE_DATE_AND_TIME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);" ], [ "CENTURY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");" ], [ "DAY_OF_MONTH_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");" ], [ "DATE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");" ], [ "DAY_OF_MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");" ], [ "DATE_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");" ], [ "WEEK_BASED_YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "WEEK_BASED_YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "ABBREVIATED_MONTH_NAME_ALIAS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");" ], [ "HOUR_OF_DAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");" ], [ "HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");" ], [ "DAY_OF_YEAR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");" ], [ "MILLISECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");" ], [ "EPOCH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent EPOCH = new EpochComponent();" ], [ "MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");" ], [ "MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");" ], [ "NEW_LINE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");" ], [ "AM_PM", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent AM_PM = new AMPMComponent();" ], [ "LOCALE_CLOCK_TIME_12_HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");" ], [ "HOUR_AND_MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");" ], [ "SECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");" ], [ "TABULATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");" ], [ "TIME_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");" ], [ "DAY_OF_WEEK_1_7", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");" ], [ "WEEK_OF_YEAR_FROM_SUNDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");" ], [ "WEEK_NUMBER_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");" ], [ "DAY_OF_WEEK_0_6", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");" ], [ "WEEK_OF_YEAR_FROM_MONDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");" ], [ "LOCALE_DATE_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");" ], [ "LOCALE_TIME_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");" ], [ "YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "UTC_OFFSET", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();" ], [ "LOCALE_TIME_ZONE_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");" ], [ "PERCENT", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");" ], [ "jjbitVec0", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoToken = { 0xff01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoSkip = { 0x1eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoToken = { 0xffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "XYZ_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String XYZ_ATTR = \"xyz\";" ], [ "WIDTH_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String WIDTH_ATTR = \"ui.tikz.width\";" ], [ "HEIGHT_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String HEIGHT_ATTR = \"ui.tikz.height\";" ], [ "DEFAULT_WIDTH", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_WIDTH = 10;" ], [ "DEFAULT_HEIGHT", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_HEIGHT = 10;" ], [ "DISPLAY_MIN_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;" ], [ "DISPLAY_MAX_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;" ], [ "jjbitVec0", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };" ], [ "lexStateNames", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoToken = { 0x3ffffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoToken = { 0x3fffffffffffc9L };" ], [ "jjtoSkip", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoSkip = { 0x6L };" ], [ "XMLNS", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";" ], [ "XMLNS_XSI", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";" ], [ "XMLNS_SL", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";" ], [ "XMLNS_VIZ", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";" ], [ "VERSION", "org.graphstream.stream.file.gexf", "GEXF", "public static final String VERSION = \"1.2\";" ], [ "BUFFER_SIZE", "org.graphstream.stream.file.dgs", "DGSParser", "protected static final int BUFFER_SIZE = 4096;" ], [ "ARRAY_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_OPEN = '{';" ], [ "ARRAY_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_CLOSE = '}';" ], [ "MAP_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_OPEN = '[';" ], [ "MAP_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_CLOSE = ']';" ], [ "gradientId", "org.graphstream.stream.file", "FileSinkSVG2", "static int gradientId = 0;" ], [ "gradientId", "org.graphstream.stream.file", "SVGStyle", "static int gradientId = 0;" ], [ "TIME_PREFIX", "org.graphstream.stream", "Timeline", "public static final String TIME_PREFIX = \"time\";" ], [ "SYNC_DISABLE_KEY", "org.graphstream.stream.sync", "SinkTime", "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";" ], [ "disableSync", "org.graphstream.stream.sync", "SinkTime", "protected static final boolean disableSync;" ], [ "LIGHT_YELLOW", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String LIGHT_YELLOW = \"\u001B[33;1m\";" ], [ "RESET", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String RESET = \"\u001B[0m\";" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "IncomingBuffer", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "EVENT_GETVERSION", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_GETVERSION = 0x00;" ], [ "EVENT_START", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_START = 0x01;" ], [ "EVENT_END", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_END = 0x02;" ], [ "EVENT_ADD_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE = 0x10;" ], [ "EVENT_DEL_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE = 0x11;" ], [ "EVENT_ADD_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE = 0x12;" ], [ "EVENT_DEL_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE = 0x13;" ], [ "EVENT_STEP", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_STEP = 0x14;" ], [ "EVENT_CLEARED", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CLEARED = 0x15;" ], [ "EVENT_ADD_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_GRAPH_ATTR = 0x16;" ], [ "EVENT_CHG_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_GRAPH_ATTR = 0x17;" ], [ "EVENT_DEL_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_GRAPH_ATTR = 0x18;" ], [ "EVENT_ADD_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE_ATTR = 0x19;" ], [ "EVENT_CHG_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_NODE_ATTR = 0x1a;" ], [ "EVENT_DEL_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE_ATTR = 0x1b;" ], [ "EVENT_ADD_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE_ATTR = 0x1c;" ], [ "EVENT_CHG_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_EDGE_ATTR = 0x1d;" ], [ "EVENT_DEL_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE_ATTR = 0x1e;" ], [ "TYPE_UNKNOWN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_UNKNOWN = 0x00;" ], [ "TYPE_BOOLEAN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN = 0x50;" ], [ "TYPE_BOOLEAN_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN_ARRAY = 0x51;" ], [ "TYPE_BYTE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE = 0x52;" ], [ "TYPE_BYTE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE_ARRAY = 0x53;" ], [ "TYPE_SHORT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT = 0x54;" ], [ "TYPE_SHORT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT_ARRAY = 0x55;" ], [ "TYPE_INT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT = 0x56;" ], [ "TYPE_INT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT_ARRAY = 0x57;" ], [ "TYPE_LONG", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG = 0x58;" ], [ "TYPE_LONG_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG_ARRAY = 0x59;" ], [ "TYPE_FLOAT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT = 0x5a;" ], [ "TYPE_FLOAT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT_ARRAY = 0x5b;" ], [ "TYPE_DOUBLE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE = 0x5c;" ], [ "TYPE_DOUBLE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE_ARRAY = 0x5d;" ], [ "TYPE_STRING", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_STRING = 0x5e;" ], [ "TYPE_RAW", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_RAW = 0x5f;" ], [ "TYPE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static byte TYPE_ARRAY = 0x60;" ], [ "TYPE_NULL", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_NULL = 0x61;" ], [ "COMMAND", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int COMMAND = 0x70;" ], [ "NO_OPTIONS", "org.graphstream.stream.netstream.packing", "Base64", "public final static int NO_OPTIONS = 0;" ], [ "ENCODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ENCODE = 1;" ], [ "DECODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DECODE = 0;" ], [ "GZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int GZIP = 2;" ], [ "DONT_GUNZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DONT_GUNZIP = 4;" ], [ "DO_BREAK_LINES", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DO_BREAK_LINES = 8;" ], [ "URL_SAFE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int URL_SAFE = 16;" ], [ "ORDERED", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ORDERED = 32;" ], [ "INITIAL_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final int INITIAL_EDGE_CAPACITY;" ], [ "GROWTH_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final double GROWTH_FACTOR = 1.1;" ], [ "I_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char I_EDGE = 0;" ], [ "IO_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char IO_EDGE = 1;" ], [ "O_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char O_EDGE = 2;" ], [ "GROW_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final double GROW_FACTOR = 1.1;" ], [ "DEFAULT_NODE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_NODE_CAPACITY = 128;" ], [ "DEFAULT_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_EDGE_CAPACITY = 1024;" ] ],
  "tokensMethodJavadocValues" : [ [ "2", "int" ] ],
  "tokensMethodArguments" : [ [ "id", "java.lang", "String" ], [ "elt2grp", "java.util.Map", "Map<String, String>" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "edges", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<? extends Edge> edges()" ], [ "sprites", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<? extends GraphicSprite> sprites()" ], [ "getGroupCount", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public int getGroupCount()" ], [ "getNodeCount", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public int getNodeCount()" ], [ "addElement_", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected StyleGroup addElement_(Element element)" ], [ "addGroup", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected StyleGroup addGroup(String id, ArrayList<Rule> rules, Element firstElement)" ], [ "getElementGroup", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public String getElementGroup(Element element)" ], [ "getSpriteIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<? extends GraphicSprite> getSpriteIterator()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "getZIndex", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public ZIndex getZIndex()" ], [ "getEdge", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Edge getEdge(String id)" ], [ "shadows", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<StyleGroup> shadows()" ], [ "getGraphIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<? extends Graph> getGraphIterator()" ], [ "getNodeIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<? extends Node> getNodeIterator()" ], [ "getStyleFor", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup getStyleFor(GraphicSprite sprite)" ], [ "getStyleFor", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup getStyleFor(Node node)" ], [ "containsGraph", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public boolean containsGraph(String id)" ], [ "areEmptyGroupRemoved", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public boolean areEmptyGroupRemoved()" ], [ "getSpriteCount", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public int getSpriteCount()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "groups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<? extends StyleGroup> groups()" ], [ "getEdgeCount", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public int getEdgeCount()" ], [ "getStyleForElement", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup getStyleForElement(Element element)" ], [ "getEdgeIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<? extends Edge> getEdgeIterator()" ], [ "getStyleFor", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup getStyleFor(Graph graph)" ], [ "getElement", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected Element getElement(String id, Map<String, String> elt2grp)" ], [ "toString", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public String toString()" ], [ "getShadowSet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public ShadowSet getShadowSet()" ], [ "containsNode", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public boolean containsNode(String id)" ], [ "getZIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<HashSet<StyleGroup>> getZIterator()" ], [ "nodes", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<? extends Node> nodes()" ], [ "getGroup", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup getGroup(String groupId)" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "getSprite", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public GraphicSprite getSprite(String id)" ], [ "graphs", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<? extends Graph> graphs()" ], [ "zIndex", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<HashSet<StyleGroup>> zIndex()" ], [ "getGroupIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<? extends StyleGroup> getGroupIterator()" ], [ "getNode", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Node getNode(String id)" ], [ "addElement", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup addElement(Element element)" ], [ "getGraph", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Graph getGraph(String id)" ], [ "getShadowIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<StyleGroup> getShadowIterator()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "containsEdge", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public boolean containsEdge(String id)" ], [ "containsSprite", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public boolean containsSprite(String id)" ], [ "getStyleFor", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup getStyleFor(Edge edge)" ], [ "charAt", "java.lang", "String", "public char charAt(int arg0)" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase(Locale arg0)" ], [ "replace", "java.lang", "String", "public String replace(char arg0, char arg1)" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)" ], [ "stripLeading", "java.lang", "String", "public String stripLeading()" ], [ "value", "java.lang", "String", "byte[] value()" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes()" ], [ "hashCode", "java.lang", "String", "public int hashCode()" ], [ "stripIndent", "java.lang", "String", "public String stripIndent()" ], [ "equalsIgnoreCase", "java.lang", "String", "public boolean equalsIgnoreCase(String arg0)" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0, int arg1)" ], [ "concat", "java.lang", "String", "public String concat(String arg0)" ], [ "trim", "java.lang", "String", "public String trim()" ], [ "equals", "java.lang", "String", "public boolean equals(Object arg0)" ], [ "matches", "java.lang", "String", "public boolean matches(String arg0)" ], [ "contains", "java.lang", "String", "public boolean contains(CharSequence arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(String arg0) throws UnsupportedEncodingException" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0)" ], [ "substring", "java.lang", "String", "public String substring(int arg0, int arg1)" ], [ "compareTo", "java.lang", "String", "public int compareTo(String arg0)" ], [ "stripTrailing", "java.lang", "String", "public String stripTrailing()" ], [ "translateEscapes", "java.lang", "String", "public String translateEscapes()" ], [ "intern", "java.lang", "String", "public native String intern()" ], [ "replaceFirst", "java.lang", "String", "public String replaceFirst(String arg0, String arg1)" ], [ "lines", "java.lang", "String", "public Stream<String> lines()" ], [ "split", "java.lang", "String", "public String[] split(String arg0, int arg1)" ], [ "isBlank", "java.lang", "String", "public boolean isBlank()" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0)" ], [ "repeat", "java.lang", "String", "public String repeat(int arg0)" ], [ "length", "java.lang", "String", "public int length()" ], [ "codePoints", "java.lang", "String", "public IntStream codePoints()" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0, int arg1)" ], [ "codePointBefore", "java.lang", "String", "public int codePointBefore(int arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0, int arg1)" ], [ "isEmpty", "java.lang", "String", "public boolean isEmpty()" ], [ "indent", "java.lang", "String", "public String indent(int arg0)" ], [ "describeConstable", "java.lang", "String", "public Optional<String> describeConstable()" ], [ "offsetByCodePoints", "java.lang", "String", "public int offsetByCodePoints(int arg0, int arg1)" ], [ "isLatin1", "java.lang", "String", "boolean isLatin1()" ], [ "replace", "java.lang", "String", "public String replace(CharSequence arg0, CharSequence arg1)" ], [ "codePointCount", "java.lang", "String", "public int codePointCount(int arg0, int arg1)" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase()" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(Charset arg0)" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0)" ], [ "chars", "java.lang", "String", "public IntStream chars()" ], [ "codePointAt", "java.lang", "String", "public int codePointAt(int arg0)" ], [ "subSequence", "java.lang", "String", "public CharSequence subSequence(int arg0, int arg1)" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0)" ], [ "coder", "java.lang", "String", "byte coder()" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(CharSequence arg0)" ], [ "strip", "java.lang", "String", "public String strip()" ], [ "resolveConstantDesc", "java.lang", "String", "public String resolveConstantDesc(MethodHandles.Lookup arg0)" ], [ "compareToIgnoreCase", "java.lang", "String", "public int compareToIgnoreCase(String arg0)" ], [ "toCharArray", "java.lang", "String", "public char[] toCharArray()" ], [ "toString", "java.lang", "String", "public String toString()" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(StringBuffer arg0)" ], [ "transform", "java.lang", "String", "public <R> R transform(Function<? super String, ? extends R> arg0)" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0, int arg1)" ], [ "replaceAll", "java.lang", "String", "public String replaceAll(String arg0, String arg1)" ], [ "endsWith", "java.lang", "String", "public boolean endsWith(String arg0)" ], [ "substring", "java.lang", "String", "public String substring(int arg0)" ], [ "split", "java.lang", "String", "public String[] split(String arg0)" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase()" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase(Locale arg0)" ], [ "formatted", "java.lang", "String", "public String formatted(Object[] arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0, int arg1)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "compareTo", "java.lang", "Comparable", "public abstract int compareTo(T arg0)" ], [ "charAt", "java.lang", "CharSequence", "public abstract char charAt(int arg0)" ], [ "codePoints", "java.lang", "CharSequence", "public default IntStream codePoints()" ], [ "toString", "java.lang", "CharSequence", "public abstract String toString()" ], [ "chars", "java.lang", "CharSequence", "public default IntStream chars()" ], [ "length", "java.lang", "CharSequence", "public abstract int length()" ], [ "subSequence", "java.lang", "CharSequence", "public abstract CharSequence subSequence(int arg0, int arg1)" ], [ "isEmpty", "java.lang", "CharSequence", "public default boolean isEmpty()" ], [ "describeConstable", "java.lang.constant", "Constable", "public abstract Optional<? extends ConstantDesc> describeConstable()" ], [ "resolveConstantDesc", "java.lang.constant", "ConstantDesc", "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException" ], [ "computeIfPresent", "java.util", "Map", "public default V computeIfPresent(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "size", "java.util", "Map", "public abstract int size()" ], [ "keySet", "java.util", "Map", "public abstract Set<K> keySet()" ], [ "remove", "java.util", "Map", "public abstract V remove(Object arg0)" ], [ "put", "java.util", "Map", "public abstract V put(K arg0, V arg1)" ], [ "replace", "java.util", "Map", "public default boolean replace(K arg0, V arg1, V arg2)" ], [ "entrySet", "java.util", "Map", "public abstract Set<Map.Entry<K, V>> entrySet()" ], [ "remove", "java.util", "Map", "public default boolean remove(Object arg0, Object arg1)" ], [ "values", "java.util", "Map", "public abstract Collection<V> values()" ], [ "isEmpty", "java.util", "Map", "public abstract boolean isEmpty()" ], [ "containsValue", "java.util", "Map", "public abstract boolean containsValue(Object arg0)" ], [ "getOrDefault", "java.util", "Map", "public default V getOrDefault(Object arg0, V arg1)" ], [ "putIfAbsent", "java.util", "Map", "public default V putIfAbsent(K arg0, V arg1)" ], [ "compute", "java.util", "Map", "public default V compute(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "get", "java.util", "Map", "public abstract V get(Object arg0)" ], [ "merge", "java.util", "Map", "public default V merge(K arg0, V arg1, BiFunction<? super V, ? super V, ? extends V> arg2)" ], [ "replace", "java.util", "Map", "public default V replace(K arg0, V arg1)" ], [ "computeIfAbsent", "java.util", "Map", "public default V computeIfAbsent(K arg0, Function<? super K, ? extends V> arg1)" ], [ "equals", "java.util", "Map", "public abstract boolean equals(Object arg0)" ], [ "containsKey", "java.util", "Map", "public abstract boolean containsKey(Object arg0)" ], [ "hashCode", "java.util", "Map", "public abstract int hashCode()" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "public abstract transient <T> T getFirstAttributeOf(String[] arg0)" ], [ "getLabel", "org.graphstream.graph", "Element", "public abstract CharSequence getLabel(String arg0)" ], [ "getHash", "org.graphstream.graph", "Element", "public abstract HashMap<?, ?> getHash(String arg0)" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)" ], [ "getArray", "org.graphstream.graph", "Element", "public abstract Object[] getArray(String arg0)" ], [ "hasAttribute", "org.graphstream.graph", "Element", "public abstract boolean hasAttribute(String arg0, Class<?> arg1)" ], [ "hasVector", "org.graphstream.graph", "Element", "public abstract boolean hasVector(String arg0)" ], [ "hasLabel", "org.graphstream.graph", "Element", "public abstract boolean hasLabel(String arg0)" ], [ "getEachAttributeKey", "org.graphstream.graph", "Element", "public abstract Iterable<String> getEachAttributeKey()" ], [ "getAttribute", "org.graphstream.graph", "Element", "public abstract <T> T getAttribute(String arg0)" ], [ "hasAttribute", "org.graphstream.graph", "Element", "public abstract boolean hasAttribute(String arg0)" ], [ "hasArray", "org.graphstream.graph", "Element", "public abstract boolean hasArray(String arg0)" ], [ "hasNumber", "org.graphstream.graph", "Element", "public abstract boolean hasNumber(String arg0)" ], [ "getIndex", "org.graphstream.graph", "Element", "public abstract int getIndex()" ], [ "getAttributeKeyIterator", "org.graphstream.graph", "Element", "public abstract Iterator<String> getAttributeKeyIterator()" ], [ "getAttribute", "org.graphstream.graph", "Element", "public abstract <T> T getAttribute(String arg0, Class<T> arg1)" ], [ "hasHash", "org.graphstream.graph", "Element", "public abstract boolean hasHash(String arg0)" ], [ "getVector", "org.graphstream.graph", "Element", "public abstract ArrayList<? extends Number> getVector(String arg0)" ], [ "getNumber", "org.graphstream.graph", "Element", "public abstract double getNumber(String arg0)" ], [ "getAttributeKeySet", "org.graphstream.graph", "Element", "public abstract Collection<String> getAttributeKeySet()" ], [ "getId", "org.graphstream.graph", "Element", "public abstract String getId()" ], [ "getAttributeCount", "org.graphstream.graph", "Element", "public abstract int getAttributeCount()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "stylesheet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected StyleSheet stylesheet;" ], [ "groups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected final Map<String,StyleGroup> groups = new TreeMap<String, StyleGroup>();" ], [ "byNodeIdGroups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected final Map<String,String> byNodeIdGroups = new TreeMap<String, String>();" ], [ "byEdgeIdGroups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected final Map<String,String> byEdgeIdGroups = new TreeMap<String, String>();" ], [ "bySpriteIdGroups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected final Map<String,String> bySpriteIdGroups = new TreeMap<String, String>();" ], [ "byGraphIdGroups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected final Map<String,String> byGraphIdGroups = new TreeMap<String, String>();" ], [ "nodeSet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected NodeSet nodeSet = new NodeSet();" ], [ "edgeSet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected EdgeSet edgeSet = new EdgeSet();" ], [ "spriteSet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected SpriteSet spriteSet = new SpriteSet();" ], [ "graphSet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected GraphSet graphSet = new GraphSet();" ], [ "eventSet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected EventSet eventSet = new EventSet();" ], [ "zIndex", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected ZIndex zIndex = new ZIndex();" ], [ "shadow", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected ShadowSet shadow = new ShadowSet();" ], [ "removeEmptyGroups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected boolean removeEmptyGroups = true;" ], [ "listeners", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected ArrayList<StyleGroupListener> listeners = new ArrayList<StyleGroupListener>();" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 3243,
  "oracle" : ";",
  "oracleType" : "NORMAL_POST",
  "projectName" : "gs-core-1.3",
  "packageName" : "org.graphstream.ui.graphicGraph",
  "className" : "StyleGroupSet",
  "javadocTag" : "@return Identifier of the group containing the element.",
  "methodJavadoc" : "    /**\n\t * Retrieve the group identifier of an element knowing the element\n\t * identifier.\n\t * \n\t * @param element\n\t *            The element to search for.\n\t * @return Identifier of the group containing the element.\n\t */",
  "methodSourceCode" : "public String getElementGroup(Element element){\n    if (element instanceof Node) {\n        return byNodeIdGroups.get(element.getId());\n    } else if (element instanceof Edge) {\n        return byEdgeIdGroups.get(element.getId());\n    } else if (element instanceof GraphicSprite) {\n        return bySpriteIdGroups.get(element.getId());\n    } else if (element instanceof Graph) {\n        return byGraphIdGroups.get(element.getId());\n    } else {\n        throw new RuntimeException(\"What ?\");\n    }\n}",
  "classJavadoc" : "/**\n * A set of style groups.\n * \n * <p>\n * This class is in charge or storing all the style groups and to update them.\n * Each time an element is added or removed the groups are updated. Each time\n * the style sheet changes the groups are updated.\n * </p>\n * \n * @author Antoine Dutot\n */",
  "classSourceCode" : "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign√©      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.ui.graphicGraph;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.TreeMap;\nimport org.graphstream.graph.Edge;\nimport org.graphstream.graph.Element;\nimport org.graphstream.graph.Graph;\nimport org.graphstream.graph.Node;\nimport org.graphstream.ui.graphicGraph.stylesheet.Rule;\nimport org.graphstream.ui.graphicGraph.stylesheet.Selector;\nimport org.graphstream.ui.graphicGraph.stylesheet.StyleConstants.ShadowMode;\nimport org.graphstream.ui.graphicGraph.stylesheet.StyleSheet;\nimport org.graphstream.ui.graphicGraph.stylesheet.StyleSheetListener;\n\n/**\n * A set of style groups.\n * \n * <p>\n * This class is in charge or storing all the style groups and to update them.\n * Each time an element is added or removed the groups are updated. Each time\n * the style sheet changes the groups are updated.\n * </p>\n * \n * @author Antoine Dutot\n */\npublic class StyleGroupSet implements StyleSheetListener {\n\t// Attribute\n\n\t/**\n\t * The style sheet.\n\t */\n\tprotected StyleSheet stylesheet;\n\n\t/**\n\t * All the groups indexed by their unique identifier.\n\t */\n\tprotected final Map<String, StyleGroup> groups = new TreeMap<String, StyleGroup>();\n\n\t/**\n\t * Allows to retrieve the group containing a node knowing the node id.\n\t */\n\tprotected final Map<String, String> byNodeIdGroups = new TreeMap<String, String>();\n\n\t/**\n\t * Allows to retrieve the group containing an edge knowing the node id.\n\t */\n\tprotected final Map<String, String> byEdgeIdGroups = new TreeMap<String, String>();\n\n\t/**\n\t * Allows to retrieve the group containing a sprite knowing the node id.\n\t */\n\tprotected final Map<String, String> bySpriteIdGroups = new TreeMap<String, String>();\n\n\t/**\n\t * Allows to retrieve the group containing a graph knowing the node id.\n\t */\n\tprotected final Map<String, String> byGraphIdGroups = new TreeMap<String, String>();\n\n\t/**\n\t * Virtual set of nodes. This set provides fake methods to make it appear as\n\t * a set of nodes whereas it only maps on the node style groups.\n\t */\n\tprotected NodeSet nodeSet = new NodeSet();\n\n\t/**\n\t * Virtual set of edges. This set provides fake methods to make it appear as\n\t * a set of edges whereas it only maps on the edge style groups.\n\t */\n\tprotected EdgeSet edgeSet = new EdgeSet();\n\n\t/**\n\t * Virtual set of sprites. This set provides fake methods to make it appear\n\t * as a set of sprites whereas it only maps on the sprite style groups.\n\t */\n\tprotected SpriteSet spriteSet = new SpriteSet();\n\n\t/**\n\t * Virtual set of graphs. This set provides fake methods to make it appear\n\t * as a set of graphs whereas it only maps on the graph style groups.\n\t */\n\tprotected GraphSet graphSet = new GraphSet();\n\n\t/**\n\t * The set of events actually occurring.\n\t */\n\tprotected EventSet eventSet = new EventSet();\n\n\t/**\n\t * The groups sorted by their Z index.\n\t */\n\tprotected ZIndex zIndex = new ZIndex();\n\n\t/**\n\t * Set of groups that cast shadow.\n\t */\n\tprotected ShadowSet shadow = new ShadowSet();\n\n\t/**\n\t * Remove groups if they become empty?.\n\t */\n\tprotected boolean removeEmptyGroups = true;\n\n\t/**\n\t * Set of listeners.\n\t */\n\tprotected ArrayList<StyleGroupListener> listeners = new ArrayList<StyleGroupListener>();\n\n\t// Construction\n\n\t/**\n\t * New empty style group set, using the given style sheet to create style\n\t * groups. The group set installs itself as a listener of the style sheet.\n\t * So in order to completely stop using such a group, you must call\n\t * {@link #release()}.\n\t * \n\t * @param stylesheet\n\t *            The style sheet to use to create groups.\n\t */\n\tpublic StyleGroupSet(StyleSheet stylesheet) {\n\t\tthis.stylesheet = stylesheet;\n\n\t\tstylesheet.addListener(this);\n\t}\n\n\t// Access\n\n\t/**\n\t * Number of groups.\n\t * \n\t * @return The number of groups.\n\t */\n\tpublic int getGroupCount() {\n\t\treturn groups.size();\n\t}\n\n\t/**\n\t * Return a group by its unique identifier. The way group identifier are\n\t * constructed reflects their contents.\n\t * \n\t * @param groupId\n\t *            The group identifier.\n\t * @return The corresponding group or null if not found.\n\t */\n\tpublic StyleGroup getGroup(String groupId) {\n\t\treturn groups.get(groupId);\n\t}\n\n\t/**\n\t * Iterator on the set of groups in no particular order.\n\t * \n\t * @return An iterator on the group set.\n\t */\n\tpublic Iterator<? extends StyleGroup> getGroupIterator() {\n\t\treturn groups.values().iterator();\n\t}\n\n\t/**\n\t * Iterable set of groups elements, in no particular order.\n\t * \n\t * @return An iterable on the set of groups.\n\t */\n\tpublic Iterable<? extends StyleGroup> groups() {\n\t\treturn groups.values();\n\t}\n\n\t/**\n\t * Iterator on the Z index.\n\t * \n\t * @return The z index iterator.\n\t */\n\tpublic Iterator<HashSet<StyleGroup>> getZIterator() {\n\t\treturn zIndex.getIterator();\n\t}\n\n\t/**\n\t * Iterable set of \"subsets of groups\" sorted by Z level. Each subset of\n\t * groups is at the same Z level.\n\t * \n\t * @return The z levels.\n\t */\n\tpublic Iterable<HashSet<StyleGroup>> zIndex() {\n\t\treturn zIndex;\n\t}\n\n\t/**\n\t * Iterator on the style groups that cast a shadow.\n\t * \n\t * @return The shadow groups iterator.\n\t */\n\tpublic Iterator<StyleGroup> getShadowIterator() {\n\t\treturn shadow.getIterator();\n\t}\n\n\t/**\n\t * Iterable set of groups that cast shadow.\n\t * \n\t * @return All the groups that cast a shadow.\n\t */\n\tpublic Iterable<StyleGroup> shadows() {\n\t\treturn shadow;\n\t}\n\n\t/**\n\t * True if the set contains and styles the node whose identifier is given.\n\t * \n\t * @param id\n\t *            The node identifier.\n\t * @return True if the node is in this set.\n\t */\n\tpublic boolean containsNode(String id) {\n\t\treturn byNodeIdGroups.containsKey(id);\n\t}\n\n\t/**\n\t * True if the set contains and styles the edge whose identifier is given.\n\t * \n\t * @param id\n\t *            The edge identifier.\n\t * @return True if the edge is in this set.\n\t */\n\tpublic boolean containsEdge(String id) {\n\t\treturn byEdgeIdGroups.containsKey(id);\n\t}\n\n\t/**\n\t * True if the set contains and styles the sprite whose identifier is given.\n\t * \n\t * @param id\n\t *            The sprite identifier.\n\t * @return True if the sprite is in this set.\n\t */\n\tpublic boolean containsSprite(String id) {\n\t\treturn bySpriteIdGroups.containsKey(id);\n\t}\n\n\t/**\n\t * True if the set contains and styles the graph whose identifier is given.\n\t * \n\t * @param id\n\t *            The graph identifier.\n\t * @return True if the graph is in this set.\n\t */\n\tpublic boolean containsGraph(String id) {\n\t\treturn byGraphIdGroups.containsKey(id);\n\t}\n\n\t/**\n\t * Get an element.\n\t * \n\t * @param id\n\t *            The element id.\n\t * @param elt2grp\n\t *            The kind of element.\n\t * @return The element or null if not found.\n\t */\n\tprotected Element getElement(String id, Map<String, String> elt2grp) {\n\t\tString gid = elt2grp.get(id);\n\n\t\tif (gid != null) {\n\t\t\tStyleGroup group = groups.get(gid);\n\t\t\treturn group.getElement(id);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Get a node element knowing its identifier.\n\t * \n\t * @param id\n\t *            The node identifier.\n\t * @return The node if it is in this set, else null.\n\t */\n\tpublic Node getNode(String id) {\n\t\treturn (Node) getElement(id, byNodeIdGroups);\n\t}\n\n\t/**\n\t * Get an edge element knowing its identifier.\n\t * \n\t * @param id\n\t *            The edge identifier.\n\t * @return The edge if it is in this set, else null.\n\t */\n\tpublic Edge getEdge(String id) {\n\t\treturn (Edge) getElement(id, byEdgeIdGroups);\n\t}\n\n\t/**\n\t * Get a sprite element knowing its identifier.\n\t * \n\t * @param id\n\t *            The sprite identifier.\n\t * @return The sprite if it is in this set, else null.\n\t */\n\tpublic GraphicSprite getSprite(String id) {\n\t\treturn (GraphicSprite) getElement(id, bySpriteIdGroups);\n\t}\n\n\t/**\n\t * Get a graph element knowing its identifier.\n\t * \n\t * @param id\n\t *            The graph identifier.\n\t * @return The graph if it is in this set, else null.\n\t */\n\tpublic Graph getGraph(String id) {\n\t\treturn (Graph) getElement(id, byGraphIdGroups);\n\t}\n\n\t/**\n\t * The number of nodes referenced.\n\t * \n\t * @return The node count.\n\t */\n\tpublic int getNodeCount() {\n\t\treturn byNodeIdGroups.size();\n\t}\n\n\t/**\n\t * The number of edges referenced.\n\t * \n\t * @return The edge count.\n\t */\n\tpublic int getEdgeCount() {\n\t\treturn byEdgeIdGroups.size();\n\t}\n\n\t/**\n\t * The number of sprites referenced.\n\t * \n\t * @return The sprite count.\n\t */\n\tpublic int getSpriteCount() {\n\t\treturn bySpriteIdGroups.size();\n\t}\n\n\t/**\n\t * Iterator on the set of nodes.\n\t * \n\t * @return An iterator on all node elements contained in style groups.\n\t */\n\tpublic Iterator<? extends Node> getNodeIterator() {\n\t\treturn new ElementIterator<Node>(byNodeIdGroups);\n\t}\n\n\t/**\n\t * Iterator on the set of graphs.\n\t * \n\t * @return An iterator on all graph elements contained in style groups.\n\t */\n\tpublic Iterator<? extends Graph> getGraphIterator() {\n\t\treturn new ElementIterator<Graph>(byGraphIdGroups);\n\t}\n\n\t/**\n\t * Iterable set of nodes.\n\t * \n\t * @return The set of all nodes.\n\t */\n\tpublic Iterable<? extends Node> nodes() {\n\t\treturn nodeSet;\n\t}\n\n\t/**\n\t * Iterable set of graphs.\n\t * \n\t * @return The set of all graphs.\n\t */\n\tpublic Iterable<? extends Graph> graphs() {\n\t\treturn graphSet;\n\t}\n\n\t/**\n\t * Iterator on the set of edges.\n\t * \n\t * @return An iterator on all edge elements contained in style groups.\n\t */\n\tpublic Iterator<? extends Edge> getEdgeIterator() {\n\t\treturn new ElementIterator<Edge>(byEdgeIdGroups);\n\t}\n\n\t/**\n\t * Iterable set of edges.\n\t * \n\t * @return The set of all edges.\n\t */\n\tpublic Iterable<? extends Edge> edges() {\n\t\treturn edgeSet;\n\t}\n\n\t/**\n\t * Iterator on the set of sprite.\n\t * \n\t * @return An iterator on all sprite elements contained in style groups.\n\t */\n\tpublic Iterator<? extends GraphicSprite> getSpriteIterator() {\n\t\treturn new ElementIterator<GraphicSprite>(bySpriteIdGroups);\n\t}\n\n\t/**\n\t * Iterable set of sprites.\n\t * \n\t * @return The set of all sprites.\n\t */\n\tpublic Iterable<? extends GraphicSprite> sprites() {\n\t\treturn spriteSet;\n\t}\n\n\t/**\n\t * Retrieve the group identifier of an element knowing the element\n\t * identifier.\n\t * \n\t * @param element\n\t *            The element to search for.\n\t * @return Identifier of the group containing the element.\n\t */\n\tpublic String getElementGroup(Element element) {\n\t\tif (element instanceof Node) {\n\t\t\treturn byNodeIdGroups.get(element.getId());\n\t\t} else if (element instanceof Edge) {\n\t\t\treturn byEdgeIdGroups.get(element.getId());\n\t\t} else if (element instanceof GraphicSprite) {\n\t\t\treturn bySpriteIdGroups.get(element.getId());\n\t\t} else if (element instanceof Graph) {\n\t\t\treturn byGraphIdGroups.get(element.getId());\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"What ?\");\n\t\t}\n\t}\n\n\t/**\n\t * Get the style of an element.\n\t * \n\t * @param element\n\t *            The element to search for.\n\t * @return The style group of the element (which is also a style).\n\t */\n\tpublic StyleGroup getStyleForElement(Element element) {\n\t\tString gid = getElementGroup(element);\n\n\t\treturn groups.get(gid);\n\t}\n\n\t/**\n\t * Get the style of a given node.\n\t * \n\t * @param node\n\t *            The node to search for.\n\t * @return The node style.\n\t */\n\tpublic StyleGroup getStyleFor(Node node) {\n\t\tString gid = byNodeIdGroups.get(node.getId());\n\t\treturn groups.get(gid);\n\t}\n\n\t/**\n\t * Get the style of a given edge.\n\t * \n\t * @param edge\n\t *            The edge to search for.\n\t * @return The edge style.\n\t */\n\tpublic StyleGroup getStyleFor(Edge edge) {\n\t\tString gid = byEdgeIdGroups.get(edge.getId());\n\t\treturn groups.get(gid);\n\t}\n\n\t/**\n\t * Get the style of a given sprite.\n\t * \n\t * @param sprite\n\t *            The node to search for.\n\t * @return The sprite style.\n\t */\n\tpublic StyleGroup getStyleFor(GraphicSprite sprite) {\n\t\tString gid = bySpriteIdGroups.get(sprite.getId());\n\t\treturn groups.get(gid);\n\t}\n\n\t/**\n\t * Get the style of a given graph.\n\t * \n\t * @param graph\n\t *            The node to search for.\n\t * @return The graph style.\n\t */\n\tpublic StyleGroup getStyleFor(Graph graph) {\n\t\tString gid = byGraphIdGroups.get(graph.getId());\n\t\treturn groups.get(gid);\n\t}\n\n\t/**\n\t * True if groups are removed when becoming empty. This setting allows to\n\t * keep empty group when the set of elements is quite dynamic. This allows\n\t * to avoid recreting groups when an element appears and disappears\n\t * regularly.\n\t * \n\t * @return True if the groups are removed when empty.\n\t */\n\tpublic boolean areEmptyGroupRemoved() {\n\t\treturn removeEmptyGroups;\n\t}\n\n\t/**\n\t * The Z index object.\n\t * \n\t * @return The Z index.\n\t */\n\tpublic ZIndex getZIndex() {\n\t\treturn zIndex;\n\t}\n\n\t/**\n\t * The set of style groups that cast a shadow.\n\t * \n\t * @return The set of shadowed style groups.\n\t */\n\tpublic ShadowSet getShadowSet() {\n\t\treturn shadow;\n\t}\n\n\t// Command\n\n\t/**\n\t * Release any dependency to the style sheet.\n\t */\n\tpublic void release() {\n\t\tstylesheet.removeListener(this);\n\t}\n\n\t/**\n\t * Empties this style group set. The style sheet is listener is not removed,\n\t * use {@link #release()} to do that.\n\t */\n\tpublic void clear() {\n\t\tbyEdgeIdGroups.clear();\n\t\tbyNodeIdGroups.clear();\n\t\tbySpriteIdGroups.clear();\n\t\tbyGraphIdGroups.clear();\n\t\tgroups.clear();\n\t\tzIndex.clear();\n\t\tshadow.clear();\n\t}\n\n\t/**\n\t * Remove or keep groups that becomes empty, if true the groups are removed.\n\t * If this setting was set to false, and is now true, the group set is\n\t * purged of the empty groups.\n\t * \n\t * @param on\n\t *            If true the groups will be removed.\n\t */\n\tpublic void setRemoveEmptyGroups(boolean on) {\n\t\tif (removeEmptyGroups == false && on == true) {\n\t\t\tIterator<? extends StyleGroup> i = groups.values().iterator();\n\n\t\t\twhile (i.hasNext()) {\n\t\t\t\tStyleGroup g = i.next();\n\n\t\t\t\tif (g.isEmpty())\n\t\t\t\t\ti.remove();\n\t\t\t}\n\t\t}\n\n\t\tremoveEmptyGroups = on;\n\t}\n\n\tprotected StyleGroup addGroup(String id, ArrayList<Rule> rules,\n\t\t\tElement firstElement) {\n\t\tStyleGroup group = new StyleGroup(id, rules, firstElement, eventSet);\n\n\t\tgroups.put(id, group);\n\t\tzIndex.groupAdded(group);\n\t\tshadow.groupAdded(group);\n\n\t\treturn group;\n\t}\n\n\tprotected void removeGroup(StyleGroup group) {\n\t\tzIndex.groupRemoved(group);\n\t\tshadow.groupRemoved(group);\n\t\tgroups.remove(group.getId());\n\t\tgroup.release();\n\t}\n\n\t/**\n\t * Add an element and bind it to its style group. The group is created if\n\t * needed.\n\t * \n\t * @param element\n\t *            The element to add.\n\t * @return The style group where the element was added.\n\t */\n\tpublic StyleGroup addElement(Element element) {\n\t\tStyleGroup group = addElement_(element);\n\n\t\tfor (StyleGroupListener listener : listeners)\n\t\t\tlistener.elementStyleChanged(element, null, group);\n\n\t\treturn group;\n\t}\n\n\tprotected StyleGroup addElement_(Element element) {\n\t\tArrayList<Rule> rules = stylesheet.getRulesFor(element);\n\t\tString gid = stylesheet.getStyleGroupIdFor(element, rules);\n\t\tStyleGroup group = groups.get(gid);\n\n\t\tif (group == null)\n\t\t\tgroup = addGroup(gid, rules, element);\n\t\telse\n\t\t\tgroup.addElement(element);\n\n\t\taddElementToReverseSearch(element, gid);\n\n\t\treturn group;\n\t}\n\n\t/**\n\t * Remove an element from the group set. If the group becomes empty after\n\t * the element removal, depending on the setting of\n\t * {@link #areEmptyGroupRemoved()}, the group is deleted or kept. Keeping\n\t * groups allows to handle faster elements that constantly appear and\n\t * disappear.\n\t * \n\t * @param element\n\t *            The element to remove.\n\t */\n\tpublic void removeElement(Element element) {\n\t\tString gid = getElementGroup(element);\n        if (null == gid)\n        {\n            return;\n        }\n\t\tStyleGroup group = groups.get(gid);\n\n\t\tif (group != null) {\n\t\t\tgroup.removeElement(element);\n\t\t\tremoveElementFromReverseSearch(element);\n\n\t\t\tif (removeEmptyGroups && group.isEmpty())\n\t\t\t\tremoveGroup(group);\n\t\t}\n\t}\n\n\t/**\n\t * Check if an element need to change from a style group to another.\n\t * \n\t * <p>\n\t * When an element can have potentially changed style due to some of its\n\t * attributes (ui.class for example), instead of removing it then reading\n\t * it, use this method to move the element from its current style group to a\n\t * potentially different style group.\n\t * </p>\n\t * \n\t * <p>\n\t * Explanation of this method : checking the style of an element may be done\n\t * by removing it ({@link #removeElement(Element)}) and then re-adding it (\n\t * {@link #addElement(Element)}). This must be done by the element since it\n\t * knows when to check this. However you cannot only remove and add, since\n\t * the style group inside which the element is can have events occurring on\n\t * it, and these events must be passed from its old style to its new style.\n\t * This method does all this information passing.\n\t * </p>\n\t * \n\t * @param element\n\t *            The element to move.\n\t */\n\tpublic void checkElementStyleGroup(Element element) {\n\t\tStyleGroup oldGroup = getGroup(getElementGroup(element));\n\n\t\t// Get the old element \"dynamic\" status.\n\n\t\tboolean isDyn = false;\n\n\t\t// Get the old event set for the given element.\n\n\t\tStyleGroup.ElementEvents events = null;\n\n\t\tif (oldGroup != null) {\n\t\t\tisDyn = oldGroup.isElementDynamic(element);\n\t\t\tevents = oldGroup.getEventsFor(element);\n\t\t}\n\n\t\t// Remove the element from its old style and add it to insert it in the\n\t\t// correct style.\n\n\t\tremoveElement(element);\n\t\taddElement_(element);\n\n\t\t// Eventually push the events on the new style group.\n\n\t\tStyleGroup newGroup = getGroup(getElementGroup(element));\n\n\t\tif (newGroup != null && events != null) {\n\t\t\tfor (String event : events.events)\n\t\t\t\tpushEventFor(element, event);\n\t\t}\n\n\t\tfor (StyleGroupListener listener : listeners)\n\t\t\tlistener.elementStyleChanged(element, oldGroup, newGroup);\n\n\t\t// Eventually set the element as dynamic, if it was.\n\n\t\tif (newGroup != null && isDyn)\n\t\t\tnewGroup.pushElementAsDynamic(element);\n\t}\n\n\tprotected void addElementToReverseSearch(Element element, String groupId) {\n\t\tif (element instanceof Node) {\n\t\t\tbyNodeIdGroups.put(element.getId(), groupId);\n\t\t} else if (element instanceof Edge) {\n\t\t\tbyEdgeIdGroups.put(element.getId(), groupId);\n\t\t} else if (element instanceof GraphicSprite) {\n\t\t\tbySpriteIdGroups.put(element.getId(), groupId);\n\t\t} else if (element instanceof Graph) {\n\t\t\tbyGraphIdGroups.put(element.getId(), groupId);\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"What ?\");\n\t\t}\n\t}\n\n\tprotected void removeElementFromReverseSearch(Element element) {\n\t\tif (element instanceof Node) {\n\t\t\tbyNodeIdGroups.remove(element.getId());\n\t\t} else if (element instanceof Edge) {\n\t\t\tbyEdgeIdGroups.remove(element.getId());\n\t\t} else if (element instanceof GraphicSprite) {\n\t\t\tbySpriteIdGroups.remove(element.getId());\n\t\t} else if (element instanceof Graph) {\n\t\t\tbyGraphIdGroups.remove(element.getId());\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"What ?\");\n\t\t}\n\t}\n\n\t/**\n\t * Push a global event on the event stack. Events trigger the replacement of\n\t * a style by an alternative style (or meta-class) when possible. If an\n\t * event is on the event stack, each time a style has an alternative\n\t * corresponding to the event, the alternative is used instead of the style.\n\t * \n\t * @param event\n\t *            The event to push.\n\t */\n\tpublic void pushEvent(String event) {\n\t\teventSet.pushEvent(event);\n\t}\n\n\t/**\n\t * Push an event specifically for a given element. This is normally done\n\t * automatically by the graphic element.\n\t * \n\t * @param element\n\t *            The element considered.\n\t * @param event\n\t *            The event to push.\n\t */\n\tpublic void pushEventFor(Element element, String event) {\n\t\tStyleGroup group = getGroup(getElementGroup(element));\n\n\t\tif (group != null)\n\t\t\tgroup.pushEventFor(element, event);\n\t}\n\n\t/**\n\t * Pop a global event from the event set.\n\t * \n\t * @param event\n\t *            The event to remove.\n\t */\n\tpublic void popEvent(String event) {\n\t\teventSet.popEvent(event);\n\t}\n\n\t/**\n\t * Pop an event specifically for a given element. This is normally done\n\t * automatically by the graphic element.\n\t * \n\t * @param element\n\t *            The element considered.\n\t * @param event\n\t *            The event to pop.\n\t */\n\tpublic void popEventFor(Element element, String event) {\n\t\tStyleGroup group = getGroup(getElementGroup(element));\n\n\t\tif (group != null)\n\t\t\tgroup.popEventFor(element, event);\n\t}\n\n\t/**\n\t * Specify the given element has dynamic style attribute values. This is\n\t * normally done automatically by the graphic element.\n\t * \n\t * @param element\n\t *            The element to add to the dynamic subset.\n\t */\n\tpublic void pushElementAsDynamic(Element element) {\n\t\tStyleGroup group = getGroup(getElementGroup(element));\n\n\t\tif (group != null)\n\t\t\tgroup.pushElementAsDynamic(element);\n\t}\n\n\t/**\n\t * Remove the given element from the subset of elements having dynamic style\n\t * attribute values. This is normally done automatically by the graphic\n\t * element.\n\t * \n\t * @param element\n\t *            The element to remove from the dynamic subset.\n\t */\n\tpublic void popElementAsDynamic(Element element) {\n\t\tStyleGroup group = getGroup(getElementGroup(element));\n\n\t\tif (group != null)\n\t\t\tgroup.popElementAsDynamic(element);\n\t}\n\n\t/**\n\t * Add a listener for element style changes.\n\t * \n\t * @param listener\n\t *            The listener to add.\n\t */\n\tpublic void addListener(StyleGroupListener listener) {\n\t\tlisteners.add(listener);\n\t}\n\n\t/**\n\t * Remove a style change listener.\n\t * \n\t * @param listener\n\t *            The listener to remove.\n\t */\n\tpublic void removeListener(StyleGroupListener listener) {\n\t\tint index = listeners.lastIndexOf(listener);\n\n\t\tif (index >= 0) {\n\t\t\tlisteners.remove(index);\n\t\t}\n\t}\n\n\t// Listener -- What to do when a change occurs in the style sheet.\n\n\tpublic void styleAdded(Rule oldRule, Rule newRule) {\n\t\t// When a style change, we need to update groups.\n\t\t// Several cases :\n\t\t// 1. The style already exists\n\t\t// * Nothing to do in fact. All the elements are still in place.\n\t\t// No style rule (selectors) changed, and therefore we do not have\n\t\t// to change the groups since they are built using the selectors.\n\t\t// 2. The style is new\n\t\t// * we need to check all the groups concerning this kind of element (we\n\t\t// can\n\t\t// restrict our search to these groups, since other will not be\n\t\t// impacted),\n\t\t// and check all elements of these groups.\n\n\t\tif (oldRule == null)\n\t\t\tcheckForNewStyle(newRule); // no need to check Z and shadow, done\n\t\t\t\t\t\t\t\t\t\t// when adding/changing group.\n\t\telse\n\t\t\tcheckZIndexAndShadow(oldRule, newRule);\n\t}\n\n\tpublic void styleSheetCleared() {\n\t\tArrayList<Element> elements = new ArrayList<Element>();\n\n\t\tfor (Element element : graphs())\n\t\t\telements.add(element);\n\n\t\tfor (Element element : nodes())\n\t\t\telements.add(element);\n\n\t\tfor (Element element : edges())\n\t\t\telements.add(element);\n\n\t\tfor (Element element : sprites())\n\t\t\telements.add(element);\n\n\t\tclear();\n\n\t\tfor (Element element : elements)\n\t\t\tremoveElement(element);\n\n\t\tfor (Element element : elements)\n\t\t\taddElement(element);\n\t}\n\n\t/**\n\t * Check each group that may have changed, for example to rebuild the Z\n\t * index and the shadow set.\n\t * \n\t * @param oldRule\n\t *            The old rule that changed.\n\t * @param newRule\n\t *            The new rule that participated in the change.\n\t */\n\tprotected void checkZIndexAndShadow(Rule oldRule, Rule newRule) {\n\t\tif (oldRule != null) {\n\t\t\tif (oldRule.selector.getId() != null\n\t\t\t\t\t|| oldRule.selector.getClazz() != null) {\n\t\t\t\t// We may accelerate things a bit when a class or id style is\n\t\t\t\t// modified,\n\t\t\t\t// since only the groups listed in the style are concerned (we\n\t\t\t\t// are at the\n\t\t\t\t// bottom of the inheritance tree).\n\t\t\t\tif (oldRule.getGroups() != null)\n\t\t\t\t\tfor (String s : oldRule.getGroups()) {\n\t\t\t\t\t\tStyleGroup group = groups.get(s);\n\t\t\t\t\t\tif (group != null) {\n\t\t\t\t\t\t\tzIndex.groupChanged(group);\n\t\t\t\t\t\t\tshadow.groupChanged(group);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// For kind styles \"NODE\", \"EDGE\", \"GRAPH\", \"SPRITE\", we must\n\t\t\t\t// reset\n\t\t\t\t// the whole Z and shadows for the kind, since several styles\n\t\t\t\t// may\n\t\t\t\t// have changed.\n\n\t\t\t\tSelector.Type type = oldRule.selector.type;\n\n\t\t\t\tfor (StyleGroup group : groups.values()) {\n\t\t\t\t\tif (group.getType() == type) {\n\t\t\t\t\t\tzIndex.groupChanged(group);\n\t\t\t\t\t\tshadow.groupChanged(group);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * We try to avoid at most to affect anew styles to elements and to recreate\n\t * groups, which is time consuming.\n\t * \n\t * Two cases :\n\t * <ol>\n\t * <li>The style is an specific (id) style. In this case a new group may be\n\t * added.\n\t * <ul>\n\t * <li>check an element matches the style and in this case create the group\n\t * by adding the element.</li>\n\t * <li>else do nothing.</li>\n\t * </ul>\n\t * </li>\n\t * <li>The style is a kind or class style.\n\t * <ul>\n\t * <li>check all the groups in the kind of the style (graph, node, edge,\n\t * sprite) and only in this kind (since other will never be affected).</li>\n\t * <li>remove all groups of this kind.</li>\n\t * <li>add all elements of this kind anew to recreate the group.</li>\n\t * </ul>\n\t * </li>\n\t * </ol>\n\t */\n\tprotected void checkForNewStyle(Rule newRule) {\n\t\tswitch (newRule.selector.type) {\n\t\tcase GRAPH:\n\t\t\tif (newRule.selector.getId() != null)\n\t\t\t\tcheckForNewIdStyle(newRule, byGraphIdGroups);\n\t\t\telse\n\t\t\t\tcheckForNewStyle(newRule, byGraphIdGroups);\n\t\t\tbreak;\n\t\tcase NODE:\n\t\t\tif (newRule.selector.getId() != null)\n\t\t\t\tcheckForNewIdStyle(newRule, byNodeIdGroups);\n\t\t\telse\n\t\t\t\tcheckForNewStyle(newRule, byNodeIdGroups);\n\t\t\tbreak;\n\t\tcase EDGE:\n\t\t\tif (newRule.selector.getId() != null)\n\t\t\t\tcheckForNewIdStyle(newRule, byEdgeIdGroups);\n\t\t\telse\n\t\t\t\tcheckForNewStyle(newRule, byEdgeIdGroups);\n\t\t\tbreak;\n\t\tcase SPRITE:\n\t\t\tif (newRule.selector.getId() != null)\n\t\t\t\tcheckForNewIdStyle(newRule, bySpriteIdGroups);\n\t\t\telse\n\t\t\t\tcheckForNewStyle(newRule, bySpriteIdGroups);\n\t\t\tbreak;\n\t\tcase ANY:\n\t\tdefault:\n\t\t\tthrow new RuntimeException(\"What ?\");\n\t\t}\n\t}\n\n\t/**\n\t * Check for a new specific style (applies only to one element).\n\t * \n\t * @param newRule\n\t *            The new style rule.\n\t * @param elt2grp\n\t *            The name space.\n\t */\n\tprotected void checkForNewIdStyle(Rule newRule,\n\t\t\tMap<String, String> elt2grp) {\n\t\t// There is only one element that matches the identifier.\n\n\t\tElement element = getElement(newRule.selector.getId(), elt2grp);\n\n\t\tif (element != null) {\n\t\t\tcheckElementStyleGroup(element);\n\t\t\t// removeElement( element ); // Remove the element from its old\n\t\t\t// group. Potentially delete a group.\n\t\t\t// addElement( element ); // Add the element to its new own group\n\t\t\t// (since this is an ID style).\n\t\t}\n\t}\n\n\t/**\n\t * Check for a new kind or class style in a given name space (node, edge,\n\t * sprite, graph).\n\t * \n\t * @param newRule\n\t *            The new style rule.\n\t * @param elt2grp\n\t *            The name space.\n\t */\n\tprotected void checkForNewStyle(Rule newRule,\n\t\t\tMap<String, String> elt2grp) {\n\t\tCollection<Element> elementsToCheck = new ArrayList<Element>();\n\n\t\tfor (String eltId : elt2grp.keySet())\n\t\t\telementsToCheck.add(getElement(eltId, elt2grp));\n\n\t\tfor (Element element : elementsToCheck) {\n\t\t\tcheckElementStyleGroup(element);\n\t\t\t// removeElement( element );\n\t\t\t// addElement( element );\n\t\t}\n\t}\n\n\t// Utility\n\n\t@Override\n\tpublic String toString() {\n\t\tStringBuilder builder = new StringBuilder();\n\n\t\tbuilder.append(String.format(\"Style groups (%d) :%n\", groups.size()));\n\n\t\tfor (StyleGroup group : groups.values()) {\n\t\t\tbuilder.append(group.toString(1));\n\t\t\tbuilder.append(String.format(\"%n\"));\n\t\t}\n\n\t\treturn builder.toString();\n\t}\n\n\t// Inner classes\n\n\t/**\n\t * Set of events (meta-classes) actually active.\n\t * \n\t * <p>\n\t * The event set contains the set of events actually occurring. This is used\n\t * to select alternate styles. The events actually occurring are in\n\t * precedence order. The last one is the most important.\n\t * </p>\n\t * \n\t * @author Antoine Dutot\n\t */\n\tpublic class EventSet {\n\t\tpublic ArrayList<String> eventSet = new ArrayList<String>();\n\n\t\tpublic String events[] = new String[0];\n\n\t\t/**\n\t\t * Add an event to the set.\n\t\t * \n\t\t * @param event\n\t\t *            The event to add.\n\t\t */\n\t\tpublic void pushEvent(String event) {\n\t\t\teventSet.add(event);\n\t\t\tevents = eventSet.toArray(events);\n\t\t}\n\n\t\t/**\n\t\t * Remove an event from the set.\n\t\t * \n\t\t * @param event\n\t\t *            The event to remove.\n\t\t */\n\t\tpublic void popEvent(String event) {\n\t\t\tint index = eventSet.lastIndexOf(event);\n\n\t\t\tif (index >= 0)\n\t\t\t\teventSet.remove(index);\n\n\t\t\tevents = eventSet.toArray(events);\n\t\t}\n\n\t\t/**\n\t\t * The set of events in order, the most important at the end.\n\t\t * \n\t\t * @return The event set.\n\t\t */\n\t\tpublic String[] getEvents() {\n\t\t\treturn events;\n\t\t}\n\t}\n\n\t/**\n\t * All the style groups sorted by their Z index.\n\t * \n\t * <p>\n\t * This structure is maintained by each time a group is added or removed, or\n\t * when the style of a group changed.\n\t * </p>\n\t * \n\t * @author Antoine Dutot\n\t */\n\tpublic class ZIndex implements Iterable<HashSet<StyleGroup>> {\n\t\t/**\n\t\t * Ordered set of groups.\n\t\t */\n\t\tpublic ArrayList<HashSet<StyleGroup>> zIndex = new ArrayList<HashSet<StyleGroup>>();\n\n\t\t/**\n\t\t * Knowing a group, tell if its Z index.\n\t\t */\n\t\tpublic HashMap<String, Integer> reverseZIndex = new HashMap<String, Integer>();\n\n\t\t/**\n\t\t * New empty Z index.\n\t\t */\n\t\tpublic ZIndex() {\n\t\t\tinitZIndex();\n\t\t}\n\n\t\tprotected void initZIndex() {\n\t\t\tzIndex.ensureCapacity(256);\n\n\t\t\tfor (int i = 0; i < 256; i++)\n\t\t\t\tzIndex.add(null);\n\t\t}\n\n\t\t/**\n\t\t * Iterator on the set of Z index cells. Each item is a set of style\n\t\t * groups that pertain to the same Z index.\n\t\t * \n\t\t * @return Iterator on the Z index.\n\t\t */\n\t\tprotected Iterator<HashSet<StyleGroup>> getIterator() {\n\t\t\treturn new ZIndexIterator();\n\t\t}\n\n\t\tpublic Iterator<HashSet<StyleGroup>> iterator() {\n\t\t\treturn getIterator();\n\t\t}\n\n\t\t/**\n\t\t * A new group appeared, put it in the z index.\n\t\t * \n\t\t * @param group\n\t\t *            The group to add.\n\t\t */\n\t\tprotected void groupAdded(StyleGroup group) {\n\t\t\tint z = convertZ(group.getZIndex());\n\n\t\t\tif (zIndex.get(z) == null)\n\t\t\t\tzIndex.set(z, new HashSet<StyleGroup>());\n\n\t\t\tzIndex.get(z).add(group);\n\t\t\treverseZIndex.put(group.getId(), z);\n\t\t}\n\n\t\t/**\n\t\t * A group eventually changed, check its location.\n\t\t * \n\t\t * @param group\n\t\t *            The group to check.\n\t\t */\n\t\tprotected void groupChanged(StyleGroup group) {\n\t\t\tint oldZ = reverseZIndex.get(group.getId());\n\t\t\tint newZ = convertZ(group.getZIndex());\n\n\t\t\tif (oldZ != newZ) {\n\t\t\t\tHashSet<StyleGroup> map = zIndex.get(oldZ);\n\n\t\t\t\tif (map != null) {\n\t\t\t\t\tmap.remove(group);\n\t\t\t\t\treverseZIndex.remove(group.getId());\n\n\t\t\t\t\tif (map.isEmpty())\n\t\t\t\t\t\tzIndex.set(oldZ, null);\n\t\t\t\t}\n\n\t\t\t\tgroupAdded(group);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * A group was removed, remove it from the Z index.\n\t\t * \n\t\t * @param group\n\t\t *            The group to remove.\n\t\t */\n\t\tprotected void groupRemoved(StyleGroup group) {\n\t\t\tint z = convertZ(group.getZIndex());\n\n\t\t\tHashSet<StyleGroup> map = zIndex.get(z);\n\n\t\t\tif (map != null) {\n\t\t\t\tmap.remove(group);\n\t\t\t\treverseZIndex.remove(group.getId());\n\n\t\t\t\tif (map.isEmpty())\n\t\t\t\t\tzIndex.set(z, null);\n\t\t\t} else {\n\t\t\t\tthrow new RuntimeException(\"Inconsistency in Z-index\");\n\t\t\t}\n\t\t}\n\n\t\tpublic void clear() {\n\t\t\tzIndex.clear();\n\t\t\treverseZIndex.clear();\n\t\t\tinitZIndex();\n\t\t}\n\n\t\t/**\n\t\t * Convert a [-127,127] value into a [0,255] value and check bounds.\n\t\t * \n\t\t * @param z\n\t\t *            The Z value to convert.\n\t\t * @return The Z value converted and bounded to [0,255].\n\t\t */\n\t\tprotected int convertZ(int z) {\n\t\t\tz += 127;\n\n\t\t\tif (z < 0)\n\t\t\t\tz = 0;\n\t\t\telse if (z > 255)\n\t\t\t\tz = 255;\n\n\t\t\treturn z;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\tStringBuilder sb = new StringBuilder();\n\n\t\t\tsb.append(String.format(\"Z index :%n\"));\n\n\t\t\tfor (int i = 0; i < 256; i++) {\n\t\t\t\tif (zIndex.get(i) != null) {\n\t\t\t\t\tsb.append(String.format(\"    * %d -> \", i - 127));\n\n\t\t\t\t\tHashSet<StyleGroup> map = zIndex.get(i);\n\n\t\t\t\t\tfor (StyleGroup g : map)\n\t\t\t\t\t\tsb.append(String.format(\"%s \", g.getId()));\n\n\t\t\t\t\tsb.append(String.format(\"%n\"));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn sb.toString();\n\t\t}\n\n\t\tpublic class ZIndexIterator implements Iterator<HashSet<StyleGroup>> {\n\t\t\tpublic int index = 0;\n\n\t\t\tpublic ZIndexIterator() {\n\t\t\t\tzapUntilACell();\n\t\t\t}\n\n\t\t\tprotected void zapUntilACell() {\n\t\t\t\twhile (index < 256 && zIndex.get(index) == null)\n\t\t\t\t\tindex++;\n\t\t\t}\n\n\t\t\tpublic boolean hasNext() {\n\t\t\t\treturn (index < 256);\n\t\t\t}\n\n\t\t\tpublic HashSet<StyleGroup> next() {\n\t\t\t\tif (hasNext()) {\n\t\t\t\t\tHashSet<StyleGroup> cell = zIndex.get(index);\n\t\t\t\t\tindex++;\n\t\t\t\t\tzapUntilACell();\n\t\t\t\t\treturn cell;\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tpublic void remove() {\n\t\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\t\"This iterator does not support removal.\");\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Set of groups that cast a shadow.\n\t * \n\t * @author Antoine Dutot\n\t */\n\tpublic class ShadowSet implements Iterable<StyleGroup> {\n\t\t/**\n\t\t * The set of groups casting shadow.\n\t\t */\n\t\tprotected HashSet<StyleGroup> shadowSet = new HashSet<StyleGroup>();\n\n\t\t/**\n\t\t * Iterator on the set of groups that cast a shadow.\n\t\t * \n\t\t * @return An iterator on the shadow style group set.\n\t\t */\n\t\tprotected Iterator<StyleGroup> getIterator() {\n\t\t\treturn shadowSet.iterator();\n\t\t}\n\n\t\tpublic Iterator<StyleGroup> iterator() {\n\t\t\treturn getIterator();\n\t\t}\n\n\t\t/**\n\t\t * A group appeared, check its shadow status.\n\t\t * \n\t\t * @param group\n\t\t *            The group added.\n\t\t */\n\t\tprotected void groupAdded(StyleGroup group) {\n\t\t\tif (group.getShadowMode() != ShadowMode.NONE)\n\t\t\t\tshadowSet.add(group);\n\t\t}\n\n\t\t/**\n\t\t * A group eventually changed, check its shadow status.\n\t\t * \n\t\t * @param group\n\t\t *            The group that changed.\n\t\t */\n\t\tprotected void groupChanged(StyleGroup group) {\n\t\t\tif (group.getShadowMode() == ShadowMode.NONE)\n\t\t\t\tshadowSet.remove(group);\n\t\t\telse\n\t\t\t\tshadowSet.add(group);\n\t\t}\n\n\t\t/**\n\t\t * A group was removed, remove it from the shadow if needed.\n\t\t * \n\t\t * @param group\n\t\t *            The group removed.\n\t\t */\n\t\tprotected void groupRemoved(StyleGroup group) {\n\t\t\t// Faster than to first test its existence or shadow status :\n\n\t\t\tshadowSet.remove(group);\n\t\t}\n\n\t\tprotected void clear() {\n\t\t\tshadowSet.clear();\n\t\t}\n\t}\n\n\t/**\n\t * Iterator that allows to browse all graph elements of a given kind (nodes,\n\t * edges, sprites, graphs) as if they where in a single set, whereas they\n\t * are in style groups.\n\t * \n\t * @author Antoine Dutot\n\t * @param <E>\n\t *            The kind of graph element.\n\t */\n\tprotected class ElementIterator<E extends Element> implements Iterator<E> {\n\t\tprotected Map<String, String> elt2grp;\n\n\t\tprotected Iterator<String> elts;\n\n\t\tpublic ElementIterator(final Map<String, String> elements2groups) {\n\t\t\telt2grp = elements2groups;\n\t\t\telts = elements2groups.keySet().iterator();\n\t\t}\n\n\t\tpublic boolean hasNext() {\n\t\t\treturn elts.hasNext();\n\t\t}\n\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tpublic E next() {\n\t\t\tString eid = elts.next();\n\t\t\tString gid = elt2grp.get(eid);\n\t\t\tStyleGroup grp = groups.get(gid);\n\n\t\t\treturn (E) grp.getElement(eid);\n\t\t}\n\n\t\tpublic void remove() {\n\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\"remove not implemented in this iterator\");\n\t\t}\n\t}\n\n\t/**\n\t * Dummy set of nodes.\n\t */\n\tprotected class NodeSet implements Iterable<Node> {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tpublic Iterator<Node> iterator() {\n\t\t\treturn (Iterator<Node>) getNodeIterator();\n\t\t}\n\t}\n\n\t/**\n\t * Dummy set of edges.\n\t */\n\tprotected class EdgeSet implements Iterable<Edge> {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tpublic Iterator<Edge> iterator() {\n\t\t\treturn (Iterator<Edge>) getEdgeIterator();\n\t\t}\n\t}\n\n\t/**\n\t * Dummy set of sprites.\n\t */\n\tprotected class SpriteSet implements Iterable<GraphicSprite> {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tpublic Iterator<GraphicSprite> iterator() {\n\t\t\treturn (Iterator<GraphicSprite>) getSpriteIterator();\n\t\t}\n\t}\n\n\tprotected class GraphSet implements Iterable<GraphicGraph> {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tpublic Iterator<GraphicGraph> iterator() {\n\t\t\treturn (Iterator<GraphicGraph>) getGraphIterator();\n\t\t}\n\t}\n\n}",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "DefaultCamera", "org.graphstream.ui.swingViewer.util" ], [ "GradientFactory", "org.graphstream.ui.swingViewer.util" ], [ "GraphMetrics", "org.graphstream.ui.swingViewer.util" ], [ "Graphics2DOutput", "org.graphstream.ui.swingViewer.util" ], [ "ImageCache", "org.graphstream.ui.swingViewer.util" ], [ "StrokeFactory", "org.graphstream.ui.swingViewer.util" ], [ "FontCache", "org.graphstream.ui.swingViewer.util" ], [ "FontSlot", "org.graphstream.ui.swingViewer.util" ], [ "DefaultView", "org.graphstream.ui.swingViewer" ], [ "SpriteRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "ElementRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "NodeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "Arrow", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "Shape", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "EdgeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "SwingBasicGraphRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "GraphRendererBase", "org.graphstream.ui.swingViewer" ], [ "GraphRenderer", "org.graphstream.ui.swingViewer" ], [ "LayerRenderer", "org.graphstream.ui.swingViewer" ], [ "ViewPanel", "org.graphstream.ui.swingViewer" ], [ "Layouts", "org.graphstream.ui.layout" ], [ "Layout", "org.graphstream.ui.layout" ], [ "LayoutRunner", "org.graphstream.ui.layout" ], [ "NodeParticle", "org.graphstream.ui.layout.springbox" ], [ "GraphCellData", "org.graphstream.ui.layout.springbox" ], [ "EdgeSpring", "org.graphstream.ui.layout.springbox" ], [ "Energies", "org.graphstream.ui.layout.springbox" ], [ "BarnesHutLayout", "org.graphstream.ui.layout.springbox" ], [ "LinLog", "org.graphstream.ui.layout.springbox.implementations" ], [ "LinLogNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBoxNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBox", "org.graphstream.ui.layout.springbox.implementations" ], [ "Point2", "org.graphstream.ui.geom" ], [ "Vector2", "org.graphstream.ui.geom" ], [ "Vector3", "org.graphstream.ui.geom" ], [ "Point3", "org.graphstream.ui.geom" ], [ "ViewerListener", "org.graphstream.ui.view" ], [ "MouseManager", "org.graphstream.ui.view.util" ], [ "ShortcutManager", "org.graphstream.ui.view.util" ], [ "DefaultShortcutManager", "org.graphstream.ui.view.util" ], [ "FpsCounter", "org.graphstream.ui.view.util" ], [ "CubicCurve", "org.graphstream.ui.view.util" ], [ "DefaultMouseManager", "org.graphstream.ui.view.util" ], [ "Selection", "org.graphstream.ui.view" ], [ "ViewerPipe", "org.graphstream.ui.view" ], [ "Viewer", "org.graphstream.ui.view" ], [ "View", "org.graphstream.ui.view" ], [ "Camera", "org.graphstream.ui.view" ], [ "Sprite", "org.graphstream.ui.spriteManager" ], [ "InvalidSpriteIDException", "org.graphstream.ui.spriteManager" ], [ "SpriteManager", "org.graphstream.ui.spriteManager" ], [ "SpriteFactory", "org.graphstream.ui.spriteManager" ], [ "StyleGroupListener", "org.graphstream.ui.graphicGraph" ], [ "Colors", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Values", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetListener", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetParserTokenManager", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParserConstants", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParser", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "Style", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheet", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleConstants", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Selector", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Value", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Rule", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "GraphicNode", "org.graphstream.ui.graphicGraph" ], [ "StyleGroup", "org.graphstream.ui.graphicGraph" ], [ "GraphPosLengthUtils", "org.graphstream.ui.graphicGraph" ], [ "GraphicEdge", "org.graphstream.ui.graphicGraph" ], [ "GraphicElementChangeListener", "org.graphstream.ui.graphicGraph" ], [ "GraphicGraph", "org.graphstream.ui.graphicGraph" ], [ "StyleGroupSet", "org.graphstream.ui.graphicGraph" ], [ "GraphicSprite", "org.graphstream.ui.graphicGraph" ], [ "GraphicElement", "org.graphstream.ui.graphicGraph" ], [ "VerboseSink", "org.graphstream.util" ], [ "GraphListeners", "org.graphstream.util" ], [ "Environment", "org.graphstream.util" ], [ "GraphDiff", "org.graphstream.util" ], [ "Filters", "org.graphstream.util" ], [ "FilteredEdgeIterator", "org.graphstream.util" ], [ "Parser", "org.graphstream.util.parser" ], [ "ParserFactory", "org.graphstream.util.parser" ], [ "TokenMgrError", "org.graphstream.util.parser" ], [ "ParseException", "org.graphstream.util.parser" ], [ "SimpleCharStream", "org.graphstream.util.parser" ], [ "Token", "org.graphstream.util.parser" ], [ "ISODateIO", "org.graphstream.util.time" ], [ "ISODateComponent", "org.graphstream.util.time" ], [ "FilteredNodeIterator", "org.graphstream.util" ], [ "FixedArrayList", "org.graphstream.util.set" ], [ "StepCounter", "org.graphstream.util" ], [ "GraphSpells", "org.graphstream.util.cumulative" ], [ "CumulativeAttributes", "org.graphstream.util.cumulative" ], [ "CumulativeSpells", "org.graphstream.util.cumulative" ], [ "Filter", "org.graphstream.util" ], [ "PipeAdapter", "org.graphstream.stream" ], [ "GraphParseException", "org.graphstream.stream" ], [ "ElementSink", "org.graphstream.stream" ], [ "URLSource", "org.graphstream.stream.net" ], [ "HTTPSource", "org.graphstream.stream.net" ], [ "SourceAdapter", "org.graphstream.stream" ], [ "AttributeSink", "org.graphstream.stream" ], [ "GMLParserConstants", "org.graphstream.stream.file.gml" ], [ "GMLParserTokenManager", "org.graphstream.stream.file.gml" ], [ "GMLContext", "org.graphstream.stream.file.gml" ], [ "Graphics", "org.graphstream.stream.file.gml" ], [ "KeyValues", "org.graphstream.stream.file.gml" ], [ "GMLParser", "org.graphstream.stream.file.gml" ], [ "FileSinkGraphML", "org.graphstream.stream.file" ], [ "TLPParserConstants", "org.graphstream.stream.file.tlp" ], [ "TLPParser", "org.graphstream.stream.file.tlp" ], [ "TLPParserTokenManager", "org.graphstream.stream.file.tlp" ], [ "FileSinkFactory", "org.graphstream.stream.file" ], [ "FileSourceEdge", "org.graphstream.stream.file" ], [ "FileSinkBase", "org.graphstream.stream.file" ], [ "FileSinkTikZ", "org.graphstream.stream.file" ], [ "FileSourceGEXF", "org.graphstream.stream.file" ], [ "DOTParser", "org.graphstream.stream.file.dot" ], [ "DOTParserConstants", "org.graphstream.stream.file.dot" ], [ "DOTParserTokenManager", "org.graphstream.stream.file.dot" ], [ "FileSink", "org.graphstream.stream.file" ], [ "PajekContext", "org.graphstream.stream.file.pajek" ], [ "Graphics", "org.graphstream.stream.file.pajek" ], [ "NodeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeMatrix", "org.graphstream.stream.file.pajek" ], [ "PajekParserTokenManager", "org.graphstream.stream.file.pajek" ], [ "PajekParserConstants", "org.graphstream.stream.file.pajek" ], [ "FileSourceXML", "org.graphstream.stream.file" ], [ "FileSinkBaseFiltered", "org.graphstream.stream.file" ], [ "FileSinkDOT", "org.graphstream.stream.file" ], [ "FileSourceParser", "org.graphstream.stream.file" ], [ "FileSinkDGSFiltered", "org.graphstream.stream.file" ], [ "FileSourceDOT", "org.graphstream.stream.file" ], [ "FileSourceDGS1And2", "org.graphstream.stream.file" ], [ "FileSourceGraphML", "org.graphstream.stream.file" ], [ "FileSourceFactory", "org.graphstream.stream.file" ], [ "FileSinkImages", "org.graphstream.stream.file" ], [ "FileSinkDynamicGML", "org.graphstream.stream.file" ], [ "FileSinkSVG", "org.graphstream.stream.file" ], [ "GEXFSpell", "org.graphstream.stream.file.gexf" ], [ "SmartXMLWriter", "org.graphstream.stream.file.gexf" ], [ "GEXFElement", "org.graphstream.stream.file.gexf" ], [ "GEXFEdges", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValues", "org.graphstream.stream.file.gexf" ], [ "GEXFEdge", "org.graphstream.stream.file.gexf" ], [ "GEXFSpells", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValue", "org.graphstream.stream.file.gexf" ], [ "GEXFNodes", "org.graphstream.stream.file.gexf" ], [ "GEXFNode", "org.graphstream.stream.file.gexf" ], [ "GEXFMeta", "org.graphstream.stream.file.gexf" ], [ "GEXFAttributes", "org.graphstream.stream.file.gexf" ], [ "GEXF", "org.graphstream.stream.file.gexf" ], [ "GEXFGraph", "org.graphstream.stream.file.gexf" ], [ "GEXFAttribute", "org.graphstream.stream.file.gexf" ], [ "OldFileSourceDGS", "org.graphstream.stream.file.dgs" ], [ "DGSParser", "org.graphstream.stream.file.dgs" ], [ "FileSourceBase", "org.graphstream.stream.file" ], [ "FileSinkGML", "org.graphstream.stream.file" ], [ "FileSourceDGS", "org.graphstream.stream.file" ], [ "FileSinkDGSUtility", "org.graphstream.stream.file" ], [ "FileSourceTLP", "org.graphstream.stream.file" ], [ "FileSinkSVG2", "org.graphstream.stream.file" ], [ "FileSource", "org.graphstream.stream.file" ], [ "FileSourceNCol", "org.graphstream.stream.file" ], [ "FileSourcePajek", "org.graphstream.stream.file" ], [ "FileSourceGPX", "org.graphstream.stream.file" ], [ "FileSourceLGL", "org.graphstream.stream.file" ], [ "FileSinkGEXF2", "org.graphstream.stream.file" ], [ "FileSourceGML", "org.graphstream.stream.file" ], [ "FileSinkGEXF", "org.graphstream.stream.file" ], [ "FileSinkDGS", "org.graphstream.stream.file" ], [ "ProxyPipe", "org.graphstream.stream" ], [ "Sink", "org.graphstream.stream" ], [ "Timeline", "org.graphstream.stream" ], [ "Pipe", "org.graphstream.stream" ], [ "SinkAdapter", "org.graphstream.stream" ], [ "Replayable", "org.graphstream.stream" ], [ "Source", "org.graphstream.stream" ], [ "AnnotatedSink", "org.graphstream.stream" ], [ "GraphReplay", "org.graphstream.stream" ], [ "AttributePipe", "org.graphstream.stream" ], [ "SinkTime", "org.graphstream.stream.sync" ], [ "SourceTime", "org.graphstream.stream.sync" ], [ "PipeBase", "org.graphstream.stream" ], [ "ThreadProxyPipe", "org.graphstream.stream.thread" ], [ "ThreadProxyPipeOld", "org.graphstream.stream.thread" ], [ "RMISource", "org.graphstream.stream.rmi" ], [ "RMIAdapterOut", "org.graphstream.stream.rmi" ], [ "RMISink", "org.graphstream.stream.rmi" ], [ "RMIAdapterIn", "org.graphstream.stream.rmi" ], [ "SourceBase", "org.graphstream.stream" ], [ "NetStreamDecoder", "org.graphstream.stream.netstream" ], [ "NetStreamReceiver", "org.graphstream.stream.netstream" ], [ "NetStreamConstants", "org.graphstream.stream.netstream" ], [ "NetStreamSender", "org.graphstream.stream.netstream" ], [ "DefaultNetStreamDecoder", "org.graphstream.stream.netstream" ], [ "Base64", "org.graphstream.stream.netstream.packing" ], [ "NetStreamUnpacker", "org.graphstream.stream.netstream.packing" ], [ "Base64Packer", "org.graphstream.stream.netstream.packing" ], [ "Base64Unpacker", "org.graphstream.stream.netstream.packing" ], [ "NetStreamPacker", "org.graphstream.stream.netstream.packing" ], [ "AttributePredicate", "org.graphstream.stream" ], [ "Element", "org.graphstream.graph" ], [ "Node", "org.graphstream.graph" ], [ "BreadthFirstIterator", "org.graphstream.graph" ], [ "Graph", "org.graphstream.graph" ], [ "EdgeRejectedException", "org.graphstream.graph" ], [ "CompoundAttribute", "org.graphstream.graph" ], [ "Structure", "org.graphstream.graph" ], [ "DepthFirstIterator", "org.graphstream.graph" ], [ "NullAttributeException", "org.graphstream.graph" ], [ "IdAlreadyInUseException", "org.graphstream.graph" ], [ "EdgeFactory", "org.graphstream.graph" ], [ "ElementNotFoundException", "org.graphstream.graph" ], [ "OneAttributeElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListNode", "org.graphstream.graph.implementations" ], [ "SingleNode", "org.graphstream.graph.implementations" ], [ "AbstractElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListGraph", "org.graphstream.graph.implementations" ], [ "AbstractNode", "org.graphstream.graph.implementations" ], [ "DefaultGraph", "org.graphstream.graph.implementations" ], [ "MultiGraph", "org.graphstream.graph.implementations" ], [ "Graphs", "org.graphstream.graph.implementations" ], [ "SingleGraph", "org.graphstream.graph.implementations" ], [ "MultiNode", "org.graphstream.graph.implementations" ], [ "AbstractGraph", "org.graphstream.graph.implementations" ], [ "AbstractEdge", "org.graphstream.graph.implementations" ], [ "GraphFactory", "org.graphstream.graph" ], [ "NodeFactory", "org.graphstream.graph" ], [ "Edge", "org.graphstream.graph" ], [ "Path", "org.graphstream.graph" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "gradientInArea", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)" ], [ "linearGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)" ], [ "createFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static float[] createFractions(Style style)" ], [ "createColors", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static Color[] createColors(Style style)" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "public static ImageCache defaultImageCache()" ], [ "generateStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "public static Stroke generateStroke(Style style, GraphMetrics metrics)" ], [ "generatePlainStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)" ], [ "generateDotsStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)" ], [ "generateDashesStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache()" ], [ "newLayoutAlgorithm", "org.graphstream.ui.layout", "Layouts", "public static Layout newLayoutAlgorithm()" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static double eval(double x0, double x1, double x2, double x3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static double derivative(double x0, double x1, double x2, double x3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "newGraphRenderer", "org.graphstream.ui.view", "Viewer", "public static GraphRenderer newGraphRenderer()" ], [ "getPositionValue", "org.graphstream.ui.spriteManager", "SpriteManager", "protected static Values getPositionValue(Object value)" ], [ "convertColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Color convertColor(Object anyValue)" ], [ "convertLabel", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static String convertLabel(Object value)" ], [ "convertWidth", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static float convertWidth(Object value)" ], [ "convertValue", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Value convertValue(Object value)" ], [ "convertUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Units convertUnit(String unit)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Graph graph, String id)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Graph graph, String id)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Node node)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Node node)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Graph graph, String id)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Edge edge)" ], [ "getGlobalEnvironment", "org.graphstream.util", "Environment", "public static Environment getGlobalEnvironment()" ], [ "falseFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> falseFilter()" ], [ "trueFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> trueFilter()" ], [ "byAttributeFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)" ], [ "separateNodeAndEdgeFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)" ], [ "byExtremitiesFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)" ], [ "byIdFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byIdFilter(String idPattern)" ], [ "isContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)" ], [ "isIdContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)" ], [ "and", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)" ], [ "or", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)" ], [ "xor", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)" ], [ "not", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> not(Filter<T> f)" ], [ "addEscapes", "org.graphstream.util.parser", "TokenMgrError", "protected static final String addEscapes(String str)" ], [ "LexicalError", "org.graphstream.util.parser", "TokenMgrError", "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)" ], [ "add_escapes", "org.graphstream.util.parser", "ParseException", "static String add_escapes(String str)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind, String image)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind)" ], [ "countStepInFile", "org.graphstream.util", "StepCounter", "public static int countStepInFile(String path) throws IOException" ], [ "GET", "org.graphstream.stream.net", "HTTPSource", "protected static HashMap<String, Object> GET(HttpExchange ex)" ], [ "sinkFor", "org.graphstream.stream.file", "FileSinkFactory", "public static FileSink sinkFor(String filename)" ], [ "formatId", "org.graphstream.stream.file", "FileSinkTikZ", "protected static String formatId(String id)" ], [ "getInt", "org.graphstream.stream.file.pajek", "PajekContext", "protected static int getInt(Token nb) throws ParseException" ], [ "getReal", "org.graphstream.stream.file.pajek", "PajekContext", "protected static double getReal(Token nb) throws ParseException" ], [ "toColorValue", "org.graphstream.stream.file.pajek", "PajekContext", "public static String toColorValue(Token R, Token G, Token B) throws ParseException" ], [ "sourceFor", "org.graphstream.stream.file", "FileSourceFactory", "public static FileSource sourceFor(String fileName) throws IOException" ], [ "getXMLRootElement", "org.graphstream.stream.file", "FileSourceFactory", "public static String getXMLRootElement(String fileName) throws IOException" ], [ "formatStringForQuoting", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String formatStringForQuoting(String str)" ], [ "attributeString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String attributeString(String key, Object value, boolean remove)" ], [ "arrayString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String arrayString(Object value)" ], [ "valueString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String valueString(Object value)" ], [ "hashToString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String hashToString(HashMap<?, ?> hash)" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source)" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s, int options) throws java.io.IOException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decodeFromFile(String filename) throws java.io.IOException" ], [ "encodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeFromFile(String filename) throws java.io.IOException" ], [ "unmutableGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph unmutableGraph(Graph g)" ], [ "synchronizedGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph synchronizedGraph(Graph g)" ], [ "merge", "org.graphstream.graph.implementations", "Graphs", "public static Graph merge(Graph... graphs)" ], [ "clone", "org.graphstream.graph.implementations", "Graphs", "public static Graph clone(Graph g)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "version16", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static boolean version16 = false;" ], [ "predefFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[][] predefFractions = new float[11][];" ], [ "predefFractions2", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions2 = { 0f, 1f };" ], [ "predefFractions3", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions3 = { 0f, 0.5f, 1f };" ], [ "predefFractions4", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };" ], [ "predefFractions5", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };" ], [ "predefFractions6", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };" ], [ "predefFractions7", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };" ], [ "predefFractions8", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };" ], [ "predefFractions9", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };" ], [ "predefFractions10", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "protected static ImageCache defaultImageCache;" ], [ "dots", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dots = { 1f, 1f };" ], [ "dashes", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dashes = { 3f, 3f };" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache;" ], [ "NULL_POINT2", "org.graphstream.ui.geom", "Point2", "public static final Point2 NULL_POINT2 = new Point2(0, 0);" ], [ "NULL_POINT3", "org.graphstream.ui.geom", "Point3", "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);" ], [ "DEFAULT_VIEW_ID", "org.graphstream.ui.view", "Viewer", "public static String DEFAULT_VIEW_ID = \"defaultView\";" ], [ "jjbitVec0", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };" ], [ "jjstrLiteralImages", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };" ], [ "lexStateNames", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };" ], [ "jjtoSkip", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };" ], [ "colorMap", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static HashMap<String,Color> colorMap;" ], [ "sharpColor1", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor1;" ], [ "sharpColor2", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor2;" ], [ "cssColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColor;" ], [ "cssColorA", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColorA;" ], [ "awtColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern awtColor;" ], [ "hexaColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern hexaColor;" ], [ "numberUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern numberUnit;" ], [ "number", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern number;" ], [ "acceptedAttribute", "org.graphstream.ui.graphicGraph", "GraphicElement", "protected static Pattern acceptedAttribute;" ], [ "DEFAULT_AN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_CNA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_AE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";" ], [ "DEFAULT_CEA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CEC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CER_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";" ], [ "DEFAULT_CGA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_CL_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";" ], [ "DEFAULT_ST_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";" ], [ "GLOBAL_ENV", "org.graphstream.util", "Environment", "public static Environment GLOBAL_ENV;" ], [ "LEXICAL_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int LEXICAL_ERROR = 0;" ], [ "STATIC_LEXER_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int STATIC_LEXER_ERROR = 1;" ], [ "INVALID_LEXICAL_STATE", "org.graphstream.util.parser", "TokenMgrError", "public static final int INVALID_LEXICAL_STATE = 2;" ], [ "LOOP_DETECTED", "org.graphstream.util.parser", "TokenMgrError", "public static final int LOOP_DETECTED = 3;" ], [ "staticFlag", "org.graphstream.util.parser", "SimpleCharStream", "public static final boolean staticFlag = false;" ], [ "ABBREVIATED_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");" ], [ "FULL_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");" ], [ "ABBREVIATED_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");" ], [ "FULL_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");" ], [ "LOCALE_DATE_AND_TIME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);" ], [ "CENTURY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");" ], [ "DAY_OF_MONTH_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");" ], [ "DATE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");" ], [ "DAY_OF_MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");" ], [ "DATE_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");" ], [ "WEEK_BASED_YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "WEEK_BASED_YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "ABBREVIATED_MONTH_NAME_ALIAS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");" ], [ "HOUR_OF_DAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");" ], [ "HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");" ], [ "DAY_OF_YEAR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");" ], [ "MILLISECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");" ], [ "EPOCH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent EPOCH = new EpochComponent();" ], [ "MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");" ], [ "MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");" ], [ "NEW_LINE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");" ], [ "AM_PM", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent AM_PM = new AMPMComponent();" ], [ "LOCALE_CLOCK_TIME_12_HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");" ], [ "HOUR_AND_MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");" ], [ "SECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");" ], [ "TABULATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");" ], [ "TIME_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");" ], [ "DAY_OF_WEEK_1_7", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");" ], [ "WEEK_OF_YEAR_FROM_SUNDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");" ], [ "WEEK_NUMBER_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");" ], [ "DAY_OF_WEEK_0_6", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");" ], [ "WEEK_OF_YEAR_FROM_MONDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");" ], [ "LOCALE_DATE_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");" ], [ "LOCALE_TIME_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");" ], [ "YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "UTC_OFFSET", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();" ], [ "LOCALE_TIME_ZONE_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");" ], [ "PERCENT", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");" ], [ "jjbitVec0", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoToken = { 0xff01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoSkip = { 0x1eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoToken = { 0xffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "XYZ_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String XYZ_ATTR = \"xyz\";" ], [ "WIDTH_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String WIDTH_ATTR = \"ui.tikz.width\";" ], [ "HEIGHT_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String HEIGHT_ATTR = \"ui.tikz.height\";" ], [ "DEFAULT_WIDTH", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_WIDTH = 10;" ], [ "DEFAULT_HEIGHT", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_HEIGHT = 10;" ], [ "DISPLAY_MIN_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;" ], [ "DISPLAY_MAX_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;" ], [ "jjbitVec0", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };" ], [ "lexStateNames", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoToken = { 0x3ffffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoToken = { 0x3fffffffffffc9L };" ], [ "jjtoSkip", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoSkip = { 0x6L };" ], [ "XMLNS", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";" ], [ "XMLNS_XSI", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";" ], [ "XMLNS_SL", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";" ], [ "XMLNS_VIZ", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";" ], [ "VERSION", "org.graphstream.stream.file.gexf", "GEXF", "public static final String VERSION = \"1.2\";" ], [ "BUFFER_SIZE", "org.graphstream.stream.file.dgs", "DGSParser", "protected static final int BUFFER_SIZE = 4096;" ], [ "ARRAY_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_OPEN = '{';" ], [ "ARRAY_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_CLOSE = '}';" ], [ "MAP_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_OPEN = '[';" ], [ "MAP_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_CLOSE = ']';" ], [ "gradientId", "org.graphstream.stream.file", "FileSinkSVG2", "static int gradientId = 0;" ], [ "gradientId", "org.graphstream.stream.file", "SVGStyle", "static int gradientId = 0;" ], [ "TIME_PREFIX", "org.graphstream.stream", "Timeline", "public static final String TIME_PREFIX = \"time\";" ], [ "SYNC_DISABLE_KEY", "org.graphstream.stream.sync", "SinkTime", "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";" ], [ "disableSync", "org.graphstream.stream.sync", "SinkTime", "protected static final boolean disableSync;" ], [ "LIGHT_YELLOW", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String LIGHT_YELLOW = \"\u001B[33;1m\";" ], [ "RESET", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String RESET = \"\u001B[0m\";" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "IncomingBuffer", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "EVENT_GETVERSION", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_GETVERSION = 0x00;" ], [ "EVENT_START", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_START = 0x01;" ], [ "EVENT_END", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_END = 0x02;" ], [ "EVENT_ADD_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE = 0x10;" ], [ "EVENT_DEL_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE = 0x11;" ], [ "EVENT_ADD_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE = 0x12;" ], [ "EVENT_DEL_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE = 0x13;" ], [ "EVENT_STEP", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_STEP = 0x14;" ], [ "EVENT_CLEARED", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CLEARED = 0x15;" ], [ "EVENT_ADD_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_GRAPH_ATTR = 0x16;" ], [ "EVENT_CHG_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_GRAPH_ATTR = 0x17;" ], [ "EVENT_DEL_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_GRAPH_ATTR = 0x18;" ], [ "EVENT_ADD_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE_ATTR = 0x19;" ], [ "EVENT_CHG_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_NODE_ATTR = 0x1a;" ], [ "EVENT_DEL_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE_ATTR = 0x1b;" ], [ "EVENT_ADD_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE_ATTR = 0x1c;" ], [ "EVENT_CHG_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_EDGE_ATTR = 0x1d;" ], [ "EVENT_DEL_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE_ATTR = 0x1e;" ], [ "TYPE_UNKNOWN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_UNKNOWN = 0x00;" ], [ "TYPE_BOOLEAN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN = 0x50;" ], [ "TYPE_BOOLEAN_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN_ARRAY = 0x51;" ], [ "TYPE_BYTE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE = 0x52;" ], [ "TYPE_BYTE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE_ARRAY = 0x53;" ], [ "TYPE_SHORT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT = 0x54;" ], [ "TYPE_SHORT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT_ARRAY = 0x55;" ], [ "TYPE_INT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT = 0x56;" ], [ "TYPE_INT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT_ARRAY = 0x57;" ], [ "TYPE_LONG", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG = 0x58;" ], [ "TYPE_LONG_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG_ARRAY = 0x59;" ], [ "TYPE_FLOAT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT = 0x5a;" ], [ "TYPE_FLOAT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT_ARRAY = 0x5b;" ], [ "TYPE_DOUBLE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE = 0x5c;" ], [ "TYPE_DOUBLE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE_ARRAY = 0x5d;" ], [ "TYPE_STRING", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_STRING = 0x5e;" ], [ "TYPE_RAW", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_RAW = 0x5f;" ], [ "TYPE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static byte TYPE_ARRAY = 0x60;" ], [ "TYPE_NULL", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_NULL = 0x61;" ], [ "COMMAND", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int COMMAND = 0x70;" ], [ "NO_OPTIONS", "org.graphstream.stream.netstream.packing", "Base64", "public final static int NO_OPTIONS = 0;" ], [ "ENCODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ENCODE = 1;" ], [ "DECODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DECODE = 0;" ], [ "GZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int GZIP = 2;" ], [ "DONT_GUNZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DONT_GUNZIP = 4;" ], [ "DO_BREAK_LINES", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DO_BREAK_LINES = 8;" ], [ "URL_SAFE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int URL_SAFE = 16;" ], [ "ORDERED", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ORDERED = 32;" ], [ "INITIAL_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final int INITIAL_EDGE_CAPACITY;" ], [ "GROWTH_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final double GROWTH_FACTOR = 1.1;" ], [ "I_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char I_EDGE = 0;" ], [ "IO_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char IO_EDGE = 1;" ], [ "O_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char O_EDGE = 2;" ], [ "GROW_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final double GROW_FACTOR = 1.1;" ], [ "DEFAULT_NODE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_NODE_CAPACITY = 128;" ], [ "DEFAULT_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_EDGE_CAPACITY = 1024;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "element", "org.graphstream.graph", "Element" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getGroupCount", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public int getGroupCount()" ], [ "containsEdge", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public boolean containsEdge(String id)" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "addElement_", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected StyleGroup addElement_(Element element)" ], [ "containsGraph", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public boolean containsGraph(String id)" ], [ "getStyleFor", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup getStyleFor(Graph graph)" ], [ "containsSprite", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public boolean containsSprite(String id)" ], [ "addElement", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup addElement(Element element)" ], [ "getStyleFor", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup getStyleFor(Node node)" ], [ "groups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<? extends StyleGroup> groups()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "nodes", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<? extends Node> nodes()" ], [ "getGroupIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<? extends StyleGroup> getGroupIterator()" ], [ "getSpriteIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<? extends GraphicSprite> getSpriteIterator()" ], [ "getShadowSet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public ShadowSet getShadowSet()" ], [ "areEmptyGroupRemoved", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public boolean areEmptyGroupRemoved()" ], [ "containsNode", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public boolean containsNode(String id)" ], [ "toString", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public String toString()" ], [ "getEdge", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Edge getEdge(String id)" ], [ "getEdgeCount", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public int getEdgeCount()" ], [ "sprites", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<? extends GraphicSprite> sprites()" ], [ "getSpriteCount", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public int getSpriteCount()" ], [ "getSprite", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public GraphicSprite getSprite(String id)" ], [ "getElement", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected Element getElement(String id, Map<String, String> elt2grp)" ], [ "getGraphIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<? extends Graph> getGraphIterator()" ], [ "getNode", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Node getNode(String id)" ], [ "getShadowIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<StyleGroup> getShadowIterator()" ], [ "getElementGroup", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public String getElementGroup(Element element)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "getStyleFor", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup getStyleFor(Edge edge)" ], [ "zIndex", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<HashSet<StyleGroup>> zIndex()" ], [ "getEdgeIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<? extends Edge> getEdgeIterator()" ], [ "getZIndex", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public ZIndex getZIndex()" ], [ "addGroup", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected StyleGroup addGroup(String id, ArrayList<Rule> rules, Element firstElement)" ], [ "edges", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<? extends Edge> edges()" ], [ "shadows", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<StyleGroup> shadows()" ], [ "getStyleForElement", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup getStyleForElement(Element element)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "getGroup", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup getGroup(String groupId)" ], [ "getGraph", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Graph getGraph(String id)" ], [ "getNodeCount", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public int getNodeCount()" ], [ "getNodeIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<? extends Node> getNodeIterator()" ], [ "graphs", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<? extends Graph> graphs()" ], [ "getZIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<HashSet<StyleGroup>> getZIterator()" ], [ "getStyleFor", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup getStyleFor(GraphicSprite sprite)" ], [ "getIndex", "org.graphstream.graph", "Element", "public abstract int getIndex()" ], [ "hasArray", "org.graphstream.graph", "Element", "public abstract boolean hasArray(String arg0)" ], [ "getVector", "org.graphstream.graph", "Element", "public abstract ArrayList<? extends Number> getVector(String arg0)" ], [ "hasHash", "org.graphstream.graph", "Element", "public abstract boolean hasHash(String arg0)" ], [ "getAttributeKeySet", "org.graphstream.graph", "Element", "public abstract Collection<String> getAttributeKeySet()" ], [ "getEachAttributeKey", "org.graphstream.graph", "Element", "public abstract Iterable<String> getEachAttributeKey()" ], [ "getArray", "org.graphstream.graph", "Element", "public abstract Object[] getArray(String arg0)" ], [ "getId", "org.graphstream.graph", "Element", "public abstract String getId()" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)" ], [ "getAttributeKeyIterator", "org.graphstream.graph", "Element", "public abstract Iterator<String> getAttributeKeyIterator()" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "public abstract transient <T> T getFirstAttributeOf(String[] arg0)" ], [ "hasAttribute", "org.graphstream.graph", "Element", "public abstract boolean hasAttribute(String arg0)" ], [ "hasLabel", "org.graphstream.graph", "Element", "public abstract boolean hasLabel(String arg0)" ], [ "getNumber", "org.graphstream.graph", "Element", "public abstract double getNumber(String arg0)" ], [ "hasAttribute", "org.graphstream.graph", "Element", "public abstract boolean hasAttribute(String arg0, Class<?> arg1)" ], [ "getHash", "org.graphstream.graph", "Element", "public abstract HashMap<?, ?> getHash(String arg0)" ], [ "getAttributeCount", "org.graphstream.graph", "Element", "public abstract int getAttributeCount()" ], [ "getAttribute", "org.graphstream.graph", "Element", "public abstract <T> T getAttribute(String arg0)" ], [ "hasVector", "org.graphstream.graph", "Element", "public abstract boolean hasVector(String arg0)" ], [ "getAttribute", "org.graphstream.graph", "Element", "public abstract <T> T getAttribute(String arg0, Class<T> arg1)" ], [ "getLabel", "org.graphstream.graph", "Element", "public abstract CharSequence getLabel(String arg0)" ], [ "hasNumber", "org.graphstream.graph", "Element", "public abstract boolean hasNumber(String arg0)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "replaceFirst", "java.lang", "String", "public String replaceFirst(String arg0, String arg1)" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase()" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0, int arg1)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0)" ], [ "replaceAll", "java.lang", "String", "public String replaceAll(String arg0, String arg1)" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase(Locale arg0)" ], [ "lines", "java.lang", "String", "public Stream<String> lines()" ], [ "compareToIgnoreCase", "java.lang", "String", "public int compareToIgnoreCase(String arg0)" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase()" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0, int arg1)" ], [ "compareTo", "java.lang", "String", "public int compareTo(String arg0)" ], [ "offsetByCodePoints", "java.lang", "String", "public int offsetByCodePoints(int arg0, int arg1)" ], [ "matches", "java.lang", "String", "public boolean matches(String arg0)" ], [ "charAt", "java.lang", "String", "public char charAt(int arg0)" ], [ "split", "java.lang", "String", "public String[] split(String arg0)" ], [ "strip", "java.lang", "String", "public String strip()" ], [ "codePointCount", "java.lang", "String", "public int codePointCount(int arg0, int arg1)" ], [ "trim", "java.lang", "String", "public String trim()" ], [ "codePointBefore", "java.lang", "String", "public int codePointBefore(int arg0)" ], [ "repeat", "java.lang", "String", "public String repeat(int arg0)" ], [ "codePoints", "java.lang", "String", "public IntStream codePoints()" ], [ "endsWith", "java.lang", "String", "public boolean endsWith(String arg0)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(Charset arg0)" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(CharSequence arg0)" ], [ "isBlank", "java.lang", "String", "public boolean isBlank()" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0)" ], [ "contains", "java.lang", "String", "public boolean contains(CharSequence arg0)" ], [ "chars", "java.lang", "String", "public IntStream chars()" ], [ "intern", "java.lang", "String", "public native String intern()" ], [ "transform", "java.lang", "String", "public <R> R transform(Function<? super String, ? extends R> arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0)" ], [ "split", "java.lang", "String", "public String[] split(String arg0, int arg1)" ], [ "isLatin1", "java.lang", "String", "boolean isLatin1()" ], [ "replace", "java.lang", "String", "public String replace(char arg0, char arg1)" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(StringBuffer arg0)" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0)" ], [ "subSequence", "java.lang", "String", "public CharSequence subSequence(int arg0, int arg1)" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)" ], [ "describeConstable", "java.lang", "String", "public Optional<String> describeConstable()" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes()" ], [ "stripIndent", "java.lang", "String", "public String stripIndent()" ], [ "codePointAt", "java.lang", "String", "public int codePointAt(int arg0)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(String arg0) throws UnsupportedEncodingException" ], [ "length", "java.lang", "String", "public int length()" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0, int arg1)" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0)" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase(Locale arg0)" ], [ "formatted", "java.lang", "String", "public String formatted(Object[] arg0)" ], [ "coder", "java.lang", "String", "byte coder()" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0, int arg1)" ], [ "translateEscapes", "java.lang", "String", "public String translateEscapes()" ], [ "stripTrailing", "java.lang", "String", "public String stripTrailing()" ], [ "equals", "java.lang", "String", "public boolean equals(Object arg0)" ], [ "substring", "java.lang", "String", "public String substring(int arg0, int arg1)" ], [ "isEmpty", "java.lang", "String", "public boolean isEmpty()" ], [ "hashCode", "java.lang", "String", "public int hashCode()" ], [ "equalsIgnoreCase", "java.lang", "String", "public boolean equalsIgnoreCase(String arg0)" ], [ "value", "java.lang", "String", "byte[] value()" ], [ "replace", "java.lang", "String", "public String replace(CharSequence arg0, CharSequence arg1)" ], [ "resolveConstantDesc", "java.lang", "String", "public String resolveConstantDesc(MethodHandles.Lookup arg0)" ], [ "concat", "java.lang", "String", "public String concat(String arg0)" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0, int arg1)" ], [ "indent", "java.lang", "String", "public String indent(int arg0)" ], [ "substring", "java.lang", "String", "public String substring(int arg0)" ], [ "stripLeading", "java.lang", "String", "public String stripLeading()" ], [ "toCharArray", "java.lang", "String", "public char[] toCharArray()" ], [ "toString", "java.lang", "String", "public String toString()" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)" ], [ "compareTo", "java.lang", "Comparable", "public abstract int compareTo(T arg0)" ], [ "length", "java.lang", "CharSequence", "public abstract int length()" ], [ "isEmpty", "java.lang", "CharSequence", "public default boolean isEmpty()" ], [ "chars", "java.lang", "CharSequence", "public default IntStream chars()" ], [ "subSequence", "java.lang", "CharSequence", "public abstract CharSequence subSequence(int arg0, int arg1)" ], [ "codePoints", "java.lang", "CharSequence", "public default IntStream codePoints()" ], [ "toString", "java.lang", "CharSequence", "public abstract String toString()" ], [ "charAt", "java.lang", "CharSequence", "public abstract char charAt(int arg0)" ], [ "describeConstable", "java.lang.constant", "Constable", "public abstract Optional<? extends ConstantDesc> describeConstable()" ], [ "resolveConstantDesc", "java.lang.constant", "ConstantDesc", "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "stylesheet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected StyleSheet stylesheet;" ], [ "groups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected final Map<String,StyleGroup> groups = new TreeMap<String, StyleGroup>();" ], [ "byNodeIdGroups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected final Map<String,String> byNodeIdGroups = new TreeMap<String, String>();" ], [ "byEdgeIdGroups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected final Map<String,String> byEdgeIdGroups = new TreeMap<String, String>();" ], [ "bySpriteIdGroups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected final Map<String,String> bySpriteIdGroups = new TreeMap<String, String>();" ], [ "byGraphIdGroups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected final Map<String,String> byGraphIdGroups = new TreeMap<String, String>();" ], [ "nodeSet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected NodeSet nodeSet = new NodeSet();" ], [ "edgeSet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected EdgeSet edgeSet = new EdgeSet();" ], [ "spriteSet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected SpriteSet spriteSet = new SpriteSet();" ], [ "graphSet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected GraphSet graphSet = new GraphSet();" ], [ "eventSet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected EventSet eventSet = new EventSet();" ], [ "zIndex", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected ZIndex zIndex = new ZIndex();" ], [ "shadow", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected ShadowSet shadow = new ShadowSet();" ], [ "removeEmptyGroups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected boolean removeEmptyGroups = true;" ], [ "listeners", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected ArrayList<StyleGroupListener> listeners = new ArrayList<StyleGroupListener>();" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 3252,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "gs-core-1.3",
  "packageName" : "org.graphstream.ui.graphicGraph",
  "className" : "StyleGroupSet",
  "javadocTag" : "@param graph The node to search for.",
  "methodJavadoc" : "    /**\n\t * Get the style of a given graph.\n\t * \n\t * @param graph\n\t *            The node to search for.\n\t * @return The graph style.\n\t */",
  "methodSourceCode" : "public StyleGroup getStyleFor(Graph graph){\n    String gid = byGraphIdGroups.get(graph.getId());\n    return groups.get(gid);\n}",
  "classJavadoc" : "/**\n * A set of style groups.\n * \n * <p>\n * This class is in charge or storing all the style groups and to update them.\n * Each time an element is added or removed the groups are updated. Each time\n * the style sheet changes the groups are updated.\n * </p>\n * \n * @author Antoine Dutot\n */",
  "classSourceCode" : "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign√©      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.ui.graphicGraph;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.TreeMap;\nimport org.graphstream.graph.Edge;\nimport org.graphstream.graph.Element;\nimport org.graphstream.graph.Graph;\nimport org.graphstream.graph.Node;\nimport org.graphstream.ui.graphicGraph.stylesheet.Rule;\nimport org.graphstream.ui.graphicGraph.stylesheet.Selector;\nimport org.graphstream.ui.graphicGraph.stylesheet.StyleConstants.ShadowMode;\nimport org.graphstream.ui.graphicGraph.stylesheet.StyleSheet;\nimport org.graphstream.ui.graphicGraph.stylesheet.StyleSheetListener;\n\n/**\n * A set of style groups.\n * \n * <p>\n * This class is in charge or storing all the style groups and to update them.\n * Each time an element is added or removed the groups are updated. Each time\n * the style sheet changes the groups are updated.\n * </p>\n * \n * @author Antoine Dutot\n */\npublic class StyleGroupSet implements StyleSheetListener {\n\t// Attribute\n\n\t/**\n\t * The style sheet.\n\t */\n\tprotected StyleSheet stylesheet;\n\n\t/**\n\t * All the groups indexed by their unique identifier.\n\t */\n\tprotected final Map<String, StyleGroup> groups = new TreeMap<String, StyleGroup>();\n\n\t/**\n\t * Allows to retrieve the group containing a node knowing the node id.\n\t */\n\tprotected final Map<String, String> byNodeIdGroups = new TreeMap<String, String>();\n\n\t/**\n\t * Allows to retrieve the group containing an edge knowing the node id.\n\t */\n\tprotected final Map<String, String> byEdgeIdGroups = new TreeMap<String, String>();\n\n\t/**\n\t * Allows to retrieve the group containing a sprite knowing the node id.\n\t */\n\tprotected final Map<String, String> bySpriteIdGroups = new TreeMap<String, String>();\n\n\t/**\n\t * Allows to retrieve the group containing a graph knowing the node id.\n\t */\n\tprotected final Map<String, String> byGraphIdGroups = new TreeMap<String, String>();\n\n\t/**\n\t * Virtual set of nodes. This set provides fake methods to make it appear as\n\t * a set of nodes whereas it only maps on the node style groups.\n\t */\n\tprotected NodeSet nodeSet = new NodeSet();\n\n\t/**\n\t * Virtual set of edges. This set provides fake methods to make it appear as\n\t * a set of edges whereas it only maps on the edge style groups.\n\t */\n\tprotected EdgeSet edgeSet = new EdgeSet();\n\n\t/**\n\t * Virtual set of sprites. This set provides fake methods to make it appear\n\t * as a set of sprites whereas it only maps on the sprite style groups.\n\t */\n\tprotected SpriteSet spriteSet = new SpriteSet();\n\n\t/**\n\t * Virtual set of graphs. This set provides fake methods to make it appear\n\t * as a set of graphs whereas it only maps on the graph style groups.\n\t */\n\tprotected GraphSet graphSet = new GraphSet();\n\n\t/**\n\t * The set of events actually occurring.\n\t */\n\tprotected EventSet eventSet = new EventSet();\n\n\t/**\n\t * The groups sorted by their Z index.\n\t */\n\tprotected ZIndex zIndex = new ZIndex();\n\n\t/**\n\t * Set of groups that cast shadow.\n\t */\n\tprotected ShadowSet shadow = new ShadowSet();\n\n\t/**\n\t * Remove groups if they become empty?.\n\t */\n\tprotected boolean removeEmptyGroups = true;\n\n\t/**\n\t * Set of listeners.\n\t */\n\tprotected ArrayList<StyleGroupListener> listeners = new ArrayList<StyleGroupListener>();\n\n\t// Construction\n\n\t/**\n\t * New empty style group set, using the given style sheet to create style\n\t * groups. The group set installs itself as a listener of the style sheet.\n\t * So in order to completely stop using such a group, you must call\n\t * {@link #release()}.\n\t * \n\t * @param stylesheet\n\t *            The style sheet to use to create groups.\n\t */\n\tpublic StyleGroupSet(StyleSheet stylesheet) {\n\t\tthis.stylesheet = stylesheet;\n\n\t\tstylesheet.addListener(this);\n\t}\n\n\t// Access\n\n\t/**\n\t * Number of groups.\n\t * \n\t * @return The number of groups.\n\t */\n\tpublic int getGroupCount() {\n\t\treturn groups.size();\n\t}\n\n\t/**\n\t * Return a group by its unique identifier. The way group identifier are\n\t * constructed reflects their contents.\n\t * \n\t * @param groupId\n\t *            The group identifier.\n\t * @return The corresponding group or null if not found.\n\t */\n\tpublic StyleGroup getGroup(String groupId) {\n\t\treturn groups.get(groupId);\n\t}\n\n\t/**\n\t * Iterator on the set of groups in no particular order.\n\t * \n\t * @return An iterator on the group set.\n\t */\n\tpublic Iterator<? extends StyleGroup> getGroupIterator() {\n\t\treturn groups.values().iterator();\n\t}\n\n\t/**\n\t * Iterable set of groups elements, in no particular order.\n\t * \n\t * @return An iterable on the set of groups.\n\t */\n\tpublic Iterable<? extends StyleGroup> groups() {\n\t\treturn groups.values();\n\t}\n\n\t/**\n\t * Iterator on the Z index.\n\t * \n\t * @return The z index iterator.\n\t */\n\tpublic Iterator<HashSet<StyleGroup>> getZIterator() {\n\t\treturn zIndex.getIterator();\n\t}\n\n\t/**\n\t * Iterable set of \"subsets of groups\" sorted by Z level. Each subset of\n\t * groups is at the same Z level.\n\t * \n\t * @return The z levels.\n\t */\n\tpublic Iterable<HashSet<StyleGroup>> zIndex() {\n\t\treturn zIndex;\n\t}\n\n\t/**\n\t * Iterator on the style groups that cast a shadow.\n\t * \n\t * @return The shadow groups iterator.\n\t */\n\tpublic Iterator<StyleGroup> getShadowIterator() {\n\t\treturn shadow.getIterator();\n\t}\n\n\t/**\n\t * Iterable set of groups that cast shadow.\n\t * \n\t * @return All the groups that cast a shadow.\n\t */\n\tpublic Iterable<StyleGroup> shadows() {\n\t\treturn shadow;\n\t}\n\n\t/**\n\t * True if the set contains and styles the node whose identifier is given.\n\t * \n\t * @param id\n\t *            The node identifier.\n\t * @return True if the node is in this set.\n\t */\n\tpublic boolean containsNode(String id) {\n\t\treturn byNodeIdGroups.containsKey(id);\n\t}\n\n\t/**\n\t * True if the set contains and styles the edge whose identifier is given.\n\t * \n\t * @param id\n\t *            The edge identifier.\n\t * @return True if the edge is in this set.\n\t */\n\tpublic boolean containsEdge(String id) {\n\t\treturn byEdgeIdGroups.containsKey(id);\n\t}\n\n\t/**\n\t * True if the set contains and styles the sprite whose identifier is given.\n\t * \n\t * @param id\n\t *            The sprite identifier.\n\t * @return True if the sprite is in this set.\n\t */\n\tpublic boolean containsSprite(String id) {\n\t\treturn bySpriteIdGroups.containsKey(id);\n\t}\n\n\t/**\n\t * True if the set contains and styles the graph whose identifier is given.\n\t * \n\t * @param id\n\t *            The graph identifier.\n\t * @return True if the graph is in this set.\n\t */\n\tpublic boolean containsGraph(String id) {\n\t\treturn byGraphIdGroups.containsKey(id);\n\t}\n\n\t/**\n\t * Get an element.\n\t * \n\t * @param id\n\t *            The element id.\n\t * @param elt2grp\n\t *            The kind of element.\n\t * @return The element or null if not found.\n\t */\n\tprotected Element getElement(String id, Map<String, String> elt2grp) {\n\t\tString gid = elt2grp.get(id);\n\n\t\tif (gid != null) {\n\t\t\tStyleGroup group = groups.get(gid);\n\t\t\treturn group.getElement(id);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Get a node element knowing its identifier.\n\t * \n\t * @param id\n\t *            The node identifier.\n\t * @return The node if it is in this set, else null.\n\t */\n\tpublic Node getNode(String id) {\n\t\treturn (Node) getElement(id, byNodeIdGroups);\n\t}\n\n\t/**\n\t * Get an edge element knowing its identifier.\n\t * \n\t * @param id\n\t *            The edge identifier.\n\t * @return The edge if it is in this set, else null.\n\t */\n\tpublic Edge getEdge(String id) {\n\t\treturn (Edge) getElement(id, byEdgeIdGroups);\n\t}\n\n\t/**\n\t * Get a sprite element knowing its identifier.\n\t * \n\t * @param id\n\t *            The sprite identifier.\n\t * @return The sprite if it is in this set, else null.\n\t */\n\tpublic GraphicSprite getSprite(String id) {\n\t\treturn (GraphicSprite) getElement(id, bySpriteIdGroups);\n\t}\n\n\t/**\n\t * Get a graph element knowing its identifier.\n\t * \n\t * @param id\n\t *            The graph identifier.\n\t * @return The graph if it is in this set, else null.\n\t */\n\tpublic Graph getGraph(String id) {\n\t\treturn (Graph) getElement(id, byGraphIdGroups);\n\t}\n\n\t/**\n\t * The number of nodes referenced.\n\t * \n\t * @return The node count.\n\t */\n\tpublic int getNodeCount() {\n\t\treturn byNodeIdGroups.size();\n\t}\n\n\t/**\n\t * The number of edges referenced.\n\t * \n\t * @return The edge count.\n\t */\n\tpublic int getEdgeCount() {\n\t\treturn byEdgeIdGroups.size();\n\t}\n\n\t/**\n\t * The number of sprites referenced.\n\t * \n\t * @return The sprite count.\n\t */\n\tpublic int getSpriteCount() {\n\t\treturn bySpriteIdGroups.size();\n\t}\n\n\t/**\n\t * Iterator on the set of nodes.\n\t * \n\t * @return An iterator on all node elements contained in style groups.\n\t */\n\tpublic Iterator<? extends Node> getNodeIterator() {\n\t\treturn new ElementIterator<Node>(byNodeIdGroups);\n\t}\n\n\t/**\n\t * Iterator on the set of graphs.\n\t * \n\t * @return An iterator on all graph elements contained in style groups.\n\t */\n\tpublic Iterator<? extends Graph> getGraphIterator() {\n\t\treturn new ElementIterator<Graph>(byGraphIdGroups);\n\t}\n\n\t/**\n\t * Iterable set of nodes.\n\t * \n\t * @return The set of all nodes.\n\t */\n\tpublic Iterable<? extends Node> nodes() {\n\t\treturn nodeSet;\n\t}\n\n\t/**\n\t * Iterable set of graphs.\n\t * \n\t * @return The set of all graphs.\n\t */\n\tpublic Iterable<? extends Graph> graphs() {\n\t\treturn graphSet;\n\t}\n\n\t/**\n\t * Iterator on the set of edges.\n\t * \n\t * @return An iterator on all edge elements contained in style groups.\n\t */\n\tpublic Iterator<? extends Edge> getEdgeIterator() {\n\t\treturn new ElementIterator<Edge>(byEdgeIdGroups);\n\t}\n\n\t/**\n\t * Iterable set of edges.\n\t * \n\t * @return The set of all edges.\n\t */\n\tpublic Iterable<? extends Edge> edges() {\n\t\treturn edgeSet;\n\t}\n\n\t/**\n\t * Iterator on the set of sprite.\n\t * \n\t * @return An iterator on all sprite elements contained in style groups.\n\t */\n\tpublic Iterator<? extends GraphicSprite> getSpriteIterator() {\n\t\treturn new ElementIterator<GraphicSprite>(bySpriteIdGroups);\n\t}\n\n\t/**\n\t * Iterable set of sprites.\n\t * \n\t * @return The set of all sprites.\n\t */\n\tpublic Iterable<? extends GraphicSprite> sprites() {\n\t\treturn spriteSet;\n\t}\n\n\t/**\n\t * Retrieve the group identifier of an element knowing the element\n\t * identifier.\n\t * \n\t * @param element\n\t *            The element to search for.\n\t * @return Identifier of the group containing the element.\n\t */\n\tpublic String getElementGroup(Element element) {\n\t\tif (element instanceof Node) {\n\t\t\treturn byNodeIdGroups.get(element.getId());\n\t\t} else if (element instanceof Edge) {\n\t\t\treturn byEdgeIdGroups.get(element.getId());\n\t\t} else if (element instanceof GraphicSprite) {\n\t\t\treturn bySpriteIdGroups.get(element.getId());\n\t\t} else if (element instanceof Graph) {\n\t\t\treturn byGraphIdGroups.get(element.getId());\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"What ?\");\n\t\t}\n\t}\n\n\t/**\n\t * Get the style of an element.\n\t * \n\t * @param element\n\t *            The element to search for.\n\t * @return The style group of the element (which is also a style).\n\t */\n\tpublic StyleGroup getStyleForElement(Element element) {\n\t\tString gid = getElementGroup(element);\n\n\t\treturn groups.get(gid);\n\t}\n\n\t/**\n\t * Get the style of a given node.\n\t * \n\t * @param node\n\t *            The node to search for.\n\t * @return The node style.\n\t */\n\tpublic StyleGroup getStyleFor(Node node) {\n\t\tString gid = byNodeIdGroups.get(node.getId());\n\t\treturn groups.get(gid);\n\t}\n\n\t/**\n\t * Get the style of a given edge.\n\t * \n\t * @param edge\n\t *            The edge to search for.\n\t * @return The edge style.\n\t */\n\tpublic StyleGroup getStyleFor(Edge edge) {\n\t\tString gid = byEdgeIdGroups.get(edge.getId());\n\t\treturn groups.get(gid);\n\t}\n\n\t/**\n\t * Get the style of a given sprite.\n\t * \n\t * @param sprite\n\t *            The node to search for.\n\t * @return The sprite style.\n\t */\n\tpublic StyleGroup getStyleFor(GraphicSprite sprite) {\n\t\tString gid = bySpriteIdGroups.get(sprite.getId());\n\t\treturn groups.get(gid);\n\t}\n\n\t/**\n\t * Get the style of a given graph.\n\t * \n\t * @param graph\n\t *            The node to search for.\n\t * @return The graph style.\n\t */\n\tpublic StyleGroup getStyleFor(Graph graph) {\n\t\tString gid = byGraphIdGroups.get(graph.getId());\n\t\treturn groups.get(gid);\n\t}\n\n\t/**\n\t * True if groups are removed when becoming empty. This setting allows to\n\t * keep empty group when the set of elements is quite dynamic. This allows\n\t * to avoid recreting groups when an element appears and disappears\n\t * regularly.\n\t * \n\t * @return True if the groups are removed when empty.\n\t */\n\tpublic boolean areEmptyGroupRemoved() {\n\t\treturn removeEmptyGroups;\n\t}\n\n\t/**\n\t * The Z index object.\n\t * \n\t * @return The Z index.\n\t */\n\tpublic ZIndex getZIndex() {\n\t\treturn zIndex;\n\t}\n\n\t/**\n\t * The set of style groups that cast a shadow.\n\t * \n\t * @return The set of shadowed style groups.\n\t */\n\tpublic ShadowSet getShadowSet() {\n\t\treturn shadow;\n\t}\n\n\t// Command\n\n\t/**\n\t * Release any dependency to the style sheet.\n\t */\n\tpublic void release() {\n\t\tstylesheet.removeListener(this);\n\t}\n\n\t/**\n\t * Empties this style group set. The style sheet is listener is not removed,\n\t * use {@link #release()} to do that.\n\t */\n\tpublic void clear() {\n\t\tbyEdgeIdGroups.clear();\n\t\tbyNodeIdGroups.clear();\n\t\tbySpriteIdGroups.clear();\n\t\tbyGraphIdGroups.clear();\n\t\tgroups.clear();\n\t\tzIndex.clear();\n\t\tshadow.clear();\n\t}\n\n\t/**\n\t * Remove or keep groups that becomes empty, if true the groups are removed.\n\t * If this setting was set to false, and is now true, the group set is\n\t * purged of the empty groups.\n\t * \n\t * @param on\n\t *            If true the groups will be removed.\n\t */\n\tpublic void setRemoveEmptyGroups(boolean on) {\n\t\tif (removeEmptyGroups == false && on == true) {\n\t\t\tIterator<? extends StyleGroup> i = groups.values().iterator();\n\n\t\t\twhile (i.hasNext()) {\n\t\t\t\tStyleGroup g = i.next();\n\n\t\t\t\tif (g.isEmpty())\n\t\t\t\t\ti.remove();\n\t\t\t}\n\t\t}\n\n\t\tremoveEmptyGroups = on;\n\t}\n\n\tprotected StyleGroup addGroup(String id, ArrayList<Rule> rules,\n\t\t\tElement firstElement) {\n\t\tStyleGroup group = new StyleGroup(id, rules, firstElement, eventSet);\n\n\t\tgroups.put(id, group);\n\t\tzIndex.groupAdded(group);\n\t\tshadow.groupAdded(group);\n\n\t\treturn group;\n\t}\n\n\tprotected void removeGroup(StyleGroup group) {\n\t\tzIndex.groupRemoved(group);\n\t\tshadow.groupRemoved(group);\n\t\tgroups.remove(group.getId());\n\t\tgroup.release();\n\t}\n\n\t/**\n\t * Add an element and bind it to its style group. The group is created if\n\t * needed.\n\t * \n\t * @param element\n\t *            The element to add.\n\t * @return The style group where the element was added.\n\t */\n\tpublic StyleGroup addElement(Element element) {\n\t\tStyleGroup group = addElement_(element);\n\n\t\tfor (StyleGroupListener listener : listeners)\n\t\t\tlistener.elementStyleChanged(element, null, group);\n\n\t\treturn group;\n\t}\n\n\tprotected StyleGroup addElement_(Element element) {\n\t\tArrayList<Rule> rules = stylesheet.getRulesFor(element);\n\t\tString gid = stylesheet.getStyleGroupIdFor(element, rules);\n\t\tStyleGroup group = groups.get(gid);\n\n\t\tif (group == null)\n\t\t\tgroup = addGroup(gid, rules, element);\n\t\telse\n\t\t\tgroup.addElement(element);\n\n\t\taddElementToReverseSearch(element, gid);\n\n\t\treturn group;\n\t}\n\n\t/**\n\t * Remove an element from the group set. If the group becomes empty after\n\t * the element removal, depending on the setting of\n\t * {@link #areEmptyGroupRemoved()}, the group is deleted or kept. Keeping\n\t * groups allows to handle faster elements that constantly appear and\n\t * disappear.\n\t * \n\t * @param element\n\t *            The element to remove.\n\t */\n\tpublic void removeElement(Element element) {\n\t\tString gid = getElementGroup(element);\n        if (null == gid)\n        {\n            return;\n        }\n\t\tStyleGroup group = groups.get(gid);\n\n\t\tif (group != null) {\n\t\t\tgroup.removeElement(element);\n\t\t\tremoveElementFromReverseSearch(element);\n\n\t\t\tif (removeEmptyGroups && group.isEmpty())\n\t\t\t\tremoveGroup(group);\n\t\t}\n\t}\n\n\t/**\n\t * Check if an element need to change from a style group to another.\n\t * \n\t * <p>\n\t * When an element can have potentially changed style due to some of its\n\t * attributes (ui.class for example), instead of removing it then reading\n\t * it, use this method to move the element from its current style group to a\n\t * potentially different style group.\n\t * </p>\n\t * \n\t * <p>\n\t * Explanation of this method : checking the style of an element may be done\n\t * by removing it ({@link #removeElement(Element)}) and then re-adding it (\n\t * {@link #addElement(Element)}). This must be done by the element since it\n\t * knows when to check this. However you cannot only remove and add, since\n\t * the style group inside which the element is can have events occurring on\n\t * it, and these events must be passed from its old style to its new style.\n\t * This method does all this information passing.\n\t * </p>\n\t * \n\t * @param element\n\t *            The element to move.\n\t */\n\tpublic void checkElementStyleGroup(Element element) {\n\t\tStyleGroup oldGroup = getGroup(getElementGroup(element));\n\n\t\t// Get the old element \"dynamic\" status.\n\n\t\tboolean isDyn = false;\n\n\t\t// Get the old event set for the given element.\n\n\t\tStyleGroup.ElementEvents events = null;\n\n\t\tif (oldGroup != null) {\n\t\t\tisDyn = oldGroup.isElementDynamic(element);\n\t\t\tevents = oldGroup.getEventsFor(element);\n\t\t}\n\n\t\t// Remove the element from its old style and add it to insert it in the\n\t\t// correct style.\n\n\t\tremoveElement(element);\n\t\taddElement_(element);\n\n\t\t// Eventually push the events on the new style group.\n\n\t\tStyleGroup newGroup = getGroup(getElementGroup(element));\n\n\t\tif (newGroup != null && events != null) {\n\t\t\tfor (String event : events.events)\n\t\t\t\tpushEventFor(element, event);\n\t\t}\n\n\t\tfor (StyleGroupListener listener : listeners)\n\t\t\tlistener.elementStyleChanged(element, oldGroup, newGroup);\n\n\t\t// Eventually set the element as dynamic, if it was.\n\n\t\tif (newGroup != null && isDyn)\n\t\t\tnewGroup.pushElementAsDynamic(element);\n\t}\n\n\tprotected void addElementToReverseSearch(Element element, String groupId) {\n\t\tif (element instanceof Node) {\n\t\t\tbyNodeIdGroups.put(element.getId(), groupId);\n\t\t} else if (element instanceof Edge) {\n\t\t\tbyEdgeIdGroups.put(element.getId(), groupId);\n\t\t} else if (element instanceof GraphicSprite) {\n\t\t\tbySpriteIdGroups.put(element.getId(), groupId);\n\t\t} else if (element instanceof Graph) {\n\t\t\tbyGraphIdGroups.put(element.getId(), groupId);\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"What ?\");\n\t\t}\n\t}\n\n\tprotected void removeElementFromReverseSearch(Element element) {\n\t\tif (element instanceof Node) {\n\t\t\tbyNodeIdGroups.remove(element.getId());\n\t\t} else if (element instanceof Edge) {\n\t\t\tbyEdgeIdGroups.remove(element.getId());\n\t\t} else if (element instanceof GraphicSprite) {\n\t\t\tbySpriteIdGroups.remove(element.getId());\n\t\t} else if (element instanceof Graph) {\n\t\t\tbyGraphIdGroups.remove(element.getId());\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"What ?\");\n\t\t}\n\t}\n\n\t/**\n\t * Push a global event on the event stack. Events trigger the replacement of\n\t * a style by an alternative style (or meta-class) when possible. If an\n\t * event is on the event stack, each time a style has an alternative\n\t * corresponding to the event, the alternative is used instead of the style.\n\t * \n\t * @param event\n\t *            The event to push.\n\t */\n\tpublic void pushEvent(String event) {\n\t\teventSet.pushEvent(event);\n\t}\n\n\t/**\n\t * Push an event specifically for a given element. This is normally done\n\t * automatically by the graphic element.\n\t * \n\t * @param element\n\t *            The element considered.\n\t * @param event\n\t *            The event to push.\n\t */\n\tpublic void pushEventFor(Element element, String event) {\n\t\tStyleGroup group = getGroup(getElementGroup(element));\n\n\t\tif (group != null)\n\t\t\tgroup.pushEventFor(element, event);\n\t}\n\n\t/**\n\t * Pop a global event from the event set.\n\t * \n\t * @param event\n\t *            The event to remove.\n\t */\n\tpublic void popEvent(String event) {\n\t\teventSet.popEvent(event);\n\t}\n\n\t/**\n\t * Pop an event specifically for a given element. This is normally done\n\t * automatically by the graphic element.\n\t * \n\t * @param element\n\t *            The element considered.\n\t * @param event\n\t *            The event to pop.\n\t */\n\tpublic void popEventFor(Element element, String event) {\n\t\tStyleGroup group = getGroup(getElementGroup(element));\n\n\t\tif (group != null)\n\t\t\tgroup.popEventFor(element, event);\n\t}\n\n\t/**\n\t * Specify the given element has dynamic style attribute values. This is\n\t * normally done automatically by the graphic element.\n\t * \n\t * @param element\n\t *            The element to add to the dynamic subset.\n\t */\n\tpublic void pushElementAsDynamic(Element element) {\n\t\tStyleGroup group = getGroup(getElementGroup(element));\n\n\t\tif (group != null)\n\t\t\tgroup.pushElementAsDynamic(element);\n\t}\n\n\t/**\n\t * Remove the given element from the subset of elements having dynamic style\n\t * attribute values. This is normally done automatically by the graphic\n\t * element.\n\t * \n\t * @param element\n\t *            The element to remove from the dynamic subset.\n\t */\n\tpublic void popElementAsDynamic(Element element) {\n\t\tStyleGroup group = getGroup(getElementGroup(element));\n\n\t\tif (group != null)\n\t\t\tgroup.popElementAsDynamic(element);\n\t}\n\n\t/**\n\t * Add a listener for element style changes.\n\t * \n\t * @param listener\n\t *            The listener to add.\n\t */\n\tpublic void addListener(StyleGroupListener listener) {\n\t\tlisteners.add(listener);\n\t}\n\n\t/**\n\t * Remove a style change listener.\n\t * \n\t * @param listener\n\t *            The listener to remove.\n\t */\n\tpublic void removeListener(StyleGroupListener listener) {\n\t\tint index = listeners.lastIndexOf(listener);\n\n\t\tif (index >= 0) {\n\t\t\tlisteners.remove(index);\n\t\t}\n\t}\n\n\t// Listener -- What to do when a change occurs in the style sheet.\n\n\tpublic void styleAdded(Rule oldRule, Rule newRule) {\n\t\t// When a style change, we need to update groups.\n\t\t// Several cases :\n\t\t// 1. The style already exists\n\t\t// * Nothing to do in fact. All the elements are still in place.\n\t\t// No style rule (selectors) changed, and therefore we do not have\n\t\t// to change the groups since they are built using the selectors.\n\t\t// 2. The style is new\n\t\t// * we need to check all the groups concerning this kind of element (we\n\t\t// can\n\t\t// restrict our search to these groups, since other will not be\n\t\t// impacted),\n\t\t// and check all elements of these groups.\n\n\t\tif (oldRule == null)\n\t\t\tcheckForNewStyle(newRule); // no need to check Z and shadow, done\n\t\t\t\t\t\t\t\t\t\t// when adding/changing group.\n\t\telse\n\t\t\tcheckZIndexAndShadow(oldRule, newRule);\n\t}\n\n\tpublic void styleSheetCleared() {\n\t\tArrayList<Element> elements = new ArrayList<Element>();\n\n\t\tfor (Element element : graphs())\n\t\t\telements.add(element);\n\n\t\tfor (Element element : nodes())\n\t\t\telements.add(element);\n\n\t\tfor (Element element : edges())\n\t\t\telements.add(element);\n\n\t\tfor (Element element : sprites())\n\t\t\telements.add(element);\n\n\t\tclear();\n\n\t\tfor (Element element : elements)\n\t\t\tremoveElement(element);\n\n\t\tfor (Element element : elements)\n\t\t\taddElement(element);\n\t}\n\n\t/**\n\t * Check each group that may have changed, for example to rebuild the Z\n\t * index and the shadow set.\n\t * \n\t * @param oldRule\n\t *            The old rule that changed.\n\t * @param newRule\n\t *            The new rule that participated in the change.\n\t */\n\tprotected void checkZIndexAndShadow(Rule oldRule, Rule newRule) {\n\t\tif (oldRule != null) {\n\t\t\tif (oldRule.selector.getId() != null\n\t\t\t\t\t|| oldRule.selector.getClazz() != null) {\n\t\t\t\t// We may accelerate things a bit when a class or id style is\n\t\t\t\t// modified,\n\t\t\t\t// since only the groups listed in the style are concerned (we\n\t\t\t\t// are at the\n\t\t\t\t// bottom of the inheritance tree).\n\t\t\t\tif (oldRule.getGroups() != null)\n\t\t\t\t\tfor (String s : oldRule.getGroups()) {\n\t\t\t\t\t\tStyleGroup group = groups.get(s);\n\t\t\t\t\t\tif (group != null) {\n\t\t\t\t\t\t\tzIndex.groupChanged(group);\n\t\t\t\t\t\t\tshadow.groupChanged(group);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// For kind styles \"NODE\", \"EDGE\", \"GRAPH\", \"SPRITE\", we must\n\t\t\t\t// reset\n\t\t\t\t// the whole Z and shadows for the kind, since several styles\n\t\t\t\t// may\n\t\t\t\t// have changed.\n\n\t\t\t\tSelector.Type type = oldRule.selector.type;\n\n\t\t\t\tfor (StyleGroup group : groups.values()) {\n\t\t\t\t\tif (group.getType() == type) {\n\t\t\t\t\t\tzIndex.groupChanged(group);\n\t\t\t\t\t\tshadow.groupChanged(group);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * We try to avoid at most to affect anew styles to elements and to recreate\n\t * groups, which is time consuming.\n\t * \n\t * Two cases :\n\t * <ol>\n\t * <li>The style is an specific (id) style. In this case a new group may be\n\t * added.\n\t * <ul>\n\t * <li>check an element matches the style and in this case create the group\n\t * by adding the element.</li>\n\t * <li>else do nothing.</li>\n\t * </ul>\n\t * </li>\n\t * <li>The style is a kind or class style.\n\t * <ul>\n\t * <li>check all the groups in the kind of the style (graph, node, edge,\n\t * sprite) and only in this kind (since other will never be affected).</li>\n\t * <li>remove all groups of this kind.</li>\n\t * <li>add all elements of this kind anew to recreate the group.</li>\n\t * </ul>\n\t * </li>\n\t * </ol>\n\t */\n\tprotected void checkForNewStyle(Rule newRule) {\n\t\tswitch (newRule.selector.type) {\n\t\tcase GRAPH:\n\t\t\tif (newRule.selector.getId() != null)\n\t\t\t\tcheckForNewIdStyle(newRule, byGraphIdGroups);\n\t\t\telse\n\t\t\t\tcheckForNewStyle(newRule, byGraphIdGroups);\n\t\t\tbreak;\n\t\tcase NODE:\n\t\t\tif (newRule.selector.getId() != null)\n\t\t\t\tcheckForNewIdStyle(newRule, byNodeIdGroups);\n\t\t\telse\n\t\t\t\tcheckForNewStyle(newRule, byNodeIdGroups);\n\t\t\tbreak;\n\t\tcase EDGE:\n\t\t\tif (newRule.selector.getId() != null)\n\t\t\t\tcheckForNewIdStyle(newRule, byEdgeIdGroups);\n\t\t\telse\n\t\t\t\tcheckForNewStyle(newRule, byEdgeIdGroups);\n\t\t\tbreak;\n\t\tcase SPRITE:\n\t\t\tif (newRule.selector.getId() != null)\n\t\t\t\tcheckForNewIdStyle(newRule, bySpriteIdGroups);\n\t\t\telse\n\t\t\t\tcheckForNewStyle(newRule, bySpriteIdGroups);\n\t\t\tbreak;\n\t\tcase ANY:\n\t\tdefault:\n\t\t\tthrow new RuntimeException(\"What ?\");\n\t\t}\n\t}\n\n\t/**\n\t * Check for a new specific style (applies only to one element).\n\t * \n\t * @param newRule\n\t *            The new style rule.\n\t * @param elt2grp\n\t *            The name space.\n\t */\n\tprotected void checkForNewIdStyle(Rule newRule,\n\t\t\tMap<String, String> elt2grp) {\n\t\t// There is only one element that matches the identifier.\n\n\t\tElement element = getElement(newRule.selector.getId(), elt2grp);\n\n\t\tif (element != null) {\n\t\t\tcheckElementStyleGroup(element);\n\t\t\t// removeElement( element ); // Remove the element from its old\n\t\t\t// group. Potentially delete a group.\n\t\t\t// addElement( element ); // Add the element to its new own group\n\t\t\t// (since this is an ID style).\n\t\t}\n\t}\n\n\t/**\n\t * Check for a new kind or class style in a given name space (node, edge,\n\t * sprite, graph).\n\t * \n\t * @param newRule\n\t *            The new style rule.\n\t * @param elt2grp\n\t *            The name space.\n\t */\n\tprotected void checkForNewStyle(Rule newRule,\n\t\t\tMap<String, String> elt2grp) {\n\t\tCollection<Element> elementsToCheck = new ArrayList<Element>();\n\n\t\tfor (String eltId : elt2grp.keySet())\n\t\t\telementsToCheck.add(getElement(eltId, elt2grp));\n\n\t\tfor (Element element : elementsToCheck) {\n\t\t\tcheckElementStyleGroup(element);\n\t\t\t// removeElement( element );\n\t\t\t// addElement( element );\n\t\t}\n\t}\n\n\t// Utility\n\n\t@Override\n\tpublic String toString() {\n\t\tStringBuilder builder = new StringBuilder();\n\n\t\tbuilder.append(String.format(\"Style groups (%d) :%n\", groups.size()));\n\n\t\tfor (StyleGroup group : groups.values()) {\n\t\t\tbuilder.append(group.toString(1));\n\t\t\tbuilder.append(String.format(\"%n\"));\n\t\t}\n\n\t\treturn builder.toString();\n\t}\n\n\t// Inner classes\n\n\t/**\n\t * Set of events (meta-classes) actually active.\n\t * \n\t * <p>\n\t * The event set contains the set of events actually occurring. This is used\n\t * to select alternate styles. The events actually occurring are in\n\t * precedence order. The last one is the most important.\n\t * </p>\n\t * \n\t * @author Antoine Dutot\n\t */\n\tpublic class EventSet {\n\t\tpublic ArrayList<String> eventSet = new ArrayList<String>();\n\n\t\tpublic String events[] = new String[0];\n\n\t\t/**\n\t\t * Add an event to the set.\n\t\t * \n\t\t * @param event\n\t\t *            The event to add.\n\t\t */\n\t\tpublic void pushEvent(String event) {\n\t\t\teventSet.add(event);\n\t\t\tevents = eventSet.toArray(events);\n\t\t}\n\n\t\t/**\n\t\t * Remove an event from the set.\n\t\t * \n\t\t * @param event\n\t\t *            The event to remove.\n\t\t */\n\t\tpublic void popEvent(String event) {\n\t\t\tint index = eventSet.lastIndexOf(event);\n\n\t\t\tif (index >= 0)\n\t\t\t\teventSet.remove(index);\n\n\t\t\tevents = eventSet.toArray(events);\n\t\t}\n\n\t\t/**\n\t\t * The set of events in order, the most important at the end.\n\t\t * \n\t\t * @return The event set.\n\t\t */\n\t\tpublic String[] getEvents() {\n\t\t\treturn events;\n\t\t}\n\t}\n\n\t/**\n\t * All the style groups sorted by their Z index.\n\t * \n\t * <p>\n\t * This structure is maintained by each time a group is added or removed, or\n\t * when the style of a group changed.\n\t * </p>\n\t * \n\t * @author Antoine Dutot\n\t */\n\tpublic class ZIndex implements Iterable<HashSet<StyleGroup>> {\n\t\t/**\n\t\t * Ordered set of groups.\n\t\t */\n\t\tpublic ArrayList<HashSet<StyleGroup>> zIndex = new ArrayList<HashSet<StyleGroup>>();\n\n\t\t/**\n\t\t * Knowing a group, tell if its Z index.\n\t\t */\n\t\tpublic HashMap<String, Integer> reverseZIndex = new HashMap<String, Integer>();\n\n\t\t/**\n\t\t * New empty Z index.\n\t\t */\n\t\tpublic ZIndex() {\n\t\t\tinitZIndex();\n\t\t}\n\n\t\tprotected void initZIndex() {\n\t\t\tzIndex.ensureCapacity(256);\n\n\t\t\tfor (int i = 0; i < 256; i++)\n\t\t\t\tzIndex.add(null);\n\t\t}\n\n\t\t/**\n\t\t * Iterator on the set of Z index cells. Each item is a set of style\n\t\t * groups that pertain to the same Z index.\n\t\t * \n\t\t * @return Iterator on the Z index.\n\t\t */\n\t\tprotected Iterator<HashSet<StyleGroup>> getIterator() {\n\t\t\treturn new ZIndexIterator();\n\t\t}\n\n\t\tpublic Iterator<HashSet<StyleGroup>> iterator() {\n\t\t\treturn getIterator();\n\t\t}\n\n\t\t/**\n\t\t * A new group appeared, put it in the z index.\n\t\t * \n\t\t * @param group\n\t\t *            The group to add.\n\t\t */\n\t\tprotected void groupAdded(StyleGroup group) {\n\t\t\tint z = convertZ(group.getZIndex());\n\n\t\t\tif (zIndex.get(z) == null)\n\t\t\t\tzIndex.set(z, new HashSet<StyleGroup>());\n\n\t\t\tzIndex.get(z).add(group);\n\t\t\treverseZIndex.put(group.getId(), z);\n\t\t}\n\n\t\t/**\n\t\t * A group eventually changed, check its location.\n\t\t * \n\t\t * @param group\n\t\t *            The group to check.\n\t\t */\n\t\tprotected void groupChanged(StyleGroup group) {\n\t\t\tint oldZ = reverseZIndex.get(group.getId());\n\t\t\tint newZ = convertZ(group.getZIndex());\n\n\t\t\tif (oldZ != newZ) {\n\t\t\t\tHashSet<StyleGroup> map = zIndex.get(oldZ);\n\n\t\t\t\tif (map != null) {\n\t\t\t\t\tmap.remove(group);\n\t\t\t\t\treverseZIndex.remove(group.getId());\n\n\t\t\t\t\tif (map.isEmpty())\n\t\t\t\t\t\tzIndex.set(oldZ, null);\n\t\t\t\t}\n\n\t\t\t\tgroupAdded(group);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * A group was removed, remove it from the Z index.\n\t\t * \n\t\t * @param group\n\t\t *            The group to remove.\n\t\t */\n\t\tprotected void groupRemoved(StyleGroup group) {\n\t\t\tint z = convertZ(group.getZIndex());\n\n\t\t\tHashSet<StyleGroup> map = zIndex.get(z);\n\n\t\t\tif (map != null) {\n\t\t\t\tmap.remove(group);\n\t\t\t\treverseZIndex.remove(group.getId());\n\n\t\t\t\tif (map.isEmpty())\n\t\t\t\t\tzIndex.set(z, null);\n\t\t\t} else {\n\t\t\t\tthrow new RuntimeException(\"Inconsistency in Z-index\");\n\t\t\t}\n\t\t}\n\n\t\tpublic void clear() {\n\t\t\tzIndex.clear();\n\t\t\treverseZIndex.clear();\n\t\t\tinitZIndex();\n\t\t}\n\n\t\t/**\n\t\t * Convert a [-127,127] value into a [0,255] value and check bounds.\n\t\t * \n\t\t * @param z\n\t\t *            The Z value to convert.\n\t\t * @return The Z value converted and bounded to [0,255].\n\t\t */\n\t\tprotected int convertZ(int z) {\n\t\t\tz += 127;\n\n\t\t\tif (z < 0)\n\t\t\t\tz = 0;\n\t\t\telse if (z > 255)\n\t\t\t\tz = 255;\n\n\t\t\treturn z;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\tStringBuilder sb = new StringBuilder();\n\n\t\t\tsb.append(String.format(\"Z index :%n\"));\n\n\t\t\tfor (int i = 0; i < 256; i++) {\n\t\t\t\tif (zIndex.get(i) != null) {\n\t\t\t\t\tsb.append(String.format(\"    * %d -> \", i - 127));\n\n\t\t\t\t\tHashSet<StyleGroup> map = zIndex.get(i);\n\n\t\t\t\t\tfor (StyleGroup g : map)\n\t\t\t\t\t\tsb.append(String.format(\"%s \", g.getId()));\n\n\t\t\t\t\tsb.append(String.format(\"%n\"));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn sb.toString();\n\t\t}\n\n\t\tpublic class ZIndexIterator implements Iterator<HashSet<StyleGroup>> {\n\t\t\tpublic int index = 0;\n\n\t\t\tpublic ZIndexIterator() {\n\t\t\t\tzapUntilACell();\n\t\t\t}\n\n\t\t\tprotected void zapUntilACell() {\n\t\t\t\twhile (index < 256 && zIndex.get(index) == null)\n\t\t\t\t\tindex++;\n\t\t\t}\n\n\t\t\tpublic boolean hasNext() {\n\t\t\t\treturn (index < 256);\n\t\t\t}\n\n\t\t\tpublic HashSet<StyleGroup> next() {\n\t\t\t\tif (hasNext()) {\n\t\t\t\t\tHashSet<StyleGroup> cell = zIndex.get(index);\n\t\t\t\t\tindex++;\n\t\t\t\t\tzapUntilACell();\n\t\t\t\t\treturn cell;\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tpublic void remove() {\n\t\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\t\"This iterator does not support removal.\");\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Set of groups that cast a shadow.\n\t * \n\t * @author Antoine Dutot\n\t */\n\tpublic class ShadowSet implements Iterable<StyleGroup> {\n\t\t/**\n\t\t * The set of groups casting shadow.\n\t\t */\n\t\tprotected HashSet<StyleGroup> shadowSet = new HashSet<StyleGroup>();\n\n\t\t/**\n\t\t * Iterator on the set of groups that cast a shadow.\n\t\t * \n\t\t * @return An iterator on the shadow style group set.\n\t\t */\n\t\tprotected Iterator<StyleGroup> getIterator() {\n\t\t\treturn shadowSet.iterator();\n\t\t}\n\n\t\tpublic Iterator<StyleGroup> iterator() {\n\t\t\treturn getIterator();\n\t\t}\n\n\t\t/**\n\t\t * A group appeared, check its shadow status.\n\t\t * \n\t\t * @param group\n\t\t *            The group added.\n\t\t */\n\t\tprotected void groupAdded(StyleGroup group) {\n\t\t\tif (group.getShadowMode() != ShadowMode.NONE)\n\t\t\t\tshadowSet.add(group);\n\t\t}\n\n\t\t/**\n\t\t * A group eventually changed, check its shadow status.\n\t\t * \n\t\t * @param group\n\t\t *            The group that changed.\n\t\t */\n\t\tprotected void groupChanged(StyleGroup group) {\n\t\t\tif (group.getShadowMode() == ShadowMode.NONE)\n\t\t\t\tshadowSet.remove(group);\n\t\t\telse\n\t\t\t\tshadowSet.add(group);\n\t\t}\n\n\t\t/**\n\t\t * A group was removed, remove it from the shadow if needed.\n\t\t * \n\t\t * @param group\n\t\t *            The group removed.\n\t\t */\n\t\tprotected void groupRemoved(StyleGroup group) {\n\t\t\t// Faster than to first test its existence or shadow status :\n\n\t\t\tshadowSet.remove(group);\n\t\t}\n\n\t\tprotected void clear() {\n\t\t\tshadowSet.clear();\n\t\t}\n\t}\n\n\t/**\n\t * Iterator that allows to browse all graph elements of a given kind (nodes,\n\t * edges, sprites, graphs) as if they where in a single set, whereas they\n\t * are in style groups.\n\t * \n\t * @author Antoine Dutot\n\t * @param <E>\n\t *            The kind of graph element.\n\t */\n\tprotected class ElementIterator<E extends Element> implements Iterator<E> {\n\t\tprotected Map<String, String> elt2grp;\n\n\t\tprotected Iterator<String> elts;\n\n\t\tpublic ElementIterator(final Map<String, String> elements2groups) {\n\t\t\telt2grp = elements2groups;\n\t\t\telts = elements2groups.keySet().iterator();\n\t\t}\n\n\t\tpublic boolean hasNext() {\n\t\t\treturn elts.hasNext();\n\t\t}\n\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tpublic E next() {\n\t\t\tString eid = elts.next();\n\t\t\tString gid = elt2grp.get(eid);\n\t\t\tStyleGroup grp = groups.get(gid);\n\n\t\t\treturn (E) grp.getElement(eid);\n\t\t}\n\n\t\tpublic void remove() {\n\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\"remove not implemented in this iterator\");\n\t\t}\n\t}\n\n\t/**\n\t * Dummy set of nodes.\n\t */\n\tprotected class NodeSet implements Iterable<Node> {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tpublic Iterator<Node> iterator() {\n\t\t\treturn (Iterator<Node>) getNodeIterator();\n\t\t}\n\t}\n\n\t/**\n\t * Dummy set of edges.\n\t */\n\tprotected class EdgeSet implements Iterable<Edge> {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tpublic Iterator<Edge> iterator() {\n\t\t\treturn (Iterator<Edge>) getEdgeIterator();\n\t\t}\n\t}\n\n\t/**\n\t * Dummy set of sprites.\n\t */\n\tprotected class SpriteSet implements Iterable<GraphicSprite> {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tpublic Iterator<GraphicSprite> iterator() {\n\t\t\treturn (Iterator<GraphicSprite>) getSpriteIterator();\n\t\t}\n\t}\n\n\tprotected class GraphSet implements Iterable<GraphicGraph> {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tpublic Iterator<GraphicGraph> iterator() {\n\t\t\treturn (Iterator<GraphicGraph>) getGraphIterator();\n\t\t}\n\t}\n\n}",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "DefaultCamera", "org.graphstream.ui.swingViewer.util" ], [ "GradientFactory", "org.graphstream.ui.swingViewer.util" ], [ "GraphMetrics", "org.graphstream.ui.swingViewer.util" ], [ "Graphics2DOutput", "org.graphstream.ui.swingViewer.util" ], [ "ImageCache", "org.graphstream.ui.swingViewer.util" ], [ "StrokeFactory", "org.graphstream.ui.swingViewer.util" ], [ "FontCache", "org.graphstream.ui.swingViewer.util" ], [ "FontSlot", "org.graphstream.ui.swingViewer.util" ], [ "DefaultView", "org.graphstream.ui.swingViewer" ], [ "SpriteRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "ElementRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "NodeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "Arrow", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "Shape", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "EdgeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "SwingBasicGraphRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "GraphRendererBase", "org.graphstream.ui.swingViewer" ], [ "GraphRenderer", "org.graphstream.ui.swingViewer" ], [ "LayerRenderer", "org.graphstream.ui.swingViewer" ], [ "ViewPanel", "org.graphstream.ui.swingViewer" ], [ "Layouts", "org.graphstream.ui.layout" ], [ "Layout", "org.graphstream.ui.layout" ], [ "LayoutRunner", "org.graphstream.ui.layout" ], [ "NodeParticle", "org.graphstream.ui.layout.springbox" ], [ "GraphCellData", "org.graphstream.ui.layout.springbox" ], [ "EdgeSpring", "org.graphstream.ui.layout.springbox" ], [ "Energies", "org.graphstream.ui.layout.springbox" ], [ "BarnesHutLayout", "org.graphstream.ui.layout.springbox" ], [ "LinLog", "org.graphstream.ui.layout.springbox.implementations" ], [ "LinLogNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBoxNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBox", "org.graphstream.ui.layout.springbox.implementations" ], [ "Point2", "org.graphstream.ui.geom" ], [ "Vector2", "org.graphstream.ui.geom" ], [ "Vector3", "org.graphstream.ui.geom" ], [ "Point3", "org.graphstream.ui.geom" ], [ "ViewerListener", "org.graphstream.ui.view" ], [ "MouseManager", "org.graphstream.ui.view.util" ], [ "ShortcutManager", "org.graphstream.ui.view.util" ], [ "DefaultShortcutManager", "org.graphstream.ui.view.util" ], [ "FpsCounter", "org.graphstream.ui.view.util" ], [ "CubicCurve", "org.graphstream.ui.view.util" ], [ "DefaultMouseManager", "org.graphstream.ui.view.util" ], [ "Selection", "org.graphstream.ui.view" ], [ "ViewerPipe", "org.graphstream.ui.view" ], [ "Viewer", "org.graphstream.ui.view" ], [ "View", "org.graphstream.ui.view" ], [ "Camera", "org.graphstream.ui.view" ], [ "Sprite", "org.graphstream.ui.spriteManager" ], [ "InvalidSpriteIDException", "org.graphstream.ui.spriteManager" ], [ "SpriteManager", "org.graphstream.ui.spriteManager" ], [ "SpriteFactory", "org.graphstream.ui.spriteManager" ], [ "StyleGroupListener", "org.graphstream.ui.graphicGraph" ], [ "Colors", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Values", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetListener", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetParserTokenManager", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParserConstants", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParser", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "Style", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheet", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleConstants", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Selector", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Value", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Rule", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "GraphicNode", "org.graphstream.ui.graphicGraph" ], [ "StyleGroup", "org.graphstream.ui.graphicGraph" ], [ "GraphPosLengthUtils", "org.graphstream.ui.graphicGraph" ], [ "GraphicEdge", "org.graphstream.ui.graphicGraph" ], [ "GraphicElementChangeListener", "org.graphstream.ui.graphicGraph" ], [ "GraphicGraph", "org.graphstream.ui.graphicGraph" ], [ "StyleGroupSet", "org.graphstream.ui.graphicGraph" ], [ "GraphicSprite", "org.graphstream.ui.graphicGraph" ], [ "GraphicElement", "org.graphstream.ui.graphicGraph" ], [ "VerboseSink", "org.graphstream.util" ], [ "GraphListeners", "org.graphstream.util" ], [ "Environment", "org.graphstream.util" ], [ "GraphDiff", "org.graphstream.util" ], [ "Filters", "org.graphstream.util" ], [ "FilteredEdgeIterator", "org.graphstream.util" ], [ "Parser", "org.graphstream.util.parser" ], [ "ParserFactory", "org.graphstream.util.parser" ], [ "TokenMgrError", "org.graphstream.util.parser" ], [ "ParseException", "org.graphstream.util.parser" ], [ "SimpleCharStream", "org.graphstream.util.parser" ], [ "Token", "org.graphstream.util.parser" ], [ "ISODateIO", "org.graphstream.util.time" ], [ "ISODateComponent", "org.graphstream.util.time" ], [ "FilteredNodeIterator", "org.graphstream.util" ], [ "FixedArrayList", "org.graphstream.util.set" ], [ "StepCounter", "org.graphstream.util" ], [ "GraphSpells", "org.graphstream.util.cumulative" ], [ "CumulativeAttributes", "org.graphstream.util.cumulative" ], [ "CumulativeSpells", "org.graphstream.util.cumulative" ], [ "Filter", "org.graphstream.util" ], [ "PipeAdapter", "org.graphstream.stream" ], [ "GraphParseException", "org.graphstream.stream" ], [ "ElementSink", "org.graphstream.stream" ], [ "URLSource", "org.graphstream.stream.net" ], [ "HTTPSource", "org.graphstream.stream.net" ], [ "SourceAdapter", "org.graphstream.stream" ], [ "AttributeSink", "org.graphstream.stream" ], [ "GMLParserConstants", "org.graphstream.stream.file.gml" ], [ "GMLParserTokenManager", "org.graphstream.stream.file.gml" ], [ "GMLContext", "org.graphstream.stream.file.gml" ], [ "Graphics", "org.graphstream.stream.file.gml" ], [ "KeyValues", "org.graphstream.stream.file.gml" ], [ "GMLParser", "org.graphstream.stream.file.gml" ], [ "FileSinkGraphML", "org.graphstream.stream.file" ], [ "TLPParserConstants", "org.graphstream.stream.file.tlp" ], [ "TLPParser", "org.graphstream.stream.file.tlp" ], [ "TLPParserTokenManager", "org.graphstream.stream.file.tlp" ], [ "FileSinkFactory", "org.graphstream.stream.file" ], [ "FileSourceEdge", "org.graphstream.stream.file" ], [ "FileSinkBase", "org.graphstream.stream.file" ], [ "FileSinkTikZ", "org.graphstream.stream.file" ], [ "FileSourceGEXF", "org.graphstream.stream.file" ], [ "DOTParser", "org.graphstream.stream.file.dot" ], [ "DOTParserConstants", "org.graphstream.stream.file.dot" ], [ "DOTParserTokenManager", "org.graphstream.stream.file.dot" ], [ "FileSink", "org.graphstream.stream.file" ], [ "PajekContext", "org.graphstream.stream.file.pajek" ], [ "Graphics", "org.graphstream.stream.file.pajek" ], [ "NodeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeMatrix", "org.graphstream.stream.file.pajek" ], [ "PajekParserTokenManager", "org.graphstream.stream.file.pajek" ], [ "PajekParserConstants", "org.graphstream.stream.file.pajek" ], [ "FileSourceXML", "org.graphstream.stream.file" ], [ "FileSinkBaseFiltered", "org.graphstream.stream.file" ], [ "FileSinkDOT", "org.graphstream.stream.file" ], [ "FileSourceParser", "org.graphstream.stream.file" ], [ "FileSinkDGSFiltered", "org.graphstream.stream.file" ], [ "FileSourceDOT", "org.graphstream.stream.file" ], [ "FileSourceDGS1And2", "org.graphstream.stream.file" ], [ "FileSourceGraphML", "org.graphstream.stream.file" ], [ "FileSourceFactory", "org.graphstream.stream.file" ], [ "FileSinkImages", "org.graphstream.stream.file" ], [ "FileSinkDynamicGML", "org.graphstream.stream.file" ], [ "FileSinkSVG", "org.graphstream.stream.file" ], [ "GEXFSpell", "org.graphstream.stream.file.gexf" ], [ "SmartXMLWriter", "org.graphstream.stream.file.gexf" ], [ "GEXFElement", "org.graphstream.stream.file.gexf" ], [ "GEXFEdges", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValues", "org.graphstream.stream.file.gexf" ], [ "GEXFEdge", "org.graphstream.stream.file.gexf" ], [ "GEXFSpells", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValue", "org.graphstream.stream.file.gexf" ], [ "GEXFNodes", "org.graphstream.stream.file.gexf" ], [ "GEXFNode", "org.graphstream.stream.file.gexf" ], [ "GEXFMeta", "org.graphstream.stream.file.gexf" ], [ "GEXFAttributes", "org.graphstream.stream.file.gexf" ], [ "GEXF", "org.graphstream.stream.file.gexf" ], [ "GEXFGraph", "org.graphstream.stream.file.gexf" ], [ "GEXFAttribute", "org.graphstream.stream.file.gexf" ], [ "OldFileSourceDGS", "org.graphstream.stream.file.dgs" ], [ "DGSParser", "org.graphstream.stream.file.dgs" ], [ "FileSourceBase", "org.graphstream.stream.file" ], [ "FileSinkGML", "org.graphstream.stream.file" ], [ "FileSourceDGS", "org.graphstream.stream.file" ], [ "FileSinkDGSUtility", "org.graphstream.stream.file" ], [ "FileSourceTLP", "org.graphstream.stream.file" ], [ "FileSinkSVG2", "org.graphstream.stream.file" ], [ "FileSource", "org.graphstream.stream.file" ], [ "FileSourceNCol", "org.graphstream.stream.file" ], [ "FileSourcePajek", "org.graphstream.stream.file" ], [ "FileSourceGPX", "org.graphstream.stream.file" ], [ "FileSourceLGL", "org.graphstream.stream.file" ], [ "FileSinkGEXF2", "org.graphstream.stream.file" ], [ "FileSourceGML", "org.graphstream.stream.file" ], [ "FileSinkGEXF", "org.graphstream.stream.file" ], [ "FileSinkDGS", "org.graphstream.stream.file" ], [ "ProxyPipe", "org.graphstream.stream" ], [ "Sink", "org.graphstream.stream" ], [ "Timeline", "org.graphstream.stream" ], [ "Pipe", "org.graphstream.stream" ], [ "SinkAdapter", "org.graphstream.stream" ], [ "Replayable", "org.graphstream.stream" ], [ "Source", "org.graphstream.stream" ], [ "AnnotatedSink", "org.graphstream.stream" ], [ "GraphReplay", "org.graphstream.stream" ], [ "AttributePipe", "org.graphstream.stream" ], [ "SinkTime", "org.graphstream.stream.sync" ], [ "SourceTime", "org.graphstream.stream.sync" ], [ "PipeBase", "org.graphstream.stream" ], [ "ThreadProxyPipe", "org.graphstream.stream.thread" ], [ "ThreadProxyPipeOld", "org.graphstream.stream.thread" ], [ "RMISource", "org.graphstream.stream.rmi" ], [ "RMIAdapterOut", "org.graphstream.stream.rmi" ], [ "RMISink", "org.graphstream.stream.rmi" ], [ "RMIAdapterIn", "org.graphstream.stream.rmi" ], [ "SourceBase", "org.graphstream.stream" ], [ "NetStreamDecoder", "org.graphstream.stream.netstream" ], [ "NetStreamReceiver", "org.graphstream.stream.netstream" ], [ "NetStreamConstants", "org.graphstream.stream.netstream" ], [ "NetStreamSender", "org.graphstream.stream.netstream" ], [ "DefaultNetStreamDecoder", "org.graphstream.stream.netstream" ], [ "Base64", "org.graphstream.stream.netstream.packing" ], [ "NetStreamUnpacker", "org.graphstream.stream.netstream.packing" ], [ "Base64Packer", "org.graphstream.stream.netstream.packing" ], [ "Base64Unpacker", "org.graphstream.stream.netstream.packing" ], [ "NetStreamPacker", "org.graphstream.stream.netstream.packing" ], [ "AttributePredicate", "org.graphstream.stream" ], [ "Element", "org.graphstream.graph" ], [ "Node", "org.graphstream.graph" ], [ "BreadthFirstIterator", "org.graphstream.graph" ], [ "Graph", "org.graphstream.graph" ], [ "EdgeRejectedException", "org.graphstream.graph" ], [ "CompoundAttribute", "org.graphstream.graph" ], [ "Structure", "org.graphstream.graph" ], [ "DepthFirstIterator", "org.graphstream.graph" ], [ "NullAttributeException", "org.graphstream.graph" ], [ "IdAlreadyInUseException", "org.graphstream.graph" ], [ "EdgeFactory", "org.graphstream.graph" ], [ "ElementNotFoundException", "org.graphstream.graph" ], [ "OneAttributeElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListNode", "org.graphstream.graph.implementations" ], [ "SingleNode", "org.graphstream.graph.implementations" ], [ "AbstractElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListGraph", "org.graphstream.graph.implementations" ], [ "AbstractNode", "org.graphstream.graph.implementations" ], [ "DefaultGraph", "org.graphstream.graph.implementations" ], [ "MultiGraph", "org.graphstream.graph.implementations" ], [ "Graphs", "org.graphstream.graph.implementations" ], [ "SingleGraph", "org.graphstream.graph.implementations" ], [ "MultiNode", "org.graphstream.graph.implementations" ], [ "AbstractGraph", "org.graphstream.graph.implementations" ], [ "AbstractEdge", "org.graphstream.graph.implementations" ], [ "GraphFactory", "org.graphstream.graph" ], [ "NodeFactory", "org.graphstream.graph" ], [ "Edge", "org.graphstream.graph" ], [ "Path", "org.graphstream.graph" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "gradientInArea", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)" ], [ "linearGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)" ], [ "createFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static float[] createFractions(Style style)" ], [ "createColors", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static Color[] createColors(Style style)" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "public static ImageCache defaultImageCache()" ], [ "generateStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "public static Stroke generateStroke(Style style, GraphMetrics metrics)" ], [ "generatePlainStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)" ], [ "generateDotsStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)" ], [ "generateDashesStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache()" ], [ "newLayoutAlgorithm", "org.graphstream.ui.layout", "Layouts", "public static Layout newLayoutAlgorithm()" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static double eval(double x0, double x1, double x2, double x3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static double derivative(double x0, double x1, double x2, double x3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "newGraphRenderer", "org.graphstream.ui.view", "Viewer", "public static GraphRenderer newGraphRenderer()" ], [ "getPositionValue", "org.graphstream.ui.spriteManager", "SpriteManager", "protected static Values getPositionValue(Object value)" ], [ "convertColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Color convertColor(Object anyValue)" ], [ "convertLabel", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static String convertLabel(Object value)" ], [ "convertWidth", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static float convertWidth(Object value)" ], [ "convertValue", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Value convertValue(Object value)" ], [ "convertUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Units convertUnit(String unit)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Graph graph, String id)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Graph graph, String id)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Node node)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Node node)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Graph graph, String id)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Edge edge)" ], [ "getGlobalEnvironment", "org.graphstream.util", "Environment", "public static Environment getGlobalEnvironment()" ], [ "falseFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> falseFilter()" ], [ "trueFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> trueFilter()" ], [ "byAttributeFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)" ], [ "separateNodeAndEdgeFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)" ], [ "byExtremitiesFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)" ], [ "byIdFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byIdFilter(String idPattern)" ], [ "isContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)" ], [ "isIdContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)" ], [ "and", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)" ], [ "or", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)" ], [ "xor", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)" ], [ "not", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> not(Filter<T> f)" ], [ "addEscapes", "org.graphstream.util.parser", "TokenMgrError", "protected static final String addEscapes(String str)" ], [ "LexicalError", "org.graphstream.util.parser", "TokenMgrError", "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)" ], [ "add_escapes", "org.graphstream.util.parser", "ParseException", "static String add_escapes(String str)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind, String image)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind)" ], [ "countStepInFile", "org.graphstream.util", "StepCounter", "public static int countStepInFile(String path) throws IOException" ], [ "GET", "org.graphstream.stream.net", "HTTPSource", "protected static HashMap<String, Object> GET(HttpExchange ex)" ], [ "sinkFor", "org.graphstream.stream.file", "FileSinkFactory", "public static FileSink sinkFor(String filename)" ], [ "formatId", "org.graphstream.stream.file", "FileSinkTikZ", "protected static String formatId(String id)" ], [ "getInt", "org.graphstream.stream.file.pajek", "PajekContext", "protected static int getInt(Token nb) throws ParseException" ], [ "getReal", "org.graphstream.stream.file.pajek", "PajekContext", "protected static double getReal(Token nb) throws ParseException" ], [ "toColorValue", "org.graphstream.stream.file.pajek", "PajekContext", "public static String toColorValue(Token R, Token G, Token B) throws ParseException" ], [ "sourceFor", "org.graphstream.stream.file", "FileSourceFactory", "public static FileSource sourceFor(String fileName) throws IOException" ], [ "getXMLRootElement", "org.graphstream.stream.file", "FileSourceFactory", "public static String getXMLRootElement(String fileName) throws IOException" ], [ "formatStringForQuoting", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String formatStringForQuoting(String str)" ], [ "attributeString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String attributeString(String key, Object value, boolean remove)" ], [ "arrayString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String arrayString(Object value)" ], [ "valueString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String valueString(Object value)" ], [ "hashToString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String hashToString(HashMap<?, ?> hash)" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source)" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s, int options) throws java.io.IOException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decodeFromFile(String filename) throws java.io.IOException" ], [ "encodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeFromFile(String filename) throws java.io.IOException" ], [ "unmutableGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph unmutableGraph(Graph g)" ], [ "synchronizedGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph synchronizedGraph(Graph g)" ], [ "merge", "org.graphstream.graph.implementations", "Graphs", "public static Graph merge(Graph... graphs)" ], [ "clone", "org.graphstream.graph.implementations", "Graphs", "public static Graph clone(Graph g)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "version16", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static boolean version16 = false;" ], [ "predefFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[][] predefFractions = new float[11][];" ], [ "predefFractions2", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions2 = { 0f, 1f };" ], [ "predefFractions3", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions3 = { 0f, 0.5f, 1f };" ], [ "predefFractions4", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };" ], [ "predefFractions5", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };" ], [ "predefFractions6", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };" ], [ "predefFractions7", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };" ], [ "predefFractions8", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };" ], [ "predefFractions9", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };" ], [ "predefFractions10", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "protected static ImageCache defaultImageCache;" ], [ "dots", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dots = { 1f, 1f };" ], [ "dashes", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dashes = { 3f, 3f };" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache;" ], [ "NULL_POINT2", "org.graphstream.ui.geom", "Point2", "public static final Point2 NULL_POINT2 = new Point2(0, 0);" ], [ "NULL_POINT3", "org.graphstream.ui.geom", "Point3", "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);" ], [ "DEFAULT_VIEW_ID", "org.graphstream.ui.view", "Viewer", "public static String DEFAULT_VIEW_ID = \"defaultView\";" ], [ "jjbitVec0", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };" ], [ "jjstrLiteralImages", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };" ], [ "lexStateNames", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };" ], [ "jjtoSkip", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };" ], [ "colorMap", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static HashMap<String,Color> colorMap;" ], [ "sharpColor1", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor1;" ], [ "sharpColor2", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor2;" ], [ "cssColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColor;" ], [ "cssColorA", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColorA;" ], [ "awtColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern awtColor;" ], [ "hexaColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern hexaColor;" ], [ "numberUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern numberUnit;" ], [ "number", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern number;" ], [ "acceptedAttribute", "org.graphstream.ui.graphicGraph", "GraphicElement", "protected static Pattern acceptedAttribute;" ], [ "DEFAULT_AN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_CNA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_AE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";" ], [ "DEFAULT_CEA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CEC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CER_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";" ], [ "DEFAULT_CGA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_CL_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";" ], [ "DEFAULT_ST_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";" ], [ "GLOBAL_ENV", "org.graphstream.util", "Environment", "public static Environment GLOBAL_ENV;" ], [ "LEXICAL_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int LEXICAL_ERROR = 0;" ], [ "STATIC_LEXER_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int STATIC_LEXER_ERROR = 1;" ], [ "INVALID_LEXICAL_STATE", "org.graphstream.util.parser", "TokenMgrError", "public static final int INVALID_LEXICAL_STATE = 2;" ], [ "LOOP_DETECTED", "org.graphstream.util.parser", "TokenMgrError", "public static final int LOOP_DETECTED = 3;" ], [ "staticFlag", "org.graphstream.util.parser", "SimpleCharStream", "public static final boolean staticFlag = false;" ], [ "ABBREVIATED_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");" ], [ "FULL_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");" ], [ "ABBREVIATED_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");" ], [ "FULL_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");" ], [ "LOCALE_DATE_AND_TIME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);" ], [ "CENTURY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");" ], [ "DAY_OF_MONTH_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");" ], [ "DATE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");" ], [ "DAY_OF_MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");" ], [ "DATE_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");" ], [ "WEEK_BASED_YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "WEEK_BASED_YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "ABBREVIATED_MONTH_NAME_ALIAS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");" ], [ "HOUR_OF_DAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");" ], [ "HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");" ], [ "DAY_OF_YEAR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");" ], [ "MILLISECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");" ], [ "EPOCH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent EPOCH = new EpochComponent();" ], [ "MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");" ], [ "MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");" ], [ "NEW_LINE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");" ], [ "AM_PM", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent AM_PM = new AMPMComponent();" ], [ "LOCALE_CLOCK_TIME_12_HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");" ], [ "HOUR_AND_MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");" ], [ "SECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");" ], [ "TABULATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");" ], [ "TIME_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");" ], [ "DAY_OF_WEEK_1_7", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");" ], [ "WEEK_OF_YEAR_FROM_SUNDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");" ], [ "WEEK_NUMBER_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");" ], [ "DAY_OF_WEEK_0_6", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");" ], [ "WEEK_OF_YEAR_FROM_MONDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");" ], [ "LOCALE_DATE_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");" ], [ "LOCALE_TIME_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");" ], [ "YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "UTC_OFFSET", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();" ], [ "LOCALE_TIME_ZONE_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");" ], [ "PERCENT", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");" ], [ "jjbitVec0", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoToken = { 0xff01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoSkip = { 0x1eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoToken = { 0xffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "XYZ_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String XYZ_ATTR = \"xyz\";" ], [ "WIDTH_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String WIDTH_ATTR = \"ui.tikz.width\";" ], [ "HEIGHT_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String HEIGHT_ATTR = \"ui.tikz.height\";" ], [ "DEFAULT_WIDTH", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_WIDTH = 10;" ], [ "DEFAULT_HEIGHT", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_HEIGHT = 10;" ], [ "DISPLAY_MIN_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;" ], [ "DISPLAY_MAX_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;" ], [ "jjbitVec0", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };" ], [ "lexStateNames", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoToken = { 0x3ffffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoToken = { 0x3fffffffffffc9L };" ], [ "jjtoSkip", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoSkip = { 0x6L };" ], [ "XMLNS", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";" ], [ "XMLNS_XSI", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";" ], [ "XMLNS_SL", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";" ], [ "XMLNS_VIZ", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";" ], [ "VERSION", "org.graphstream.stream.file.gexf", "GEXF", "public static final String VERSION = \"1.2\";" ], [ "BUFFER_SIZE", "org.graphstream.stream.file.dgs", "DGSParser", "protected static final int BUFFER_SIZE = 4096;" ], [ "ARRAY_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_OPEN = '{';" ], [ "ARRAY_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_CLOSE = '}';" ], [ "MAP_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_OPEN = '[';" ], [ "MAP_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_CLOSE = ']';" ], [ "gradientId", "org.graphstream.stream.file", "FileSinkSVG2", "static int gradientId = 0;" ], [ "gradientId", "org.graphstream.stream.file", "SVGStyle", "static int gradientId = 0;" ], [ "TIME_PREFIX", "org.graphstream.stream", "Timeline", "public static final String TIME_PREFIX = \"time\";" ], [ "SYNC_DISABLE_KEY", "org.graphstream.stream.sync", "SinkTime", "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";" ], [ "disableSync", "org.graphstream.stream.sync", "SinkTime", "protected static final boolean disableSync;" ], [ "LIGHT_YELLOW", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String LIGHT_YELLOW = \"\u001B[33;1m\";" ], [ "RESET", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String RESET = \"\u001B[0m\";" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "IncomingBuffer", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "EVENT_GETVERSION", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_GETVERSION = 0x00;" ], [ "EVENT_START", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_START = 0x01;" ], [ "EVENT_END", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_END = 0x02;" ], [ "EVENT_ADD_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE = 0x10;" ], [ "EVENT_DEL_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE = 0x11;" ], [ "EVENT_ADD_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE = 0x12;" ], [ "EVENT_DEL_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE = 0x13;" ], [ "EVENT_STEP", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_STEP = 0x14;" ], [ "EVENT_CLEARED", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CLEARED = 0x15;" ], [ "EVENT_ADD_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_GRAPH_ATTR = 0x16;" ], [ "EVENT_CHG_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_GRAPH_ATTR = 0x17;" ], [ "EVENT_DEL_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_GRAPH_ATTR = 0x18;" ], [ "EVENT_ADD_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE_ATTR = 0x19;" ], [ "EVENT_CHG_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_NODE_ATTR = 0x1a;" ], [ "EVENT_DEL_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE_ATTR = 0x1b;" ], [ "EVENT_ADD_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE_ATTR = 0x1c;" ], [ "EVENT_CHG_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_EDGE_ATTR = 0x1d;" ], [ "EVENT_DEL_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE_ATTR = 0x1e;" ], [ "TYPE_UNKNOWN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_UNKNOWN = 0x00;" ], [ "TYPE_BOOLEAN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN = 0x50;" ], [ "TYPE_BOOLEAN_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN_ARRAY = 0x51;" ], [ "TYPE_BYTE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE = 0x52;" ], [ "TYPE_BYTE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE_ARRAY = 0x53;" ], [ "TYPE_SHORT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT = 0x54;" ], [ "TYPE_SHORT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT_ARRAY = 0x55;" ], [ "TYPE_INT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT = 0x56;" ], [ "TYPE_INT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT_ARRAY = 0x57;" ], [ "TYPE_LONG", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG = 0x58;" ], [ "TYPE_LONG_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG_ARRAY = 0x59;" ], [ "TYPE_FLOAT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT = 0x5a;" ], [ "TYPE_FLOAT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT_ARRAY = 0x5b;" ], [ "TYPE_DOUBLE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE = 0x5c;" ], [ "TYPE_DOUBLE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE_ARRAY = 0x5d;" ], [ "TYPE_STRING", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_STRING = 0x5e;" ], [ "TYPE_RAW", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_RAW = 0x5f;" ], [ "TYPE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static byte TYPE_ARRAY = 0x60;" ], [ "TYPE_NULL", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_NULL = 0x61;" ], [ "COMMAND", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int COMMAND = 0x70;" ], [ "NO_OPTIONS", "org.graphstream.stream.netstream.packing", "Base64", "public final static int NO_OPTIONS = 0;" ], [ "ENCODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ENCODE = 1;" ], [ "DECODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DECODE = 0;" ], [ "GZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int GZIP = 2;" ], [ "DONT_GUNZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DONT_GUNZIP = 4;" ], [ "DO_BREAK_LINES", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DO_BREAK_LINES = 8;" ], [ "URL_SAFE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int URL_SAFE = 16;" ], [ "ORDERED", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ORDERED = 32;" ], [ "INITIAL_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final int INITIAL_EDGE_CAPACITY;" ], [ "GROWTH_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final double GROWTH_FACTOR = 1.1;" ], [ "I_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char I_EDGE = 0;" ], [ "IO_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char IO_EDGE = 1;" ], [ "O_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char O_EDGE = 2;" ], [ "GROW_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final double GROW_FACTOR = 1.1;" ], [ "DEFAULT_NODE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_NODE_CAPACITY = 128;" ], [ "DEFAULT_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_EDGE_CAPACITY = 1024;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "graph", "org.graphstream.graph", "Graph" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "areEmptyGroupRemoved", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public boolean areEmptyGroupRemoved()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "getNodeCount", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public int getNodeCount()" ], [ "getElement", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected Element getElement(String id, Map<String, String> elt2grp)" ], [ "getGraph", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Graph getGraph(String id)" ], [ "sprites", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<? extends GraphicSprite> sprites()" ], [ "shadows", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<StyleGroup> shadows()" ], [ "getStyleForElement", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup getStyleForElement(Element element)" ], [ "addElement", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup addElement(Element element)" ], [ "containsNode", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public boolean containsNode(String id)" ], [ "zIndex", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<HashSet<StyleGroup>> zIndex()" ], [ "getEdgeIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<? extends Edge> getEdgeIterator()" ], [ "addGroup", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected StyleGroup addGroup(String id, ArrayList<Rule> rules, Element firstElement)" ], [ "graphs", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<? extends Graph> graphs()" ], [ "groups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<? extends StyleGroup> groups()" ], [ "containsEdge", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public boolean containsEdge(String id)" ], [ "getStyleFor", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup getStyleFor(Graph graph)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "containsGraph", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public boolean containsGraph(String id)" ], [ "addElement_", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected StyleGroup addElement_(Element element)" ], [ "getNode", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Node getNode(String id)" ], [ "containsSprite", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public boolean containsSprite(String id)" ], [ "getGraphIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<? extends Graph> getGraphIterator()" ], [ "getStyleFor", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup getStyleFor(Edge edge)" ], [ "getZIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<HashSet<StyleGroup>> getZIterator()" ], [ "getGroupIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<? extends StyleGroup> getGroupIterator()" ], [ "getEdgeCount", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public int getEdgeCount()" ], [ "getEdge", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Edge getEdge(String id)" ], [ "nodes", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<? extends Node> nodes()" ], [ "getStyleFor", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup getStyleFor(GraphicSprite sprite)" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "getShadowSet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public ShadowSet getShadowSet()" ], [ "getNodeIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<? extends Node> getNodeIterator()" ], [ "getShadowIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<StyleGroup> getShadowIterator()" ], [ "edges", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<? extends Edge> edges()" ], [ "getStyleFor", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup getStyleFor(Node node)" ], [ "getGroupCount", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public int getGroupCount()" ], [ "toString", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public String toString()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "getElementGroup", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public String getElementGroup(Element element)" ], [ "getSpriteIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<? extends GraphicSprite> getSpriteIterator()" ], [ "getSprite", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public GraphicSprite getSprite(String id)" ], [ "getZIndex", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public ZIndex getZIndex()" ], [ "getGroup", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup getGroup(String groupId)" ], [ "getSpriteCount", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public int getSpriteCount()" ], [ "removeNode", "org.graphstream.graph", "Graph", "public abstract <T> T removeNode(String arg0) throws ElementNotFoundException" ], [ "addEdge", "org.graphstream.graph", "Graph", "public abstract <T> T addEdge(String arg0, int arg1, int arg2) throws IndexOutOfBoundsException, IdAlreadyInUseException, EdgeRejectedException" ], [ "removeEdge", "org.graphstream.graph", "Graph", "public abstract <T> T removeEdge(String arg0) throws ElementNotFoundException" ], [ "removeEdge", "org.graphstream.graph", "Graph", "public abstract <T> T removeEdge(String arg0, String arg1) throws ElementNotFoundException" ], [ "nullAttributesAreErrors", "org.graphstream.graph", "Graph", "public abstract boolean nullAttributesAreErrors()" ], [ "attributeSinks", "org.graphstream.graph", "Graph", "public abstract Iterable<AttributeSink> attributeSinks()" ], [ "removeEdge", "org.graphstream.graph", "Graph", "public abstract <T> T removeEdge(Edge arg0)" ], [ "addEdge", "org.graphstream.graph", "Graph", "public abstract <T> T addEdge(String arg0, String arg1, String arg2, boolean arg3) throws IdAlreadyInUseException, ElementNotFoundException" ], [ "addEdge", "org.graphstream.graph", "Graph", "public abstract <T> T addEdge(String arg0, String arg1, String arg2) throws IdAlreadyInUseException, ElementNotFoundException, EdgeRejectedException" ], [ "removeEdge", "org.graphstream.graph", "Graph", "public abstract <T> T removeEdge(int arg0) throws IndexOutOfBoundsException" ], [ "getEdge", "org.graphstream.graph", "Graph", "public abstract <T> T getEdge(int arg0) throws IndexOutOfBoundsException" ], [ "removeNode", "org.graphstream.graph", "Graph", "public abstract <T> T removeNode(int arg0) throws IndexOutOfBoundsException" ], [ "getEdge", "org.graphstream.graph", "Graph", "public abstract <T> T getEdge(String arg0)" ], [ "getStep", "org.graphstream.graph", "Graph", "public abstract double getStep()" ], [ "edgeFactory", "org.graphstream.graph", "Graph", "public abstract EdgeFactory<? extends Edge> edgeFactory()" ], [ "display", "org.graphstream.graph", "Graph", "public abstract Viewer display()" ], [ "addEdge", "org.graphstream.graph", "Graph", "public abstract <T> T addEdge(String arg0, int arg1, int arg2, boolean arg3) throws IndexOutOfBoundsException, IdAlreadyInUseException, EdgeRejectedException" ], [ "removeNode", "org.graphstream.graph", "Graph", "public abstract <T> T removeNode(Node arg0)" ], [ "isStrict", "org.graphstream.graph", "Graph", "public abstract boolean isStrict()" ], [ "elementSinks", "org.graphstream.graph", "Graph", "public abstract Iterable<ElementSink> elementSinks()" ], [ "display", "org.graphstream.graph", "Graph", "public abstract Viewer display(boolean arg0)" ], [ "getNode", "org.graphstream.graph", "Graph", "public abstract <T> T getNode(int arg0) throws IndexOutOfBoundsException" ], [ "addEdge", "org.graphstream.graph", "Graph", "public abstract <T> T addEdge(String arg0, Node arg1, Node arg2, boolean arg3) throws IdAlreadyInUseException, EdgeRejectedException" ], [ "addEdge", "org.graphstream.graph", "Graph", "public abstract <T> T addEdge(String arg0, Node arg1, Node arg2) throws IdAlreadyInUseException, EdgeRejectedException" ], [ "removeEdge", "org.graphstream.graph", "Graph", "public abstract <T> T removeEdge(Node arg0, Node arg1) throws ElementNotFoundException" ], [ "removeEdge", "org.graphstream.graph", "Graph", "public abstract <T> T removeEdge(int arg0, int arg1) throws IndexOutOfBoundsException, ElementNotFoundException" ], [ "addNode", "org.graphstream.graph", "Graph", "public abstract <T> T addNode(String arg0) throws IdAlreadyInUseException" ], [ "getNode", "org.graphstream.graph", "Graph", "public abstract <T> T getNode(String arg0)" ], [ "nodeFactory", "org.graphstream.graph", "Graph", "public abstract NodeFactory<? extends Node> nodeFactory()" ], [ "isAutoCreationEnabled", "org.graphstream.graph", "Graph", "public abstract boolean isAutoCreationEnabled()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "getNumber", "org.graphstream.graph", "Element", "public abstract double getNumber(String arg0)" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "public abstract transient <T> T getFirstAttributeOf(String[] arg0)" ], [ "hasAttribute", "org.graphstream.graph", "Element", "public abstract boolean hasAttribute(String arg0, Class<?> arg1)" ], [ "getAttribute", "org.graphstream.graph", "Element", "public abstract <T> T getAttribute(String arg0, Class<T> arg1)" ], [ "hasLabel", "org.graphstream.graph", "Element", "public abstract boolean hasLabel(String arg0)" ], [ "getEachAttributeKey", "org.graphstream.graph", "Element", "public abstract Iterable<String> getEachAttributeKey()" ], [ "getVector", "org.graphstream.graph", "Element", "public abstract ArrayList<? extends Number> getVector(String arg0)" ], [ "getIndex", "org.graphstream.graph", "Element", "public abstract int getIndex()" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)" ], [ "getId", "org.graphstream.graph", "Element", "public abstract String getId()" ], [ "getArray", "org.graphstream.graph", "Element", "public abstract Object[] getArray(String arg0)" ], [ "hasAttribute", "org.graphstream.graph", "Element", "public abstract boolean hasAttribute(String arg0)" ], [ "getLabel", "org.graphstream.graph", "Element", "public abstract CharSequence getLabel(String arg0)" ], [ "getHash", "org.graphstream.graph", "Element", "public abstract HashMap<?, ?> getHash(String arg0)" ], [ "getAttributeKeyIterator", "org.graphstream.graph", "Element", "public abstract Iterator<String> getAttributeKeyIterator()" ], [ "hasArray", "org.graphstream.graph", "Element", "public abstract boolean hasArray(String arg0)" ], [ "getAttributeCount", "org.graphstream.graph", "Element", "public abstract int getAttributeCount()" ], [ "getAttribute", "org.graphstream.graph", "Element", "public abstract <T> T getAttribute(String arg0)" ], [ "hasVector", "org.graphstream.graph", "Element", "public abstract boolean hasVector(String arg0)" ], [ "hasHash", "org.graphstream.graph", "Element", "public abstract boolean hasHash(String arg0)" ], [ "getAttributeKeySet", "org.graphstream.graph", "Element", "public abstract Collection<String> getAttributeKeySet()" ], [ "hasNumber", "org.graphstream.graph", "Element", "public abstract boolean hasNumber(String arg0)" ], [ "spliterator", "java.lang", "Iterable", "public default Spliterator<T> spliterator()" ], [ "iterator", "java.lang", "Iterable", "public abstract Iterator<T> iterator()" ], [ "getNodeSet", "org.graphstream.graph", "Structure", "public abstract <T> Collection<T> getNodeSet()" ], [ "getEdgeIterator", "org.graphstream.graph", "Structure", "public abstract <T> Iterator<T> getEdgeIterator()" ], [ "getEachNode", "org.graphstream.graph", "Structure", "public abstract <T> Iterable<? extends T> getEachNode()" ], [ "getEachEdge", "org.graphstream.graph", "Structure", "public abstract <T> Iterable<? extends T> getEachEdge()" ], [ "getNodeCount", "org.graphstream.graph", "Structure", "public abstract int getNodeCount()" ], [ "getEdgeSet", "org.graphstream.graph", "Structure", "public abstract <T> Collection<T> getEdgeSet()" ], [ "getNodeIterator", "org.graphstream.graph", "Structure", "public abstract <T> Iterator<T> getNodeIterator()" ], [ "getEdgeCount", "org.graphstream.graph", "Structure", "public abstract int getEdgeCount()" ], [ "getElement", "org.graphstream.ui.graphicGraph", "StyleGroup", "public Element getElement(String arg0)" ], [ "dynamicElements", "org.graphstream.ui.graphicGraph", "StyleGroup", "public Iterable<Element> dynamicElements()" ], [ "contains", "org.graphstream.ui.graphicGraph", "StyleGroup", "public boolean contains(String arg0)" ], [ "elementIsDynamic", "org.graphstream.ui.graphicGraph", "StyleGroup", "public boolean elementIsDynamic(Element arg0)" ], [ "getType", "org.graphstream.ui.graphicGraph", "StyleGroup", "public Selector.Type getType()" ], [ "elements", "org.graphstream.ui.graphicGraph", "StyleGroup", "public Iterable<? extends Element> elements()" ], [ "removeRenderer", "org.graphstream.ui.graphicGraph", "StyleGroup", "public GraphicElement.SwingElementRenderer removeRenderer(String arg0)" ], [ "bulkElements", "org.graphstream.ui.graphicGraph", "StyleGroup", "public Iterable<? extends Element> bulkElements()" ], [ "getRenderer", "org.graphstream.ui.graphicGraph", "StyleGroup", "public GraphicElement.SwingElementRenderer getRenderer(String arg0)" ], [ "toString", "org.graphstream.ui.graphicGraph", "StyleGroup", "public String toString()" ], [ "getElementIterator", "org.graphstream.ui.graphicGraph", "StyleGroup", "public Iterator<? extends Element> getElementIterator()" ], [ "getEventsFor", "org.graphstream.ui.graphicGraph", "StyleGroup", "public StyleGroup.ElementEvents getEventsFor(Element arg0)" ], [ "hasEventElements", "org.graphstream.ui.graphicGraph", "StyleGroup", "public boolean hasEventElements()" ], [ "elementHasEvents", "org.graphstream.ui.graphicGraph", "StyleGroup", "public boolean elementHasEvents(Element arg0)" ], [ "isElementDynamic", "org.graphstream.ui.graphicGraph", "StyleGroup", "public boolean isElementDynamic(Element arg0)" ], [ "hasDynamicElements", "org.graphstream.ui.graphicGraph", "StyleGroup", "public boolean hasDynamicElements()" ], [ "contains", "org.graphstream.ui.graphicGraph", "StyleGroup", "public boolean contains(Element arg0)" ], [ "elementsEvents", "org.graphstream.ui.graphicGraph", "StyleGroup", "public Iterable<StyleGroup.ElementEvents> elementsEvents()" ], [ "iterator", "org.graphstream.ui.graphicGraph", "StyleGroup", "public Iterator<Element> iterator()" ], [ "getValue", "org.graphstream.ui.graphicGraph", "StyleGroup", "public transient Object getValue(String arg0, String[] arg1)" ], [ "toString", "org.graphstream.ui.graphicGraph", "StyleGroup", "public String toString(int arg0)" ], [ "isEmpty", "org.graphstream.ui.graphicGraph", "StyleGroup", "public boolean isEmpty()" ], [ "getId", "org.graphstream.ui.graphicGraph", "StyleGroup", "public String getId()" ], [ "getElementCount", "org.graphstream.ui.graphicGraph", "StyleGroup", "public int getElementCount()" ], [ "removeElement", "org.graphstream.ui.graphicGraph", "StyleGroup", "public Element removeElement(Element arg0)" ], [ "getVisibility", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public Values getVisibility()" ], [ "getTextFont", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public String getTextFont()" ], [ "getZIndex", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public Integer getZIndex()" ], [ "getShadowColorCount", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public int getShadowColorCount()" ], [ "getTextSize", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public Value getTextSize()" ], [ "getValue", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public transient Object getValue(String arg0, String[] arg1)" ], [ "getArrowImage", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public String getArrowImage()" ], [ "getPadding", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public Values getPadding()" ], [ "getShadowColors", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public Colors getShadowColors()" ], [ "getJComponent", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public StyleConstants.JComponents getJComponent()" ], [ "getArrowShape", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public StyleConstants.ArrowShape getArrowShape()" ], [ "getFillColors", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public Colors getFillColors()" ], [ "getTextVisibilityMode", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public StyleConstants.TextVisibilityMode getTextVisibilityMode()" ], [ "getSpriteOrientation", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public StyleConstants.SpriteOrientation getSpriteOrientation()" ], [ "getParent", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public Rule getParent()" ], [ "getCanvasColorCount", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public int getCanvasColorCount()" ], [ "getTextVisibility", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public Values getTextVisibility()" ], [ "getTextBackgroundColor", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public Colors getTextBackgroundColor()" ], [ "getTextColor", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public Colors getTextColor()" ], [ "getStrokeColorCount", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public int getStrokeColorCount()" ], [ "getStrokeWidth", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public Value getStrokeWidth()" ], [ "getTextMode", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public StyleConstants.TextMode getTextMode()" ], [ "getCanvasColor", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public Colors getCanvasColor()" ], [ "getValueForEvent", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "protected Object getValueForEvent(String arg0, String arg1)" ], [ "getFillColorCount", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public int getFillColorCount()" ], [ "getTextPadding", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public Values getTextPadding()" ], [ "getShadowMode", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public StyleConstants.ShadowMode getShadowMode()" ], [ "getFillMode", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public StyleConstants.FillMode getFillMode()" ], [ "getTextAlignment", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public StyleConstants.TextAlignment getTextAlignment()" ], [ "toString", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public String toString(int arg0)" ], [ "getTextColorCount", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public int getTextColorCount()" ], [ "getTextOffset", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public Values getTextOffset()" ], [ "getIcon", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public String getIcon()" ], [ "getIconMode", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public StyleConstants.IconMode getIconMode()" ], [ "getFillColor", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public Color getFillColor(int arg0)" ], [ "getTextStyle", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public StyleConstants.TextStyle getTextStyle()" ], [ "getTextBackgroundMode", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public StyleConstants.TextBackgroundMode getTextBackgroundMode()" ], [ "getShadowColor", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public Color getShadowColor(int arg0)" ], [ "getStrokeColor", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public Color getStrokeColor(int arg0)" ], [ "getShadowWidth", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public Value getShadowWidth()" ], [ "getSizeMode", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public StyleConstants.SizeMode getSizeMode()" ], [ "getSize", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public Values getSize()" ], [ "getArrowSize", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public Values getArrowSize()" ], [ "getStrokeMode", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public StyleConstants.StrokeMode getStrokeMode()" ], [ "getStrokeColor", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public Colors getStrokeColor()" ], [ "getTextBackgroundColor", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public Color getTextBackgroundColor(int arg0)" ], [ "getShapePoints", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public Values getShapePoints()" ], [ "getCanvasColor", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public Color getCanvasColor(int arg0)" ], [ "getShadowOffset", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public Values getShadowOffset()" ], [ "getShape", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public StyleConstants.Shape getShape()" ], [ "getVisibilityMode", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public StyleConstants.VisibilityMode getVisibilityMode()" ], [ "getFillImage", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public String getFillImage()" ], [ "getTextColor", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public Color getTextColor(int arg0)" ], [ "toString", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public String toString()" ], [ "hasValue", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "public transient boolean hasValue(String arg0, String[] arg1)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "stylesheet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected StyleSheet stylesheet;" ], [ "groups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected final Map<String,StyleGroup> groups = new TreeMap<String, StyleGroup>();" ], [ "byNodeIdGroups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected final Map<String,String> byNodeIdGroups = new TreeMap<String, String>();" ], [ "byEdgeIdGroups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected final Map<String,String> byEdgeIdGroups = new TreeMap<String, String>();" ], [ "bySpriteIdGroups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected final Map<String,String> bySpriteIdGroups = new TreeMap<String, String>();" ], [ "byGraphIdGroups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected final Map<String,String> byGraphIdGroups = new TreeMap<String, String>();" ], [ "nodeSet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected NodeSet nodeSet = new NodeSet();" ], [ "edgeSet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected EdgeSet edgeSet = new EdgeSet();" ], [ "spriteSet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected SpriteSet spriteSet = new SpriteSet();" ], [ "graphSet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected GraphSet graphSet = new GraphSet();" ], [ "eventSet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected EventSet eventSet = new EventSet();" ], [ "zIndex", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected ZIndex zIndex = new ZIndex();" ], [ "shadow", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected ShadowSet shadow = new ShadowSet();" ], [ "removeEmptyGroups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected boolean removeEmptyGroups = true;" ], [ "listeners", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected ArrayList<StyleGroupListener> listeners = new ArrayList<StyleGroupListener>();" ], [ "id", "org.graphstream.ui.graphicGraph", "StyleGroup", "protected String id;" ], [ "rules", "org.graphstream.ui.graphicGraph", "StyleGroup", "protected ArrayList<Rule> rules;" ], [ "elements", "org.graphstream.ui.graphicGraph", "StyleGroup", "protected HashMap<String, Element> elements;" ], [ "eventSet", "org.graphstream.ui.graphicGraph", "StyleGroup", "protected StyleGroupSet.EventSet eventSet;" ], [ "eventsFor", "org.graphstream.ui.graphicGraph", "StyleGroup", "protected HashMap<Element, StyleGroup.ElementEvents> eventsFor;" ], [ "dynamicOnes", "org.graphstream.ui.graphicGraph", "StyleGroup", "protected HashSet<Element> dynamicOnes;" ], [ "curEvents", "org.graphstream.ui.graphicGraph", "StyleGroup", "protected String[] curEvents;" ], [ "bulkElements", "org.graphstream.ui.graphicGraph", "StyleGroup", "protected StyleGroup.BulkElements bulkElements;" ], [ "renderers", "org.graphstream.ui.graphicGraph", "StyleGroup", "public HashMap<String, GraphicElement.SwingElementRenderer> renderers;" ], [ "parent", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "protected Rule parent;" ], [ "values", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "protected HashMap<String, Object> values;" ], [ "alternates", "org.graphstream.ui.graphicGraph.stylesheet", "Style", "protected HashMap<String, Rule> alternates;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 3267,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "gs-core-1.3",
  "packageName" : "org.graphstream.ui.graphicGraph",
  "className" : "StyleGroupSet",
  "javadocTag" : "@param event The event to pop.",
  "methodJavadoc" : "    /**\n\t * Pop an event specifically for a given element. This is normally done\n\t * automatically by the graphic element.\n\t * \n\t * @param element\n\t *            The element considered.\n\t * @param event\n\t *            The event to pop.\n\t */",
  "methodSourceCode" : "public void popEventFor(Element element, String event){\n    StyleGroup group = getGroup(getElementGroup(element));\n    if (group != null)\n        group.popEventFor(element, event);\n}",
  "classJavadoc" : "/**\n * A set of style groups.\n * \n * <p>\n * This class is in charge or storing all the style groups and to update them.\n * Each time an element is added or removed the groups are updated. Each time\n * the style sheet changes the groups are updated.\n * </p>\n * \n * @author Antoine Dutot\n */",
  "classSourceCode" : "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign√©      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.ui.graphicGraph;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.TreeMap;\nimport org.graphstream.graph.Edge;\nimport org.graphstream.graph.Element;\nimport org.graphstream.graph.Graph;\nimport org.graphstream.graph.Node;\nimport org.graphstream.ui.graphicGraph.stylesheet.Rule;\nimport org.graphstream.ui.graphicGraph.stylesheet.Selector;\nimport org.graphstream.ui.graphicGraph.stylesheet.StyleConstants.ShadowMode;\nimport org.graphstream.ui.graphicGraph.stylesheet.StyleSheet;\nimport org.graphstream.ui.graphicGraph.stylesheet.StyleSheetListener;\n\n/**\n * A set of style groups.\n * \n * <p>\n * This class is in charge or storing all the style groups and to update them.\n * Each time an element is added or removed the groups are updated. Each time\n * the style sheet changes the groups are updated.\n * </p>\n * \n * @author Antoine Dutot\n */\npublic class StyleGroupSet implements StyleSheetListener {\n\t// Attribute\n\n\t/**\n\t * The style sheet.\n\t */\n\tprotected StyleSheet stylesheet;\n\n\t/**\n\t * All the groups indexed by their unique identifier.\n\t */\n\tprotected final Map<String, StyleGroup> groups = new TreeMap<String, StyleGroup>();\n\n\t/**\n\t * Allows to retrieve the group containing a node knowing the node id.\n\t */\n\tprotected final Map<String, String> byNodeIdGroups = new TreeMap<String, String>();\n\n\t/**\n\t * Allows to retrieve the group containing an edge knowing the node id.\n\t */\n\tprotected final Map<String, String> byEdgeIdGroups = new TreeMap<String, String>();\n\n\t/**\n\t * Allows to retrieve the group containing a sprite knowing the node id.\n\t */\n\tprotected final Map<String, String> bySpriteIdGroups = new TreeMap<String, String>();\n\n\t/**\n\t * Allows to retrieve the group containing a graph knowing the node id.\n\t */\n\tprotected final Map<String, String> byGraphIdGroups = new TreeMap<String, String>();\n\n\t/**\n\t * Virtual set of nodes. This set provides fake methods to make it appear as\n\t * a set of nodes whereas it only maps on the node style groups.\n\t */\n\tprotected NodeSet nodeSet = new NodeSet();\n\n\t/**\n\t * Virtual set of edges. This set provides fake methods to make it appear as\n\t * a set of edges whereas it only maps on the edge style groups.\n\t */\n\tprotected EdgeSet edgeSet = new EdgeSet();\n\n\t/**\n\t * Virtual set of sprites. This set provides fake methods to make it appear\n\t * as a set of sprites whereas it only maps on the sprite style groups.\n\t */\n\tprotected SpriteSet spriteSet = new SpriteSet();\n\n\t/**\n\t * Virtual set of graphs. This set provides fake methods to make it appear\n\t * as a set of graphs whereas it only maps on the graph style groups.\n\t */\n\tprotected GraphSet graphSet = new GraphSet();\n\n\t/**\n\t * The set of events actually occurring.\n\t */\n\tprotected EventSet eventSet = new EventSet();\n\n\t/**\n\t * The groups sorted by their Z index.\n\t */\n\tprotected ZIndex zIndex = new ZIndex();\n\n\t/**\n\t * Set of groups that cast shadow.\n\t */\n\tprotected ShadowSet shadow = new ShadowSet();\n\n\t/**\n\t * Remove groups if they become empty?.\n\t */\n\tprotected boolean removeEmptyGroups = true;\n\n\t/**\n\t * Set of listeners.\n\t */\n\tprotected ArrayList<StyleGroupListener> listeners = new ArrayList<StyleGroupListener>();\n\n\t// Construction\n\n\t/**\n\t * New empty style group set, using the given style sheet to create style\n\t * groups. The group set installs itself as a listener of the style sheet.\n\t * So in order to completely stop using such a group, you must call\n\t * {@link #release()}.\n\t * \n\t * @param stylesheet\n\t *            The style sheet to use to create groups.\n\t */\n\tpublic StyleGroupSet(StyleSheet stylesheet) {\n\t\tthis.stylesheet = stylesheet;\n\n\t\tstylesheet.addListener(this);\n\t}\n\n\t// Access\n\n\t/**\n\t * Number of groups.\n\t * \n\t * @return The number of groups.\n\t */\n\tpublic int getGroupCount() {\n\t\treturn groups.size();\n\t}\n\n\t/**\n\t * Return a group by its unique identifier. The way group identifier are\n\t * constructed reflects their contents.\n\t * \n\t * @param groupId\n\t *            The group identifier.\n\t * @return The corresponding group or null if not found.\n\t */\n\tpublic StyleGroup getGroup(String groupId) {\n\t\treturn groups.get(groupId);\n\t}\n\n\t/**\n\t * Iterator on the set of groups in no particular order.\n\t * \n\t * @return An iterator on the group set.\n\t */\n\tpublic Iterator<? extends StyleGroup> getGroupIterator() {\n\t\treturn groups.values().iterator();\n\t}\n\n\t/**\n\t * Iterable set of groups elements, in no particular order.\n\t * \n\t * @return An iterable on the set of groups.\n\t */\n\tpublic Iterable<? extends StyleGroup> groups() {\n\t\treturn groups.values();\n\t}\n\n\t/**\n\t * Iterator on the Z index.\n\t * \n\t * @return The z index iterator.\n\t */\n\tpublic Iterator<HashSet<StyleGroup>> getZIterator() {\n\t\treturn zIndex.getIterator();\n\t}\n\n\t/**\n\t * Iterable set of \"subsets of groups\" sorted by Z level. Each subset of\n\t * groups is at the same Z level.\n\t * \n\t * @return The z levels.\n\t */\n\tpublic Iterable<HashSet<StyleGroup>> zIndex() {\n\t\treturn zIndex;\n\t}\n\n\t/**\n\t * Iterator on the style groups that cast a shadow.\n\t * \n\t * @return The shadow groups iterator.\n\t */\n\tpublic Iterator<StyleGroup> getShadowIterator() {\n\t\treturn shadow.getIterator();\n\t}\n\n\t/**\n\t * Iterable set of groups that cast shadow.\n\t * \n\t * @return All the groups that cast a shadow.\n\t */\n\tpublic Iterable<StyleGroup> shadows() {\n\t\treturn shadow;\n\t}\n\n\t/**\n\t * True if the set contains and styles the node whose identifier is given.\n\t * \n\t * @param id\n\t *            The node identifier.\n\t * @return True if the node is in this set.\n\t */\n\tpublic boolean containsNode(String id) {\n\t\treturn byNodeIdGroups.containsKey(id);\n\t}\n\n\t/**\n\t * True if the set contains and styles the edge whose identifier is given.\n\t * \n\t * @param id\n\t *            The edge identifier.\n\t * @return True if the edge is in this set.\n\t */\n\tpublic boolean containsEdge(String id) {\n\t\treturn byEdgeIdGroups.containsKey(id);\n\t}\n\n\t/**\n\t * True if the set contains and styles the sprite whose identifier is given.\n\t * \n\t * @param id\n\t *            The sprite identifier.\n\t * @return True if the sprite is in this set.\n\t */\n\tpublic boolean containsSprite(String id) {\n\t\treturn bySpriteIdGroups.containsKey(id);\n\t}\n\n\t/**\n\t * True if the set contains and styles the graph whose identifier is given.\n\t * \n\t * @param id\n\t *            The graph identifier.\n\t * @return True if the graph is in this set.\n\t */\n\tpublic boolean containsGraph(String id) {\n\t\treturn byGraphIdGroups.containsKey(id);\n\t}\n\n\t/**\n\t * Get an element.\n\t * \n\t * @param id\n\t *            The element id.\n\t * @param elt2grp\n\t *            The kind of element.\n\t * @return The element or null if not found.\n\t */\n\tprotected Element getElement(String id, Map<String, String> elt2grp) {\n\t\tString gid = elt2grp.get(id);\n\n\t\tif (gid != null) {\n\t\t\tStyleGroup group = groups.get(gid);\n\t\t\treturn group.getElement(id);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Get a node element knowing its identifier.\n\t * \n\t * @param id\n\t *            The node identifier.\n\t * @return The node if it is in this set, else null.\n\t */\n\tpublic Node getNode(String id) {\n\t\treturn (Node) getElement(id, byNodeIdGroups);\n\t}\n\n\t/**\n\t * Get an edge element knowing its identifier.\n\t * \n\t * @param id\n\t *            The edge identifier.\n\t * @return The edge if it is in this set, else null.\n\t */\n\tpublic Edge getEdge(String id) {\n\t\treturn (Edge) getElement(id, byEdgeIdGroups);\n\t}\n\n\t/**\n\t * Get a sprite element knowing its identifier.\n\t * \n\t * @param id\n\t *            The sprite identifier.\n\t * @return The sprite if it is in this set, else null.\n\t */\n\tpublic GraphicSprite getSprite(String id) {\n\t\treturn (GraphicSprite) getElement(id, bySpriteIdGroups);\n\t}\n\n\t/**\n\t * Get a graph element knowing its identifier.\n\t * \n\t * @param id\n\t *            The graph identifier.\n\t * @return The graph if it is in this set, else null.\n\t */\n\tpublic Graph getGraph(String id) {\n\t\treturn (Graph) getElement(id, byGraphIdGroups);\n\t}\n\n\t/**\n\t * The number of nodes referenced.\n\t * \n\t * @return The node count.\n\t */\n\tpublic int getNodeCount() {\n\t\treturn byNodeIdGroups.size();\n\t}\n\n\t/**\n\t * The number of edges referenced.\n\t * \n\t * @return The edge count.\n\t */\n\tpublic int getEdgeCount() {\n\t\treturn byEdgeIdGroups.size();\n\t}\n\n\t/**\n\t * The number of sprites referenced.\n\t * \n\t * @return The sprite count.\n\t */\n\tpublic int getSpriteCount() {\n\t\treturn bySpriteIdGroups.size();\n\t}\n\n\t/**\n\t * Iterator on the set of nodes.\n\t * \n\t * @return An iterator on all node elements contained in style groups.\n\t */\n\tpublic Iterator<? extends Node> getNodeIterator() {\n\t\treturn new ElementIterator<Node>(byNodeIdGroups);\n\t}\n\n\t/**\n\t * Iterator on the set of graphs.\n\t * \n\t * @return An iterator on all graph elements contained in style groups.\n\t */\n\tpublic Iterator<? extends Graph> getGraphIterator() {\n\t\treturn new ElementIterator<Graph>(byGraphIdGroups);\n\t}\n\n\t/**\n\t * Iterable set of nodes.\n\t * \n\t * @return The set of all nodes.\n\t */\n\tpublic Iterable<? extends Node> nodes() {\n\t\treturn nodeSet;\n\t}\n\n\t/**\n\t * Iterable set of graphs.\n\t * \n\t * @return The set of all graphs.\n\t */\n\tpublic Iterable<? extends Graph> graphs() {\n\t\treturn graphSet;\n\t}\n\n\t/**\n\t * Iterator on the set of edges.\n\t * \n\t * @return An iterator on all edge elements contained in style groups.\n\t */\n\tpublic Iterator<? extends Edge> getEdgeIterator() {\n\t\treturn new ElementIterator<Edge>(byEdgeIdGroups);\n\t}\n\n\t/**\n\t * Iterable set of edges.\n\t * \n\t * @return The set of all edges.\n\t */\n\tpublic Iterable<? extends Edge> edges() {\n\t\treturn edgeSet;\n\t}\n\n\t/**\n\t * Iterator on the set of sprite.\n\t * \n\t * @return An iterator on all sprite elements contained in style groups.\n\t */\n\tpublic Iterator<? extends GraphicSprite> getSpriteIterator() {\n\t\treturn new ElementIterator<GraphicSprite>(bySpriteIdGroups);\n\t}\n\n\t/**\n\t * Iterable set of sprites.\n\t * \n\t * @return The set of all sprites.\n\t */\n\tpublic Iterable<? extends GraphicSprite> sprites() {\n\t\treturn spriteSet;\n\t}\n\n\t/**\n\t * Retrieve the group identifier of an element knowing the element\n\t * identifier.\n\t * \n\t * @param element\n\t *            The element to search for.\n\t * @return Identifier of the group containing the element.\n\t */\n\tpublic String getElementGroup(Element element) {\n\t\tif (element instanceof Node) {\n\t\t\treturn byNodeIdGroups.get(element.getId());\n\t\t} else if (element instanceof Edge) {\n\t\t\treturn byEdgeIdGroups.get(element.getId());\n\t\t} else if (element instanceof GraphicSprite) {\n\t\t\treturn bySpriteIdGroups.get(element.getId());\n\t\t} else if (element instanceof Graph) {\n\t\t\treturn byGraphIdGroups.get(element.getId());\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"What ?\");\n\t\t}\n\t}\n\n\t/**\n\t * Get the style of an element.\n\t * \n\t * @param element\n\t *            The element to search for.\n\t * @return The style group of the element (which is also a style).\n\t */\n\tpublic StyleGroup getStyleForElement(Element element) {\n\t\tString gid = getElementGroup(element);\n\n\t\treturn groups.get(gid);\n\t}\n\n\t/**\n\t * Get the style of a given node.\n\t * \n\t * @param node\n\t *            The node to search for.\n\t * @return The node style.\n\t */\n\tpublic StyleGroup getStyleFor(Node node) {\n\t\tString gid = byNodeIdGroups.get(node.getId());\n\t\treturn groups.get(gid);\n\t}\n\n\t/**\n\t * Get the style of a given edge.\n\t * \n\t * @param edge\n\t *            The edge to search for.\n\t * @return The edge style.\n\t */\n\tpublic StyleGroup getStyleFor(Edge edge) {\n\t\tString gid = byEdgeIdGroups.get(edge.getId());\n\t\treturn groups.get(gid);\n\t}\n\n\t/**\n\t * Get the style of a given sprite.\n\t * \n\t * @param sprite\n\t *            The node to search for.\n\t * @return The sprite style.\n\t */\n\tpublic StyleGroup getStyleFor(GraphicSprite sprite) {\n\t\tString gid = bySpriteIdGroups.get(sprite.getId());\n\t\treturn groups.get(gid);\n\t}\n\n\t/**\n\t * Get the style of a given graph.\n\t * \n\t * @param graph\n\t *            The node to search for.\n\t * @return The graph style.\n\t */\n\tpublic StyleGroup getStyleFor(Graph graph) {\n\t\tString gid = byGraphIdGroups.get(graph.getId());\n\t\treturn groups.get(gid);\n\t}\n\n\t/**\n\t * True if groups are removed when becoming empty. This setting allows to\n\t * keep empty group when the set of elements is quite dynamic. This allows\n\t * to avoid recreting groups when an element appears and disappears\n\t * regularly.\n\t * \n\t * @return True if the groups are removed when empty.\n\t */\n\tpublic boolean areEmptyGroupRemoved() {\n\t\treturn removeEmptyGroups;\n\t}\n\n\t/**\n\t * The Z index object.\n\t * \n\t * @return The Z index.\n\t */\n\tpublic ZIndex getZIndex() {\n\t\treturn zIndex;\n\t}\n\n\t/**\n\t * The set of style groups that cast a shadow.\n\t * \n\t * @return The set of shadowed style groups.\n\t */\n\tpublic ShadowSet getShadowSet() {\n\t\treturn shadow;\n\t}\n\n\t// Command\n\n\t/**\n\t * Release any dependency to the style sheet.\n\t */\n\tpublic void release() {\n\t\tstylesheet.removeListener(this);\n\t}\n\n\t/**\n\t * Empties this style group set. The style sheet is listener is not removed,\n\t * use {@link #release()} to do that.\n\t */\n\tpublic void clear() {\n\t\tbyEdgeIdGroups.clear();\n\t\tbyNodeIdGroups.clear();\n\t\tbySpriteIdGroups.clear();\n\t\tbyGraphIdGroups.clear();\n\t\tgroups.clear();\n\t\tzIndex.clear();\n\t\tshadow.clear();\n\t}\n\n\t/**\n\t * Remove or keep groups that becomes empty, if true the groups are removed.\n\t * If this setting was set to false, and is now true, the group set is\n\t * purged of the empty groups.\n\t * \n\t * @param on\n\t *            If true the groups will be removed.\n\t */\n\tpublic void setRemoveEmptyGroups(boolean on) {\n\t\tif (removeEmptyGroups == false && on == true) {\n\t\t\tIterator<? extends StyleGroup> i = groups.values().iterator();\n\n\t\t\twhile (i.hasNext()) {\n\t\t\t\tStyleGroup g = i.next();\n\n\t\t\t\tif (g.isEmpty())\n\t\t\t\t\ti.remove();\n\t\t\t}\n\t\t}\n\n\t\tremoveEmptyGroups = on;\n\t}\n\n\tprotected StyleGroup addGroup(String id, ArrayList<Rule> rules,\n\t\t\tElement firstElement) {\n\t\tStyleGroup group = new StyleGroup(id, rules, firstElement, eventSet);\n\n\t\tgroups.put(id, group);\n\t\tzIndex.groupAdded(group);\n\t\tshadow.groupAdded(group);\n\n\t\treturn group;\n\t}\n\n\tprotected void removeGroup(StyleGroup group) {\n\t\tzIndex.groupRemoved(group);\n\t\tshadow.groupRemoved(group);\n\t\tgroups.remove(group.getId());\n\t\tgroup.release();\n\t}\n\n\t/**\n\t * Add an element and bind it to its style group. The group is created if\n\t * needed.\n\t * \n\t * @param element\n\t *            The element to add.\n\t * @return The style group where the element was added.\n\t */\n\tpublic StyleGroup addElement(Element element) {\n\t\tStyleGroup group = addElement_(element);\n\n\t\tfor (StyleGroupListener listener : listeners)\n\t\t\tlistener.elementStyleChanged(element, null, group);\n\n\t\treturn group;\n\t}\n\n\tprotected StyleGroup addElement_(Element element) {\n\t\tArrayList<Rule> rules = stylesheet.getRulesFor(element);\n\t\tString gid = stylesheet.getStyleGroupIdFor(element, rules);\n\t\tStyleGroup group = groups.get(gid);\n\n\t\tif (group == null)\n\t\t\tgroup = addGroup(gid, rules, element);\n\t\telse\n\t\t\tgroup.addElement(element);\n\n\t\taddElementToReverseSearch(element, gid);\n\n\t\treturn group;\n\t}\n\n\t/**\n\t * Remove an element from the group set. If the group becomes empty after\n\t * the element removal, depending on the setting of\n\t * {@link #areEmptyGroupRemoved()}, the group is deleted or kept. Keeping\n\t * groups allows to handle faster elements that constantly appear and\n\t * disappear.\n\t * \n\t * @param element\n\t *            The element to remove.\n\t */\n\tpublic void removeElement(Element element) {\n\t\tString gid = getElementGroup(element);\n        if (null == gid)\n        {\n            return;\n        }\n\t\tStyleGroup group = groups.get(gid);\n\n\t\tif (group != null) {\n\t\t\tgroup.removeElement(element);\n\t\t\tremoveElementFromReverseSearch(element);\n\n\t\t\tif (removeEmptyGroups && group.isEmpty())\n\t\t\t\tremoveGroup(group);\n\t\t}\n\t}\n\n\t/**\n\t * Check if an element need to change from a style group to another.\n\t * \n\t * <p>\n\t * When an element can have potentially changed style due to some of its\n\t * attributes (ui.class for example), instead of removing it then reading\n\t * it, use this method to move the element from its current style group to a\n\t * potentially different style group.\n\t * </p>\n\t * \n\t * <p>\n\t * Explanation of this method : checking the style of an element may be done\n\t * by removing it ({@link #removeElement(Element)}) and then re-adding it (\n\t * {@link #addElement(Element)}). This must be done by the element since it\n\t * knows when to check this. However you cannot only remove and add, since\n\t * the style group inside which the element is can have events occurring on\n\t * it, and these events must be passed from its old style to its new style.\n\t * This method does all this information passing.\n\t * </p>\n\t * \n\t * @param element\n\t *            The element to move.\n\t */\n\tpublic void checkElementStyleGroup(Element element) {\n\t\tStyleGroup oldGroup = getGroup(getElementGroup(element));\n\n\t\t// Get the old element \"dynamic\" status.\n\n\t\tboolean isDyn = false;\n\n\t\t// Get the old event set for the given element.\n\n\t\tStyleGroup.ElementEvents events = null;\n\n\t\tif (oldGroup != null) {\n\t\t\tisDyn = oldGroup.isElementDynamic(element);\n\t\t\tevents = oldGroup.getEventsFor(element);\n\t\t}\n\n\t\t// Remove the element from its old style and add it to insert it in the\n\t\t// correct style.\n\n\t\tremoveElement(element);\n\t\taddElement_(element);\n\n\t\t// Eventually push the events on the new style group.\n\n\t\tStyleGroup newGroup = getGroup(getElementGroup(element));\n\n\t\tif (newGroup != null && events != null) {\n\t\t\tfor (String event : events.events)\n\t\t\t\tpushEventFor(element, event);\n\t\t}\n\n\t\tfor (StyleGroupListener listener : listeners)\n\t\t\tlistener.elementStyleChanged(element, oldGroup, newGroup);\n\n\t\t// Eventually set the element as dynamic, if it was.\n\n\t\tif (newGroup != null && isDyn)\n\t\t\tnewGroup.pushElementAsDynamic(element);\n\t}\n\n\tprotected void addElementToReverseSearch(Element element, String groupId) {\n\t\tif (element instanceof Node) {\n\t\t\tbyNodeIdGroups.put(element.getId(), groupId);\n\t\t} else if (element instanceof Edge) {\n\t\t\tbyEdgeIdGroups.put(element.getId(), groupId);\n\t\t} else if (element instanceof GraphicSprite) {\n\t\t\tbySpriteIdGroups.put(element.getId(), groupId);\n\t\t} else if (element instanceof Graph) {\n\t\t\tbyGraphIdGroups.put(element.getId(), groupId);\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"What ?\");\n\t\t}\n\t}\n\n\tprotected void removeElementFromReverseSearch(Element element) {\n\t\tif (element instanceof Node) {\n\t\t\tbyNodeIdGroups.remove(element.getId());\n\t\t} else if (element instanceof Edge) {\n\t\t\tbyEdgeIdGroups.remove(element.getId());\n\t\t} else if (element instanceof GraphicSprite) {\n\t\t\tbySpriteIdGroups.remove(element.getId());\n\t\t} else if (element instanceof Graph) {\n\t\t\tbyGraphIdGroups.remove(element.getId());\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"What ?\");\n\t\t}\n\t}\n\n\t/**\n\t * Push a global event on the event stack. Events trigger the replacement of\n\t * a style by an alternative style (or meta-class) when possible. If an\n\t * event is on the event stack, each time a style has an alternative\n\t * corresponding to the event, the alternative is used instead of the style.\n\t * \n\t * @param event\n\t *            The event to push.\n\t */\n\tpublic void pushEvent(String event) {\n\t\teventSet.pushEvent(event);\n\t}\n\n\t/**\n\t * Push an event specifically for a given element. This is normally done\n\t * automatically by the graphic element.\n\t * \n\t * @param element\n\t *            The element considered.\n\t * @param event\n\t *            The event to push.\n\t */\n\tpublic void pushEventFor(Element element, String event) {\n\t\tStyleGroup group = getGroup(getElementGroup(element));\n\n\t\tif (group != null)\n\t\t\tgroup.pushEventFor(element, event);\n\t}\n\n\t/**\n\t * Pop a global event from the event set.\n\t * \n\t * @param event\n\t *            The event to remove.\n\t */\n\tpublic void popEvent(String event) {\n\t\teventSet.popEvent(event);\n\t}\n\n\t/**\n\t * Pop an event specifically for a given element. This is normally done\n\t * automatically by the graphic element.\n\t * \n\t * @param element\n\t *            The element considered.\n\t * @param event\n\t *            The event to pop.\n\t */\n\tpublic void popEventFor(Element element, String event) {\n\t\tStyleGroup group = getGroup(getElementGroup(element));\n\n\t\tif (group != null)\n\t\t\tgroup.popEventFor(element, event);\n\t}\n\n\t/**\n\t * Specify the given element has dynamic style attribute values. This is\n\t * normally done automatically by the graphic element.\n\t * \n\t * @param element\n\t *            The element to add to the dynamic subset.\n\t */\n\tpublic void pushElementAsDynamic(Element element) {\n\t\tStyleGroup group = getGroup(getElementGroup(element));\n\n\t\tif (group != null)\n\t\t\tgroup.pushElementAsDynamic(element);\n\t}\n\n\t/**\n\t * Remove the given element from the subset of elements having dynamic style\n\t * attribute values. This is normally done automatically by the graphic\n\t * element.\n\t * \n\t * @param element\n\t *            The element to remove from the dynamic subset.\n\t */\n\tpublic void popElementAsDynamic(Element element) {\n\t\tStyleGroup group = getGroup(getElementGroup(element));\n\n\t\tif (group != null)\n\t\t\tgroup.popElementAsDynamic(element);\n\t}\n\n\t/**\n\t * Add a listener for element style changes.\n\t * \n\t * @param listener\n\t *            The listener to add.\n\t */\n\tpublic void addListener(StyleGroupListener listener) {\n\t\tlisteners.add(listener);\n\t}\n\n\t/**\n\t * Remove a style change listener.\n\t * \n\t * @param listener\n\t *            The listener to remove.\n\t */\n\tpublic void removeListener(StyleGroupListener listener) {\n\t\tint index = listeners.lastIndexOf(listener);\n\n\t\tif (index >= 0) {\n\t\t\tlisteners.remove(index);\n\t\t}\n\t}\n\n\t// Listener -- What to do when a change occurs in the style sheet.\n\n\tpublic void styleAdded(Rule oldRule, Rule newRule) {\n\t\t// When a style change, we need to update groups.\n\t\t// Several cases :\n\t\t// 1. The style already exists\n\t\t// * Nothing to do in fact. All the elements are still in place.\n\t\t// No style rule (selectors) changed, and therefore we do not have\n\t\t// to change the groups since they are built using the selectors.\n\t\t// 2. The style is new\n\t\t// * we need to check all the groups concerning this kind of element (we\n\t\t// can\n\t\t// restrict our search to these groups, since other will not be\n\t\t// impacted),\n\t\t// and check all elements of these groups.\n\n\t\tif (oldRule == null)\n\t\t\tcheckForNewStyle(newRule); // no need to check Z and shadow, done\n\t\t\t\t\t\t\t\t\t\t// when adding/changing group.\n\t\telse\n\t\t\tcheckZIndexAndShadow(oldRule, newRule);\n\t}\n\n\tpublic void styleSheetCleared() {\n\t\tArrayList<Element> elements = new ArrayList<Element>();\n\n\t\tfor (Element element : graphs())\n\t\t\telements.add(element);\n\n\t\tfor (Element element : nodes())\n\t\t\telements.add(element);\n\n\t\tfor (Element element : edges())\n\t\t\telements.add(element);\n\n\t\tfor (Element element : sprites())\n\t\t\telements.add(element);\n\n\t\tclear();\n\n\t\tfor (Element element : elements)\n\t\t\tremoveElement(element);\n\n\t\tfor (Element element : elements)\n\t\t\taddElement(element);\n\t}\n\n\t/**\n\t * Check each group that may have changed, for example to rebuild the Z\n\t * index and the shadow set.\n\t * \n\t * @param oldRule\n\t *            The old rule that changed.\n\t * @param newRule\n\t *            The new rule that participated in the change.\n\t */\n\tprotected void checkZIndexAndShadow(Rule oldRule, Rule newRule) {\n\t\tif (oldRule != null) {\n\t\t\tif (oldRule.selector.getId() != null\n\t\t\t\t\t|| oldRule.selector.getClazz() != null) {\n\t\t\t\t// We may accelerate things a bit when a class or id style is\n\t\t\t\t// modified,\n\t\t\t\t// since only the groups listed in the style are concerned (we\n\t\t\t\t// are at the\n\t\t\t\t// bottom of the inheritance tree).\n\t\t\t\tif (oldRule.getGroups() != null)\n\t\t\t\t\tfor (String s : oldRule.getGroups()) {\n\t\t\t\t\t\tStyleGroup group = groups.get(s);\n\t\t\t\t\t\tif (group != null) {\n\t\t\t\t\t\t\tzIndex.groupChanged(group);\n\t\t\t\t\t\t\tshadow.groupChanged(group);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// For kind styles \"NODE\", \"EDGE\", \"GRAPH\", \"SPRITE\", we must\n\t\t\t\t// reset\n\t\t\t\t// the whole Z and shadows for the kind, since several styles\n\t\t\t\t// may\n\t\t\t\t// have changed.\n\n\t\t\t\tSelector.Type type = oldRule.selector.type;\n\n\t\t\t\tfor (StyleGroup group : groups.values()) {\n\t\t\t\t\tif (group.getType() == type) {\n\t\t\t\t\t\tzIndex.groupChanged(group);\n\t\t\t\t\t\tshadow.groupChanged(group);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * We try to avoid at most to affect anew styles to elements and to recreate\n\t * groups, which is time consuming.\n\t * \n\t * Two cases :\n\t * <ol>\n\t * <li>The style is an specific (id) style. In this case a new group may be\n\t * added.\n\t * <ul>\n\t * <li>check an element matches the style and in this case create the group\n\t * by adding the element.</li>\n\t * <li>else do nothing.</li>\n\t * </ul>\n\t * </li>\n\t * <li>The style is a kind or class style.\n\t * <ul>\n\t * <li>check all the groups in the kind of the style (graph, node, edge,\n\t * sprite) and only in this kind (since other will never be affected).</li>\n\t * <li>remove all groups of this kind.</li>\n\t * <li>add all elements of this kind anew to recreate the group.</li>\n\t * </ul>\n\t * </li>\n\t * </ol>\n\t */\n\tprotected void checkForNewStyle(Rule newRule) {\n\t\tswitch (newRule.selector.type) {\n\t\tcase GRAPH:\n\t\t\tif (newRule.selector.getId() != null)\n\t\t\t\tcheckForNewIdStyle(newRule, byGraphIdGroups);\n\t\t\telse\n\t\t\t\tcheckForNewStyle(newRule, byGraphIdGroups);\n\t\t\tbreak;\n\t\tcase NODE:\n\t\t\tif (newRule.selector.getId() != null)\n\t\t\t\tcheckForNewIdStyle(newRule, byNodeIdGroups);\n\t\t\telse\n\t\t\t\tcheckForNewStyle(newRule, byNodeIdGroups);\n\t\t\tbreak;\n\t\tcase EDGE:\n\t\t\tif (newRule.selector.getId() != null)\n\t\t\t\tcheckForNewIdStyle(newRule, byEdgeIdGroups);\n\t\t\telse\n\t\t\t\tcheckForNewStyle(newRule, byEdgeIdGroups);\n\t\t\tbreak;\n\t\tcase SPRITE:\n\t\t\tif (newRule.selector.getId() != null)\n\t\t\t\tcheckForNewIdStyle(newRule, bySpriteIdGroups);\n\t\t\telse\n\t\t\t\tcheckForNewStyle(newRule, bySpriteIdGroups);\n\t\t\tbreak;\n\t\tcase ANY:\n\t\tdefault:\n\t\t\tthrow new RuntimeException(\"What ?\");\n\t\t}\n\t}\n\n\t/**\n\t * Check for a new specific style (applies only to one element).\n\t * \n\t * @param newRule\n\t *            The new style rule.\n\t * @param elt2grp\n\t *            The name space.\n\t */\n\tprotected void checkForNewIdStyle(Rule newRule,\n\t\t\tMap<String, String> elt2grp) {\n\t\t// There is only one element that matches the identifier.\n\n\t\tElement element = getElement(newRule.selector.getId(), elt2grp);\n\n\t\tif (element != null) {\n\t\t\tcheckElementStyleGroup(element);\n\t\t\t// removeElement( element ); // Remove the element from its old\n\t\t\t// group. Potentially delete a group.\n\t\t\t// addElement( element ); // Add the element to its new own group\n\t\t\t// (since this is an ID style).\n\t\t}\n\t}\n\n\t/**\n\t * Check for a new kind or class style in a given name space (node, edge,\n\t * sprite, graph).\n\t * \n\t * @param newRule\n\t *            The new style rule.\n\t * @param elt2grp\n\t *            The name space.\n\t */\n\tprotected void checkForNewStyle(Rule newRule,\n\t\t\tMap<String, String> elt2grp) {\n\t\tCollection<Element> elementsToCheck = new ArrayList<Element>();\n\n\t\tfor (String eltId : elt2grp.keySet())\n\t\t\telementsToCheck.add(getElement(eltId, elt2grp));\n\n\t\tfor (Element element : elementsToCheck) {\n\t\t\tcheckElementStyleGroup(element);\n\t\t\t// removeElement( element );\n\t\t\t// addElement( element );\n\t\t}\n\t}\n\n\t// Utility\n\n\t@Override\n\tpublic String toString() {\n\t\tStringBuilder builder = new StringBuilder();\n\n\t\tbuilder.append(String.format(\"Style groups (%d) :%n\", groups.size()));\n\n\t\tfor (StyleGroup group : groups.values()) {\n\t\t\tbuilder.append(group.toString(1));\n\t\t\tbuilder.append(String.format(\"%n\"));\n\t\t}\n\n\t\treturn builder.toString();\n\t}\n\n\t// Inner classes\n\n\t/**\n\t * Set of events (meta-classes) actually active.\n\t * \n\t * <p>\n\t * The event set contains the set of events actually occurring. This is used\n\t * to select alternate styles. The events actually occurring are in\n\t * precedence order. The last one is the most important.\n\t * </p>\n\t * \n\t * @author Antoine Dutot\n\t */\n\tpublic class EventSet {\n\t\tpublic ArrayList<String> eventSet = new ArrayList<String>();\n\n\t\tpublic String events[] = new String[0];\n\n\t\t/**\n\t\t * Add an event to the set.\n\t\t * \n\t\t * @param event\n\t\t *            The event to add.\n\t\t */\n\t\tpublic void pushEvent(String event) {\n\t\t\teventSet.add(event);\n\t\t\tevents = eventSet.toArray(events);\n\t\t}\n\n\t\t/**\n\t\t * Remove an event from the set.\n\t\t * \n\t\t * @param event\n\t\t *            The event to remove.\n\t\t */\n\t\tpublic void popEvent(String event) {\n\t\t\tint index = eventSet.lastIndexOf(event);\n\n\t\t\tif (index >= 0)\n\t\t\t\teventSet.remove(index);\n\n\t\t\tevents = eventSet.toArray(events);\n\t\t}\n\n\t\t/**\n\t\t * The set of events in order, the most important at the end.\n\t\t * \n\t\t * @return The event set.\n\t\t */\n\t\tpublic String[] getEvents() {\n\t\t\treturn events;\n\t\t}\n\t}\n\n\t/**\n\t * All the style groups sorted by their Z index.\n\t * \n\t * <p>\n\t * This structure is maintained by each time a group is added or removed, or\n\t * when the style of a group changed.\n\t * </p>\n\t * \n\t * @author Antoine Dutot\n\t */\n\tpublic class ZIndex implements Iterable<HashSet<StyleGroup>> {\n\t\t/**\n\t\t * Ordered set of groups.\n\t\t */\n\t\tpublic ArrayList<HashSet<StyleGroup>> zIndex = new ArrayList<HashSet<StyleGroup>>();\n\n\t\t/**\n\t\t * Knowing a group, tell if its Z index.\n\t\t */\n\t\tpublic HashMap<String, Integer> reverseZIndex = new HashMap<String, Integer>();\n\n\t\t/**\n\t\t * New empty Z index.\n\t\t */\n\t\tpublic ZIndex() {\n\t\t\tinitZIndex();\n\t\t}\n\n\t\tprotected void initZIndex() {\n\t\t\tzIndex.ensureCapacity(256);\n\n\t\t\tfor (int i = 0; i < 256; i++)\n\t\t\t\tzIndex.add(null);\n\t\t}\n\n\t\t/**\n\t\t * Iterator on the set of Z index cells. Each item is a set of style\n\t\t * groups that pertain to the same Z index.\n\t\t * \n\t\t * @return Iterator on the Z index.\n\t\t */\n\t\tprotected Iterator<HashSet<StyleGroup>> getIterator() {\n\t\t\treturn new ZIndexIterator();\n\t\t}\n\n\t\tpublic Iterator<HashSet<StyleGroup>> iterator() {\n\t\t\treturn getIterator();\n\t\t}\n\n\t\t/**\n\t\t * A new group appeared, put it in the z index.\n\t\t * \n\t\t * @param group\n\t\t *            The group to add.\n\t\t */\n\t\tprotected void groupAdded(StyleGroup group) {\n\t\t\tint z = convertZ(group.getZIndex());\n\n\t\t\tif (zIndex.get(z) == null)\n\t\t\t\tzIndex.set(z, new HashSet<StyleGroup>());\n\n\t\t\tzIndex.get(z).add(group);\n\t\t\treverseZIndex.put(group.getId(), z);\n\t\t}\n\n\t\t/**\n\t\t * A group eventually changed, check its location.\n\t\t * \n\t\t * @param group\n\t\t *            The group to check.\n\t\t */\n\t\tprotected void groupChanged(StyleGroup group) {\n\t\t\tint oldZ = reverseZIndex.get(group.getId());\n\t\t\tint newZ = convertZ(group.getZIndex());\n\n\t\t\tif (oldZ != newZ) {\n\t\t\t\tHashSet<StyleGroup> map = zIndex.get(oldZ);\n\n\t\t\t\tif (map != null) {\n\t\t\t\t\tmap.remove(group);\n\t\t\t\t\treverseZIndex.remove(group.getId());\n\n\t\t\t\t\tif (map.isEmpty())\n\t\t\t\t\t\tzIndex.set(oldZ, null);\n\t\t\t\t}\n\n\t\t\t\tgroupAdded(group);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * A group was removed, remove it from the Z index.\n\t\t * \n\t\t * @param group\n\t\t *            The group to remove.\n\t\t */\n\t\tprotected void groupRemoved(StyleGroup group) {\n\t\t\tint z = convertZ(group.getZIndex());\n\n\t\t\tHashSet<StyleGroup> map = zIndex.get(z);\n\n\t\t\tif (map != null) {\n\t\t\t\tmap.remove(group);\n\t\t\t\treverseZIndex.remove(group.getId());\n\n\t\t\t\tif (map.isEmpty())\n\t\t\t\t\tzIndex.set(z, null);\n\t\t\t} else {\n\t\t\t\tthrow new RuntimeException(\"Inconsistency in Z-index\");\n\t\t\t}\n\t\t}\n\n\t\tpublic void clear() {\n\t\t\tzIndex.clear();\n\t\t\treverseZIndex.clear();\n\t\t\tinitZIndex();\n\t\t}\n\n\t\t/**\n\t\t * Convert a [-127,127] value into a [0,255] value and check bounds.\n\t\t * \n\t\t * @param z\n\t\t *            The Z value to convert.\n\t\t * @return The Z value converted and bounded to [0,255].\n\t\t */\n\t\tprotected int convertZ(int z) {\n\t\t\tz += 127;\n\n\t\t\tif (z < 0)\n\t\t\t\tz = 0;\n\t\t\telse if (z > 255)\n\t\t\t\tz = 255;\n\n\t\t\treturn z;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\tStringBuilder sb = new StringBuilder();\n\n\t\t\tsb.append(String.format(\"Z index :%n\"));\n\n\t\t\tfor (int i = 0; i < 256; i++) {\n\t\t\t\tif (zIndex.get(i) != null) {\n\t\t\t\t\tsb.append(String.format(\"    * %d -> \", i - 127));\n\n\t\t\t\t\tHashSet<StyleGroup> map = zIndex.get(i);\n\n\t\t\t\t\tfor (StyleGroup g : map)\n\t\t\t\t\t\tsb.append(String.format(\"%s \", g.getId()));\n\n\t\t\t\t\tsb.append(String.format(\"%n\"));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn sb.toString();\n\t\t}\n\n\t\tpublic class ZIndexIterator implements Iterator<HashSet<StyleGroup>> {\n\t\t\tpublic int index = 0;\n\n\t\t\tpublic ZIndexIterator() {\n\t\t\t\tzapUntilACell();\n\t\t\t}\n\n\t\t\tprotected void zapUntilACell() {\n\t\t\t\twhile (index < 256 && zIndex.get(index) == null)\n\t\t\t\t\tindex++;\n\t\t\t}\n\n\t\t\tpublic boolean hasNext() {\n\t\t\t\treturn (index < 256);\n\t\t\t}\n\n\t\t\tpublic HashSet<StyleGroup> next() {\n\t\t\t\tif (hasNext()) {\n\t\t\t\t\tHashSet<StyleGroup> cell = zIndex.get(index);\n\t\t\t\t\tindex++;\n\t\t\t\t\tzapUntilACell();\n\t\t\t\t\treturn cell;\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tpublic void remove() {\n\t\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\t\"This iterator does not support removal.\");\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Set of groups that cast a shadow.\n\t * \n\t * @author Antoine Dutot\n\t */\n\tpublic class ShadowSet implements Iterable<StyleGroup> {\n\t\t/**\n\t\t * The set of groups casting shadow.\n\t\t */\n\t\tprotected HashSet<StyleGroup> shadowSet = new HashSet<StyleGroup>();\n\n\t\t/**\n\t\t * Iterator on the set of groups that cast a shadow.\n\t\t * \n\t\t * @return An iterator on the shadow style group set.\n\t\t */\n\t\tprotected Iterator<StyleGroup> getIterator() {\n\t\t\treturn shadowSet.iterator();\n\t\t}\n\n\t\tpublic Iterator<StyleGroup> iterator() {\n\t\t\treturn getIterator();\n\t\t}\n\n\t\t/**\n\t\t * A group appeared, check its shadow status.\n\t\t * \n\t\t * @param group\n\t\t *            The group added.\n\t\t */\n\t\tprotected void groupAdded(StyleGroup group) {\n\t\t\tif (group.getShadowMode() != ShadowMode.NONE)\n\t\t\t\tshadowSet.add(group);\n\t\t}\n\n\t\t/**\n\t\t * A group eventually changed, check its shadow status.\n\t\t * \n\t\t * @param group\n\t\t *            The group that changed.\n\t\t */\n\t\tprotected void groupChanged(StyleGroup group) {\n\t\t\tif (group.getShadowMode() == ShadowMode.NONE)\n\t\t\t\tshadowSet.remove(group);\n\t\t\telse\n\t\t\t\tshadowSet.add(group);\n\t\t}\n\n\t\t/**\n\t\t * A group was removed, remove it from the shadow if needed.\n\t\t * \n\t\t * @param group\n\t\t *            The group removed.\n\t\t */\n\t\tprotected void groupRemoved(StyleGroup group) {\n\t\t\t// Faster than to first test its existence or shadow status :\n\n\t\t\tshadowSet.remove(group);\n\t\t}\n\n\t\tprotected void clear() {\n\t\t\tshadowSet.clear();\n\t\t}\n\t}\n\n\t/**\n\t * Iterator that allows to browse all graph elements of a given kind (nodes,\n\t * edges, sprites, graphs) as if they where in a single set, whereas they\n\t * are in style groups.\n\t * \n\t * @author Antoine Dutot\n\t * @param <E>\n\t *            The kind of graph element.\n\t */\n\tprotected class ElementIterator<E extends Element> implements Iterator<E> {\n\t\tprotected Map<String, String> elt2grp;\n\n\t\tprotected Iterator<String> elts;\n\n\t\tpublic ElementIterator(final Map<String, String> elements2groups) {\n\t\t\telt2grp = elements2groups;\n\t\t\telts = elements2groups.keySet().iterator();\n\t\t}\n\n\t\tpublic boolean hasNext() {\n\t\t\treturn elts.hasNext();\n\t\t}\n\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tpublic E next() {\n\t\t\tString eid = elts.next();\n\t\t\tString gid = elt2grp.get(eid);\n\t\t\tStyleGroup grp = groups.get(gid);\n\n\t\t\treturn (E) grp.getElement(eid);\n\t\t}\n\n\t\tpublic void remove() {\n\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\"remove not implemented in this iterator\");\n\t\t}\n\t}\n\n\t/**\n\t * Dummy set of nodes.\n\t */\n\tprotected class NodeSet implements Iterable<Node> {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tpublic Iterator<Node> iterator() {\n\t\t\treturn (Iterator<Node>) getNodeIterator();\n\t\t}\n\t}\n\n\t/**\n\t * Dummy set of edges.\n\t */\n\tprotected class EdgeSet implements Iterable<Edge> {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tpublic Iterator<Edge> iterator() {\n\t\t\treturn (Iterator<Edge>) getEdgeIterator();\n\t\t}\n\t}\n\n\t/**\n\t * Dummy set of sprites.\n\t */\n\tprotected class SpriteSet implements Iterable<GraphicSprite> {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tpublic Iterator<GraphicSprite> iterator() {\n\t\t\treturn (Iterator<GraphicSprite>) getSpriteIterator();\n\t\t}\n\t}\n\n\tprotected class GraphSet implements Iterable<GraphicGraph> {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tpublic Iterator<GraphicGraph> iterator() {\n\t\t\treturn (Iterator<GraphicGraph>) getGraphIterator();\n\t\t}\n\t}\n\n}",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "DefaultCamera", "org.graphstream.ui.swingViewer.util" ], [ "GradientFactory", "org.graphstream.ui.swingViewer.util" ], [ "GraphMetrics", "org.graphstream.ui.swingViewer.util" ], [ "Graphics2DOutput", "org.graphstream.ui.swingViewer.util" ], [ "ImageCache", "org.graphstream.ui.swingViewer.util" ], [ "StrokeFactory", "org.graphstream.ui.swingViewer.util" ], [ "FontCache", "org.graphstream.ui.swingViewer.util" ], [ "FontSlot", "org.graphstream.ui.swingViewer.util" ], [ "DefaultView", "org.graphstream.ui.swingViewer" ], [ "SpriteRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "ElementRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "NodeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "Arrow", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "Shape", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "EdgeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "SwingBasicGraphRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "GraphRendererBase", "org.graphstream.ui.swingViewer" ], [ "GraphRenderer", "org.graphstream.ui.swingViewer" ], [ "LayerRenderer", "org.graphstream.ui.swingViewer" ], [ "ViewPanel", "org.graphstream.ui.swingViewer" ], [ "Layouts", "org.graphstream.ui.layout" ], [ "Layout", "org.graphstream.ui.layout" ], [ "LayoutRunner", "org.graphstream.ui.layout" ], [ "NodeParticle", "org.graphstream.ui.layout.springbox" ], [ "GraphCellData", "org.graphstream.ui.layout.springbox" ], [ "EdgeSpring", "org.graphstream.ui.layout.springbox" ], [ "Energies", "org.graphstream.ui.layout.springbox" ], [ "BarnesHutLayout", "org.graphstream.ui.layout.springbox" ], [ "LinLog", "org.graphstream.ui.layout.springbox.implementations" ], [ "LinLogNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBoxNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBox", "org.graphstream.ui.layout.springbox.implementations" ], [ "Point2", "org.graphstream.ui.geom" ], [ "Vector2", "org.graphstream.ui.geom" ], [ "Vector3", "org.graphstream.ui.geom" ], [ "Point3", "org.graphstream.ui.geom" ], [ "ViewerListener", "org.graphstream.ui.view" ], [ "MouseManager", "org.graphstream.ui.view.util" ], [ "ShortcutManager", "org.graphstream.ui.view.util" ], [ "DefaultShortcutManager", "org.graphstream.ui.view.util" ], [ "FpsCounter", "org.graphstream.ui.view.util" ], [ "CubicCurve", "org.graphstream.ui.view.util" ], [ "DefaultMouseManager", "org.graphstream.ui.view.util" ], [ "Selection", "org.graphstream.ui.view" ], [ "ViewerPipe", "org.graphstream.ui.view" ], [ "Viewer", "org.graphstream.ui.view" ], [ "View", "org.graphstream.ui.view" ], [ "Camera", "org.graphstream.ui.view" ], [ "Sprite", "org.graphstream.ui.spriteManager" ], [ "InvalidSpriteIDException", "org.graphstream.ui.spriteManager" ], [ "SpriteManager", "org.graphstream.ui.spriteManager" ], [ "SpriteFactory", "org.graphstream.ui.spriteManager" ], [ "StyleGroupListener", "org.graphstream.ui.graphicGraph" ], [ "Colors", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Values", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetListener", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetParserTokenManager", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParserConstants", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParser", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "Style", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheet", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleConstants", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Selector", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Value", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Rule", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "GraphicNode", "org.graphstream.ui.graphicGraph" ], [ "StyleGroup", "org.graphstream.ui.graphicGraph" ], [ "GraphPosLengthUtils", "org.graphstream.ui.graphicGraph" ], [ "GraphicEdge", "org.graphstream.ui.graphicGraph" ], [ "GraphicElementChangeListener", "org.graphstream.ui.graphicGraph" ], [ "GraphicGraph", "org.graphstream.ui.graphicGraph" ], [ "StyleGroupSet", "org.graphstream.ui.graphicGraph" ], [ "GraphicSprite", "org.graphstream.ui.graphicGraph" ], [ "GraphicElement", "org.graphstream.ui.graphicGraph" ], [ "VerboseSink", "org.graphstream.util" ], [ "GraphListeners", "org.graphstream.util" ], [ "Environment", "org.graphstream.util" ], [ "GraphDiff", "org.graphstream.util" ], [ "Filters", "org.graphstream.util" ], [ "FilteredEdgeIterator", "org.graphstream.util" ], [ "Parser", "org.graphstream.util.parser" ], [ "ParserFactory", "org.graphstream.util.parser" ], [ "TokenMgrError", "org.graphstream.util.parser" ], [ "ParseException", "org.graphstream.util.parser" ], [ "SimpleCharStream", "org.graphstream.util.parser" ], [ "Token", "org.graphstream.util.parser" ], [ "ISODateIO", "org.graphstream.util.time" ], [ "ISODateComponent", "org.graphstream.util.time" ], [ "FilteredNodeIterator", "org.graphstream.util" ], [ "FixedArrayList", "org.graphstream.util.set" ], [ "StepCounter", "org.graphstream.util" ], [ "GraphSpells", "org.graphstream.util.cumulative" ], [ "CumulativeAttributes", "org.graphstream.util.cumulative" ], [ "CumulativeSpells", "org.graphstream.util.cumulative" ], [ "Filter", "org.graphstream.util" ], [ "PipeAdapter", "org.graphstream.stream" ], [ "GraphParseException", "org.graphstream.stream" ], [ "ElementSink", "org.graphstream.stream" ], [ "URLSource", "org.graphstream.stream.net" ], [ "HTTPSource", "org.graphstream.stream.net" ], [ "SourceAdapter", "org.graphstream.stream" ], [ "AttributeSink", "org.graphstream.stream" ], [ "GMLParserConstants", "org.graphstream.stream.file.gml" ], [ "GMLParserTokenManager", "org.graphstream.stream.file.gml" ], [ "GMLContext", "org.graphstream.stream.file.gml" ], [ "Graphics", "org.graphstream.stream.file.gml" ], [ "KeyValues", "org.graphstream.stream.file.gml" ], [ "GMLParser", "org.graphstream.stream.file.gml" ], [ "FileSinkGraphML", "org.graphstream.stream.file" ], [ "TLPParserConstants", "org.graphstream.stream.file.tlp" ], [ "TLPParser", "org.graphstream.stream.file.tlp" ], [ "TLPParserTokenManager", "org.graphstream.stream.file.tlp" ], [ "FileSinkFactory", "org.graphstream.stream.file" ], [ "FileSourceEdge", "org.graphstream.stream.file" ], [ "FileSinkBase", "org.graphstream.stream.file" ], [ "FileSinkTikZ", "org.graphstream.stream.file" ], [ "FileSourceGEXF", "org.graphstream.stream.file" ], [ "DOTParser", "org.graphstream.stream.file.dot" ], [ "DOTParserConstants", "org.graphstream.stream.file.dot" ], [ "DOTParserTokenManager", "org.graphstream.stream.file.dot" ], [ "FileSink", "org.graphstream.stream.file" ], [ "PajekContext", "org.graphstream.stream.file.pajek" ], [ "Graphics", "org.graphstream.stream.file.pajek" ], [ "NodeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeMatrix", "org.graphstream.stream.file.pajek" ], [ "PajekParserTokenManager", "org.graphstream.stream.file.pajek" ], [ "PajekParserConstants", "org.graphstream.stream.file.pajek" ], [ "FileSourceXML", "org.graphstream.stream.file" ], [ "FileSinkBaseFiltered", "org.graphstream.stream.file" ], [ "FileSinkDOT", "org.graphstream.stream.file" ], [ "FileSourceParser", "org.graphstream.stream.file" ], [ "FileSinkDGSFiltered", "org.graphstream.stream.file" ], [ "FileSourceDOT", "org.graphstream.stream.file" ], [ "FileSourceDGS1And2", "org.graphstream.stream.file" ], [ "FileSourceGraphML", "org.graphstream.stream.file" ], [ "FileSourceFactory", "org.graphstream.stream.file" ], [ "FileSinkImages", "org.graphstream.stream.file" ], [ "FileSinkDynamicGML", "org.graphstream.stream.file" ], [ "FileSinkSVG", "org.graphstream.stream.file" ], [ "GEXFSpell", "org.graphstream.stream.file.gexf" ], [ "SmartXMLWriter", "org.graphstream.stream.file.gexf" ], [ "GEXFElement", "org.graphstream.stream.file.gexf" ], [ "GEXFEdges", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValues", "org.graphstream.stream.file.gexf" ], [ "GEXFEdge", "org.graphstream.stream.file.gexf" ], [ "GEXFSpells", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValue", "org.graphstream.stream.file.gexf" ], [ "GEXFNodes", "org.graphstream.stream.file.gexf" ], [ "GEXFNode", "org.graphstream.stream.file.gexf" ], [ "GEXFMeta", "org.graphstream.stream.file.gexf" ], [ "GEXFAttributes", "org.graphstream.stream.file.gexf" ], [ "GEXF", "org.graphstream.stream.file.gexf" ], [ "GEXFGraph", "org.graphstream.stream.file.gexf" ], [ "GEXFAttribute", "org.graphstream.stream.file.gexf" ], [ "OldFileSourceDGS", "org.graphstream.stream.file.dgs" ], [ "DGSParser", "org.graphstream.stream.file.dgs" ], [ "FileSourceBase", "org.graphstream.stream.file" ], [ "FileSinkGML", "org.graphstream.stream.file" ], [ "FileSourceDGS", "org.graphstream.stream.file" ], [ "FileSinkDGSUtility", "org.graphstream.stream.file" ], [ "FileSourceTLP", "org.graphstream.stream.file" ], [ "FileSinkSVG2", "org.graphstream.stream.file" ], [ "FileSource", "org.graphstream.stream.file" ], [ "FileSourceNCol", "org.graphstream.stream.file" ], [ "FileSourcePajek", "org.graphstream.stream.file" ], [ "FileSourceGPX", "org.graphstream.stream.file" ], [ "FileSourceLGL", "org.graphstream.stream.file" ], [ "FileSinkGEXF2", "org.graphstream.stream.file" ], [ "FileSourceGML", "org.graphstream.stream.file" ], [ "FileSinkGEXF", "org.graphstream.stream.file" ], [ "FileSinkDGS", "org.graphstream.stream.file" ], [ "ProxyPipe", "org.graphstream.stream" ], [ "Sink", "org.graphstream.stream" ], [ "Timeline", "org.graphstream.stream" ], [ "Pipe", "org.graphstream.stream" ], [ "SinkAdapter", "org.graphstream.stream" ], [ "Replayable", "org.graphstream.stream" ], [ "Source", "org.graphstream.stream" ], [ "AnnotatedSink", "org.graphstream.stream" ], [ "GraphReplay", "org.graphstream.stream" ], [ "AttributePipe", "org.graphstream.stream" ], [ "SinkTime", "org.graphstream.stream.sync" ], [ "SourceTime", "org.graphstream.stream.sync" ], [ "PipeBase", "org.graphstream.stream" ], [ "ThreadProxyPipe", "org.graphstream.stream.thread" ], [ "ThreadProxyPipeOld", "org.graphstream.stream.thread" ], [ "RMISource", "org.graphstream.stream.rmi" ], [ "RMIAdapterOut", "org.graphstream.stream.rmi" ], [ "RMISink", "org.graphstream.stream.rmi" ], [ "RMIAdapterIn", "org.graphstream.stream.rmi" ], [ "SourceBase", "org.graphstream.stream" ], [ "NetStreamDecoder", "org.graphstream.stream.netstream" ], [ "NetStreamReceiver", "org.graphstream.stream.netstream" ], [ "NetStreamConstants", "org.graphstream.stream.netstream" ], [ "NetStreamSender", "org.graphstream.stream.netstream" ], [ "DefaultNetStreamDecoder", "org.graphstream.stream.netstream" ], [ "Base64", "org.graphstream.stream.netstream.packing" ], [ "NetStreamUnpacker", "org.graphstream.stream.netstream.packing" ], [ "Base64Packer", "org.graphstream.stream.netstream.packing" ], [ "Base64Unpacker", "org.graphstream.stream.netstream.packing" ], [ "NetStreamPacker", "org.graphstream.stream.netstream.packing" ], [ "AttributePredicate", "org.graphstream.stream" ], [ "Element", "org.graphstream.graph" ], [ "Node", "org.graphstream.graph" ], [ "BreadthFirstIterator", "org.graphstream.graph" ], [ "Graph", "org.graphstream.graph" ], [ "EdgeRejectedException", "org.graphstream.graph" ], [ "CompoundAttribute", "org.graphstream.graph" ], [ "Structure", "org.graphstream.graph" ], [ "DepthFirstIterator", "org.graphstream.graph" ], [ "NullAttributeException", "org.graphstream.graph" ], [ "IdAlreadyInUseException", "org.graphstream.graph" ], [ "EdgeFactory", "org.graphstream.graph" ], [ "ElementNotFoundException", "org.graphstream.graph" ], [ "OneAttributeElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListNode", "org.graphstream.graph.implementations" ], [ "SingleNode", "org.graphstream.graph.implementations" ], [ "AbstractElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListGraph", "org.graphstream.graph.implementations" ], [ "AbstractNode", "org.graphstream.graph.implementations" ], [ "DefaultGraph", "org.graphstream.graph.implementations" ], [ "MultiGraph", "org.graphstream.graph.implementations" ], [ "Graphs", "org.graphstream.graph.implementations" ], [ "SingleGraph", "org.graphstream.graph.implementations" ], [ "MultiNode", "org.graphstream.graph.implementations" ], [ "AbstractGraph", "org.graphstream.graph.implementations" ], [ "AbstractEdge", "org.graphstream.graph.implementations" ], [ "GraphFactory", "org.graphstream.graph" ], [ "NodeFactory", "org.graphstream.graph" ], [ "Edge", "org.graphstream.graph" ], [ "Path", "org.graphstream.graph" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "gradientInArea", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)" ], [ "linearGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)" ], [ "createFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static float[] createFractions(Style style)" ], [ "createColors", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static Color[] createColors(Style style)" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "public static ImageCache defaultImageCache()" ], [ "generateStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "public static Stroke generateStroke(Style style, GraphMetrics metrics)" ], [ "generatePlainStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)" ], [ "generateDotsStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)" ], [ "generateDashesStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache()" ], [ "newLayoutAlgorithm", "org.graphstream.ui.layout", "Layouts", "public static Layout newLayoutAlgorithm()" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static double eval(double x0, double x1, double x2, double x3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static double derivative(double x0, double x1, double x2, double x3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "newGraphRenderer", "org.graphstream.ui.view", "Viewer", "public static GraphRenderer newGraphRenderer()" ], [ "getPositionValue", "org.graphstream.ui.spriteManager", "SpriteManager", "protected static Values getPositionValue(Object value)" ], [ "convertColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Color convertColor(Object anyValue)" ], [ "convertLabel", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static String convertLabel(Object value)" ], [ "convertWidth", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static float convertWidth(Object value)" ], [ "convertValue", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Value convertValue(Object value)" ], [ "convertUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Units convertUnit(String unit)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Graph graph, String id)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Graph graph, String id)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Node node)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Node node)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Graph graph, String id)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Edge edge)" ], [ "getGlobalEnvironment", "org.graphstream.util", "Environment", "public static Environment getGlobalEnvironment()" ], [ "falseFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> falseFilter()" ], [ "trueFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> trueFilter()" ], [ "byAttributeFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)" ], [ "separateNodeAndEdgeFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)" ], [ "byExtremitiesFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)" ], [ "byIdFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byIdFilter(String idPattern)" ], [ "isContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)" ], [ "isIdContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)" ], [ "and", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)" ], [ "or", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)" ], [ "xor", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)" ], [ "not", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> not(Filter<T> f)" ], [ "addEscapes", "org.graphstream.util.parser", "TokenMgrError", "protected static final String addEscapes(String str)" ], [ "LexicalError", "org.graphstream.util.parser", "TokenMgrError", "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)" ], [ "add_escapes", "org.graphstream.util.parser", "ParseException", "static String add_escapes(String str)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind, String image)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind)" ], [ "countStepInFile", "org.graphstream.util", "StepCounter", "public static int countStepInFile(String path) throws IOException" ], [ "GET", "org.graphstream.stream.net", "HTTPSource", "protected static HashMap<String, Object> GET(HttpExchange ex)" ], [ "sinkFor", "org.graphstream.stream.file", "FileSinkFactory", "public static FileSink sinkFor(String filename)" ], [ "formatId", "org.graphstream.stream.file", "FileSinkTikZ", "protected static String formatId(String id)" ], [ "getInt", "org.graphstream.stream.file.pajek", "PajekContext", "protected static int getInt(Token nb) throws ParseException" ], [ "getReal", "org.graphstream.stream.file.pajek", "PajekContext", "protected static double getReal(Token nb) throws ParseException" ], [ "toColorValue", "org.graphstream.stream.file.pajek", "PajekContext", "public static String toColorValue(Token R, Token G, Token B) throws ParseException" ], [ "sourceFor", "org.graphstream.stream.file", "FileSourceFactory", "public static FileSource sourceFor(String fileName) throws IOException" ], [ "getXMLRootElement", "org.graphstream.stream.file", "FileSourceFactory", "public static String getXMLRootElement(String fileName) throws IOException" ], [ "formatStringForQuoting", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String formatStringForQuoting(String str)" ], [ "attributeString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String attributeString(String key, Object value, boolean remove)" ], [ "arrayString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String arrayString(Object value)" ], [ "valueString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String valueString(Object value)" ], [ "hashToString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String hashToString(HashMap<?, ?> hash)" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source)" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s, int options) throws java.io.IOException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decodeFromFile(String filename) throws java.io.IOException" ], [ "encodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeFromFile(String filename) throws java.io.IOException" ], [ "unmutableGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph unmutableGraph(Graph g)" ], [ "synchronizedGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph synchronizedGraph(Graph g)" ], [ "merge", "org.graphstream.graph.implementations", "Graphs", "public static Graph merge(Graph... graphs)" ], [ "clone", "org.graphstream.graph.implementations", "Graphs", "public static Graph clone(Graph g)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "version16", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static boolean version16 = false;" ], [ "predefFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[][] predefFractions = new float[11][];" ], [ "predefFractions2", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions2 = { 0f, 1f };" ], [ "predefFractions3", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions3 = { 0f, 0.5f, 1f };" ], [ "predefFractions4", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };" ], [ "predefFractions5", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };" ], [ "predefFractions6", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };" ], [ "predefFractions7", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };" ], [ "predefFractions8", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };" ], [ "predefFractions9", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };" ], [ "predefFractions10", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "protected static ImageCache defaultImageCache;" ], [ "dots", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dots = { 1f, 1f };" ], [ "dashes", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dashes = { 3f, 3f };" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache;" ], [ "NULL_POINT2", "org.graphstream.ui.geom", "Point2", "public static final Point2 NULL_POINT2 = new Point2(0, 0);" ], [ "NULL_POINT3", "org.graphstream.ui.geom", "Point3", "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);" ], [ "DEFAULT_VIEW_ID", "org.graphstream.ui.view", "Viewer", "public static String DEFAULT_VIEW_ID = \"defaultView\";" ], [ "jjbitVec0", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };" ], [ "jjstrLiteralImages", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };" ], [ "lexStateNames", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };" ], [ "jjtoSkip", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };" ], [ "colorMap", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static HashMap<String,Color> colorMap;" ], [ "sharpColor1", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor1;" ], [ "sharpColor2", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor2;" ], [ "cssColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColor;" ], [ "cssColorA", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColorA;" ], [ "awtColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern awtColor;" ], [ "hexaColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern hexaColor;" ], [ "numberUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern numberUnit;" ], [ "number", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern number;" ], [ "acceptedAttribute", "org.graphstream.ui.graphicGraph", "GraphicElement", "protected static Pattern acceptedAttribute;" ], [ "DEFAULT_AN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_CNA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_AE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";" ], [ "DEFAULT_CEA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CEC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CER_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";" ], [ "DEFAULT_CGA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_CL_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";" ], [ "DEFAULT_ST_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";" ], [ "GLOBAL_ENV", "org.graphstream.util", "Environment", "public static Environment GLOBAL_ENV;" ], [ "LEXICAL_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int LEXICAL_ERROR = 0;" ], [ "STATIC_LEXER_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int STATIC_LEXER_ERROR = 1;" ], [ "INVALID_LEXICAL_STATE", "org.graphstream.util.parser", "TokenMgrError", "public static final int INVALID_LEXICAL_STATE = 2;" ], [ "LOOP_DETECTED", "org.graphstream.util.parser", "TokenMgrError", "public static final int LOOP_DETECTED = 3;" ], [ "staticFlag", "org.graphstream.util.parser", "SimpleCharStream", "public static final boolean staticFlag = false;" ], [ "ABBREVIATED_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");" ], [ "FULL_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");" ], [ "ABBREVIATED_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");" ], [ "FULL_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");" ], [ "LOCALE_DATE_AND_TIME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);" ], [ "CENTURY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");" ], [ "DAY_OF_MONTH_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");" ], [ "DATE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");" ], [ "DAY_OF_MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");" ], [ "DATE_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");" ], [ "WEEK_BASED_YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "WEEK_BASED_YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "ABBREVIATED_MONTH_NAME_ALIAS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");" ], [ "HOUR_OF_DAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");" ], [ "HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");" ], [ "DAY_OF_YEAR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");" ], [ "MILLISECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");" ], [ "EPOCH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent EPOCH = new EpochComponent();" ], [ "MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");" ], [ "MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");" ], [ "NEW_LINE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");" ], [ "AM_PM", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent AM_PM = new AMPMComponent();" ], [ "LOCALE_CLOCK_TIME_12_HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");" ], [ "HOUR_AND_MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");" ], [ "SECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");" ], [ "TABULATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");" ], [ "TIME_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");" ], [ "DAY_OF_WEEK_1_7", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");" ], [ "WEEK_OF_YEAR_FROM_SUNDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");" ], [ "WEEK_NUMBER_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");" ], [ "DAY_OF_WEEK_0_6", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");" ], [ "WEEK_OF_YEAR_FROM_MONDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");" ], [ "LOCALE_DATE_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");" ], [ "LOCALE_TIME_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");" ], [ "YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "UTC_OFFSET", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();" ], [ "LOCALE_TIME_ZONE_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");" ], [ "PERCENT", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");" ], [ "jjbitVec0", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoToken = { 0xff01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoSkip = { 0x1eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoToken = { 0xffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "XYZ_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String XYZ_ATTR = \"xyz\";" ], [ "WIDTH_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String WIDTH_ATTR = \"ui.tikz.width\";" ], [ "HEIGHT_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String HEIGHT_ATTR = \"ui.tikz.height\";" ], [ "DEFAULT_WIDTH", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_WIDTH = 10;" ], [ "DEFAULT_HEIGHT", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_HEIGHT = 10;" ], [ "DISPLAY_MIN_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;" ], [ "DISPLAY_MAX_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;" ], [ "jjbitVec0", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };" ], [ "lexStateNames", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoToken = { 0x3ffffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoToken = { 0x3fffffffffffc9L };" ], [ "jjtoSkip", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoSkip = { 0x6L };" ], [ "XMLNS", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";" ], [ "XMLNS_XSI", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";" ], [ "XMLNS_SL", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";" ], [ "XMLNS_VIZ", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";" ], [ "VERSION", "org.graphstream.stream.file.gexf", "GEXF", "public static final String VERSION = \"1.2\";" ], [ "BUFFER_SIZE", "org.graphstream.stream.file.dgs", "DGSParser", "protected static final int BUFFER_SIZE = 4096;" ], [ "ARRAY_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_OPEN = '{';" ], [ "ARRAY_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_CLOSE = '}';" ], [ "MAP_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_OPEN = '[';" ], [ "MAP_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_CLOSE = ']';" ], [ "gradientId", "org.graphstream.stream.file", "FileSinkSVG2", "static int gradientId = 0;" ], [ "gradientId", "org.graphstream.stream.file", "SVGStyle", "static int gradientId = 0;" ], [ "TIME_PREFIX", "org.graphstream.stream", "Timeline", "public static final String TIME_PREFIX = \"time\";" ], [ "SYNC_DISABLE_KEY", "org.graphstream.stream.sync", "SinkTime", "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";" ], [ "disableSync", "org.graphstream.stream.sync", "SinkTime", "protected static final boolean disableSync;" ], [ "LIGHT_YELLOW", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String LIGHT_YELLOW = \"\u001B[33;1m\";" ], [ "RESET", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String RESET = \"\u001B[0m\";" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "IncomingBuffer", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "EVENT_GETVERSION", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_GETVERSION = 0x00;" ], [ "EVENT_START", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_START = 0x01;" ], [ "EVENT_END", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_END = 0x02;" ], [ "EVENT_ADD_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE = 0x10;" ], [ "EVENT_DEL_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE = 0x11;" ], [ "EVENT_ADD_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE = 0x12;" ], [ "EVENT_DEL_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE = 0x13;" ], [ "EVENT_STEP", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_STEP = 0x14;" ], [ "EVENT_CLEARED", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CLEARED = 0x15;" ], [ "EVENT_ADD_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_GRAPH_ATTR = 0x16;" ], [ "EVENT_CHG_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_GRAPH_ATTR = 0x17;" ], [ "EVENT_DEL_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_GRAPH_ATTR = 0x18;" ], [ "EVENT_ADD_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE_ATTR = 0x19;" ], [ "EVENT_CHG_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_NODE_ATTR = 0x1a;" ], [ "EVENT_DEL_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE_ATTR = 0x1b;" ], [ "EVENT_ADD_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE_ATTR = 0x1c;" ], [ "EVENT_CHG_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_EDGE_ATTR = 0x1d;" ], [ "EVENT_DEL_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE_ATTR = 0x1e;" ], [ "TYPE_UNKNOWN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_UNKNOWN = 0x00;" ], [ "TYPE_BOOLEAN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN = 0x50;" ], [ "TYPE_BOOLEAN_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN_ARRAY = 0x51;" ], [ "TYPE_BYTE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE = 0x52;" ], [ "TYPE_BYTE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE_ARRAY = 0x53;" ], [ "TYPE_SHORT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT = 0x54;" ], [ "TYPE_SHORT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT_ARRAY = 0x55;" ], [ "TYPE_INT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT = 0x56;" ], [ "TYPE_INT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT_ARRAY = 0x57;" ], [ "TYPE_LONG", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG = 0x58;" ], [ "TYPE_LONG_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG_ARRAY = 0x59;" ], [ "TYPE_FLOAT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT = 0x5a;" ], [ "TYPE_FLOAT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT_ARRAY = 0x5b;" ], [ "TYPE_DOUBLE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE = 0x5c;" ], [ "TYPE_DOUBLE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE_ARRAY = 0x5d;" ], [ "TYPE_STRING", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_STRING = 0x5e;" ], [ "TYPE_RAW", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_RAW = 0x5f;" ], [ "TYPE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static byte TYPE_ARRAY = 0x60;" ], [ "TYPE_NULL", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_NULL = 0x61;" ], [ "COMMAND", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int COMMAND = 0x70;" ], [ "NO_OPTIONS", "org.graphstream.stream.netstream.packing", "Base64", "public final static int NO_OPTIONS = 0;" ], [ "ENCODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ENCODE = 1;" ], [ "DECODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DECODE = 0;" ], [ "GZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int GZIP = 2;" ], [ "DONT_GUNZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DONT_GUNZIP = 4;" ], [ "DO_BREAK_LINES", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DO_BREAK_LINES = 8;" ], [ "URL_SAFE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int URL_SAFE = 16;" ], [ "ORDERED", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ORDERED = 32;" ], [ "INITIAL_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final int INITIAL_EDGE_CAPACITY;" ], [ "GROWTH_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final double GROWTH_FACTOR = 1.1;" ], [ "I_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char I_EDGE = 0;" ], [ "IO_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char IO_EDGE = 1;" ], [ "O_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char O_EDGE = 2;" ], [ "GROW_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final double GROW_FACTOR = 1.1;" ], [ "DEFAULT_NODE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_NODE_CAPACITY = 128;" ], [ "DEFAULT_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_EDGE_CAPACITY = 1024;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "element", "org.graphstream.graph", "Element" ], [ "event", "java.lang", "String" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getGroup", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup getGroup(String groupId)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "getStyleForElement", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup getStyleForElement(Element element)" ], [ "getGroupCount", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public int getGroupCount()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "getSpriteCount", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public int getSpriteCount()" ], [ "getGroupIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<? extends StyleGroup> getGroupIterator()" ], [ "getShadowIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<StyleGroup> getShadowIterator()" ], [ "groups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<? extends StyleGroup> groups()" ], [ "getStyleFor", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup getStyleFor(Edge edge)" ], [ "getNodeCount", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public int getNodeCount()" ], [ "toString", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public String toString()" ], [ "getShadowSet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public ShadowSet getShadowSet()" ], [ "areEmptyGroupRemoved", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public boolean areEmptyGroupRemoved()" ], [ "getNode", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Node getNode(String id)" ], [ "addElement", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup addElement(Element element)" ], [ "getSpriteIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<? extends GraphicSprite> getSpriteIterator()" ], [ "getEdge", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Edge getEdge(String id)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "getSprite", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public GraphicSprite getSprite(String id)" ], [ "containsNode", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public boolean containsNode(String id)" ], [ "sprites", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<? extends GraphicSprite> sprites()" ], [ "containsSprite", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public boolean containsSprite(String id)" ], [ "addGroup", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected StyleGroup addGroup(String id, ArrayList<Rule> rules, Element firstElement)" ], [ "getElementGroup", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public String getElementGroup(Element element)" ], [ "getStyleFor", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup getStyleFor(Graph graph)" ], [ "containsGraph", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public boolean containsGraph(String id)" ], [ "getStyleFor", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup getStyleFor(GraphicSprite sprite)" ], [ "getZIndex", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public ZIndex getZIndex()" ], [ "addElement_", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected StyleGroup addElement_(Element element)" ], [ "getGraphIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<? extends Graph> getGraphIterator()" ], [ "getStyleFor", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public StyleGroup getStyleFor(Node node)" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "getZIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<HashSet<StyleGroup>> getZIterator()" ], [ "graphs", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<? extends Graph> graphs()" ], [ "containsEdge", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public boolean containsEdge(String id)" ], [ "getGraph", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Graph getGraph(String id)" ], [ "zIndex", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<HashSet<StyleGroup>> zIndex()" ], [ "getElement", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected Element getElement(String id, Map<String, String> elt2grp)" ], [ "shadows", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<StyleGroup> shadows()" ], [ "nodes", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<? extends Node> nodes()" ], [ "getNodeIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<? extends Node> getNodeIterator()" ], [ "edges", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterable<? extends Edge> edges()" ], [ "getEdgeCount", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public int getEdgeCount()" ], [ "getEdgeIterator", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "public Iterator<? extends Edge> getEdgeIterator()" ], [ "getArray", "org.graphstream.graph", "Element", "public abstract Object[] getArray(String arg0)" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "public abstract transient <T> T getFirstAttributeOf(String[] arg0)" ], [ "hasArray", "org.graphstream.graph", "Element", "public abstract boolean hasArray(String arg0)" ], [ "getAttribute", "org.graphstream.graph", "Element", "public abstract <T> T getAttribute(String arg0)" ], [ "hasAttribute", "org.graphstream.graph", "Element", "public abstract boolean hasAttribute(String arg0, Class<?> arg1)" ], [ "getEachAttributeKey", "org.graphstream.graph", "Element", "public abstract Iterable<String> getEachAttributeKey()" ], [ "hasLabel", "org.graphstream.graph", "Element", "public abstract boolean hasLabel(String arg0)" ], [ "getLabel", "org.graphstream.graph", "Element", "public abstract CharSequence getLabel(String arg0)" ], [ "getNumber", "org.graphstream.graph", "Element", "public abstract double getNumber(String arg0)" ], [ "getHash", "org.graphstream.graph", "Element", "public abstract HashMap<?, ?> getHash(String arg0)" ], [ "hasNumber", "org.graphstream.graph", "Element", "public abstract boolean hasNumber(String arg0)" ], [ "getVector", "org.graphstream.graph", "Element", "public abstract ArrayList<? extends Number> getVector(String arg0)" ], [ "getId", "org.graphstream.graph", "Element", "public abstract String getId()" ], [ "hasVector", "org.graphstream.graph", "Element", "public abstract boolean hasVector(String arg0)" ], [ "getAttributeKeyIterator", "org.graphstream.graph", "Element", "public abstract Iterator<String> getAttributeKeyIterator()" ], [ "getIndex", "org.graphstream.graph", "Element", "public abstract int getIndex()" ], [ "hasHash", "org.graphstream.graph", "Element", "public abstract boolean hasHash(String arg0)" ], [ "getAttributeKeySet", "org.graphstream.graph", "Element", "public abstract Collection<String> getAttributeKeySet()" ], [ "getAttribute", "org.graphstream.graph", "Element", "public abstract <T> T getAttribute(String arg0, Class<T> arg1)" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)" ], [ "hasAttribute", "org.graphstream.graph", "Element", "public abstract boolean hasAttribute(String arg0)" ], [ "getAttributeCount", "org.graphstream.graph", "Element", "public abstract int getAttributeCount()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0, int arg1)" ], [ "charAt", "java.lang", "String", "public char charAt(int arg0)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(Charset arg0)" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0, int arg1)" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase()" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(CharSequence arg0)" ], [ "codePointAt", "java.lang", "String", "public int codePointAt(int arg0)" ], [ "subSequence", "java.lang", "String", "public CharSequence subSequence(int arg0, int arg1)" ], [ "length", "java.lang", "String", "public int length()" ], [ "endsWith", "java.lang", "String", "public boolean endsWith(String arg0)" ], [ "describeConstable", "java.lang", "String", "public Optional<String> describeConstable()" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(String arg0) throws UnsupportedEncodingException" ], [ "hashCode", "java.lang", "String", "public int hashCode()" ], [ "codePointCount", "java.lang", "String", "public int codePointCount(int arg0, int arg1)" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0, int arg1)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes()" ], [ "compareToIgnoreCase", "java.lang", "String", "public int compareToIgnoreCase(String arg0)" ], [ "replaceFirst", "java.lang", "String", "public String replaceFirst(String arg0, String arg1)" ], [ "split", "java.lang", "String", "public String[] split(String arg0, int arg1)" ], [ "coder", "java.lang", "String", "byte coder()" ], [ "isBlank", "java.lang", "String", "public boolean isBlank()" ], [ "replace", "java.lang", "String", "public String replace(char arg0, char arg1)" ], [ "lines", "java.lang", "String", "public Stream<String> lines()" ], [ "transform", "java.lang", "String", "public <R> R transform(Function<? super String, ? extends R> arg0)" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0, int arg1)" ], [ "substring", "java.lang", "String", "public String substring(int arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0)" ], [ "chars", "java.lang", "String", "public IntStream chars()" ], [ "stripIndent", "java.lang", "String", "public String stripIndent()" ], [ "value", "java.lang", "String", "byte[] value()" ], [ "repeat", "java.lang", "String", "public String repeat(int arg0)" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase()" ], [ "translateEscapes", "java.lang", "String", "public String translateEscapes()" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0)" ], [ "intern", "java.lang", "String", "public native String intern()" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0)" ], [ "split", "java.lang", "String", "public String[] split(String arg0)" ], [ "stripLeading", "java.lang", "String", "public String stripLeading()" ], [ "substring", "java.lang", "String", "public String substring(int arg0, int arg1)" ], [ "indent", "java.lang", "String", "public String indent(int arg0)" ], [ "isLatin1", "java.lang", "String", "boolean isLatin1()" ], [ "codePointBefore", "java.lang", "String", "public int codePointBefore(int arg0)" ], [ "contains", "java.lang", "String", "public boolean contains(CharSequence arg0)" ], [ "codePoints", "java.lang", "String", "public IntStream codePoints()" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0)" ], [ "stripTrailing", "java.lang", "String", "public String stripTrailing()" ], [ "matches", "java.lang", "String", "public boolean matches(String arg0)" ], [ "concat", "java.lang", "String", "public String concat(String arg0)" ], [ "toCharArray", "java.lang", "String", "public char[] toCharArray()" ], [ "trim", "java.lang", "String", "public String trim()" ], [ "offsetByCodePoints", "java.lang", "String", "public int offsetByCodePoints(int arg0, int arg1)" ], [ "toString", "java.lang", "String", "public String toString()" ], [ "equalsIgnoreCase", "java.lang", "String", "public boolean equalsIgnoreCase(String arg0)" ], [ "compareTo", "java.lang", "String", "public int compareTo(String arg0)" ], [ "formatted", "java.lang", "String", "public String formatted(Object[] arg0)" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase(Locale arg0)" ], [ "strip", "java.lang", "String", "public String strip()" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(StringBuffer arg0)" ], [ "equals", "java.lang", "String", "public boolean equals(Object arg0)" ], [ "resolveConstantDesc", "java.lang", "String", "public String resolveConstantDesc(MethodHandles.Lookup arg0)" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase(Locale arg0)" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)" ], [ "isEmpty", "java.lang", "String", "public boolean isEmpty()" ], [ "replace", "java.lang", "String", "public String replace(CharSequence arg0, CharSequence arg1)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0, int arg1)" ], [ "replaceAll", "java.lang", "String", "public String replaceAll(String arg0, String arg1)" ], [ "compareTo", "java.lang", "Comparable", "public abstract int compareTo(T arg0)" ], [ "isEmpty", "java.lang", "CharSequence", "public default boolean isEmpty()" ], [ "chars", "java.lang", "CharSequence", "public default IntStream chars()" ], [ "length", "java.lang", "CharSequence", "public abstract int length()" ], [ "codePoints", "java.lang", "CharSequence", "public default IntStream codePoints()" ], [ "subSequence", "java.lang", "CharSequence", "public abstract CharSequence subSequence(int arg0, int arg1)" ], [ "charAt", "java.lang", "CharSequence", "public abstract char charAt(int arg0)" ], [ "toString", "java.lang", "CharSequence", "public abstract String toString()" ], [ "describeConstable", "java.lang.constant", "Constable", "public abstract Optional<? extends ConstantDesc> describeConstable()" ], [ "resolveConstantDesc", "java.lang.constant", "ConstantDesc", "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "stylesheet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected StyleSheet stylesheet;" ], [ "groups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected final Map<String,StyleGroup> groups = new TreeMap<String, StyleGroup>();" ], [ "byNodeIdGroups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected final Map<String,String> byNodeIdGroups = new TreeMap<String, String>();" ], [ "byEdgeIdGroups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected final Map<String,String> byEdgeIdGroups = new TreeMap<String, String>();" ], [ "bySpriteIdGroups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected final Map<String,String> bySpriteIdGroups = new TreeMap<String, String>();" ], [ "byGraphIdGroups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected final Map<String,String> byGraphIdGroups = new TreeMap<String, String>();" ], [ "nodeSet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected NodeSet nodeSet = new NodeSet();" ], [ "edgeSet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected EdgeSet edgeSet = new EdgeSet();" ], [ "spriteSet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected SpriteSet spriteSet = new SpriteSet();" ], [ "graphSet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected GraphSet graphSet = new GraphSet();" ], [ "eventSet", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected EventSet eventSet = new EventSet();" ], [ "zIndex", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected ZIndex zIndex = new ZIndex();" ], [ "shadow", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected ShadowSet shadow = new ShadowSet();" ], [ "removeEmptyGroups", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected boolean removeEmptyGroups = true;" ], [ "listeners", "org.graphstream.ui.graphicGraph", "StyleGroupSet", "protected ArrayList<StyleGroupListener> listeners = new ArrayList<StyleGroupListener>();" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
} ]