[ {
  "id" : 24353,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.geometry.spherical.twod",
  "className" : "Vertex",
  "javadocTag" : "@param circle circle to bind with this vertex",
  "methodJavadoc" : "    /** Bind a circle considered to contain this vertex.\n     * @param circle circle to bind with this vertex\n     */",
  "methodSourceCode" : "void bindWith(final Circle circle){\n    circles.add(circle);\n}",
  "classJavadoc" : "/** Spherical polygons boundary vertex.\n * @see SphericalPolygonsSet#getBoundaryLoops()\n * @see Edge\n * @since 3.3\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math3.geometry.spherical.twod;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/** Spherical polygons boundary vertex.\n * @see SphericalPolygonsSet#getBoundaryLoops()\n * @see Edge\n * @since 3.3\n */\npublic class Vertex {\n\n    /** Vertex location. */\n    private final S2Point location;\n\n    /** Incoming edge. */\n    private Edge incoming;\n\n    /** Outgoing edge. */\n    private Edge outgoing;\n\n    /** Circles bound with this vertex. */\n    private final List<Circle> circles;\n\n    /** Build a non-processed vertex not owned by any node yet.\n     * @param location vertex location\n     */\n    Vertex(final S2Point location) {\n        this.location = location;\n        this.incoming = null;\n        this.outgoing = null;\n        this.circles  = new ArrayList<Circle>();\n    }\n\n    /** Get Vertex location.\n     * @return vertex location\n     */\n    public S2Point getLocation() {\n        return location;\n    }\n\n    /** Bind a circle considered to contain this vertex.\n     * @param circle circle to bind with this vertex\n     */\n    void bindWith(final Circle circle) {\n        circles.add(circle);\n    }\n\n    /** Get the common circle bound with both the instance and another vertex, if any.\n     * <p>\n     * When two vertices are both bound to the same circle, this means they are\n     * already handled by node associated with this circle, so there is no need\n     * to create a cut hyperplane for them.\n     * </p>\n     * @param vertex other vertex to check instance against\n     * @return circle bound with both the instance and another vertex, or null if the\n     * two vertices do not share a circle yet\n     */\n    Circle sharedCircleWith(final Vertex vertex) {\n        for (final Circle circle1 : circles) {\n            for (final Circle circle2 : vertex.circles) {\n                if (circle1 == circle2) {\n                    return circle1;\n                }\n            }\n        }\n        return null;\n    }\n\n    /** Set incoming edge.\n     * <p>\n     * The circle supporting the incoming edge is automatically bound\n     * with the instance.\n     * </p>\n     * @param incoming incoming edge\n     */\n    void setIncoming(final Edge incoming) {\n        this.incoming = incoming;\n        bindWith(incoming.getCircle());\n    }\n\n    /** Get incoming edge.\n     * @return incoming edge\n     */\n    public Edge getIncoming() {\n        return incoming;\n    }\n\n    /** Set outgoing edge.\n     * <p>\n     * The circle supporting the outgoing edge is automatically bound\n     * with the instance.\n     * </p>\n     * @param outgoing outgoing edge\n     */\n    void setOutgoing(final Edge outgoing) {\n        this.outgoing = outgoing;\n        bindWith(outgoing.getCircle());\n    }\n\n    /** Get outgoing edge.\n     * @return outgoing edge\n     */\n    public Edge getOutgoing() {\n        return outgoing;\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "circle", "org.apache.commons.math3.geometry.spherical.twod", "Circle" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getIncoming", "org.apache.commons.math3.geometry.spherical.twod", "Vertex", "public Edge getIncoming()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "sharedCircleWith", "org.apache.commons.math3.geometry.spherical.twod", "Vertex", "Circle sharedCircleWith(final Vertex vertex)" ], [ "getLocation", "org.apache.commons.math3.geometry.spherical.twod", "Vertex", "public S2Point getLocation()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "getOutgoing", "org.apache.commons.math3.geometry.spherical.twod", "Vertex", "public Edge getOutgoing()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "toSubSpace", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public S1Point toSubSpace(Point<Sphere2D> arg0)" ], [ "sameOrientationAs", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public boolean sameOrientationAs(Hyperplane<Sphere2D> arg0)" ], [ "copySelf", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public Circle copySelf()" ], [ "getTolerance", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public double getTolerance()" ], [ "getPole", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public Vector3D getPole()" ], [ "getReverse", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public Circle getReverse()" ], [ "getXAxis", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public Vector3D getXAxis()" ], [ "project", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public Point<Sphere2D> project(Point<Sphere2D> arg0)" ], [ "getOffset", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public double getOffset(Point<Sphere2D> arg0)" ], [ "getInsideArc", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public Arc getInsideArc(Circle arg0)" ], [ "getYAxis", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public Vector3D getYAxis()" ], [ "getPointAt", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public Vector3D getPointAt(double arg0)" ], [ "getPhase", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public double getPhase(Vector3D arg0)" ], [ "toSpace", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public S2Point toSpace(Point<Sphere1D> arg0)" ], [ "wholeSpace", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public SphericalPolygonsSet wholeSpace()" ], [ "getOffset", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public double getOffset(Vector3D arg0)" ], [ "wholeHyperplane", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public SubCircle wholeHyperplane()" ], [ "copySelf", "org.apache.commons.math3.geometry.partitioning", "Hyperplane", "public abstract Hyperplane<S> copySelf()" ], [ "sameOrientationAs", "org.apache.commons.math3.geometry.partitioning", "Hyperplane", "public abstract boolean sameOrientationAs(Hyperplane<S> arg0)" ], [ "getTolerance", "org.apache.commons.math3.geometry.partitioning", "Hyperplane", "public abstract double getTolerance()" ], [ "wholeSpace", "org.apache.commons.math3.geometry.partitioning", "Hyperplane", "public abstract Region<S> wholeSpace()" ], [ "wholeHyperplane", "org.apache.commons.math3.geometry.partitioning", "Hyperplane", "public abstract SubHyperplane<S> wholeHyperplane()" ], [ "project", "org.apache.commons.math3.geometry.partitioning", "Hyperplane", "public abstract Point<S> project(Point<S> arg0)" ], [ "getOffset", "org.apache.commons.math3.geometry.partitioning", "Hyperplane", "public abstract double getOffset(Point<S> arg0)" ], [ "toSpace", "org.apache.commons.math3.geometry.partitioning", "Embedding", "public abstract Point<S> toSpace(Point<T> arg0)" ], [ "toSubSpace", "org.apache.commons.math3.geometry.partitioning", "Embedding", "public abstract Point<T> toSubSpace(Point<S> arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 24374,
  "oracle" : ";",
  "oracleType" : "NORMAL_POST",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.geometry.spherical.twod",
  "className" : "Circle",
  "javadocTag" : "@return offset of the direction",
  "methodJavadoc" : "    /** Get the offset (oriented distance) of a direction.\n     * <p>The offset is defined as the angular distance between the\n     * circle center and the direction minus the circle radius. It\n     * is therefore 0 on the circle, positive for directions outside of\n     * the cone delimited by the circle, and negative inside the cone.</p>\n     * @param direction direction to check\n     * @return offset of the direction\n     * @see #getOffset(Point)\n     */",
  "methodSourceCode" : "public double getOffset(final Vector3D direction){\n    return Vector3D.angle(pole, direction) - 0.5 * FastMath.PI;\n}",
  "classJavadoc" : "/** This class represents an oriented great circle on the 2-sphere.\n\n * <p>An oriented circle can be defined by a center point. The circle\n * is the the set of points that are in the normal plan the center.</p>\n\n * <p>Since it is oriented the two spherical caps at its two sides are\n * unambiguously identified as a left cap and a right cap. This can be\n * used to identify the interior and the exterior in a simple way by\n * local properties only when part of a line is used to define part of\n * a spherical polygon boundary.</p>\n\n * @since 3.3\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math3.geometry.spherical.twod;\n\nimport org.apache.commons.math3.geometry.Point;\nimport org.apache.commons.math3.geometry.euclidean.threed.Rotation;\nimport org.apache.commons.math3.geometry.euclidean.threed.Vector3D;\nimport org.apache.commons.math3.geometry.partitioning.Embedding;\nimport org.apache.commons.math3.geometry.partitioning.Hyperplane;\nimport org.apache.commons.math3.geometry.partitioning.SubHyperplane;\nimport org.apache.commons.math3.geometry.partitioning.Transform;\nimport org.apache.commons.math3.geometry.spherical.oned.Arc;\nimport org.apache.commons.math3.geometry.spherical.oned.ArcsSet;\nimport org.apache.commons.math3.geometry.spherical.oned.S1Point;\nimport org.apache.commons.math3.geometry.spherical.oned.Sphere1D;\nimport org.apache.commons.math3.util.FastMath;\n\n/** This class represents an oriented great circle on the 2-sphere.\n\n * <p>An oriented circle can be defined by a center point. The circle\n * is the the set of points that are in the normal plan the center.</p>\n\n * <p>Since it is oriented the two spherical caps at its two sides are\n * unambiguously identified as a left cap and a right cap. This can be\n * used to identify the interior and the exterior in a simple way by\n * local properties only when part of a line is used to define part of\n * a spherical polygon boundary.</p>\n\n * @since 3.3\n */\npublic class Circle implements Hyperplane<Sphere2D>, Embedding<Sphere2D, Sphere1D> {\n\n    /** Pole or circle center. */\n    private Vector3D pole;\n\n    /** First axis in the equator plane, origin of the phase angles. */\n    private Vector3D x;\n\n    /** Second axis in the equator plane, in quadrature with respect to x. */\n    private Vector3D y;\n\n    /** Tolerance below which close sub-arcs are merged together. */\n    private final double tolerance;\n\n    /** Build a great circle from its pole.\n     * <p>The circle is oriented in the trigonometric direction around pole.</p>\n     * @param pole circle pole\n     * @param tolerance tolerance below which close sub-arcs are merged together\n     */\n    public Circle(final Vector3D pole, final double tolerance) {\n        reset(pole);\n        this.tolerance = tolerance;\n    }\n\n    /** Build a great circle from two non-aligned points.\n     * <p>The circle is oriented from first to second point using the path smaller than \\( \\pi \\).</p>\n     * @param first first point contained in the great circle\n     * @param second second point contained in the great circle\n     * @param tolerance tolerance below which close sub-arcs are merged together\n     */\n    public Circle(final S2Point first, final S2Point second, final double tolerance) {\n        reset(first.getVector().crossProduct(second.getVector()));\n        this.tolerance = tolerance;\n    }\n\n    /** Build a circle from its internal components.\n     * <p>The circle is oriented in the trigonometric direction around center.</p>\n     * @param pole circle pole\n     * @param x first axis in the equator plane\n     * @param y second axis in the equator plane\n     * @param tolerance tolerance below which close sub-arcs are merged together\n     */\n    private Circle(final Vector3D pole, final Vector3D x, final Vector3D y,\n                   final double tolerance) {\n        this.pole      = pole;\n        this.x         = x;\n        this.y         = y;\n        this.tolerance = tolerance;\n    }\n\n    /** Copy constructor.\n     * <p>The created instance is completely independent from the\n     * original instance, it is a deep copy.</p>\n     * @param circle circle to copy\n     */\n    public Circle(final Circle circle) {\n        this(circle.pole, circle.x, circle.y, circle.tolerance);\n    }\n\n    /** {@inheritDoc} */\n    public Circle copySelf() {\n        return new Circle(this);\n    }\n\n    /** Reset the instance as if built from a pole.\n     * <p>The circle is oriented in the trigonometric direction around pole.</p>\n     * @param newPole circle pole\n     */\n    public void reset(final Vector3D newPole) {\n        this.pole = newPole.normalize();\n        this.x    = newPole.orthogonal();\n        this.y    = Vector3D.crossProduct(newPole, x).normalize();\n    }\n\n    /** Revert the instance.\n     */\n    public void revertSelf() {\n        // x remains the same\n        y    = y.negate();\n        pole = pole.negate();\n    }\n\n    /** Get the reverse of the instance.\n     * <p>Get a circle with reversed orientation with respect to the\n     * instance. A new object is built, the instance is untouched.</p>\n     * @return a new circle, with orientation opposite to the instance orientation\n     */\n    public Circle getReverse() {\n        return new Circle(pole.negate(), x, y.negate(), tolerance);\n    }\n\n    /** {@inheritDoc} */\n    public Point<Sphere2D> project(Point<Sphere2D> point) {\n        return toSpace(toSubSpace(point));\n    }\n\n    /** {@inheritDoc} */\n    public double getTolerance() {\n        return tolerance;\n    }\n\n    /** {@inheritDoc}\n     * @see #getPhase(Vector3D)\n     */\n    public S1Point toSubSpace(final Point<Sphere2D> point) {\n        return new S1Point(getPhase(((S2Point) point).getVector()));\n    }\n\n    /** Get the phase angle of a direction.\n     * <p>\n     * The direction may not belong to the circle as the\n     * phase is computed for the meridian plane between the circle\n     * pole and the direction.\n     * </p>\n     * @param direction direction for which phase is requested\n     * @return phase angle of the direction around the circle\n     * @see #toSubSpace(Point)\n     */\n    public double getPhase(final Vector3D direction) {\n        return FastMath.PI + FastMath.atan2(-direction.dotProduct(y), -direction.dotProduct(x));\n    }\n\n    /** {@inheritDoc}\n     * @see #getPointAt(double)\n     */\n    public S2Point toSpace(final Point<Sphere1D> point) {\n        return new S2Point(getPointAt(((S1Point) point).getAlpha()));\n    }\n\n    /** Get a circle point from its phase around the circle.\n     * @param alpha phase around the circle\n     * @return circle point on the sphere\n     * @see #toSpace(Point)\n     * @see #getXAxis()\n     * @see #getYAxis()\n     */\n    public Vector3D getPointAt(final double alpha) {\n        return new Vector3D(FastMath.cos(alpha), x, FastMath.sin(alpha), y);\n    }\n\n    /** Get the X axis of the circle.\n     * <p>\n     * This method returns the same value as {@link #getPointAt(double)\n     * getPointAt(0.0)} but it does not do any computation and always\n     * return the same instance.\n     * </p>\n     * @return an arbitrary x axis on the circle\n     * @see #getPointAt(double)\n     * @see #getYAxis()\n     * @see #getPole()\n     */\n    public Vector3D getXAxis() {\n        return x;\n    }\n\n    /** Get the Y axis of the circle.\n     * <p>\n     * This method returns the same value as {@link #getPointAt(double)\n     * getPointAt(0.5 * FastMath.PI)} but it does not do any computation and always\n     * return the same instance.\n     * </p>\n     * @return an arbitrary y axis point on the circle\n     * @see #getPointAt(double)\n     * @see #getXAxis()\n     * @see #getPole()\n     */\n    public Vector3D getYAxis() {\n        return y;\n    }\n\n    /** Get the pole of the circle.\n     * <p>\n     * As the circle is a great circle, the pole does <em>not</em>\n     * belong to it.\n     * </p>\n     * @return pole of the circle\n     * @see #getXAxis()\n     * @see #getYAxis()\n     */\n    public Vector3D getPole() {\n        return pole;\n    }\n\n    /** Get the arc of the instance that lies inside the other circle.\n     * @param other other circle\n     * @return arc of the instance that lies inside the other circle\n     */\n    public Arc getInsideArc(final Circle other) {\n        final double alpha  = getPhase(other.pole);\n        final double halfPi = 0.5 * FastMath.PI;\n        return new Arc(alpha - halfPi, alpha + halfPi, tolerance);\n    }\n\n    /** {@inheritDoc} */\n    public SubCircle wholeHyperplane() {\n        return new SubCircle(this, new ArcsSet(tolerance));\n    }\n\n    /** Build a region covering the whole space.\n     * @return a region containing the instance (really a {@link\n     * SphericalPolygonsSet SphericalPolygonsSet} instance)\n     */\n    public SphericalPolygonsSet wholeSpace() {\n        return new SphericalPolygonsSet(tolerance);\n    }\n\n    /** {@inheritDoc}\n     * @see #getOffset(Vector3D)\n     */\n    public double getOffset(final Point<Sphere2D> point) {\n        return getOffset(((S2Point) point).getVector());\n    }\n\n    /** Get the offset (oriented distance) of a direction.\n     * <p>The offset is defined as the angular distance between the\n     * circle center and the direction minus the circle radius. It\n     * is therefore 0 on the circle, positive for directions outside of\n     * the cone delimited by the circle, and negative inside the cone.</p>\n     * @param direction direction to check\n     * @return offset of the direction\n     * @see #getOffset(Point)\n     */\n    public double getOffset(final Vector3D direction) {\n        return Vector3D.angle(pole, direction) - 0.5 * FastMath.PI;\n    }\n\n    /** {@inheritDoc} */\n    public boolean sameOrientationAs(final Hyperplane<Sphere2D> other) {\n        final Circle otherC = (Circle) other;\n        return Vector3D.dotProduct(pole, otherC.pole) >= 0.0;\n    }\n\n    /** Get a {@link org.apache.commons.math3.geometry.partitioning.Transform\n     * Transform} embedding a 3D rotation.\n     * @param rotation rotation to use\n     * @return a new transform that can be applied to either {@link\n     * Point Point}, {@link Circle Line} or {@link\n     * org.apache.commons.math3.geometry.partitioning.SubHyperplane\n     * SubHyperplane} instances\n     */\n    public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation) {\n        return new CircleTransform(rotation);\n    }\n\n    /** Class embedding a 3D rotation. */\n    private static class CircleTransform implements Transform<Sphere2D, Sphere1D> {\n\n        /** Underlying rotation. */\n        private final Rotation rotation;\n\n        /** Build a transform from a {@code Rotation}.\n         * @param rotation rotation to use\n         */\n        CircleTransform(final Rotation rotation) {\n            this.rotation = rotation;\n        }\n\n        /** {@inheritDoc} */\n        public S2Point apply(final Point<Sphere2D> point) {\n            return new S2Point(rotation.applyTo(((S2Point) point).getVector()));\n        }\n\n        /** {@inheritDoc} */\n        public Circle apply(final Hyperplane<Sphere2D> hyperplane) {\n            final Circle circle = (Circle) hyperplane;\n            return new Circle(rotation.applyTo(circle.pole),\n                              rotation.applyTo(circle.x),\n                              rotation.applyTo(circle.y),\n                              circle.tolerance);\n        }\n\n        /** {@inheritDoc} */\n        public SubHyperplane<Sphere1D> apply(final SubHyperplane<Sphere1D> sub,\n                                             final Hyperplane<Sphere2D> original,\n                                             final Hyperplane<Sphere2D> transformed) {\n            // as the circle is rotated, the limit angles are rotated too\n            return sub;\n        }\n\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ [ "0", "int" ] ],
  "tokensMethodArguments" : [ [ "direction", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "copySelf", "org.apache.commons.math3.geometry.partitioning", "Hyperplane", "public abstract Hyperplane<S> copySelf()" ], [ "getPhase", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public double getPhase(final Vector3D direction)" ], [ "wholeSpace", "org.apache.commons.math3.geometry.partitioning", "Hyperplane", "public abstract Region<S> wholeSpace()" ], [ "toSubSpace", "org.apache.commons.math3.geometry.partitioning", "Embedding", "public abstract Point<T> toSubSpace(Point<S> arg0)" ], [ "project", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public Point<Sphere2D> project(Point<Sphere2D> point)" ], [ "getTolerance", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public double getTolerance()" ], [ "getXAxis", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public Vector3D getXAxis()" ], [ "copySelf", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public Circle copySelf()" ], [ "getOffset", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public double getOffset(final Point<Sphere2D> point)" ], [ "sameOrientationAs", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public boolean sameOrientationAs(final Hyperplane<Sphere2D> other)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "wholeHyperplane", "org.apache.commons.math3.geometry.partitioning", "Hyperplane", "public abstract SubHyperplane<S> wholeHyperplane()" ], [ "getInsideArc", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public Arc getInsideArc(final Circle other)" ], [ "getPole", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public Vector3D getPole()" ], [ "wholeSpace", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public SphericalPolygonsSet wholeSpace()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "getOffset", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public double getOffset(final Vector3D direction)" ], [ "project", "org.apache.commons.math3.geometry.partitioning", "Hyperplane", "public abstract Point<S> project(Point<S> arg0)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "toSubSpace", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public S1Point toSubSpace(final Point<Sphere2D> point)" ], [ "getReverse", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public Circle getReverse()" ], [ "wholeHyperplane", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public SubCircle wholeHyperplane()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "getPointAt", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public Vector3D getPointAt(final double alpha)" ], [ "toSpace", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public S2Point toSpace(final Point<Sphere1D> point)" ], [ "getYAxis", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public Vector3D getYAxis()" ], [ "toSpace", "org.apache.commons.math3.geometry.partitioning", "Embedding", "public abstract Point<S> toSpace(Point<T> arg0)" ], [ "getSpace", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Space getSpace()" ], [ "getDelta", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double getDelta()" ], [ "isInfinite", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public boolean isInfinite()" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double distance1(Vector<Euclidean3D> arg0)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double distanceInf(Vector<Euclidean3D> arg0)" ], [ "toString", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public String toString()" ], [ "normalize", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Vector3D normalize() throws MathArithmeticException" ], [ "negate", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Vector3D negate()" ], [ "add", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Vector3D add(Vector<Euclidean3D> arg0)" ], [ "getNorm", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double getNorm()" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double distance(Vector<Euclidean3D> arg0)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double distance(Point<Euclidean3D> arg0)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double distanceSq(Vector<Euclidean3D> arg0)" ], [ "add", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Vector3D add(double arg0, Vector<Euclidean3D> arg1)" ], [ "toString", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public String toString(NumberFormat arg0)" ], [ "getX", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double getX()" ], [ "getZero", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Vector3D getZero()" ], [ "orthogonal", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Vector3D orthogonal() throws MathArithmeticException" ], [ "getY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double getY()" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Vector3D crossProduct(Vector<Euclidean3D> arg0)" ], [ "getNormInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double getNormInf()" ], [ "isNaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public boolean isNaN()" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double dotProduct(Vector<Euclidean3D> arg0)" ], [ "subtract", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Vector3D subtract(double arg0, Vector<Euclidean3D> arg1)" ], [ "subtract", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Vector3D subtract(Vector<Euclidean3D> arg0)" ], [ "toArray", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double[] toArray()" ], [ "scalarMultiply", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Vector3D scalarMultiply(double arg0)" ], [ "getZ", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double getZ()" ], [ "getNormSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double getNormSq()" ], [ "getNorm1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double getNorm1()" ], [ "equals", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public boolean equals(Object arg0)" ], [ "getAlpha", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double getAlpha()" ], [ "hashCode", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public int hashCode()" ], [ "dotProduct", "org.apache.commons.math3.geometry", "Vector", "public abstract double dotProduct(Vector<S> arg0)" ], [ "toString", "org.apache.commons.math3.geometry", "Vector", "public abstract String toString(NumberFormat arg0)" ], [ "normalize", "org.apache.commons.math3.geometry", "Vector", "public abstract Vector<S> normalize() throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry", "Vector", "public abstract double distance(Vector<S> arg0)" ], [ "scalarMultiply", "org.apache.commons.math3.geometry", "Vector", "public abstract Vector<S> scalarMultiply(double arg0)" ], [ "getNorm", "org.apache.commons.math3.geometry", "Vector", "public abstract double getNorm()" ], [ "subtract", "org.apache.commons.math3.geometry", "Vector", "public abstract Vector<S> subtract(Vector<S> arg0)" ], [ "negate", "org.apache.commons.math3.geometry", "Vector", "public abstract Vector<S> negate()" ], [ "add", "org.apache.commons.math3.geometry", "Vector", "public abstract Vector<S> add(Vector<S> arg0)" ], [ "add", "org.apache.commons.math3.geometry", "Vector", "public abstract Vector<S> add(double arg0, Vector<S> arg1)" ], [ "getZero", "org.apache.commons.math3.geometry", "Vector", "public abstract Vector<S> getZero()" ], [ "getNorm1", "org.apache.commons.math3.geometry", "Vector", "public abstract double getNorm1()" ], [ "getNormInf", "org.apache.commons.math3.geometry", "Vector", "public abstract double getNormInf()" ], [ "distanceSq", "org.apache.commons.math3.geometry", "Vector", "public abstract double distanceSq(Vector<S> arg0)" ], [ "distanceInf", "org.apache.commons.math3.geometry", "Vector", "public abstract double distanceInf(Vector<S> arg0)" ], [ "distance1", "org.apache.commons.math3.geometry", "Vector", "public abstract double distance1(Vector<S> arg0)" ], [ "getNormSq", "org.apache.commons.math3.geometry", "Vector", "public abstract double getNormSq()" ], [ "subtract", "org.apache.commons.math3.geometry", "Vector", "public abstract Vector<S> subtract(double arg0, Vector<S> arg1)" ], [ "isInfinite", "org.apache.commons.math3.geometry", "Vector", "public abstract boolean isInfinite()" ], [ "isNaN", "org.apache.commons.math3.geometry", "Point", "public abstract boolean isNaN()" ], [ "distance", "org.apache.commons.math3.geometry", "Point", "public abstract double distance(Point<S> arg0)" ], [ "getSpace", "org.apache.commons.math3.geometry", "Point", "public abstract Space getSpace()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 24375,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.geometry.spherical.twod",
  "className" : "Circle",
  "javadocTag" : "@param rotation rotation to use",
  "methodJavadoc" : "    /** Get a {@link org.apache.commons.math3.geometry.partitioning.Transform\n     * Transform} embedding a 3D rotation.\n     * @param rotation rotation to use\n     * @return a new transform that can be applied to either {@link\n     * Point Point}, {@link Circle Line} or {@link\n     * org.apache.commons.math3.geometry.partitioning.SubHyperplane\n     * SubHyperplane} instances\n     */",
  "methodSourceCode" : "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation){\n    return new CircleTransform(rotation);\n}",
  "classJavadoc" : "/** This class represents an oriented great circle on the 2-sphere.\n\n * <p>An oriented circle can be defined by a center point. The circle\n * is the the set of points that are in the normal plan the center.</p>\n\n * <p>Since it is oriented the two spherical caps at its two sides are\n * unambiguously identified as a left cap and a right cap. This can be\n * used to identify the interior and the exterior in a simple way by\n * local properties only when part of a line is used to define part of\n * a spherical polygon boundary.</p>\n\n * @since 3.3\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math3.geometry.spherical.twod;\n\nimport org.apache.commons.math3.geometry.Point;\nimport org.apache.commons.math3.geometry.euclidean.threed.Rotation;\nimport org.apache.commons.math3.geometry.euclidean.threed.Vector3D;\nimport org.apache.commons.math3.geometry.partitioning.Embedding;\nimport org.apache.commons.math3.geometry.partitioning.Hyperplane;\nimport org.apache.commons.math3.geometry.partitioning.SubHyperplane;\nimport org.apache.commons.math3.geometry.partitioning.Transform;\nimport org.apache.commons.math3.geometry.spherical.oned.Arc;\nimport org.apache.commons.math3.geometry.spherical.oned.ArcsSet;\nimport org.apache.commons.math3.geometry.spherical.oned.S1Point;\nimport org.apache.commons.math3.geometry.spherical.oned.Sphere1D;\nimport org.apache.commons.math3.util.FastMath;\n\n/** This class represents an oriented great circle on the 2-sphere.\n\n * <p>An oriented circle can be defined by a center point. The circle\n * is the the set of points that are in the normal plan the center.</p>\n\n * <p>Since it is oriented the two spherical caps at its two sides are\n * unambiguously identified as a left cap and a right cap. This can be\n * used to identify the interior and the exterior in a simple way by\n * local properties only when part of a line is used to define part of\n * a spherical polygon boundary.</p>\n\n * @since 3.3\n */\npublic class Circle implements Hyperplane<Sphere2D>, Embedding<Sphere2D, Sphere1D> {\n\n    /** Pole or circle center. */\n    private Vector3D pole;\n\n    /** First axis in the equator plane, origin of the phase angles. */\n    private Vector3D x;\n\n    /** Second axis in the equator plane, in quadrature with respect to x. */\n    private Vector3D y;\n\n    /** Tolerance below which close sub-arcs are merged together. */\n    private final double tolerance;\n\n    /** Build a great circle from its pole.\n     * <p>The circle is oriented in the trigonometric direction around pole.</p>\n     * @param pole circle pole\n     * @param tolerance tolerance below which close sub-arcs are merged together\n     */\n    public Circle(final Vector3D pole, final double tolerance) {\n        reset(pole);\n        this.tolerance = tolerance;\n    }\n\n    /** Build a great circle from two non-aligned points.\n     * <p>The circle is oriented from first to second point using the path smaller than \\( \\pi \\).</p>\n     * @param first first point contained in the great circle\n     * @param second second point contained in the great circle\n     * @param tolerance tolerance below which close sub-arcs are merged together\n     */\n    public Circle(final S2Point first, final S2Point second, final double tolerance) {\n        reset(first.getVector().crossProduct(second.getVector()));\n        this.tolerance = tolerance;\n    }\n\n    /** Build a circle from its internal components.\n     * <p>The circle is oriented in the trigonometric direction around center.</p>\n     * @param pole circle pole\n     * @param x first axis in the equator plane\n     * @param y second axis in the equator plane\n     * @param tolerance tolerance below which close sub-arcs are merged together\n     */\n    private Circle(final Vector3D pole, final Vector3D x, final Vector3D y,\n                   final double tolerance) {\n        this.pole      = pole;\n        this.x         = x;\n        this.y         = y;\n        this.tolerance = tolerance;\n    }\n\n    /** Copy constructor.\n     * <p>The created instance is completely independent from the\n     * original instance, it is a deep copy.</p>\n     * @param circle circle to copy\n     */\n    public Circle(final Circle circle) {\n        this(circle.pole, circle.x, circle.y, circle.tolerance);\n    }\n\n    /** {@inheritDoc} */\n    public Circle copySelf() {\n        return new Circle(this);\n    }\n\n    /** Reset the instance as if built from a pole.\n     * <p>The circle is oriented in the trigonometric direction around pole.</p>\n     * @param newPole circle pole\n     */\n    public void reset(final Vector3D newPole) {\n        this.pole = newPole.normalize();\n        this.x    = newPole.orthogonal();\n        this.y    = Vector3D.crossProduct(newPole, x).normalize();\n    }\n\n    /** Revert the instance.\n     */\n    public void revertSelf() {\n        // x remains the same\n        y    = y.negate();\n        pole = pole.negate();\n    }\n\n    /** Get the reverse of the instance.\n     * <p>Get a circle with reversed orientation with respect to the\n     * instance. A new object is built, the instance is untouched.</p>\n     * @return a new circle, with orientation opposite to the instance orientation\n     */\n    public Circle getReverse() {\n        return new Circle(pole.negate(), x, y.negate(), tolerance);\n    }\n\n    /** {@inheritDoc} */\n    public Point<Sphere2D> project(Point<Sphere2D> point) {\n        return toSpace(toSubSpace(point));\n    }\n\n    /** {@inheritDoc} */\n    public double getTolerance() {\n        return tolerance;\n    }\n\n    /** {@inheritDoc}\n     * @see #getPhase(Vector3D)\n     */\n    public S1Point toSubSpace(final Point<Sphere2D> point) {\n        return new S1Point(getPhase(((S2Point) point).getVector()));\n    }\n\n    /** Get the phase angle of a direction.\n     * <p>\n     * The direction may not belong to the circle as the\n     * phase is computed for the meridian plane between the circle\n     * pole and the direction.\n     * </p>\n     * @param direction direction for which phase is requested\n     * @return phase angle of the direction around the circle\n     * @see #toSubSpace(Point)\n     */\n    public double getPhase(final Vector3D direction) {\n        return FastMath.PI + FastMath.atan2(-direction.dotProduct(y), -direction.dotProduct(x));\n    }\n\n    /** {@inheritDoc}\n     * @see #getPointAt(double)\n     */\n    public S2Point toSpace(final Point<Sphere1D> point) {\n        return new S2Point(getPointAt(((S1Point) point).getAlpha()));\n    }\n\n    /** Get a circle point from its phase around the circle.\n     * @param alpha phase around the circle\n     * @return circle point on the sphere\n     * @see #toSpace(Point)\n     * @see #getXAxis()\n     * @see #getYAxis()\n     */\n    public Vector3D getPointAt(final double alpha) {\n        return new Vector3D(FastMath.cos(alpha), x, FastMath.sin(alpha), y);\n    }\n\n    /** Get the X axis of the circle.\n     * <p>\n     * This method returns the same value as {@link #getPointAt(double)\n     * getPointAt(0.0)} but it does not do any computation and always\n     * return the same instance.\n     * </p>\n     * @return an arbitrary x axis on the circle\n     * @see #getPointAt(double)\n     * @see #getYAxis()\n     * @see #getPole()\n     */\n    public Vector3D getXAxis() {\n        return x;\n    }\n\n    /** Get the Y axis of the circle.\n     * <p>\n     * This method returns the same value as {@link #getPointAt(double)\n     * getPointAt(0.5 * FastMath.PI)} but it does not do any computation and always\n     * return the same instance.\n     * </p>\n     * @return an arbitrary y axis point on the circle\n     * @see #getPointAt(double)\n     * @see #getXAxis()\n     * @see #getPole()\n     */\n    public Vector3D getYAxis() {\n        return y;\n    }\n\n    /** Get the pole of the circle.\n     * <p>\n     * As the circle is a great circle, the pole does <em>not</em>\n     * belong to it.\n     * </p>\n     * @return pole of the circle\n     * @see #getXAxis()\n     * @see #getYAxis()\n     */\n    public Vector3D getPole() {\n        return pole;\n    }\n\n    /** Get the arc of the instance that lies inside the other circle.\n     * @param other other circle\n     * @return arc of the instance that lies inside the other circle\n     */\n    public Arc getInsideArc(final Circle other) {\n        final double alpha  = getPhase(other.pole);\n        final double halfPi = 0.5 * FastMath.PI;\n        return new Arc(alpha - halfPi, alpha + halfPi, tolerance);\n    }\n\n    /** {@inheritDoc} */\n    public SubCircle wholeHyperplane() {\n        return new SubCircle(this, new ArcsSet(tolerance));\n    }\n\n    /** Build a region covering the whole space.\n     * @return a region containing the instance (really a {@link\n     * SphericalPolygonsSet SphericalPolygonsSet} instance)\n     */\n    public SphericalPolygonsSet wholeSpace() {\n        return new SphericalPolygonsSet(tolerance);\n    }\n\n    /** {@inheritDoc}\n     * @see #getOffset(Vector3D)\n     */\n    public double getOffset(final Point<Sphere2D> point) {\n        return getOffset(((S2Point) point).getVector());\n    }\n\n    /** Get the offset (oriented distance) of a direction.\n     * <p>The offset is defined as the angular distance between the\n     * circle center and the direction minus the circle radius. It\n     * is therefore 0 on the circle, positive for directions outside of\n     * the cone delimited by the circle, and negative inside the cone.</p>\n     * @param direction direction to check\n     * @return offset of the direction\n     * @see #getOffset(Point)\n     */\n    public double getOffset(final Vector3D direction) {\n        return Vector3D.angle(pole, direction) - 0.5 * FastMath.PI;\n    }\n\n    /** {@inheritDoc} */\n    public boolean sameOrientationAs(final Hyperplane<Sphere2D> other) {\n        final Circle otherC = (Circle) other;\n        return Vector3D.dotProduct(pole, otherC.pole) >= 0.0;\n    }\n\n    /** Get a {@link org.apache.commons.math3.geometry.partitioning.Transform\n     * Transform} embedding a 3D rotation.\n     * @param rotation rotation to use\n     * @return a new transform that can be applied to either {@link\n     * Point Point}, {@link Circle Line} or {@link\n     * org.apache.commons.math3.geometry.partitioning.SubHyperplane\n     * SubHyperplane} instances\n     */\n    public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation) {\n        return new CircleTransform(rotation);\n    }\n\n    /** Class embedding a 3D rotation. */\n    private static class CircleTransform implements Transform<Sphere2D, Sphere1D> {\n\n        /** Underlying rotation. */\n        private final Rotation rotation;\n\n        /** Build a transform from a {@code Rotation}.\n         * @param rotation rotation to use\n         */\n        CircleTransform(final Rotation rotation) {\n            this.rotation = rotation;\n        }\n\n        /** {@inheritDoc} */\n        public S2Point apply(final Point<Sphere2D> point) {\n            return new S2Point(rotation.applyTo(((S2Point) point).getVector()));\n        }\n\n        /** {@inheritDoc} */\n        public Circle apply(final Hyperplane<Sphere2D> hyperplane) {\n            final Circle circle = (Circle) hyperplane;\n            return new Circle(rotation.applyTo(circle.pole),\n                              rotation.applyTo(circle.x),\n                              rotation.applyTo(circle.y),\n                              circle.tolerance);\n        }\n\n        /** {@inheritDoc} */\n        public SubHyperplane<Sphere1D> apply(final SubHyperplane<Sphere1D> sub,\n                                             final Hyperplane<Sphere2D> original,\n                                             final Hyperplane<Sphere2D> transformed) {\n            // as the circle is rotated, the limit angles are rotated too\n            return sub;\n        }\n\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ [ "3", "int" ], [ "3", "int" ], [ "3", "int" ] ],
  "tokensMethodArguments" : [ [ "rotation", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "project", "org.apache.commons.math3.geometry.partitioning", "Hyperplane", "public abstract Point<S> project(Point<S> arg0)" ], [ "wholeSpace", "org.apache.commons.math3.geometry.partitioning", "Hyperplane", "public abstract Region<S> wholeSpace()" ], [ "wholeSpace", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public SphericalPolygonsSet wholeSpace()" ], [ "wholeHyperplane", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public SubCircle wholeHyperplane()" ], [ "getPole", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public Vector3D getPole()" ], [ "getInsideArc", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public Arc getInsideArc(final Circle other)" ], [ "toSubSpace", "org.apache.commons.math3.geometry.partitioning", "Embedding", "public abstract Point<T> toSubSpace(Point<S> arg0)" ], [ "copySelf", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public Circle copySelf()" ], [ "getTolerance", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public double getTolerance()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "toSubSpace", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public S1Point toSubSpace(final Point<Sphere2D> point)" ], [ "getYAxis", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public Vector3D getYAxis()" ], [ "getOffset", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public double getOffset(final Vector3D direction)" ], [ "copySelf", "org.apache.commons.math3.geometry.partitioning", "Hyperplane", "public abstract Hyperplane<S> copySelf()" ], [ "getOffset", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public double getOffset(final Point<Sphere2D> point)" ], [ "getXAxis", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public Vector3D getXAxis()" ], [ "project", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public Point<Sphere2D> project(Point<Sphere2D> point)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "toSpace", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public S2Point toSpace(final Point<Sphere1D> point)" ], [ "getReverse", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public Circle getReverse()" ], [ "wholeHyperplane", "org.apache.commons.math3.geometry.partitioning", "Hyperplane", "public abstract SubHyperplane<S> wholeHyperplane()" ], [ "toSpace", "org.apache.commons.math3.geometry.partitioning", "Embedding", "public abstract Point<S> toSpace(Point<T> arg0)" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "getPhase", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public double getPhase(final Vector3D direction)" ], [ "sameOrientationAs", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public boolean sameOrientationAs(final Hyperplane<Sphere2D> other)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "getPointAt", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public Vector3D getPointAt(final double alpha)" ], [ "compose", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public Rotation compose(Rotation arg0, RotationConvention arg1)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public Rotation applyInverseTo(Rotation arg0)" ], [ "composeInverse", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public Rotation composeInverse(Rotation arg0, RotationConvention arg1)" ], [ "getQ3", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public double getQ3()" ], [ "getMatrix", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public double[][] getMatrix()" ], [ "getQ1", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public double getQ1()" ], [ "getQ2", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public double getQ2()" ], [ "getAngles", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public double[] getAngles(RotationOrder arg0) throws CardanEulerSingularityException" ], [ "revert", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public Rotation revert()" ], [ "getQ0", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public double getQ0()" ], [ "getAngles", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public double[] getAngles(RotationOrder arg0, RotationConvention arg1) throws CardanEulerSingularityException" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public Vector3D applyTo(Vector3D arg0)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public Rotation applyTo(Rotation arg0)" ], [ "getAxis", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public Vector3D getAxis(RotationConvention arg0)" ], [ "getAngle", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public double getAngle()" ], [ "getAxis", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public Vector3D getAxis()" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public Vector3D applyInverseTo(Vector3D arg0)" ], [ "apply", "org.apache.commons.math3.geometry.partitioning", "Transform", "public abstract Point<S> apply(Point<S> arg0)" ], [ "apply", "org.apache.commons.math3.geometry.partitioning", "Transform", "public abstract Hyperplane<S> apply(Hyperplane<S> arg0)" ], [ "apply", "org.apache.commons.math3.geometry.partitioning", "Transform", "public abstract SubHyperplane<T> apply(SubHyperplane<T> arg0, Hyperplane<S> arg1, Hyperplane<S> arg2)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 24389,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.geometry.spherical.twod",
  "className" : "PropertiesComputer",
  "javadocTag" : "@param start start vertex of the convex cell boundary",
  "methodJavadoc" : "    /** Compute convex cell barycenter.\n     * @param start start vertex of the convex cell boundary\n     * @return barycenter\n     */",
  "methodSourceCode" : "private Vector3D convexCellBarycenter(final Vertex start){\n    int n = 0;\n    Vector3D sumB = Vector3D.ZERO;\n    // loop around the cell\n    for (Edge e = start.getOutgoing(); n == 0 || e.getStart() != start; e = e.getEnd().getOutgoing()) {\n        sumB = new Vector3D(1, sumB, e.getLength(), e.getCircle().getPole());\n        n++;\n    }\n    return sumB.normalize();\n}",
  "classJavadoc" : "/** Visitor computing geometrical properties.\n * @since 3.3\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math3.geometry.spherical.twod;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.commons.math3.exception.MathInternalError;\nimport org.apache.commons.math3.geometry.euclidean.threed.Vector3D;\nimport org.apache.commons.math3.geometry.partitioning.BSPTree;\nimport org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathUtils;\n\n/** Visitor computing geometrical properties.\n * @since 3.3\n */\nclass PropertiesComputer implements BSPTreeVisitor<Sphere2D> {\n\n    /** Tolerance below which points are consider to be identical. */\n    private final double tolerance;\n\n    /** Summed area. */\n    private double summedArea;\n\n    /** Summed barycenter. */\n    private Vector3D summedBarycenter;\n\n    /** List of points strictly inside convex cells. */\n    private final List<Vector3D> convexCellsInsidePoints;\n\n    /** Simple constructor.\n     * @param tolerance below which points are consider to be identical\n     */\n    PropertiesComputer(final double tolerance) {\n        this.tolerance              = tolerance;\n        this.summedArea             = 0;\n        this.summedBarycenter       = Vector3D.ZERO;\n        this.convexCellsInsidePoints = new ArrayList<Vector3D>();\n    }\n\n    /** {@inheritDoc} */\n    public Order visitOrder(final BSPTree<Sphere2D> node) {\n        return Order.MINUS_SUB_PLUS;\n    }\n\n    /** {@inheritDoc} */\n    public void visitInternalNode(final BSPTree<Sphere2D> node) {\n        // nothing to do here\n    }\n\n    /** {@inheritDoc} */\n    public void visitLeafNode(final BSPTree<Sphere2D> node) {\n        if ((Boolean) node.getAttribute()) {\n\n            // transform this inside leaf cell into a simple convex polygon\n            final SphericalPolygonsSet convex =\n                    new SphericalPolygonsSet(node.pruneAroundConvexCell(Boolean.TRUE,\n                                                                        Boolean.FALSE,\n                                                                        null),\n                                             tolerance);\n\n            // extract the start of the single loop boundary of the convex cell\n            final List<Vertex> boundary = convex.getBoundaryLoops();\n            if (boundary.size() != 1) {\n                // this should never happen\n                throw new MathInternalError();\n            }\n\n            // compute the geometrical properties of the convex cell\n            final double area  = convexCellArea(boundary.get(0));\n            final Vector3D barycenter = convexCellBarycenter(boundary.get(0));\n            convexCellsInsidePoints.add(barycenter);\n\n            // add the cell contribution to the global properties\n            summedArea      += area;\n            summedBarycenter = new Vector3D(1, summedBarycenter, area, barycenter);\n\n        }\n    }\n\n    /** Compute convex cell area.\n     * @param start start vertex of the convex cell boundary\n     * @return area\n     */\n    private double convexCellArea(final Vertex start) {\n\n        int n = 0;\n        double sum = 0;\n\n        // loop around the cell\n        for (Edge e = start.getOutgoing(); n == 0 || e.getStart() != start; e = e.getEnd().getOutgoing()) {\n\n            // find path interior angle at vertex\n            final Vector3D previousPole = e.getCircle().getPole();\n            final Vector3D nextPole     = e.getEnd().getOutgoing().getCircle().getPole();\n            final Vector3D point        = e.getEnd().getLocation().getVector();\n            double alpha = FastMath.atan2(Vector3D.dotProduct(nextPole, Vector3D.crossProduct(point, previousPole)),\n                                          -Vector3D.dotProduct(nextPole, previousPole));\n            if (alpha < 0) {\n                alpha += MathUtils.TWO_PI;\n            }\n            sum += alpha;\n            n++;\n        }\n\n        // compute area using extended Girard theorem\n        // see Spherical Trigonometry: For the Use of Colleges and Schools by I. Todhunter\n        // article 99 in chapter VIII Area Of a Spherical Triangle. Spherical Excess.\n        // book available from project Gutenberg at http://www.gutenberg.org/ebooks/19770\n        return sum - (n - 2) * FastMath.PI;\n\n    }\n\n    /** Compute convex cell barycenter.\n     * @param start start vertex of the convex cell boundary\n     * @return barycenter\n     */\n    private Vector3D convexCellBarycenter(final Vertex start) {\n\n        int n = 0;\n        Vector3D sumB = Vector3D.ZERO;\n\n        // loop around the cell\n        for (Edge e = start.getOutgoing(); n == 0 || e.getStart() != start; e = e.getEnd().getOutgoing()) {\n            sumB = new Vector3D(1, sumB, e.getLength(), e.getCircle().getPole());\n            n++;\n        }\n\n        return sumB.normalize();\n\n    }\n\n    /** Get the area.\n     * @return area\n     */\n    public double getArea() {\n        return summedArea;\n    }\n\n    /** Get the barycenter.\n     * @return barycenter\n     */\n    public S2Point getBarycenter() {\n        if (summedBarycenter.getNormSq() == 0) {\n            return S2Point.NaN;\n        } else {\n            return new S2Point(summedBarycenter);\n        }\n    }\n\n    /** Get the points strictly inside convex cells.\n     * @return points strictly inside convex cells\n     */\n    public List<Vector3D> getConvexCellsInsidePoints() {\n        return convexCellsInsidePoints;\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "start", "org.apache.commons.math3.geometry.spherical.twod", "Vertex" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "visitOrder", "org.apache.commons.math3.geometry.spherical.twod", "PropertiesComputer", "public Order visitOrder(final BSPTree<Sphere2D> node)" ], [ "getConvexCellsInsidePoints", "org.apache.commons.math3.geometry.spherical.twod", "PropertiesComputer", "public List<Vector3D> getConvexCellsInsidePoints()" ], [ "getBarycenter", "org.apache.commons.math3.geometry.spherical.twod", "PropertiesComputer", "public S2Point getBarycenter()" ], [ "getArea", "org.apache.commons.math3.geometry.spherical.twod", "PropertiesComputer", "public double getArea()" ], [ "getOutgoing", "org.apache.commons.math3.geometry.spherical.twod", "Vertex", "public Edge getOutgoing()" ], [ "getIncoming", "org.apache.commons.math3.geometry.spherical.twod", "Vertex", "public Edge getIncoming()" ], [ "getLocation", "org.apache.commons.math3.geometry.spherical.twod", "Vertex", "public S2Point getLocation()" ], [ "sharedCircleWith", "org.apache.commons.math3.geometry.spherical.twod", "Vertex", "Circle sharedCircleWith(Vertex arg0)" ], [ "getX", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double getX()" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double dotProduct(Vector<Euclidean3D> arg0)" ], [ "toString", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public String toString()" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Vector3D crossProduct(Vector<Euclidean3D> arg0)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double distance(Vector<Euclidean3D> arg0)" ], [ "getAlpha", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double getAlpha()" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double distance1(Vector<Euclidean3D> arg0)" ], [ "isInfinite", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public boolean isInfinite()" ], [ "subtract", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Vector3D subtract(Vector<Euclidean3D> arg0)" ], [ "getZ", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double getZ()" ], [ "getNormSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double getNormSq()" ], [ "toArray", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double[] toArray()" ], [ "scalarMultiply", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Vector3D scalarMultiply(double arg0)" ], [ "normalize", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Vector3D normalize() throws MathArithmeticException" ], [ "isNaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public boolean isNaN()" ], [ "equals", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public boolean equals(Object arg0)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double distanceInf(Vector<Euclidean3D> arg0)" ], [ "add", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Vector3D add(Vector<Euclidean3D> arg0)" ], [ "orthogonal", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Vector3D orthogonal() throws MathArithmeticException" ], [ "getDelta", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double getDelta()" ], [ "getNorm", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double getNorm()" ], [ "hashCode", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public int hashCode()" ], [ "getSpace", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Space getSpace()" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double distanceSq(Vector<Euclidean3D> arg0)" ], [ "toString", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public String toString(NumberFormat arg0)" ], [ "getNormInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double getNormInf()" ], [ "getZero", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Vector3D getZero()" ], [ "getNorm1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double getNorm1()" ], [ "subtract", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Vector3D subtract(double arg0, Vector<Euclidean3D> arg1)" ], [ "negate", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Vector3D negate()" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double distance(Point<Euclidean3D> arg0)" ], [ "getY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double getY()" ], [ "add", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Vector3D add(double arg0, Vector<Euclidean3D> arg1)" ], [ "negate", "org.apache.commons.math3.geometry", "Vector", "public abstract Vector<S> negate()" ], [ "distanceSq", "org.apache.commons.math3.geometry", "Vector", "public abstract double distanceSq(Vector<S> arg0)" ], [ "getNorm1", "org.apache.commons.math3.geometry", "Vector", "public abstract double getNorm1()" ], [ "subtract", "org.apache.commons.math3.geometry", "Vector", "public abstract Vector<S> subtract(Vector<S> arg0)" ], [ "dotProduct", "org.apache.commons.math3.geometry", "Vector", "public abstract double dotProduct(Vector<S> arg0)" ], [ "getZero", "org.apache.commons.math3.geometry", "Vector", "public abstract Vector<S> getZero()" ], [ "distance", "org.apache.commons.math3.geometry", "Vector", "public abstract double distance(Vector<S> arg0)" ], [ "getNormInf", "org.apache.commons.math3.geometry", "Vector", "public abstract double getNormInf()" ], [ "isInfinite", "org.apache.commons.math3.geometry", "Vector", "public abstract boolean isInfinite()" ], [ "distanceInf", "org.apache.commons.math3.geometry", "Vector", "public abstract double distanceInf(Vector<S> arg0)" ], [ "add", "org.apache.commons.math3.geometry", "Vector", "public abstract Vector<S> add(double arg0, Vector<S> arg1)" ], [ "toString", "org.apache.commons.math3.geometry", "Vector", "public abstract String toString(NumberFormat arg0)" ], [ "add", "org.apache.commons.math3.geometry", "Vector", "public abstract Vector<S> add(Vector<S> arg0)" ], [ "getNormSq", "org.apache.commons.math3.geometry", "Vector", "public abstract double getNormSq()" ], [ "scalarMultiply", "org.apache.commons.math3.geometry", "Vector", "public abstract Vector<S> scalarMultiply(double arg0)" ], [ "distance1", "org.apache.commons.math3.geometry", "Vector", "public abstract double distance1(Vector<S> arg0)" ], [ "normalize", "org.apache.commons.math3.geometry", "Vector", "public abstract Vector<S> normalize() throws MathArithmeticException" ], [ "subtract", "org.apache.commons.math3.geometry", "Vector", "public abstract Vector<S> subtract(double arg0, Vector<S> arg1)" ], [ "getNorm", "org.apache.commons.math3.geometry", "Vector", "public abstract double getNorm()" ], [ "getSpace", "org.apache.commons.math3.geometry", "Point", "public abstract Space getSpace()" ], [ "isNaN", "org.apache.commons.math3.geometry", "Point", "public abstract boolean isNaN()" ], [ "distance", "org.apache.commons.math3.geometry", "Point", "public abstract double distance(Point<S> arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 24390,
  "oracle" : ";",
  "oracleType" : "NORMAL_POST",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.geometry.spherical.twod",
  "className" : "PropertiesComputer",
  "javadocTag" : "@return barycenter",
  "methodJavadoc" : "    /** Compute convex cell barycenter.\n     * @param start start vertex of the convex cell boundary\n     * @return barycenter\n     */",
  "methodSourceCode" : "private Vector3D convexCellBarycenter(final Vertex start){\n    int n = 0;\n    Vector3D sumB = Vector3D.ZERO;\n    // loop around the cell\n    for (Edge e = start.getOutgoing(); n == 0 || e.getStart() != start; e = e.getEnd().getOutgoing()) {\n        sumB = new Vector3D(1, sumB, e.getLength(), e.getCircle().getPole());\n        n++;\n    }\n    return sumB.normalize();\n}",
  "classJavadoc" : "/** Visitor computing geometrical properties.\n * @since 3.3\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math3.geometry.spherical.twod;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.commons.math3.exception.MathInternalError;\nimport org.apache.commons.math3.geometry.euclidean.threed.Vector3D;\nimport org.apache.commons.math3.geometry.partitioning.BSPTree;\nimport org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathUtils;\n\n/** Visitor computing geometrical properties.\n * @since 3.3\n */\nclass PropertiesComputer implements BSPTreeVisitor<Sphere2D> {\n\n    /** Tolerance below which points are consider to be identical. */\n    private final double tolerance;\n\n    /** Summed area. */\n    private double summedArea;\n\n    /** Summed barycenter. */\n    private Vector3D summedBarycenter;\n\n    /** List of points strictly inside convex cells. */\n    private final List<Vector3D> convexCellsInsidePoints;\n\n    /** Simple constructor.\n     * @param tolerance below which points are consider to be identical\n     */\n    PropertiesComputer(final double tolerance) {\n        this.tolerance              = tolerance;\n        this.summedArea             = 0;\n        this.summedBarycenter       = Vector3D.ZERO;\n        this.convexCellsInsidePoints = new ArrayList<Vector3D>();\n    }\n\n    /** {@inheritDoc} */\n    public Order visitOrder(final BSPTree<Sphere2D> node) {\n        return Order.MINUS_SUB_PLUS;\n    }\n\n    /** {@inheritDoc} */\n    public void visitInternalNode(final BSPTree<Sphere2D> node) {\n        // nothing to do here\n    }\n\n    /** {@inheritDoc} */\n    public void visitLeafNode(final BSPTree<Sphere2D> node) {\n        if ((Boolean) node.getAttribute()) {\n\n            // transform this inside leaf cell into a simple convex polygon\n            final SphericalPolygonsSet convex =\n                    new SphericalPolygonsSet(node.pruneAroundConvexCell(Boolean.TRUE,\n                                                                        Boolean.FALSE,\n                                                                        null),\n                                             tolerance);\n\n            // extract the start of the single loop boundary of the convex cell\n            final List<Vertex> boundary = convex.getBoundaryLoops();\n            if (boundary.size() != 1) {\n                // this should never happen\n                throw new MathInternalError();\n            }\n\n            // compute the geometrical properties of the convex cell\n            final double area  = convexCellArea(boundary.get(0));\n            final Vector3D barycenter = convexCellBarycenter(boundary.get(0));\n            convexCellsInsidePoints.add(barycenter);\n\n            // add the cell contribution to the global properties\n            summedArea      += area;\n            summedBarycenter = new Vector3D(1, summedBarycenter, area, barycenter);\n\n        }\n    }\n\n    /** Compute convex cell area.\n     * @param start start vertex of the convex cell boundary\n     * @return area\n     */\n    private double convexCellArea(final Vertex start) {\n\n        int n = 0;\n        double sum = 0;\n\n        // loop around the cell\n        for (Edge e = start.getOutgoing(); n == 0 || e.getStart() != start; e = e.getEnd().getOutgoing()) {\n\n            // find path interior angle at vertex\n            final Vector3D previousPole = e.getCircle().getPole();\n            final Vector3D nextPole     = e.getEnd().getOutgoing().getCircle().getPole();\n            final Vector3D point        = e.getEnd().getLocation().getVector();\n            double alpha = FastMath.atan2(Vector3D.dotProduct(nextPole, Vector3D.crossProduct(point, previousPole)),\n                                          -Vector3D.dotProduct(nextPole, previousPole));\n            if (alpha < 0) {\n                alpha += MathUtils.TWO_PI;\n            }\n            sum += alpha;\n            n++;\n        }\n\n        // compute area using extended Girard theorem\n        // see Spherical Trigonometry: For the Use of Colleges and Schools by I. Todhunter\n        // article 99 in chapter VIII Area Of a Spherical Triangle. Spherical Excess.\n        // book available from project Gutenberg at http://www.gutenberg.org/ebooks/19770\n        return sum - (n - 2) * FastMath.PI;\n\n    }\n\n    /** Compute convex cell barycenter.\n     * @param start start vertex of the convex cell boundary\n     * @return barycenter\n     */\n    private Vector3D convexCellBarycenter(final Vertex start) {\n\n        int n = 0;\n        Vector3D sumB = Vector3D.ZERO;\n\n        // loop around the cell\n        for (Edge e = start.getOutgoing(); n == 0 || e.getStart() != start; e = e.getEnd().getOutgoing()) {\n            sumB = new Vector3D(1, sumB, e.getLength(), e.getCircle().getPole());\n            n++;\n        }\n\n        return sumB.normalize();\n\n    }\n\n    /** Get the area.\n     * @return area\n     */\n    public double getArea() {\n        return summedArea;\n    }\n\n    /** Get the barycenter.\n     * @return barycenter\n     */\n    public S2Point getBarycenter() {\n        if (summedBarycenter.getNormSq() == 0) {\n            return S2Point.NaN;\n        } else {\n            return new S2Point(summedBarycenter);\n        }\n    }\n\n    /** Get the points strictly inside convex cells.\n     * @return points strictly inside convex cells\n     */\n    public List<Vector3D> getConvexCellsInsidePoints() {\n        return convexCellsInsidePoints;\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "start", "org.apache.commons.math3.geometry.spherical.twod", "Vertex" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getConvexCellsInsidePoints", "org.apache.commons.math3.geometry.spherical.twod", "PropertiesComputer", "public List<Vector3D> getConvexCellsInsidePoints()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "getBarycenter", "org.apache.commons.math3.geometry.spherical.twod", "PropertiesComputer", "public S2Point getBarycenter()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "getArea", "org.apache.commons.math3.geometry.spherical.twod", "PropertiesComputer", "public double getArea()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "visitOrder", "org.apache.commons.math3.geometry.spherical.twod", "PropertiesComputer", "public Order visitOrder(final BSPTree<Sphere2D> node)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "sharedCircleWith", "org.apache.commons.math3.geometry.spherical.twod", "Vertex", "Circle sharedCircleWith(Vertex arg0)" ], [ "getIncoming", "org.apache.commons.math3.geometry.spherical.twod", "Vertex", "public Edge getIncoming()" ], [ "getLocation", "org.apache.commons.math3.geometry.spherical.twod", "Vertex", "public S2Point getLocation()" ], [ "getOutgoing", "org.apache.commons.math3.geometry.spherical.twod", "Vertex", "public Edge getOutgoing()" ], [ "getX", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double getX()" ], [ "toString", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public String toString(NumberFormat arg0)" ], [ "getY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double getY()" ], [ "add", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Vector3D add(double arg0, Vector<Euclidean3D> arg1)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double distanceInf(Vector<Euclidean3D> arg0)" ], [ "normalize", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Vector3D normalize() throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double distance(Point<Euclidean3D> arg0)" ], [ "add", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Vector3D add(Vector<Euclidean3D> arg0)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double distance(Vector<Euclidean3D> arg0)" ], [ "getNorm", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double getNorm()" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Vector3D crossProduct(Vector<Euclidean3D> arg0)" ], [ "getAlpha", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double getAlpha()" ], [ "getDelta", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double getDelta()" ], [ "equals", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public boolean equals(Object arg0)" ], [ "getNorm1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double getNorm1()" ], [ "isNaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public boolean isNaN()" ], [ "getNormSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double getNormSq()" ], [ "getNormInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double getNormInf()" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double dotProduct(Vector<Euclidean3D> arg0)" ], [ "toString", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public String toString()" ], [ "hashCode", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public int hashCode()" ], [ "subtract", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Vector3D subtract(double arg0, Vector<Euclidean3D> arg1)" ], [ "scalarMultiply", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Vector3D scalarMultiply(double arg0)" ], [ "getZ", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double getZ()" ], [ "getSpace", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Space getSpace()" ], [ "toArray", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double[] toArray()" ], [ "subtract", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Vector3D subtract(Vector<Euclidean3D> arg0)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double distanceSq(Vector<Euclidean3D> arg0)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public double distance1(Vector<Euclidean3D> arg0)" ], [ "getZero", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Vector3D getZero()" ], [ "orthogonal", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Vector3D orthogonal() throws MathArithmeticException" ], [ "isInfinite", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public boolean isInfinite()" ], [ "negate", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public Vector3D negate()" ], [ "distanceSq", "org.apache.commons.math3.geometry", "Vector", "public abstract double distanceSq(Vector<S> arg0)" ], [ "negate", "org.apache.commons.math3.geometry", "Vector", "public abstract Vector<S> negate()" ], [ "getNormInf", "org.apache.commons.math3.geometry", "Vector", "public abstract double getNormInf()" ], [ "getNorm1", "org.apache.commons.math3.geometry", "Vector", "public abstract double getNorm1()" ], [ "getNormSq", "org.apache.commons.math3.geometry", "Vector", "public abstract double getNormSq()" ], [ "subtract", "org.apache.commons.math3.geometry", "Vector", "public abstract Vector<S> subtract(double arg0, Vector<S> arg1)" ], [ "toString", "org.apache.commons.math3.geometry", "Vector", "public abstract String toString(NumberFormat arg0)" ], [ "normalize", "org.apache.commons.math3.geometry", "Vector", "public abstract Vector<S> normalize() throws MathArithmeticException" ], [ "distanceInf", "org.apache.commons.math3.geometry", "Vector", "public abstract double distanceInf(Vector<S> arg0)" ], [ "scalarMultiply", "org.apache.commons.math3.geometry", "Vector", "public abstract Vector<S> scalarMultiply(double arg0)" ], [ "add", "org.apache.commons.math3.geometry", "Vector", "public abstract Vector<S> add(Vector<S> arg0)" ], [ "add", "org.apache.commons.math3.geometry", "Vector", "public abstract Vector<S> add(double arg0, Vector<S> arg1)" ], [ "dotProduct", "org.apache.commons.math3.geometry", "Vector", "public abstract double dotProduct(Vector<S> arg0)" ], [ "distance", "org.apache.commons.math3.geometry", "Vector", "public abstract double distance(Vector<S> arg0)" ], [ "getNorm", "org.apache.commons.math3.geometry", "Vector", "public abstract double getNorm()" ], [ "getZero", "org.apache.commons.math3.geometry", "Vector", "public abstract Vector<S> getZero()" ], [ "subtract", "org.apache.commons.math3.geometry", "Vector", "public abstract Vector<S> subtract(Vector<S> arg0)" ], [ "isInfinite", "org.apache.commons.math3.geometry", "Vector", "public abstract boolean isInfinite()" ], [ "distance1", "org.apache.commons.math3.geometry", "Vector", "public abstract double distance1(Vector<S> arg0)" ], [ "getSpace", "org.apache.commons.math3.geometry", "Point", "public abstract Space getSpace()" ], [ "isNaN", "org.apache.commons.math3.geometry", "Point", "public abstract boolean isNaN()" ], [ "distance", "org.apache.commons.math3.geometry", "Point", "public abstract double distance(Point<S> arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 24406,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.geometry.spherical.twod",
  "className" : "SphericalPolygonsSet",
  "javadocTag" : "@throws MathIllegalStateException if the tolerance setting does not allow to build\na clean non-ambiguous boundary",
  "methodJavadoc" : "    /** {@inheritDoc}\n     * @throws MathIllegalStateException if the tolerance setting does not allow to build\n     * a clean non-ambiguous boundary\n     */",
  "methodSourceCode" : "protected void computeGeometricalProperties() throws MathIllegalStateException{\n    final BSPTree<Sphere2D> tree = getTree(true);\n    if (tree.getCut() == null) {\n        // the instance has a single cell without any boundaries\n        if (tree.getCut() == null && (Boolean) tree.getAttribute()) {\n            // the instance covers the whole space\n            setSize(4 * FastMath.PI);\n            setBarycenter(new S2Point(0, 0));\n        } else {\n            setSize(0);\n            setBarycenter(S2Point.NaN);\n        }\n    } else {\n        // the instance has a boundary\n        final PropertiesComputer pc = new PropertiesComputer(getTolerance());\n        tree.visit(pc);\n        setSize(pc.getArea());\n        setBarycenter(pc.getBarycenter());\n    }\n}",
  "classJavadoc" : "/** This class represents a region on the 2-sphere: a set of spherical polygons.\n * @since 3.3\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math3.geometry.spherical.twod;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport org.apache.commons.math3.exception.MathIllegalStateException;\nimport org.apache.commons.math3.geometry.enclosing.EnclosingBall;\nimport org.apache.commons.math3.geometry.enclosing.WelzlEncloser;\nimport org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;\nimport org.apache.commons.math3.geometry.euclidean.threed.Rotation;\nimport org.apache.commons.math3.geometry.euclidean.threed.RotationConvention;\nimport org.apache.commons.math3.geometry.euclidean.threed.SphereGenerator;\nimport org.apache.commons.math3.geometry.euclidean.threed.Vector3D;\nimport org.apache.commons.math3.geometry.partitioning.AbstractRegion;\nimport org.apache.commons.math3.geometry.partitioning.BSPTree;\nimport org.apache.commons.math3.geometry.partitioning.BoundaryProjection;\nimport org.apache.commons.math3.geometry.partitioning.RegionFactory;\nimport org.apache.commons.math3.geometry.partitioning.SubHyperplane;\nimport org.apache.commons.math3.geometry.spherical.oned.Sphere1D;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathUtils;\n\n/** This class represents a region on the 2-sphere: a set of spherical polygons.\n * @since 3.3\n */\npublic class SphericalPolygonsSet extends AbstractRegion<Sphere2D, Sphere1D> {\n\n    /** Boundary defined as an array of closed loops start vertices. */\n    private List<Vertex> loops;\n\n    /** Build a polygons set representing the whole real 2-sphere.\n     * @param tolerance below which points are consider to be identical\n     */\n    public SphericalPolygonsSet(final double tolerance) {\n        super(tolerance);\n    }\n\n    /** Build a polygons set representing a hemisphere.\n     * @param pole pole of the hemisphere (the pole is in the inside half)\n     * @param tolerance below which points are consider to be identical\n     */\n    public SphericalPolygonsSet(final Vector3D pole, final double tolerance) {\n        super(new BSPTree<Sphere2D>(new Circle(pole, tolerance).wholeHyperplane(),\n                                    new BSPTree<Sphere2D>(Boolean.FALSE),\n                                    new BSPTree<Sphere2D>(Boolean.TRUE),\n                                    null),\n              tolerance);\n    }\n\n    /** Build a polygons set representing a regular polygon.\n     * @param center center of the polygon (the center is in the inside half)\n     * @param meridian point defining the reference meridian for first polygon vertex\n     * @param outsideRadius distance of the vertices to the center\n     * @param n number of sides of the polygon\n     * @param tolerance below which points are consider to be identical\n     */\n    public SphericalPolygonsSet(final Vector3D center, final Vector3D meridian,\n                                final double outsideRadius, final int n,\n                                final double tolerance) {\n        this(tolerance, createRegularPolygonVertices(center, meridian, outsideRadius, n));\n    }\n\n    /** Build a polygons set from a BSP tree.\n     * <p>The leaf nodes of the BSP tree <em>must</em> have a\n     * {@code Boolean} attribute representing the inside status of\n     * the corresponding cell (true for inside cells, false for outside\n     * cells). In order to avoid building too many small objects, it is\n     * recommended to use the predefined constants\n     * {@code Boolean.TRUE} and {@code Boolean.FALSE}</p>\n     * @param tree inside/outside BSP tree representing the region\n     * @param tolerance below which points are consider to be identical\n     */\n    public SphericalPolygonsSet(final BSPTree<Sphere2D> tree, final double tolerance) {\n        super(tree, tolerance);\n    }\n\n    /** Build a polygons set from a Boundary REPresentation (B-rep).\n     * <p>The boundary is provided as a collection of {@link\n     * SubHyperplane sub-hyperplanes}. Each sub-hyperplane has the\n     * interior part of the region on its minus side and the exterior on\n     * its plus side.</p>\n     * <p>The boundary elements can be in any order, and can form\n     * several non-connected sets (like for example polygons with holes\n     * or a set of disjoint polygons considered as a whole). In\n     * fact, the elements do not even need to be connected together\n     * (their topological connections are not used here). However, if the\n     * boundary does not really separate an inside open from an outside\n     * open (open having here its topological meaning), then subsequent\n     * calls to the {@link\n     * org.apache.commons.math3.geometry.partitioning.Region#checkPoint(org.apache.commons.math3.geometry.Point)\n     * checkPoint} method will not be meaningful anymore.</p>\n     * <p>If the boundary is empty, the region will represent the whole\n     * space.</p>\n     * @param boundary collection of boundary elements, as a\n     * collection of {@link SubHyperplane SubHyperplane} objects\n     * @param tolerance below which points are consider to be identical\n     */\n    public SphericalPolygonsSet(final Collection<SubHyperplane<Sphere2D>> boundary, final double tolerance) {\n        super(boundary, tolerance);\n    }\n\n    /** Build a polygon from a simple list of vertices.\n     * <p>The boundary is provided as a list of points considering to\n     * represent the vertices of a simple loop. The interior part of the\n     * region is on the left side of this path and the exterior is on its\n     * right side.</p>\n     * <p>This constructor does not handle polygons with a boundary\n     * forming several disconnected paths (such as polygons with holes).</p>\n     * <p>For cases where this simple constructor applies, it is expected to\n     * be numerically more robust than the {@link #SphericalPolygonsSet(Collection,\n     * double) general constructor} using {@link SubHyperplane subhyperplanes}.</p>\n     * <p>If the list is empty, the region will represent the whole\n     * space.</p>\n     * <p>\n     * Polygons with thin pikes or dents are inherently difficult to handle because\n     * they involve circles with almost opposite directions at some vertices. Polygons\n     * whose vertices come from some physical measurement with noise are also\n     * difficult because an edge that should be straight may be broken in lots of\n     * different pieces with almost equal directions. In both cases, computing the\n     * circles intersections is not numerically robust due to the almost 0 or almost\n     * &pi; angle. Such cases need to carefully adjust the {@code hyperplaneThickness}\n     * parameter. A too small value would often lead to completely wrong polygons\n     * with large area wrongly identified as inside or outside. Large values are\n     * often much safer. As a rule of thumb, a value slightly below the size of the\n     * most accurate detail needed is a good value for the {@code hyperplaneThickness}\n     * parameter.\n     * </p>\n     * @param hyperplaneThickness tolerance below which points are considered to\n     * belong to the hyperplane (which is therefore more a slab)\n     * @param vertices vertices of the simple loop boundary\n     */\n    public SphericalPolygonsSet(final double hyperplaneThickness, final S2Point ... vertices) {\n        super(verticesToTree(hyperplaneThickness, vertices), hyperplaneThickness);\n    }\n\n    /** Build the vertices representing a regular polygon.\n     * @param center center of the polygon (the center is in the inside half)\n     * @param meridian point defining the reference meridian for first polygon vertex\n     * @param outsideRadius distance of the vertices to the center\n     * @param n number of sides of the polygon\n     * @return vertices array\n     */\n    private static S2Point[] createRegularPolygonVertices(final Vector3D center, final Vector3D meridian,\n                                                          final double outsideRadius, final int n) {\n        final S2Point[] array = new S2Point[n];\n        final Rotation r0 = new Rotation(Vector3D.crossProduct(center, meridian),\n                                         outsideRadius, RotationConvention.VECTOR_OPERATOR);\n        array[0] = new S2Point(r0.applyTo(center));\n\n        final Rotation r = new Rotation(center, MathUtils.TWO_PI / n, RotationConvention.VECTOR_OPERATOR);\n        for (int i = 1; i < n; ++i) {\n            array[i] = new S2Point(r.applyTo(array[i - 1].getVector()));\n        }\n\n        return array;\n    }\n\n    /** Build the BSP tree of a polygons set from a simple list of vertices.\n     * <p>The boundary is provided as a list of points considering to\n     * represent the vertices of a simple loop. The interior part of the\n     * region is on the left side of this path and the exterior is on its\n     * right side.</p>\n     * <p>This constructor does not handle polygons with a boundary\n     * forming several disconnected paths (such as polygons with holes).</p>\n     * <p>This constructor handles only polygons with edges strictly shorter\n     * than \\( \\pi \\). If longer edges are needed, they need to be broken up\n     * in smaller sub-edges so this constraint holds.</p>\n     * <p>For cases where this simple constructor applies, it is expected to\n     * be numerically more robust than the {@link #PolygonsSet(Collection) general\n     * constructor} using {@link SubHyperplane subhyperplanes}.</p>\n     * @param hyperplaneThickness tolerance below which points are consider to\n     * belong to the hyperplane (which is therefore more a slab)\n     * @param vertices vertices of the simple loop boundary\n     * @return the BSP tree of the input vertices\n     */\n    private static BSPTree<Sphere2D> verticesToTree(final double hyperplaneThickness,\n                                                    final S2Point ... vertices) {\n\n        final int n = vertices.length;\n        if (n == 0) {\n            // the tree represents the whole space\n            return new BSPTree<Sphere2D>(Boolean.TRUE);\n        }\n\n        // build the vertices\n        final Vertex[] vArray = new Vertex[n];\n        for (int i = 0; i < n; ++i) {\n            vArray[i] = new Vertex(vertices[i]);\n        }\n\n        // build the edges\n        List<Edge> edges = new ArrayList<Edge>(n);\n        Vertex end = vArray[n - 1];\n        for (int i = 0; i < n; ++i) {\n\n            // get the endpoints of the edge\n            final Vertex start = end;\n            end = vArray[i];\n\n            // get the circle supporting the edge, taking care not to recreate it\n            // if it was already created earlier due to another edge being aligned\n            // with the current one\n            Circle circle = start.sharedCircleWith(end);\n            if (circle == null) {\n                circle = new Circle(start.getLocation(), end.getLocation(), hyperplaneThickness);\n            }\n\n            // create the edge and store it\n            edges.add(new Edge(start, end,\n                               Vector3D.angle(start.getLocation().getVector(),\n                                              end.getLocation().getVector()),\n                               circle));\n\n            // check if another vertex also happens to be on this circle\n            for (final Vertex vertex : vArray) {\n                if (vertex != start && vertex != end &&\n                    FastMath.abs(circle.getOffset(vertex.getLocation())) <= hyperplaneThickness) {\n                    vertex.bindWith(circle);\n                }\n            }\n\n        }\n\n        // build the tree top-down\n        final BSPTree<Sphere2D> tree = new BSPTree<Sphere2D>();\n        insertEdges(hyperplaneThickness, tree, edges);\n\n        return tree;\n\n    }\n\n    /** Recursively build a tree by inserting cut sub-hyperplanes.\n     * @param hyperplaneThickness tolerance below which points are considered to\n     * belong to the hyperplane (which is therefore more a slab)\n     * @param node current tree node (it is a leaf node at the beginning\n     * of the call)\n     * @param edges list of edges to insert in the cell defined by this node\n     * (excluding edges not belonging to the cell defined by this node)\n     */\n    private static void insertEdges(final double hyperplaneThickness,\n                                    final BSPTree<Sphere2D> node,\n                                    final List<Edge> edges) {\n\n        // find an edge with an hyperplane that can be inserted in the node\n        int index = 0;\n        Edge inserted = null;\n        while (inserted == null && index < edges.size()) {\n            inserted = edges.get(index++);\n            if (!node.insertCut(inserted.getCircle())) {\n                inserted = null;\n            }\n        }\n\n        if (inserted == null) {\n            // no suitable edge was found, the node remains a leaf node\n            // we need to set its inside/outside boolean indicator\n            final BSPTree<Sphere2D> parent = node.getParent();\n            if (parent == null || node == parent.getMinus()) {\n                node.setAttribute(Boolean.TRUE);\n            } else {\n                node.setAttribute(Boolean.FALSE);\n            }\n            return;\n        }\n\n        // we have split the node by inserting an edge as a cut sub-hyperplane\n        // distribute the remaining edges in the two sub-trees\n        final List<Edge> outsideList = new ArrayList<Edge>();\n        final List<Edge> insideList  = new ArrayList<Edge>();\n        for (final Edge edge : edges) {\n            if (edge != inserted) {\n                edge.split(inserted.getCircle(), outsideList, insideList);\n            }\n        }\n\n        // recurse through lower levels\n        if (!outsideList.isEmpty()) {\n            insertEdges(hyperplaneThickness, node.getPlus(), outsideList);\n        } else {\n            node.getPlus().setAttribute(Boolean.FALSE);\n        }\n        if (!insideList.isEmpty()) {\n            insertEdges(hyperplaneThickness, node.getMinus(),  insideList);\n        } else {\n            node.getMinus().setAttribute(Boolean.TRUE);\n        }\n\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public SphericalPolygonsSet buildNew(final BSPTree<Sphere2D> tree) {\n        return new SphericalPolygonsSet(tree, getTolerance());\n    }\n\n    /** {@inheritDoc}\n     * @exception MathIllegalStateException if the tolerance setting does not allow to build\n     * a clean non-ambiguous boundary\n     */\n    @Override\n    protected void computeGeometricalProperties() throws MathIllegalStateException {\n\n        final BSPTree<Sphere2D> tree = getTree(true);\n\n        if (tree.getCut() == null) {\n\n            // the instance has a single cell without any boundaries\n\n            if (tree.getCut() == null && (Boolean) tree.getAttribute()) {\n                // the instance covers the whole space\n                setSize(4 * FastMath.PI);\n                setBarycenter(new S2Point(0, 0));\n            } else {\n                setSize(0);\n                setBarycenter(S2Point.NaN);\n            }\n\n        } else {\n\n            // the instance has a boundary\n            final PropertiesComputer pc = new PropertiesComputer(getTolerance());\n            tree.visit(pc);\n            setSize(pc.getArea());\n            setBarycenter(pc.getBarycenter());\n\n        }\n\n    }\n\n    /** Get the boundary loops of the polygon.\n     * <p>The polygon boundary can be represented as a list of closed loops,\n     * each loop being given by exactly one of its vertices. From each loop\n     * start vertex, one can follow the loop by finding the outgoing edge,\n     * then the end vertex, then the next outgoing edge ... until the start\n     * vertex of the loop (exactly the same instance) is found again once\n     * the full loop has been visited.</p>\n     * <p>If the polygon has no boundary at all, a zero length loop\n     * array will be returned.</p>\n     * <p>If the polygon is a simple one-piece polygon, then the returned\n     * array will contain a single vertex.\n     * </p>\n     * <p>All edges in the various loops have the inside of the region on\n     * their left side (i.e. toward their pole) and the outside on their\n     * right side (i.e. away from their pole) when moving in the underlying\n     * circle direction. This means that the closed loops obey the direct\n     * trigonometric orientation.</p>\n     * @return boundary of the polygon, organized as an unmodifiable list of loops start vertices.\n     * @exception MathIllegalStateException if the tolerance setting does not allow to build\n     * a clean non-ambiguous boundary\n     * @see Vertex\n     * @see Edge\n     */\n    public List<Vertex> getBoundaryLoops() throws MathIllegalStateException {\n\n        if (loops == null) {\n            if (getTree(false).getCut() == null) {\n                loops = Collections.emptyList();\n            } else {\n\n                // sort the arcs according to their start point\n                final BSPTree<Sphere2D> root = getTree(true);\n                final EdgesBuilder visitor = new EdgesBuilder(root, getTolerance());\n                root.visit(visitor);\n                final List<Edge> edges = visitor.getEdges();\n\n\n                // convert the list of all edges into a list of start vertices\n                loops = new ArrayList<Vertex>();\n                while (!edges.isEmpty()) {\n\n                    // this is an edge belonging to a new loop, store it\n                    Edge edge = edges.get(0);\n                    final Vertex startVertex = edge.getStart();\n                    loops.add(startVertex);\n\n                    // remove all remaining edges in the same loop\n                    do {\n\n                        // remove one edge\n                        for (final Iterator<Edge> iterator = edges.iterator(); iterator.hasNext();) {\n                            if (iterator.next() == edge) {\n                                iterator.remove();\n                                break;\n                            }\n                        }\n\n                        // go to next edge following the boundary loop\n                        edge = edge.getEnd().getOutgoing();\n\n                    } while (edge.getStart() != startVertex);\n\n                }\n\n            }\n        }\n\n        return Collections.unmodifiableList(loops);\n\n    }\n\n    /** Get a spherical cap enclosing the polygon.\n     * <p>\n     * This method is intended as a first test to quickly identify points\n     * that are guaranteed to be outside of the region, hence performing a full\n     * {@link #checkPoint(org.apache.commons.math3.geometry.Vector) checkPoint}\n     * only if the point status remains undecided after the quick check. It is\n     * is therefore mostly useful to speed up computation for small polygons with\n     * complex shapes (say a country boundary on Earth), as the spherical cap will\n     * be small and hence will reliably identify a large part of the sphere as outside,\n     * whereas the full check can be more computing intensive. A typical use case is\n     * therefore:\n     * </p>\n     * <pre>\n     *   // compute region, plus an enclosing spherical cap\n     *   SphericalPolygonsSet complexShape = ...;\n     *   EnclosingBall<Sphere2D, S2Point> cap = complexShape.getEnclosingCap();\n     *\n     *   // check lots of points\n     *   for (Vector3D p : points) {\n     *\n     *     final Location l;\n     *     if (cap.contains(p)) {\n     *       // we cannot be sure where the point is\n     *       // we need to perform the full computation\n     *       l = complexShape.checkPoint(v);\n     *     } else {\n     *       // no need to do further computation,\n     *       // we already know the point is outside\n     *       l = Location.OUTSIDE;\n     *     }\n     *\n     *     // use l ...\n     *\n     *   }\n     * </pre>\n     * <p>\n     * In the special cases of empty or whole sphere polygons, special\n     * spherical caps are returned, with angular radius set to negative\n     * or positive infinity so the {@link\n     * EnclosingBall#contains(org.apache.commons.math3.geometry.Point) ball.contains(point)}\n     * method return always false or true.\n     * </p>\n     * <p>\n     * This method is <em>not</em> guaranteed to return the smallest enclosing cap.\n     * </p>\n     * @return a spherical cap enclosing the polygon\n     */\n    public EnclosingBall<Sphere2D, S2Point> getEnclosingCap() {\n\n        // handle special cases first\n        if (isEmpty()) {\n            return new EnclosingBall<Sphere2D, S2Point>(S2Point.PLUS_K, Double.NEGATIVE_INFINITY);\n        }\n        if (isFull()) {\n            return new EnclosingBall<Sphere2D, S2Point>(S2Point.PLUS_K, Double.POSITIVE_INFINITY);\n        }\n\n        // as the polygons is neither empty nor full, it has some boundaries and cut hyperplanes\n        final BSPTree<Sphere2D> root = getTree(false);\n        if (isEmpty(root.getMinus()) && isFull(root.getPlus())) {\n            // the polygon covers an hemisphere, and its boundary is one 2π long edge\n            final Circle circle = (Circle) root.getCut().getHyperplane();\n            return new EnclosingBall<Sphere2D, S2Point>(new S2Point(circle.getPole()).negate(),\n                                                        0.5 * FastMath.PI);\n        }\n        if (isFull(root.getMinus()) && isEmpty(root.getPlus())) {\n            // the polygon covers an hemisphere, and its boundary is one 2π long edge\n            final Circle circle = (Circle) root.getCut().getHyperplane();\n            return new EnclosingBall<Sphere2D, S2Point>(new S2Point(circle.getPole()),\n                                                        0.5 * FastMath.PI);\n        }\n\n        // gather some inside points, to be used by the encloser\n        final List<Vector3D> points = getInsidePoints();\n\n        // extract points from the boundary loops, to be used by the encloser as well\n        final List<Vertex> boundary = getBoundaryLoops();\n        for (final Vertex loopStart : boundary) {\n            int count = 0;\n            for (Vertex v = loopStart; count == 0 || v != loopStart; v = v.getOutgoing().getEnd()) {\n                ++count;\n                points.add(v.getLocation().getVector());\n            }\n        }\n\n        // find the smallest enclosing 3D sphere\n        final SphereGenerator generator = new SphereGenerator();\n        final WelzlEncloser<Euclidean3D, Vector3D> encloser =\n                new WelzlEncloser<Euclidean3D, Vector3D>(getTolerance(), generator);\n        EnclosingBall<Euclidean3D, Vector3D> enclosing3D = encloser.enclose(points);\n        final Vector3D[] support3D = enclosing3D.getSupport();\n\n        // convert to 3D sphere to spherical cap\n        final double r = enclosing3D.getRadius();\n        final double h = enclosing3D.getCenter().getNorm();\n        if (h < getTolerance()) {\n            // the 3D sphere is centered on the unit sphere and covers it\n            // fall back to a crude approximation, based only on outside convex cells\n            EnclosingBall<Sphere2D, S2Point> enclosingS2 =\n                    new EnclosingBall<Sphere2D, S2Point>(S2Point.PLUS_K, Double.POSITIVE_INFINITY);\n            for (Vector3D outsidePoint : getOutsidePoints()) {\n                final S2Point outsideS2 = new S2Point(outsidePoint);\n                final BoundaryProjection<Sphere2D> projection = projectToBoundary(outsideS2);\n                if (FastMath.PI - projection.getOffset() < enclosingS2.getRadius()) {\n                    enclosingS2 = new EnclosingBall<Sphere2D, S2Point>(outsideS2.negate(),\n                                                                       FastMath.PI - projection.getOffset(),\n                                                                       (S2Point) projection.getProjected());\n                }\n            }\n            return enclosingS2;\n        }\n        final S2Point[] support = new S2Point[support3D.length];\n        for (int i = 0; i < support3D.length; ++i) {\n            support[i] = new S2Point(support3D[i]);\n        }\n\n        final EnclosingBall<Sphere2D, S2Point> enclosingS2 =\n                new EnclosingBall<Sphere2D, S2Point>(new S2Point(enclosing3D.getCenter()),\n                                                     FastMath.acos((1 + h * h - r * r) / (2 * h)),\n                                                     support);\n\n        return enclosingS2;\n\n    }\n\n    /** Gather some inside points.\n     * @return list of points known to be strictly in all inside convex cells\n     */\n    private List<Vector3D> getInsidePoints() {\n        final PropertiesComputer pc = new PropertiesComputer(getTolerance());\n        getTree(true).visit(pc);\n        return pc.getConvexCellsInsidePoints();\n    }\n\n    /** Gather some outside points.\n     * @return list of points known to be strictly in all outside convex cells\n     */\n    private List<Vector3D> getOutsidePoints() {\n        final SphericalPolygonsSet complement =\n                (SphericalPolygonsSet) new RegionFactory<Sphere2D>().getComplement(this);\n        final PropertiesComputer pc = new PropertiesComputer(getTolerance());\n        complement.getTree(true).visit(pc);\n        return pc.getConvexCellsInsidePoints();\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getSize", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public double getSize()" ], [ "copySelf", "org.apache.commons.math3.geometry.partitioning", "Region", "public abstract Region<S> copySelf()" ], [ "isEmpty", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public boolean isEmpty()" ], [ "getBoundaryLoops", "org.apache.commons.math3.geometry.spherical.twod", "SphericalPolygonsSet", "public List<Vertex> getBoundaryLoops() throws MathIllegalStateException" ], [ "isFull", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public boolean isFull(BSPTree<S> arg0)" ], [ "checkPoint", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public Region.Location checkPoint(Point<S> arg0)" ], [ "copySelf", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public AbstractRegion<S, T> copySelf()" ], [ "buildNew", "org.apache.commons.math3.geometry.spherical.twod", "SphericalPolygonsSet", "public SphericalPolygonsSet buildNew(final BSPTree<Sphere2D> tree)" ], [ "isEmpty", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public boolean isEmpty(BSPTree<S> arg0)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "side", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public Side side(Hyperplane<S> arg0)" ], [ "isFull", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public boolean isFull()" ], [ "buildNew", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public abstract AbstractRegion<S, T> buildNew(BSPTree<S> arg0)" ], [ "applyTransform", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public AbstractRegion<S, T> applyTransform(Transform<S, T> arg0)" ], [ "checkPoint", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "protected Region.Location checkPoint(BSPTree<S> arg0, Vector<S> arg1)" ], [ "getBoundarySize", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public double getBoundarySize()" ], [ "checkPoint", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public Region.Location checkPoint(Vector<S> arg0)" ], [ "getEnclosingCap", "org.apache.commons.math3.geometry.spherical.twod", "SphericalPolygonsSet", "public EnclosingBall<Sphere2D, S2Point> getEnclosingCap()" ], [ "checkPoint", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "protected Region.Location checkPoint(BSPTree<S> arg0, Point<S> arg1)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "getTree", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public BSPTree<S> getTree(boolean arg0)" ], [ "getBarycenter", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public Point<S> getBarycenter()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "intersection", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public SubHyperplane<S> intersection(SubHyperplane<S> arg0)" ], [ "contains", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public boolean contains(Region<S> arg0)" ], [ "buildNew", "org.apache.commons.math3.geometry.partitioning", "Region", "public abstract Region<S> buildNew(BSPTree<S> arg0)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "getTolerance", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public double getTolerance()" ], [ "projectToBoundary", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public BoundaryProjection<S> projectToBoundary(Point<S> arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 24408,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.geometry.spherical.twod",
  "className" : "SphericalPolygonsSet",
  "javadocTag" : "@throws MathIllegalStateException if the tolerance setting does not allow to build\na clean non-ambiguous boundary",
  "methodJavadoc" : "    /** Get the boundary loops of the polygon.\n     * <p>The polygon boundary can be represented as a list of closed loops,\n     * each loop being given by exactly one of its vertices. From each loop\n     * start vertex, one can follow the loop by finding the outgoing edge,\n     * then the end vertex, then the next outgoing edge ... until the start\n     * vertex of the loop (exactly the same instance) is found again once\n     * the full loop has been visited.</p>\n     * <p>If the polygon has no boundary at all, a zero length loop\n     * array will be returned.</p>\n     * <p>If the polygon is a simple one-piece polygon, then the returned\n     * array will contain a single vertex.\n     * </p>\n     * <p>All edges in the various loops have the inside of the region on\n     * their left side (i.e. toward their pole) and the outside on their\n     * right side (i.e. away from their pole) when moving in the underlying\n     * circle direction. This means that the closed loops obey the direct\n     * trigonometric orientation.</p>\n     * @return boundary of the polygon, organized as an unmodifiable list of loops start vertices.\n     * @throws MathIllegalStateException if the tolerance setting does not allow to build\n     * a clean non-ambiguous boundary\n     * @see Vertex\n     * @see Edge\n     */",
  "methodSourceCode" : "public List<Vertex> getBoundaryLoops() throws MathIllegalStateException{\n    if (loops == null) {\n        if (getTree(false).getCut() == null) {\n            loops = Collections.emptyList();\n        } else {\n            // sort the arcs according to their start point\n            final BSPTree<Sphere2D> root = getTree(true);\n            final EdgesBuilder visitor = new EdgesBuilder(root, getTolerance());\n            root.visit(visitor);\n            final List<Edge> edges = visitor.getEdges();\n            // convert the list of all edges into a list of start vertices\n            loops = new ArrayList<Vertex>();\n            while (!edges.isEmpty()) {\n                // this is an edge belonging to a new loop, store it\n                Edge edge = edges.get(0);\n                final Vertex startVertex = edge.getStart();\n                loops.add(startVertex);\n                // remove all remaining edges in the same loop\n                do {\n                    // remove one edge\n                    for (final Iterator<Edge> iterator = edges.iterator(); iterator.hasNext(); ) {\n                        if (iterator.next() == edge) {\n                            iterator.remove();\n                            break;\n                        }\n                    }\n                    // go to next edge following the boundary loop\n                    edge = edge.getEnd().getOutgoing();\n                } while (edge.getStart() != startVertex);\n            }\n        }\n    }\n    return Collections.unmodifiableList(loops);\n}",
  "classJavadoc" : "/** This class represents a region on the 2-sphere: a set of spherical polygons.\n * @since 3.3\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math3.geometry.spherical.twod;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport org.apache.commons.math3.exception.MathIllegalStateException;\nimport org.apache.commons.math3.geometry.enclosing.EnclosingBall;\nimport org.apache.commons.math3.geometry.enclosing.WelzlEncloser;\nimport org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;\nimport org.apache.commons.math3.geometry.euclidean.threed.Rotation;\nimport org.apache.commons.math3.geometry.euclidean.threed.RotationConvention;\nimport org.apache.commons.math3.geometry.euclidean.threed.SphereGenerator;\nimport org.apache.commons.math3.geometry.euclidean.threed.Vector3D;\nimport org.apache.commons.math3.geometry.partitioning.AbstractRegion;\nimport org.apache.commons.math3.geometry.partitioning.BSPTree;\nimport org.apache.commons.math3.geometry.partitioning.BoundaryProjection;\nimport org.apache.commons.math3.geometry.partitioning.RegionFactory;\nimport org.apache.commons.math3.geometry.partitioning.SubHyperplane;\nimport org.apache.commons.math3.geometry.spherical.oned.Sphere1D;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathUtils;\n\n/** This class represents a region on the 2-sphere: a set of spherical polygons.\n * @since 3.3\n */\npublic class SphericalPolygonsSet extends AbstractRegion<Sphere2D, Sphere1D> {\n\n    /** Boundary defined as an array of closed loops start vertices. */\n    private List<Vertex> loops;\n\n    /** Build a polygons set representing the whole real 2-sphere.\n     * @param tolerance below which points are consider to be identical\n     */\n    public SphericalPolygonsSet(final double tolerance) {\n        super(tolerance);\n    }\n\n    /** Build a polygons set representing a hemisphere.\n     * @param pole pole of the hemisphere (the pole is in the inside half)\n     * @param tolerance below which points are consider to be identical\n     */\n    public SphericalPolygonsSet(final Vector3D pole, final double tolerance) {\n        super(new BSPTree<Sphere2D>(new Circle(pole, tolerance).wholeHyperplane(),\n                                    new BSPTree<Sphere2D>(Boolean.FALSE),\n                                    new BSPTree<Sphere2D>(Boolean.TRUE),\n                                    null),\n              tolerance);\n    }\n\n    /** Build a polygons set representing a regular polygon.\n     * @param center center of the polygon (the center is in the inside half)\n     * @param meridian point defining the reference meridian for first polygon vertex\n     * @param outsideRadius distance of the vertices to the center\n     * @param n number of sides of the polygon\n     * @param tolerance below which points are consider to be identical\n     */\n    public SphericalPolygonsSet(final Vector3D center, final Vector3D meridian,\n                                final double outsideRadius, final int n,\n                                final double tolerance) {\n        this(tolerance, createRegularPolygonVertices(center, meridian, outsideRadius, n));\n    }\n\n    /** Build a polygons set from a BSP tree.\n     * <p>The leaf nodes of the BSP tree <em>must</em> have a\n     * {@code Boolean} attribute representing the inside status of\n     * the corresponding cell (true for inside cells, false for outside\n     * cells). In order to avoid building too many small objects, it is\n     * recommended to use the predefined constants\n     * {@code Boolean.TRUE} and {@code Boolean.FALSE}</p>\n     * @param tree inside/outside BSP tree representing the region\n     * @param tolerance below which points are consider to be identical\n     */\n    public SphericalPolygonsSet(final BSPTree<Sphere2D> tree, final double tolerance) {\n        super(tree, tolerance);\n    }\n\n    /** Build a polygons set from a Boundary REPresentation (B-rep).\n     * <p>The boundary is provided as a collection of {@link\n     * SubHyperplane sub-hyperplanes}. Each sub-hyperplane has the\n     * interior part of the region on its minus side and the exterior on\n     * its plus side.</p>\n     * <p>The boundary elements can be in any order, and can form\n     * several non-connected sets (like for example polygons with holes\n     * or a set of disjoint polygons considered as a whole). In\n     * fact, the elements do not even need to be connected together\n     * (their topological connections are not used here). However, if the\n     * boundary does not really separate an inside open from an outside\n     * open (open having here its topological meaning), then subsequent\n     * calls to the {@link\n     * org.apache.commons.math3.geometry.partitioning.Region#checkPoint(org.apache.commons.math3.geometry.Point)\n     * checkPoint} method will not be meaningful anymore.</p>\n     * <p>If the boundary is empty, the region will represent the whole\n     * space.</p>\n     * @param boundary collection of boundary elements, as a\n     * collection of {@link SubHyperplane SubHyperplane} objects\n     * @param tolerance below which points are consider to be identical\n     */\n    public SphericalPolygonsSet(final Collection<SubHyperplane<Sphere2D>> boundary, final double tolerance) {\n        super(boundary, tolerance);\n    }\n\n    /** Build a polygon from a simple list of vertices.\n     * <p>The boundary is provided as a list of points considering to\n     * represent the vertices of a simple loop. The interior part of the\n     * region is on the left side of this path and the exterior is on its\n     * right side.</p>\n     * <p>This constructor does not handle polygons with a boundary\n     * forming several disconnected paths (such as polygons with holes).</p>\n     * <p>For cases where this simple constructor applies, it is expected to\n     * be numerically more robust than the {@link #SphericalPolygonsSet(Collection,\n     * double) general constructor} using {@link SubHyperplane subhyperplanes}.</p>\n     * <p>If the list is empty, the region will represent the whole\n     * space.</p>\n     * <p>\n     * Polygons with thin pikes or dents are inherently difficult to handle because\n     * they involve circles with almost opposite directions at some vertices. Polygons\n     * whose vertices come from some physical measurement with noise are also\n     * difficult because an edge that should be straight may be broken in lots of\n     * different pieces with almost equal directions. In both cases, computing the\n     * circles intersections is not numerically robust due to the almost 0 or almost\n     * &pi; angle. Such cases need to carefully adjust the {@code hyperplaneThickness}\n     * parameter. A too small value would often lead to completely wrong polygons\n     * with large area wrongly identified as inside or outside. Large values are\n     * often much safer. As a rule of thumb, a value slightly below the size of the\n     * most accurate detail needed is a good value for the {@code hyperplaneThickness}\n     * parameter.\n     * </p>\n     * @param hyperplaneThickness tolerance below which points are considered to\n     * belong to the hyperplane (which is therefore more a slab)\n     * @param vertices vertices of the simple loop boundary\n     */\n    public SphericalPolygonsSet(final double hyperplaneThickness, final S2Point ... vertices) {\n        super(verticesToTree(hyperplaneThickness, vertices), hyperplaneThickness);\n    }\n\n    /** Build the vertices representing a regular polygon.\n     * @param center center of the polygon (the center is in the inside half)\n     * @param meridian point defining the reference meridian for first polygon vertex\n     * @param outsideRadius distance of the vertices to the center\n     * @param n number of sides of the polygon\n     * @return vertices array\n     */\n    private static S2Point[] createRegularPolygonVertices(final Vector3D center, final Vector3D meridian,\n                                                          final double outsideRadius, final int n) {\n        final S2Point[] array = new S2Point[n];\n        final Rotation r0 = new Rotation(Vector3D.crossProduct(center, meridian),\n                                         outsideRadius, RotationConvention.VECTOR_OPERATOR);\n        array[0] = new S2Point(r0.applyTo(center));\n\n        final Rotation r = new Rotation(center, MathUtils.TWO_PI / n, RotationConvention.VECTOR_OPERATOR);\n        for (int i = 1; i < n; ++i) {\n            array[i] = new S2Point(r.applyTo(array[i - 1].getVector()));\n        }\n\n        return array;\n    }\n\n    /** Build the BSP tree of a polygons set from a simple list of vertices.\n     * <p>The boundary is provided as a list of points considering to\n     * represent the vertices of a simple loop. The interior part of the\n     * region is on the left side of this path and the exterior is on its\n     * right side.</p>\n     * <p>This constructor does not handle polygons with a boundary\n     * forming several disconnected paths (such as polygons with holes).</p>\n     * <p>This constructor handles only polygons with edges strictly shorter\n     * than \\( \\pi \\). If longer edges are needed, they need to be broken up\n     * in smaller sub-edges so this constraint holds.</p>\n     * <p>For cases where this simple constructor applies, it is expected to\n     * be numerically more robust than the {@link #PolygonsSet(Collection) general\n     * constructor} using {@link SubHyperplane subhyperplanes}.</p>\n     * @param hyperplaneThickness tolerance below which points are consider to\n     * belong to the hyperplane (which is therefore more a slab)\n     * @param vertices vertices of the simple loop boundary\n     * @return the BSP tree of the input vertices\n     */\n    private static BSPTree<Sphere2D> verticesToTree(final double hyperplaneThickness,\n                                                    final S2Point ... vertices) {\n\n        final int n = vertices.length;\n        if (n == 0) {\n            // the tree represents the whole space\n            return new BSPTree<Sphere2D>(Boolean.TRUE);\n        }\n\n        // build the vertices\n        final Vertex[] vArray = new Vertex[n];\n        for (int i = 0; i < n; ++i) {\n            vArray[i] = new Vertex(vertices[i]);\n        }\n\n        // build the edges\n        List<Edge> edges = new ArrayList<Edge>(n);\n        Vertex end = vArray[n - 1];\n        for (int i = 0; i < n; ++i) {\n\n            // get the endpoints of the edge\n            final Vertex start = end;\n            end = vArray[i];\n\n            // get the circle supporting the edge, taking care not to recreate it\n            // if it was already created earlier due to another edge being aligned\n            // with the current one\n            Circle circle = start.sharedCircleWith(end);\n            if (circle == null) {\n                circle = new Circle(start.getLocation(), end.getLocation(), hyperplaneThickness);\n            }\n\n            // create the edge and store it\n            edges.add(new Edge(start, end,\n                               Vector3D.angle(start.getLocation().getVector(),\n                                              end.getLocation().getVector()),\n                               circle));\n\n            // check if another vertex also happens to be on this circle\n            for (final Vertex vertex : vArray) {\n                if (vertex != start && vertex != end &&\n                    FastMath.abs(circle.getOffset(vertex.getLocation())) <= hyperplaneThickness) {\n                    vertex.bindWith(circle);\n                }\n            }\n\n        }\n\n        // build the tree top-down\n        final BSPTree<Sphere2D> tree = new BSPTree<Sphere2D>();\n        insertEdges(hyperplaneThickness, tree, edges);\n\n        return tree;\n\n    }\n\n    /** Recursively build a tree by inserting cut sub-hyperplanes.\n     * @param hyperplaneThickness tolerance below which points are considered to\n     * belong to the hyperplane (which is therefore more a slab)\n     * @param node current tree node (it is a leaf node at the beginning\n     * of the call)\n     * @param edges list of edges to insert in the cell defined by this node\n     * (excluding edges not belonging to the cell defined by this node)\n     */\n    private static void insertEdges(final double hyperplaneThickness,\n                                    final BSPTree<Sphere2D> node,\n                                    final List<Edge> edges) {\n\n        // find an edge with an hyperplane that can be inserted in the node\n        int index = 0;\n        Edge inserted = null;\n        while (inserted == null && index < edges.size()) {\n            inserted = edges.get(index++);\n            if (!node.insertCut(inserted.getCircle())) {\n                inserted = null;\n            }\n        }\n\n        if (inserted == null) {\n            // no suitable edge was found, the node remains a leaf node\n            // we need to set its inside/outside boolean indicator\n            final BSPTree<Sphere2D> parent = node.getParent();\n            if (parent == null || node == parent.getMinus()) {\n                node.setAttribute(Boolean.TRUE);\n            } else {\n                node.setAttribute(Boolean.FALSE);\n            }\n            return;\n        }\n\n        // we have split the node by inserting an edge as a cut sub-hyperplane\n        // distribute the remaining edges in the two sub-trees\n        final List<Edge> outsideList = new ArrayList<Edge>();\n        final List<Edge> insideList  = new ArrayList<Edge>();\n        for (final Edge edge : edges) {\n            if (edge != inserted) {\n                edge.split(inserted.getCircle(), outsideList, insideList);\n            }\n        }\n\n        // recurse through lower levels\n        if (!outsideList.isEmpty()) {\n            insertEdges(hyperplaneThickness, node.getPlus(), outsideList);\n        } else {\n            node.getPlus().setAttribute(Boolean.FALSE);\n        }\n        if (!insideList.isEmpty()) {\n            insertEdges(hyperplaneThickness, node.getMinus(),  insideList);\n        } else {\n            node.getMinus().setAttribute(Boolean.TRUE);\n        }\n\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public SphericalPolygonsSet buildNew(final BSPTree<Sphere2D> tree) {\n        return new SphericalPolygonsSet(tree, getTolerance());\n    }\n\n    /** {@inheritDoc}\n     * @exception MathIllegalStateException if the tolerance setting does not allow to build\n     * a clean non-ambiguous boundary\n     */\n    @Override\n    protected void computeGeometricalProperties() throws MathIllegalStateException {\n\n        final BSPTree<Sphere2D> tree = getTree(true);\n\n        if (tree.getCut() == null) {\n\n            // the instance has a single cell without any boundaries\n\n            if (tree.getCut() == null && (Boolean) tree.getAttribute()) {\n                // the instance covers the whole space\n                setSize(4 * FastMath.PI);\n                setBarycenter(new S2Point(0, 0));\n            } else {\n                setSize(0);\n                setBarycenter(S2Point.NaN);\n            }\n\n        } else {\n\n            // the instance has a boundary\n            final PropertiesComputer pc = new PropertiesComputer(getTolerance());\n            tree.visit(pc);\n            setSize(pc.getArea());\n            setBarycenter(pc.getBarycenter());\n\n        }\n\n    }\n\n    /** Get the boundary loops of the polygon.\n     * <p>The polygon boundary can be represented as a list of closed loops,\n     * each loop being given by exactly one of its vertices. From each loop\n     * start vertex, one can follow the loop by finding the outgoing edge,\n     * then the end vertex, then the next outgoing edge ... until the start\n     * vertex of the loop (exactly the same instance) is found again once\n     * the full loop has been visited.</p>\n     * <p>If the polygon has no boundary at all, a zero length loop\n     * array will be returned.</p>\n     * <p>If the polygon is a simple one-piece polygon, then the returned\n     * array will contain a single vertex.\n     * </p>\n     * <p>All edges in the various loops have the inside of the region on\n     * their left side (i.e. toward their pole) and the outside on their\n     * right side (i.e. away from their pole) when moving in the underlying\n     * circle direction. This means that the closed loops obey the direct\n     * trigonometric orientation.</p>\n     * @return boundary of the polygon, organized as an unmodifiable list of loops start vertices.\n     * @exception MathIllegalStateException if the tolerance setting does not allow to build\n     * a clean non-ambiguous boundary\n     * @see Vertex\n     * @see Edge\n     */\n    public List<Vertex> getBoundaryLoops() throws MathIllegalStateException {\n\n        if (loops == null) {\n            if (getTree(false).getCut() == null) {\n                loops = Collections.emptyList();\n            } else {\n\n                // sort the arcs according to their start point\n                final BSPTree<Sphere2D> root = getTree(true);\n                final EdgesBuilder visitor = new EdgesBuilder(root, getTolerance());\n                root.visit(visitor);\n                final List<Edge> edges = visitor.getEdges();\n\n\n                // convert the list of all edges into a list of start vertices\n                loops = new ArrayList<Vertex>();\n                while (!edges.isEmpty()) {\n\n                    // this is an edge belonging to a new loop, store it\n                    Edge edge = edges.get(0);\n                    final Vertex startVertex = edge.getStart();\n                    loops.add(startVertex);\n\n                    // remove all remaining edges in the same loop\n                    do {\n\n                        // remove one edge\n                        for (final Iterator<Edge> iterator = edges.iterator(); iterator.hasNext();) {\n                            if (iterator.next() == edge) {\n                                iterator.remove();\n                                break;\n                            }\n                        }\n\n                        // go to next edge following the boundary loop\n                        edge = edge.getEnd().getOutgoing();\n\n                    } while (edge.getStart() != startVertex);\n\n                }\n\n            }\n        }\n\n        return Collections.unmodifiableList(loops);\n\n    }\n\n    /** Get a spherical cap enclosing the polygon.\n     * <p>\n     * This method is intended as a first test to quickly identify points\n     * that are guaranteed to be outside of the region, hence performing a full\n     * {@link #checkPoint(org.apache.commons.math3.geometry.Vector) checkPoint}\n     * only if the point status remains undecided after the quick check. It is\n     * is therefore mostly useful to speed up computation for small polygons with\n     * complex shapes (say a country boundary on Earth), as the spherical cap will\n     * be small and hence will reliably identify a large part of the sphere as outside,\n     * whereas the full check can be more computing intensive. A typical use case is\n     * therefore:\n     * </p>\n     * <pre>\n     *   // compute region, plus an enclosing spherical cap\n     *   SphericalPolygonsSet complexShape = ...;\n     *   EnclosingBall<Sphere2D, S2Point> cap = complexShape.getEnclosingCap();\n     *\n     *   // check lots of points\n     *   for (Vector3D p : points) {\n     *\n     *     final Location l;\n     *     if (cap.contains(p)) {\n     *       // we cannot be sure where the point is\n     *       // we need to perform the full computation\n     *       l = complexShape.checkPoint(v);\n     *     } else {\n     *       // no need to do further computation,\n     *       // we already know the point is outside\n     *       l = Location.OUTSIDE;\n     *     }\n     *\n     *     // use l ...\n     *\n     *   }\n     * </pre>\n     * <p>\n     * In the special cases of empty or whole sphere polygons, special\n     * spherical caps are returned, with angular radius set to negative\n     * or positive infinity so the {@link\n     * EnclosingBall#contains(org.apache.commons.math3.geometry.Point) ball.contains(point)}\n     * method return always false or true.\n     * </p>\n     * <p>\n     * This method is <em>not</em> guaranteed to return the smallest enclosing cap.\n     * </p>\n     * @return a spherical cap enclosing the polygon\n     */\n    public EnclosingBall<Sphere2D, S2Point> getEnclosingCap() {\n\n        // handle special cases first\n        if (isEmpty()) {\n            return new EnclosingBall<Sphere2D, S2Point>(S2Point.PLUS_K, Double.NEGATIVE_INFINITY);\n        }\n        if (isFull()) {\n            return new EnclosingBall<Sphere2D, S2Point>(S2Point.PLUS_K, Double.POSITIVE_INFINITY);\n        }\n\n        // as the polygons is neither empty nor full, it has some boundaries and cut hyperplanes\n        final BSPTree<Sphere2D> root = getTree(false);\n        if (isEmpty(root.getMinus()) && isFull(root.getPlus())) {\n            // the polygon covers an hemisphere, and its boundary is one 2π long edge\n            final Circle circle = (Circle) root.getCut().getHyperplane();\n            return new EnclosingBall<Sphere2D, S2Point>(new S2Point(circle.getPole()).negate(),\n                                                        0.5 * FastMath.PI);\n        }\n        if (isFull(root.getMinus()) && isEmpty(root.getPlus())) {\n            // the polygon covers an hemisphere, and its boundary is one 2π long edge\n            final Circle circle = (Circle) root.getCut().getHyperplane();\n            return new EnclosingBall<Sphere2D, S2Point>(new S2Point(circle.getPole()),\n                                                        0.5 * FastMath.PI);\n        }\n\n        // gather some inside points, to be used by the encloser\n        final List<Vector3D> points = getInsidePoints();\n\n        // extract points from the boundary loops, to be used by the encloser as well\n        final List<Vertex> boundary = getBoundaryLoops();\n        for (final Vertex loopStart : boundary) {\n            int count = 0;\n            for (Vertex v = loopStart; count == 0 || v != loopStart; v = v.getOutgoing().getEnd()) {\n                ++count;\n                points.add(v.getLocation().getVector());\n            }\n        }\n\n        // find the smallest enclosing 3D sphere\n        final SphereGenerator generator = new SphereGenerator();\n        final WelzlEncloser<Euclidean3D, Vector3D> encloser =\n                new WelzlEncloser<Euclidean3D, Vector3D>(getTolerance(), generator);\n        EnclosingBall<Euclidean3D, Vector3D> enclosing3D = encloser.enclose(points);\n        final Vector3D[] support3D = enclosing3D.getSupport();\n\n        // convert to 3D sphere to spherical cap\n        final double r = enclosing3D.getRadius();\n        final double h = enclosing3D.getCenter().getNorm();\n        if (h < getTolerance()) {\n            // the 3D sphere is centered on the unit sphere and covers it\n            // fall back to a crude approximation, based only on outside convex cells\n            EnclosingBall<Sphere2D, S2Point> enclosingS2 =\n                    new EnclosingBall<Sphere2D, S2Point>(S2Point.PLUS_K, Double.POSITIVE_INFINITY);\n            for (Vector3D outsidePoint : getOutsidePoints()) {\n                final S2Point outsideS2 = new S2Point(outsidePoint);\n                final BoundaryProjection<Sphere2D> projection = projectToBoundary(outsideS2);\n                if (FastMath.PI - projection.getOffset() < enclosingS2.getRadius()) {\n                    enclosingS2 = new EnclosingBall<Sphere2D, S2Point>(outsideS2.negate(),\n                                                                       FastMath.PI - projection.getOffset(),\n                                                                       (S2Point) projection.getProjected());\n                }\n            }\n            return enclosingS2;\n        }\n        final S2Point[] support = new S2Point[support3D.length];\n        for (int i = 0; i < support3D.length; ++i) {\n            support[i] = new S2Point(support3D[i]);\n        }\n\n        final EnclosingBall<Sphere2D, S2Point> enclosingS2 =\n                new EnclosingBall<Sphere2D, S2Point>(new S2Point(enclosing3D.getCenter()),\n                                                     FastMath.acos((1 + h * h - r * r) / (2 * h)),\n                                                     support);\n\n        return enclosingS2;\n\n    }\n\n    /** Gather some inside points.\n     * @return list of points known to be strictly in all inside convex cells\n     */\n    private List<Vector3D> getInsidePoints() {\n        final PropertiesComputer pc = new PropertiesComputer(getTolerance());\n        getTree(true).visit(pc);\n        return pc.getConvexCellsInsidePoints();\n    }\n\n    /** Gather some outside points.\n     * @return list of points known to be strictly in all outside convex cells\n     */\n    private List<Vector3D> getOutsidePoints() {\n        final SphericalPolygonsSet complement =\n                (SphericalPolygonsSet) new RegionFactory<Sphere2D>().getComplement(this);\n        final PropertiesComputer pc = new PropertiesComputer(getTolerance());\n        complement.getTree(true).visit(pc);\n        return pc.getConvexCellsInsidePoints();\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "toString", "java.lang", "Object", "public String toString()" ], [ "isEmpty", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public boolean isEmpty(BSPTree<S> arg0)" ], [ "getEnclosingCap", "org.apache.commons.math3.geometry.spherical.twod", "SphericalPolygonsSet", "public EnclosingBall<Sphere2D, S2Point> getEnclosingCap()" ], [ "isEmpty", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public boolean isEmpty()" ], [ "getBoundarySize", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public double getBoundarySize()" ], [ "checkPoint", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public Region.Location checkPoint(Vector<S> arg0)" ], [ "isFull", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public boolean isFull()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "intersection", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public SubHyperplane<S> intersection(SubHyperplane<S> arg0)" ], [ "projectToBoundary", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public BoundaryProjection<S> projectToBoundary(Point<S> arg0)" ], [ "applyTransform", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public AbstractRegion<S, T> applyTransform(Transform<S, T> arg0)" ], [ "buildNew", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public abstract AbstractRegion<S, T> buildNew(BSPTree<S> arg0)" ], [ "getBarycenter", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public Point<S> getBarycenter()" ], [ "buildNew", "org.apache.commons.math3.geometry.spherical.twod", "SphericalPolygonsSet", "public SphericalPolygonsSet buildNew(final BSPTree<Sphere2D> tree)" ], [ "copySelf", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public AbstractRegion<S, T> copySelf()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "buildNew", "org.apache.commons.math3.geometry.partitioning", "Region", "public abstract Region<S> buildNew(BSPTree<S> arg0)" ], [ "checkPoint", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "protected Region.Location checkPoint(BSPTree<S> arg0, Vector<S> arg1)" ], [ "checkPoint", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "protected Region.Location checkPoint(BSPTree<S> arg0, Point<S> arg1)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "isFull", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public boolean isFull(BSPTree<S> arg0)" ], [ "getSize", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public double getSize()" ], [ "getBoundaryLoops", "org.apache.commons.math3.geometry.spherical.twod", "SphericalPolygonsSet", "public List<Vertex> getBoundaryLoops() throws MathIllegalStateException" ], [ "copySelf", "org.apache.commons.math3.geometry.partitioning", "Region", "public abstract Region<S> copySelf()" ], [ "getTree", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public BSPTree<S> getTree(boolean arg0)" ], [ "checkPoint", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public Region.Location checkPoint(Point<S> arg0)" ], [ "getTolerance", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public double getTolerance()" ], [ "contains", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public boolean contains(Region<S> arg0)" ], [ "side", "org.apache.commons.math3.geometry.partitioning", "AbstractRegion", "public Side side(Hyperplane<S> arg0)" ], [ "spliterator", "java.util", "List", "public default Spliterator<E> spliterator()" ], [ "hashCode", "java.util", "List", "public abstract int hashCode()" ], [ "add", "java.util", "List", "public abstract boolean add(E arg0)" ], [ "iterator", "java.util", "List", "public abstract Iterator<E> iterator()" ], [ "subList", "java.util", "List", "public abstract List<E> subList(int arg0, int arg1)" ], [ "removeAll", "java.util", "List", "public abstract boolean removeAll(Collection<? extends Object> arg0)" ], [ "contains", "java.util", "List", "public abstract boolean contains(Object arg0)" ], [ "toArray", "java.util", "List", "public abstract <T> T[] toArray(T[] arg0)" ], [ "remove", "java.util", "List", "public abstract E remove(int arg0)" ], [ "listIterator", "java.util", "List", "public abstract ListIterator<E> listIterator(int arg0)" ], [ "set", "java.util", "List", "public abstract E set(int arg0, E arg1)" ], [ "get", "java.util", "List", "public abstract E get(int arg0)" ], [ "size", "java.util", "List", "public abstract int size()" ], [ "addAll", "java.util", "List", "public abstract boolean addAll(Collection<? extends E> arg0)" ], [ "containsAll", "java.util", "List", "public abstract boolean containsAll(Collection<? extends Object> arg0)" ], [ "retainAll", "java.util", "List", "public abstract boolean retainAll(Collection<? extends Object> arg0)" ], [ "toArray", "java.util", "List", "public abstract Object[] toArray()" ], [ "isEmpty", "java.util", "List", "public abstract boolean isEmpty()" ], [ "remove", "java.util", "List", "public abstract boolean remove(Object arg0)" ], [ "lastIndexOf", "java.util", "List", "public abstract int lastIndexOf(Object arg0)" ], [ "indexOf", "java.util", "List", "public abstract int indexOf(Object arg0)" ], [ "addAll", "java.util", "List", "public abstract boolean addAll(int arg0, Collection<? extends E> arg1)" ], [ "listIterator", "java.util", "List", "public abstract ListIterator<E> listIterator()" ], [ "equals", "java.util", "List", "public abstract boolean equals(Object arg0)" ], [ "containsAll", "java.util", "Collection", "public abstract boolean containsAll(Collection<? extends Object> arg0)" ], [ "contains", "java.util", "Collection", "public abstract boolean contains(Object arg0)" ], [ "isEmpty", "java.util", "Collection", "public abstract boolean isEmpty()" ], [ "addAll", "java.util", "Collection", "public abstract boolean addAll(Collection<? extends E> arg0)" ], [ "parallelStream", "java.util", "Collection", "public default Stream<E> parallelStream()" ], [ "toArray", "java.util", "Collection", "public abstract Object[] toArray()" ], [ "spliterator", "java.util", "Collection", "public default Spliterator<E> spliterator()" ], [ "toArray", "java.util", "Collection", "public default <T> T[] toArray(IntFunction<T[]> arg0)" ], [ "add", "java.util", "Collection", "public abstract boolean add(E arg0)" ], [ "size", "java.util", "Collection", "public abstract int size()" ], [ "iterator", "java.util", "Collection", "public abstract Iterator<E> iterator()" ], [ "remove", "java.util", "Collection", "public abstract boolean remove(Object arg0)" ], [ "hashCode", "java.util", "Collection", "public abstract int hashCode()" ], [ "equals", "java.util", "Collection", "public abstract boolean equals(Object arg0)" ], [ "removeIf", "java.util", "Collection", "public default boolean removeIf(Predicate<? super E> arg0)" ], [ "removeAll", "java.util", "Collection", "public abstract boolean removeAll(Collection<? extends Object> arg0)" ], [ "toArray", "java.util", "Collection", "public abstract <T> T[] toArray(T[] arg0)" ], [ "stream", "java.util", "Collection", "public default Stream<E> stream()" ], [ "retainAll", "java.util", "Collection", "public abstract boolean retainAll(Collection<? extends Object> arg0)" ], [ "iterator", "java.lang", "Iterable", "public abstract Iterator<T> iterator()" ], [ "spliterator", "java.lang", "Iterable", "public default Spliterator<T> spliterator()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 24429,
  "oracle" : ";",
  "oracleType" : "NORMAL_POST",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.geometry.spherical.twod",
  "className" : "Edge",
  "javadocTag" : "@return circle supporting this edge",
  "methodJavadoc" : "    /** Get the circle supporting this edge.\n     * @return circle supporting this edge\n     */",
  "methodSourceCode" : "public Circle getCircle(){\n    return circle;\n}",
  "classJavadoc" : "/** Spherical polygons boundary edge.\n * @see SphericalPolygonsSet#getBoundaryLoops()\n * @see Vertex\n * @since 3.3\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math3.geometry.spherical.twod;\n\nimport java.util.List;\n\nimport org.apache.commons.math3.geometry.euclidean.threed.Vector3D;\nimport org.apache.commons.math3.geometry.spherical.oned.Arc;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathUtils;\n\n/** Spherical polygons boundary edge.\n * @see SphericalPolygonsSet#getBoundaryLoops()\n * @see Vertex\n * @since 3.3\n */\npublic class Edge {\n\n    /** Start vertex. */\n    private final Vertex start;\n\n    /** End vertex. */\n    private Vertex end;\n\n    /** Length of the arc. */\n    private final double length;\n\n    /** Circle supporting the edge. */\n    private final Circle circle;\n\n    /** Build an edge not contained in any node yet.\n     * @param start start vertex\n     * @param end end vertex\n     * @param length length of the arc (it can be greater than \\( \\pi \\))\n     * @param circle circle supporting the edge\n     */\n    Edge(final Vertex start, final Vertex end, final double length, final Circle circle) {\n\n        this.start  = start;\n        this.end    = end;\n        this.length = length;\n        this.circle = circle;\n\n        // connect the vertices back to the edge\n        start.setOutgoing(this);\n        end.setIncoming(this);\n\n    }\n\n    /** Get start vertex.\n     * @return start vertex\n     */\n    public Vertex getStart() {\n        return start;\n    }\n\n    /** Get end vertex.\n     * @return end vertex\n     */\n    public Vertex getEnd() {\n        return end;\n    }\n\n    /** Get the length of the arc.\n     * @return length of the arc (can be greater than \\( \\pi \\))\n     */\n    public double getLength() {\n        return length;\n    }\n\n    /** Get the circle supporting this edge.\n     * @return circle supporting this edge\n     */\n    public Circle getCircle() {\n        return circle;\n    }\n\n    /** Get an intermediate point.\n     * <p>\n     * The angle along the edge should normally be between 0 and {@link #getLength()}\n     * in order to remain within edge limits. However, there are no checks on the\n     * value of the angle, so user can rebuild the full circle on which an edge is\n     * defined if they want.\n     * </p>\n     * @param alpha angle along the edge, counted from {@link #getStart()}\n     * @return an intermediate point\n     */\n    public Vector3D getPointAt(final double alpha) {\n        return circle.getPointAt(alpha + circle.getPhase(start.getLocation().getVector()));\n    }\n\n    /** Connect the instance with a following edge.\n     * @param next edge following the instance\n     */\n    void setNextEdge(final Edge next) {\n        end = next.getStart();\n        end.setIncoming(this);\n        end.bindWith(getCircle());\n    }\n\n    /** Split the edge.\n     * <p>\n     * Once split, this edge is not referenced anymore by the vertices,\n     * it is replaced by the two or three sub-edges and intermediate splitting\n     * vertices are introduced to connect these sub-edges together.\n     * </p>\n     * @param splitCircle circle splitting the edge in several parts\n     * @param outsideList list where to put parts that are outside of the split circle\n     * @param insideList list where to put parts that are inside the split circle\n     */\n    void split(final Circle splitCircle,\n                       final List<Edge> outsideList, final List<Edge> insideList) {\n\n        // get the inside arc, synchronizing its phase with the edge itself\n        final double edgeStart        = circle.getPhase(start.getLocation().getVector());\n        final Arc    arc              = circle.getInsideArc(splitCircle);\n        final double arcRelativeStart = MathUtils.normalizeAngle(arc.getInf(), edgeStart + FastMath.PI) - edgeStart;\n        final double arcRelativeEnd   = arcRelativeStart + arc.getSize();\n        final double unwrappedEnd     = arcRelativeEnd - MathUtils.TWO_PI;\n\n        // build the sub-edges\n        final double tolerance = circle.getTolerance();\n        Vertex previousVertex = start;\n        if (unwrappedEnd >= length - tolerance) {\n\n            // the edge is entirely contained inside the circle\n            // we don't split anything\n            insideList.add(this);\n\n        } else {\n\n            // there are at least some parts of the edge that should be outside\n            // (even is they are later be filtered out as being too small)\n            double alreadyManagedLength = 0;\n            if (unwrappedEnd >= 0) {\n                // the start of the edge is inside the circle\n                previousVertex = addSubEdge(previousVertex,\n                                            new Vertex(new S2Point(circle.getPointAt(edgeStart + unwrappedEnd))),\n                                            unwrappedEnd, insideList, splitCircle);\n                alreadyManagedLength = unwrappedEnd;\n            }\n\n            if (arcRelativeStart >= length - tolerance) {\n                // the edge ends while still outside of the circle\n                if (unwrappedEnd >= 0) {\n                    previousVertex = addSubEdge(previousVertex, end,\n                                                length - alreadyManagedLength, outsideList, splitCircle);\n                } else {\n                    // the edge is entirely outside of the circle\n                    // we don't split anything\n                    outsideList.add(this);\n                }\n            } else {\n                // the edge is long enough to enter inside the circle\n                previousVertex = addSubEdge(previousVertex,\n                                            new Vertex(new S2Point(circle.getPointAt(edgeStart + arcRelativeStart))),\n                                            arcRelativeStart - alreadyManagedLength, outsideList, splitCircle);\n                alreadyManagedLength = arcRelativeStart;\n\n                if (arcRelativeEnd >= length - tolerance) {\n                    // the edge ends while still inside of the circle\n                    previousVertex = addSubEdge(previousVertex, end,\n                                                length - alreadyManagedLength, insideList, splitCircle);\n                } else {\n                    // the edge is long enough to exit outside of the circle\n                    previousVertex = addSubEdge(previousVertex,\n                                                new Vertex(new S2Point(circle.getPointAt(edgeStart + arcRelativeStart))),\n                                                arcRelativeStart - alreadyManagedLength, insideList, splitCircle);\n                    alreadyManagedLength = arcRelativeStart;\n                    previousVertex = addSubEdge(previousVertex, end,\n                                                length - alreadyManagedLength, outsideList, splitCircle);\n                }\n            }\n\n        }\n\n    }\n\n    /** Add a sub-edge to a list if long enough.\n     * <p>\n     * If the length of the sub-edge to add is smaller than the {@link Circle#getTolerance()}\n     * tolerance of the support circle, it will be ignored.\n     * </p>\n     * @param subStart start of the sub-edge\n     * @param subEnd end of the sub-edge\n     * @param subLength length of the sub-edge\n     * @param splitCircle circle splitting the edge in several parts\n     * @param list list where to put the sub-edge\n     * @return end vertex of the edge ({@code subEnd} if the edge was long enough and really\n     * added, {@code subStart} if the edge was too small and therefore ignored)\n     */\n    private Vertex addSubEdge(final Vertex subStart, final Vertex subEnd, final double subLength,\n                              final List<Edge> list, final Circle splitCircle) {\n\n        if (subLength <= circle.getTolerance()) {\n            // the edge is too short, we ignore it\n            return subStart;\n        }\n\n        // really add the edge\n        subEnd.bindWith(splitCircle);\n        final Edge edge = new Edge(subStart, subEnd, subLength, circle);\n        list.add(edge);\n        return subEnd;\n\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getStart", "org.apache.commons.math3.geometry.spherical.twod", "Edge", "public Vertex getStart()" ], [ "getEnd", "org.apache.commons.math3.geometry.spherical.twod", "Edge", "public Vertex getEnd()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "getLength", "org.apache.commons.math3.geometry.spherical.twod", "Edge", "public double getLength()" ], [ "getCircle", "org.apache.commons.math3.geometry.spherical.twod", "Edge", "public Circle getCircle()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "getPointAt", "org.apache.commons.math3.geometry.spherical.twod", "Edge", "public Vector3D getPointAt(final double alpha)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "getPole", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public Vector3D getPole()" ], [ "getPointAt", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public Vector3D getPointAt(double arg0)" ], [ "wholeHyperplane", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public SubCircle wholeHyperplane()" ], [ "copySelf", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public Circle copySelf()" ], [ "getXAxis", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public Vector3D getXAxis()" ], [ "getTolerance", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public double getTolerance()" ], [ "getReverse", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public Circle getReverse()" ], [ "toSubSpace", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public S1Point toSubSpace(Point<Sphere2D> arg0)" ], [ "wholeSpace", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public SphericalPolygonsSet wholeSpace()" ], [ "getOffset", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public double getOffset(Vector3D arg0)" ], [ "getInsideArc", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public Arc getInsideArc(Circle arg0)" ], [ "getPhase", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public double getPhase(Vector3D arg0)" ], [ "getYAxis", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public Vector3D getYAxis()" ], [ "project", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public Point<Sphere2D> project(Point<Sphere2D> arg0)" ], [ "sameOrientationAs", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public boolean sameOrientationAs(Hyperplane<Sphere2D> arg0)" ], [ "getOffset", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public double getOffset(Point<Sphere2D> arg0)" ], [ "toSpace", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public S2Point toSpace(Point<Sphere1D> arg0)" ], [ "getOffset", "org.apache.commons.math3.geometry.partitioning", "Hyperplane", "public abstract double getOffset(Point<S> arg0)" ], [ "copySelf", "org.apache.commons.math3.geometry.partitioning", "Hyperplane", "public abstract Hyperplane<S> copySelf()" ], [ "wholeSpace", "org.apache.commons.math3.geometry.partitioning", "Hyperplane", "public abstract Region<S> wholeSpace()" ], [ "wholeHyperplane", "org.apache.commons.math3.geometry.partitioning", "Hyperplane", "public abstract SubHyperplane<S> wholeHyperplane()" ], [ "project", "org.apache.commons.math3.geometry.partitioning", "Hyperplane", "public abstract Point<S> project(Point<S> arg0)" ], [ "getTolerance", "org.apache.commons.math3.geometry.partitioning", "Hyperplane", "public abstract double getTolerance()" ], [ "sameOrientationAs", "org.apache.commons.math3.geometry.partitioning", "Hyperplane", "public abstract boolean sameOrientationAs(Hyperplane<S> arg0)" ], [ "toSpace", "org.apache.commons.math3.geometry.partitioning", "Embedding", "public abstract Point<S> toSpace(Point<T> arg0)" ], [ "toSubSpace", "org.apache.commons.math3.geometry.partitioning", "Embedding", "public abstract Point<T> toSubSpace(Point<S> arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
} ]