[ {
  "id" : 8242,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4.map",
  "className" : "MultiKeyMap",
  "javadocTag" : "@param key4 the fourth key",
  "methodJavadoc" : "    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return true if the map contains the key\n     */",
  "methodSourceCode" : "public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5){\n    final int hashCode = hash(key1, key2, key3, key4, key5);\n    AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n    while (entry != null) {\n        if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n            return true;\n        }\n        entry = entry.next;\n    }\n    return false;\n}",
  "classJavadoc" : "/**\n * A <code>Map</code> implementation that uses multiple keys to map the value.\n * <p>\n * This class is the most efficient way to uses multiple keys to map to a value.\n * The best way to use this class is via the additional map-style methods.\n * These provide <code>get</code>, <code>containsKey</code>, <code>put</code> and\n * <code>remove</code> for individual keys which operate without extra object creation.\n * <p>\n * The additional methods are the main interface of this map.\n * As such, you will not normally hold this map in a variable of type <code>Map</code>.\n * <p>\n * The normal map methods take in and return a {@link MultiKey}.\n * If you try to use <code>put()</code> with any other object type a\n * <code>ClassCastException</code> is thrown. If you try to use <code>null</code> as\n * the key in <code>put()</code> a <code>NullPointerException</code> is thrown.\n * <p>\n * This map is implemented as a decorator of a <code>AbstractHashedMap</code> which\n * enables extra behaviour to be added easily.\n * <ul>\n * <li><code>MultiKeyMap.decorate(new LinkedMap())</code> creates an ordered map.\n * <li><code>MultiKeyMap.decorate(new LRUMap())</code> creates an least recently used map.\n * <li><code>MultiKeyMap.decorate(new ReferenceMap())</code> creates a garbage collector sensitive map.\n * </ul>\n * Note that <code>IdentityMap</code> and <code>ReferenceIdentityMap</code> are unsuitable\n * for use as the key comparison would work on the whole MultiKey, not the elements within.\n * <p>\n * As an example, consider a least recently used cache that uses a String airline code\n * and a Locale to lookup the airline's name:\n * <pre>\n * private MultiKeyMap cache = MultiKeyMap.multiKeyMap(new LRUMap(50));\n *\n * public String getAirlineName(String code, String locale) {\n *   String name = (String) cache.get(code, locale);\n *   if (name == null) {\n *     name = getAirlineNameFromDB(code, locale);\n *     cache.put(code, locale, name);\n *   }\n *   return name;\n * }\n * </pre>\n * <p>\n * <strong>Note that MultiKeyMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. This class may throw exceptions when accessed\n * by concurrent threads without synchronization.\n *\n * @since 3.1\n * @version $Id: MultiKeyMap.java 1686855 2015-06-22 13:00:27Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4.map;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.MapIterator;\nimport org.apache.commons.collections4.keyvalue.MultiKey;\n\n/**\n * A <code>Map</code> implementation that uses multiple keys to map the value.\n * <p>\n * This class is the most efficient way to uses multiple keys to map to a value.\n * The best way to use this class is via the additional map-style methods.\n * These provide <code>get</code>, <code>containsKey</code>, <code>put</code> and\n * <code>remove</code> for individual keys which operate without extra object creation.\n * <p>\n * The additional methods are the main interface of this map.\n * As such, you will not normally hold this map in a variable of type <code>Map</code>.\n * <p>\n * The normal map methods take in and return a {@link MultiKey}.\n * If you try to use <code>put()</code> with any other object type a\n * <code>ClassCastException</code> is thrown. If you try to use <code>null</code> as\n * the key in <code>put()</code> a <code>NullPointerException</code> is thrown.\n * <p>\n * This map is implemented as a decorator of a <code>AbstractHashedMap</code> which\n * enables extra behaviour to be added easily.\n * <ul>\n * <li><code>MultiKeyMap.decorate(new LinkedMap())</code> creates an ordered map.\n * <li><code>MultiKeyMap.decorate(new LRUMap())</code> creates an least recently used map.\n * <li><code>MultiKeyMap.decorate(new ReferenceMap())</code> creates a garbage collector sensitive map.\n * </ul>\n * Note that <code>IdentityMap</code> and <code>ReferenceIdentityMap</code> are unsuitable\n * for use as the key comparison would work on the whole MultiKey, not the elements within.\n * <p>\n * As an example, consider a least recently used cache that uses a String airline code\n * and a Locale to lookup the airline's name:\n * <pre>\n * private MultiKeyMap cache = MultiKeyMap.multiKeyMap(new LRUMap(50));\n *\n * public String getAirlineName(String code, String locale) {\n *   String name = (String) cache.get(code, locale);\n *   if (name == null) {\n *     name = getAirlineNameFromDB(code, locale);\n *     cache.put(code, locale, name);\n *   }\n *   return name;\n * }\n * </pre>\n * <p>\n * <strong>Note that MultiKeyMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. This class may throw exceptions when accessed\n * by concurrent threads without synchronization.\n *\n * @since 3.1\n * @version $Id: MultiKeyMap.java 1686855 2015-06-22 13:00:27Z tn $\n */\npublic class MultiKeyMap<K, V> extends AbstractMapDecorator<MultiKey<? extends K>, V>\n        implements Serializable, Cloneable {\n\n    /** Serialisation version */\n    private static final long serialVersionUID = -1788199231038721040L;\n\n    //-----------------------------------------------------------------------\n    /**\n     * Decorates the specified map to add the MultiKeyMap API and fast query.\n     * The map must not be null and must be empty.\n     *\n     * @param <K>  the key type\n     * @param <V>  the value type\n     * @param map  the map to decorate, not null\n     * @return a new multi key map\n     * @throws NullPointerException if map is null\n     * @throws IllegalArgumentException if the map is not empty\n     * @since 4.0\n     */\n    public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map) {\n        if (map == null) {\n            throw new NullPointerException(\"Map must not be null\");\n        }\n        if (map.size() > 0) {\n            throw new IllegalArgumentException(\"Map must be empty\");\n        }\n        return new MultiKeyMap<K, V>(map);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Constructs a new MultiKeyMap that decorates a <code>HashedMap</code>.\n     */\n    public MultiKeyMap() {\n        this(new HashedMap<MultiKey<? extends K>, V>());\n    }\n\n    /**\n     * Constructor that decorates the specified map and is called from\n     * {@link #multiKeyMap(AbstractHashedMap)}.\n     * The map must not be null and should be empty or only contain valid keys.\n     * This constructor performs no validation.\n     *\n     * @param map  the map to decorate\n     */\n    protected MultiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map) {\n        super(map);\n        this.map = map;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final V value) {\n        final int hashCode = hash(key1, key2);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n            final Object key1, final Object key2) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 2 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final V value) {\n        final int hashCode = hash(key1, key2, key3);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n                                 final Object key1, final Object key2, final Object key3) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 3 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final K key4, final V value) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3, key4), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3, final Object key4) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        if (key4 != null) {\n            h ^= key4.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n                                 final Object key1, final Object key2, final Object key3, final Object key4) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 4 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2))) &&\n            (key4 == multi.getKey(3) || key4 != null && key4.equals(multi.getKey(3)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3,\n                               final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final K key4, final K key5, final V value) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3, key4, key5), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3,\n                            final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        if (key4 != null) {\n            h ^= key4.hashCode();\n        }\n        if (key5 != null) {\n            h ^= key5.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n            final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 5 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2))) &&\n            (key4 == multi.getKey(3) || key4 != null && key4.equals(multi.getKey(3))) &&\n            (key5 == multi.getKey(4) || key5 != null && key5.equals(multi.getKey(4)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Removes all mappings where the first key is that specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has one or more keys, and the first matches that specified.\n     *\n     * @param key1  the first key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 1 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first two keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has two or more keys, and the first two match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 2 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first three keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has three or more keys, and the first three match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2, final Object key3) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 3 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1))) &&\n                (key3 == null ? multi.getKey(2) == null : key3.equals(multi.getKey(2)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first four keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has four or more keys, and the first four match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2, final Object key3, final Object key4) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 4 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1))) &&\n                (key3 == null ? multi.getKey(2) == null : key3.equals(multi.getKey(2))) &&\n                (key4 == null ? multi.getKey(3) == null : key4.equals(multi.getKey(3)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Check to ensure that input keys are valid MultiKey objects.\n     *\n     * @param key  the key to check\n     */\n    protected void checkKey(final MultiKey<?> key) {\n        if (key == null) {\n            throw new NullPointerException(\"Key must not be null\");\n        }\n    }\n\n    /**\n     * Clones the map without cloning the keys or values.\n     *\n     * @return a shallow clone\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public MultiKeyMap<K, V> clone() {\n        try {\n            return (MultiKeyMap<K, V>) super.clone();\n        } catch (final CloneNotSupportedException e) {\n            throw new InternalError();\n        }\n    }\n\n    /**\n     * Puts the key and value into the map, where the key must be a non-null\n     * MultiKey object.\n     *\n     * @param key  the non-null MultiKey object\n     * @param value  the value to store\n     * @return the previous value for the key\n     * @throws NullPointerException if the key is null\n     * @throws ClassCastException if the key is not a MultiKey\n     */\n    @Override\n    public V put(final MultiKey<? extends K> key, final V value) {\n        checkKey(key);\n        return super.put(key, value);\n    }\n\n    /**\n     * Copies all of the keys and values from the specified map to this map.\n     * Each key must be non-null and a MultiKey object.\n     *\n     * @param mapToCopy  to this map\n     * @throws NullPointerException if the mapToCopy or any key within is null\n     * @throws ClassCastException if any key in mapToCopy is not a MultiKey\n     */\n    @Override\n    public void putAll(final Map<? extends MultiKey<? extends K>, ? extends V> mapToCopy) {\n        for (final MultiKey<? extends K> key : mapToCopy.keySet()) {\n            checkKey(key);\n        }\n        super.putAll(mapToCopy);\n    }\n\n    //-----------------------------------------------------------------------\n    @Override\n    public MapIterator<MultiKey<? extends K>, V> mapIterator() {\n        return decorated().mapIterator();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected AbstractHashedMap<MultiKey<? extends K>, V> decorated() {\n        return (AbstractHashedMap<MultiKey<? extends K>, V>) super.decorated();\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Write the map out using a custom routine.\n     *\n     * @param out  the output stream\n     * @throws IOException\n     */\n    private void writeObject(final ObjectOutputStream out) throws IOException {\n        out.defaultWriteObject();\n        out.writeObject(map);\n    }\n\n    /**\n     * Read the map in using a custom routine.\n     *\n     * @param in  the input stream\n     * @throws IOException\n     * @throws ClassNotFoundException\n     */\n    @SuppressWarnings(\"unchecked\")\n    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n        in.defaultReadObject();\n        map = (Map<MultiKey<? extends K>, V>) in.readObject();\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ [ "1", "int" ], [ "2", "int" ], [ "3", "int" ], [ "4", "int" ], [ "5", "int" ] ],
  "tokensMethodArguments" : [ [ "key1", "java.lang", "Object" ], [ "key2", "java.lang", "Object" ], [ "key3", "java.lang", "Object" ], [ "key4", "java.lang", "Object" ], [ "key5", "java.lang", "Object" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "decorated", "org.apache.commons.collections4.map", "MultiKeyMap", "protected AbstractHashedMap<MultiKey<? extends K>, V> decorated()" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final MultiKey<? extends K> key, final V value)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final K key4, final V value)" ], [ "remove", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public V remove(Object arg0)" ], [ "entrySet", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Set<Map.Entry<K, V>> entrySet()" ], [ "replace", "java.util", "Map", "public default boolean replace(K arg0, V arg1, V arg2)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final V value)" ], [ "containsValue", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean containsValue(Object arg0)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1)" ], [ "put", "org.apache.commons.collections4", "Put", "public abstract Object put(K arg0, V arg1)" ], [ "clone", "org.apache.commons.collections4.map", "MultiKeyMap", "public MultiKeyMap<K, V> clone()" ], [ "size", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int size()" ], [ "putIfAbsent", "java.util", "Map", "public default V putIfAbsent(K arg0, V arg1)" ], [ "remove", "java.util", "Map", "public default boolean remove(Object arg0, Object arg1)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2, final Object key3)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2)" ], [ "get", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public V get(Object arg0)" ], [ "toString", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public String toString()" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final V value)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2)" ], [ "decorated", "org.apache.commons.collections4.map", "AbstractMapDecorator", "protected Map<K, V> decorated()" ], [ "getOrDefault", "java.util", "Map", "public default V getOrDefault(Object arg0, V arg1)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final K key4, final K key5, final V value)" ], [ "hashCode", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int hashCode()" ], [ "mapIterator", "org.apache.commons.collections4.map", "AbstractIterableMap", "public MapIterator<K, V> mapIterator()" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3)" ], [ "values", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Collection<V> values()" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "mapIterator", "org.apache.commons.collections4.map", "MultiKeyMap", "public MapIterator<MultiKey<? extends K>, V> mapIterator()" ], [ "keySet", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Set<K> keySet()" ], [ "merge", "java.util", "Map", "public default V merge(K arg0, V arg1, BiFunction<? super V, ? super V, ? extends V> arg2)" ], [ "computeIfAbsent", "java.util", "Map", "public default V computeIfAbsent(K arg0, Function<? super K, ? extends V> arg1)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "containsKey", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean containsKey(Object arg0)" ], [ "compute", "java.util", "Map", "public default V compute(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "isEmpty", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean isEmpty()" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "computeIfPresent", "java.util", "Map", "public default V computeIfPresent(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "replace", "java.util", "Map", "public default V replace(K arg0, V arg1)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "equals", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean equals(Object arg0)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "map", "org.apache.commons.collections4.map", "AbstractMapDecorator", "Map<MultiKey<? extends K>, V> map;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 8248,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4.map",
  "className" : "MultiKeyMap",
  "javadocTag" : "@param key4 the fourth key",
  "methodJavadoc" : "    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */",
  "methodSourceCode" : "public V put(final K key1, final K key2, final K key3, final K key4, final K key5, final V value){\n    final int hashCode = hash(key1, key2, key3, key4, key5);\n    final int index = decorated().hashIndex(hashCode, decorated().data.length);\n    AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n    while (entry != null) {\n        if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n            final V oldValue = entry.getValue();\n            decorated().updateEntry(entry, value);\n            return oldValue;\n        }\n        entry = entry.next;\n    }\n    decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3, key4, key5), value);\n    return null;\n}",
  "classJavadoc" : "/**\n * A <code>Map</code> implementation that uses multiple keys to map the value.\n * <p>\n * This class is the most efficient way to uses multiple keys to map to a value.\n * The best way to use this class is via the additional map-style methods.\n * These provide <code>get</code>, <code>containsKey</code>, <code>put</code> and\n * <code>remove</code> for individual keys which operate without extra object creation.\n * <p>\n * The additional methods are the main interface of this map.\n * As such, you will not normally hold this map in a variable of type <code>Map</code>.\n * <p>\n * The normal map methods take in and return a {@link MultiKey}.\n * If you try to use <code>put()</code> with any other object type a\n * <code>ClassCastException</code> is thrown. If you try to use <code>null</code> as\n * the key in <code>put()</code> a <code>NullPointerException</code> is thrown.\n * <p>\n * This map is implemented as a decorator of a <code>AbstractHashedMap</code> which\n * enables extra behaviour to be added easily.\n * <ul>\n * <li><code>MultiKeyMap.decorate(new LinkedMap())</code> creates an ordered map.\n * <li><code>MultiKeyMap.decorate(new LRUMap())</code> creates an least recently used map.\n * <li><code>MultiKeyMap.decorate(new ReferenceMap())</code> creates a garbage collector sensitive map.\n * </ul>\n * Note that <code>IdentityMap</code> and <code>ReferenceIdentityMap</code> are unsuitable\n * for use as the key comparison would work on the whole MultiKey, not the elements within.\n * <p>\n * As an example, consider a least recently used cache that uses a String airline code\n * and a Locale to lookup the airline's name:\n * <pre>\n * private MultiKeyMap cache = MultiKeyMap.multiKeyMap(new LRUMap(50));\n *\n * public String getAirlineName(String code, String locale) {\n *   String name = (String) cache.get(code, locale);\n *   if (name == null) {\n *     name = getAirlineNameFromDB(code, locale);\n *     cache.put(code, locale, name);\n *   }\n *   return name;\n * }\n * </pre>\n * <p>\n * <strong>Note that MultiKeyMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. This class may throw exceptions when accessed\n * by concurrent threads without synchronization.\n *\n * @since 3.1\n * @version $Id: MultiKeyMap.java 1686855 2015-06-22 13:00:27Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4.map;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.MapIterator;\nimport org.apache.commons.collections4.keyvalue.MultiKey;\n\n/**\n * A <code>Map</code> implementation that uses multiple keys to map the value.\n * <p>\n * This class is the most efficient way to uses multiple keys to map to a value.\n * The best way to use this class is via the additional map-style methods.\n * These provide <code>get</code>, <code>containsKey</code>, <code>put</code> and\n * <code>remove</code> for individual keys which operate without extra object creation.\n * <p>\n * The additional methods are the main interface of this map.\n * As such, you will not normally hold this map in a variable of type <code>Map</code>.\n * <p>\n * The normal map methods take in and return a {@link MultiKey}.\n * If you try to use <code>put()</code> with any other object type a\n * <code>ClassCastException</code> is thrown. If you try to use <code>null</code> as\n * the key in <code>put()</code> a <code>NullPointerException</code> is thrown.\n * <p>\n * This map is implemented as a decorator of a <code>AbstractHashedMap</code> which\n * enables extra behaviour to be added easily.\n * <ul>\n * <li><code>MultiKeyMap.decorate(new LinkedMap())</code> creates an ordered map.\n * <li><code>MultiKeyMap.decorate(new LRUMap())</code> creates an least recently used map.\n * <li><code>MultiKeyMap.decorate(new ReferenceMap())</code> creates a garbage collector sensitive map.\n * </ul>\n * Note that <code>IdentityMap</code> and <code>ReferenceIdentityMap</code> are unsuitable\n * for use as the key comparison would work on the whole MultiKey, not the elements within.\n * <p>\n * As an example, consider a least recently used cache that uses a String airline code\n * and a Locale to lookup the airline's name:\n * <pre>\n * private MultiKeyMap cache = MultiKeyMap.multiKeyMap(new LRUMap(50));\n *\n * public String getAirlineName(String code, String locale) {\n *   String name = (String) cache.get(code, locale);\n *   if (name == null) {\n *     name = getAirlineNameFromDB(code, locale);\n *     cache.put(code, locale, name);\n *   }\n *   return name;\n * }\n * </pre>\n * <p>\n * <strong>Note that MultiKeyMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. This class may throw exceptions when accessed\n * by concurrent threads without synchronization.\n *\n * @since 3.1\n * @version $Id: MultiKeyMap.java 1686855 2015-06-22 13:00:27Z tn $\n */\npublic class MultiKeyMap<K, V> extends AbstractMapDecorator<MultiKey<? extends K>, V>\n        implements Serializable, Cloneable {\n\n    /** Serialisation version */\n    private static final long serialVersionUID = -1788199231038721040L;\n\n    //-----------------------------------------------------------------------\n    /**\n     * Decorates the specified map to add the MultiKeyMap API and fast query.\n     * The map must not be null and must be empty.\n     *\n     * @param <K>  the key type\n     * @param <V>  the value type\n     * @param map  the map to decorate, not null\n     * @return a new multi key map\n     * @throws NullPointerException if map is null\n     * @throws IllegalArgumentException if the map is not empty\n     * @since 4.0\n     */\n    public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map) {\n        if (map == null) {\n            throw new NullPointerException(\"Map must not be null\");\n        }\n        if (map.size() > 0) {\n            throw new IllegalArgumentException(\"Map must be empty\");\n        }\n        return new MultiKeyMap<K, V>(map);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Constructs a new MultiKeyMap that decorates a <code>HashedMap</code>.\n     */\n    public MultiKeyMap() {\n        this(new HashedMap<MultiKey<? extends K>, V>());\n    }\n\n    /**\n     * Constructor that decorates the specified map and is called from\n     * {@link #multiKeyMap(AbstractHashedMap)}.\n     * The map must not be null and should be empty or only contain valid keys.\n     * This constructor performs no validation.\n     *\n     * @param map  the map to decorate\n     */\n    protected MultiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map) {\n        super(map);\n        this.map = map;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final V value) {\n        final int hashCode = hash(key1, key2);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n            final Object key1, final Object key2) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 2 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final V value) {\n        final int hashCode = hash(key1, key2, key3);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n                                 final Object key1, final Object key2, final Object key3) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 3 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final K key4, final V value) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3, key4), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3, final Object key4) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        if (key4 != null) {\n            h ^= key4.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n                                 final Object key1, final Object key2, final Object key3, final Object key4) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 4 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2))) &&\n            (key4 == multi.getKey(3) || key4 != null && key4.equals(multi.getKey(3)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3,\n                               final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final K key4, final K key5, final V value) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3, key4, key5), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3,\n                            final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        if (key4 != null) {\n            h ^= key4.hashCode();\n        }\n        if (key5 != null) {\n            h ^= key5.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n            final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 5 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2))) &&\n            (key4 == multi.getKey(3) || key4 != null && key4.equals(multi.getKey(3))) &&\n            (key5 == multi.getKey(4) || key5 != null && key5.equals(multi.getKey(4)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Removes all mappings where the first key is that specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has one or more keys, and the first matches that specified.\n     *\n     * @param key1  the first key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 1 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first two keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has two or more keys, and the first two match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 2 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first three keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has three or more keys, and the first three match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2, final Object key3) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 3 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1))) &&\n                (key3 == null ? multi.getKey(2) == null : key3.equals(multi.getKey(2)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first four keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has four or more keys, and the first four match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2, final Object key3, final Object key4) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 4 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1))) &&\n                (key3 == null ? multi.getKey(2) == null : key3.equals(multi.getKey(2))) &&\n                (key4 == null ? multi.getKey(3) == null : key4.equals(multi.getKey(3)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Check to ensure that input keys are valid MultiKey objects.\n     *\n     * @param key  the key to check\n     */\n    protected void checkKey(final MultiKey<?> key) {\n        if (key == null) {\n            throw new NullPointerException(\"Key must not be null\");\n        }\n    }\n\n    /**\n     * Clones the map without cloning the keys or values.\n     *\n     * @return a shallow clone\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public MultiKeyMap<K, V> clone() {\n        try {\n            return (MultiKeyMap<K, V>) super.clone();\n        } catch (final CloneNotSupportedException e) {\n            throw new InternalError();\n        }\n    }\n\n    /**\n     * Puts the key and value into the map, where the key must be a non-null\n     * MultiKey object.\n     *\n     * @param key  the non-null MultiKey object\n     * @param value  the value to store\n     * @return the previous value for the key\n     * @throws NullPointerException if the key is null\n     * @throws ClassCastException if the key is not a MultiKey\n     */\n    @Override\n    public V put(final MultiKey<? extends K> key, final V value) {\n        checkKey(key);\n        return super.put(key, value);\n    }\n\n    /**\n     * Copies all of the keys and values from the specified map to this map.\n     * Each key must be non-null and a MultiKey object.\n     *\n     * @param mapToCopy  to this map\n     * @throws NullPointerException if the mapToCopy or any key within is null\n     * @throws ClassCastException if any key in mapToCopy is not a MultiKey\n     */\n    @Override\n    public void putAll(final Map<? extends MultiKey<? extends K>, ? extends V> mapToCopy) {\n        for (final MultiKey<? extends K> key : mapToCopy.keySet()) {\n            checkKey(key);\n        }\n        super.putAll(mapToCopy);\n    }\n\n    //-----------------------------------------------------------------------\n    @Override\n    public MapIterator<MultiKey<? extends K>, V> mapIterator() {\n        return decorated().mapIterator();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected AbstractHashedMap<MultiKey<? extends K>, V> decorated() {\n        return (AbstractHashedMap<MultiKey<? extends K>, V>) super.decorated();\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Write the map out using a custom routine.\n     *\n     * @param out  the output stream\n     * @throws IOException\n     */\n    private void writeObject(final ObjectOutputStream out) throws IOException {\n        out.defaultWriteObject();\n        out.writeObject(map);\n    }\n\n    /**\n     * Read the map in using a custom routine.\n     *\n     * @param in  the input stream\n     * @throws IOException\n     * @throws ClassNotFoundException\n     */\n    @SuppressWarnings(\"unchecked\")\n    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n        in.defaultReadObject();\n        map = (Map<MultiKey<? extends K>, V>) in.readObject();\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ [ "1", "int" ], [ "2", "int" ], [ "3", "int" ], [ "4", "int" ], [ "5", "int" ] ],
  "tokensMethodArguments" : [ [ "key1", "", "K" ], [ "key2", "", "K" ], [ "key3", "", "K" ], [ "key4", "", "K" ], [ "key5", "", "K" ], [ "value", "", "V" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "hashCode", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int hashCode()" ], [ "decorated", "org.apache.commons.collections4.map", "MultiKeyMap", "protected AbstractHashedMap<MultiKey<? extends K>, V> decorated()" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "values", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Collection<V> values()" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2)" ], [ "computeIfPresent", "java.util", "Map", "public default V computeIfPresent(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "replace", "java.util", "Map", "public default boolean replace(K arg0, V arg1, V arg2)" ], [ "entrySet", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Set<Map.Entry<K, V>> entrySet()" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final K key4, final V value)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "equals", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean equals(Object arg0)" ], [ "decorated", "org.apache.commons.collections4.map", "AbstractMapDecorator", "protected Map<K, V> decorated()" ], [ "clone", "org.apache.commons.collections4.map", "MultiKeyMap", "public MultiKeyMap<K, V> clone()" ], [ "mapIterator", "org.apache.commons.collections4.map", "MultiKeyMap", "public MapIterator<MultiKey<? extends K>, V> mapIterator()" ], [ "merge", "java.util", "Map", "public default V merge(K arg0, V arg1, BiFunction<? super V, ? super V, ? extends V> arg2)" ], [ "isEmpty", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean isEmpty()" ], [ "toString", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public String toString()" ], [ "replace", "java.util", "Map", "public default V replace(K arg0, V arg1)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final V value)" ], [ "computeIfAbsent", "java.util", "Map", "public default V computeIfAbsent(K arg0, Function<? super K, ? extends V> arg1)" ], [ "keySet", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Set<K> keySet()" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final V value)" ], [ "remove", "java.util", "Map", "public default boolean remove(Object arg0, Object arg1)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3)" ], [ "mapIterator", "org.apache.commons.collections4.map", "AbstractIterableMap", "public MapIterator<K, V> mapIterator()" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "putIfAbsent", "java.util", "Map", "public default V putIfAbsent(K arg0, V arg1)" ], [ "getOrDefault", "java.util", "Map", "public default V getOrDefault(Object arg0, V arg1)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "get", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public V get(Object arg0)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2)" ], [ "remove", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public V remove(Object arg0)" ], [ "containsValue", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean containsValue(Object arg0)" ], [ "containsKey", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean containsKey(Object arg0)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final MultiKey<? extends K> key, final V value)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3)" ], [ "size", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int size()" ], [ "put", "org.apache.commons.collections4", "Put", "public abstract Object put(K arg0, V arg1)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final K key4, final K key5, final V value)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2, final Object key3)" ], [ "compute", "java.util", "Map", "public default V compute(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "map", "org.apache.commons.collections4.map", "AbstractMapDecorator", "Map<MultiKey<? extends K>, V> map;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 8257,
  "oracle" : ";",
  "oracleType" : "NORMAL_POST",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4.map",
  "className" : "MultiKeyMap",
  "javadocTag" : "@return the value mapped to the removed key, null if key not in map",
  "methodJavadoc" : "    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object, Object, Object))\n     */",
  "methodSourceCode" : "public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5){\n    final int hashCode = hash(key1, key2, key3, key4, key5);\n    final int index = decorated().hashIndex(hashCode, decorated().data.length);\n    AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n    AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n    while (entry != null) {\n        if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n            final V oldValue = entry.getValue();\n            decorated().removeMapping(entry, index, previous);\n            return oldValue;\n        }\n        previous = entry;\n        entry = entry.next;\n    }\n    return null;\n}",
  "classJavadoc" : "/**\n * A <code>Map</code> implementation that uses multiple keys to map the value.\n * <p>\n * This class is the most efficient way to uses multiple keys to map to a value.\n * The best way to use this class is via the additional map-style methods.\n * These provide <code>get</code>, <code>containsKey</code>, <code>put</code> and\n * <code>remove</code> for individual keys which operate without extra object creation.\n * <p>\n * The additional methods are the main interface of this map.\n * As such, you will not normally hold this map in a variable of type <code>Map</code>.\n * <p>\n * The normal map methods take in and return a {@link MultiKey}.\n * If you try to use <code>put()</code> with any other object type a\n * <code>ClassCastException</code> is thrown. If you try to use <code>null</code> as\n * the key in <code>put()</code> a <code>NullPointerException</code> is thrown.\n * <p>\n * This map is implemented as a decorator of a <code>AbstractHashedMap</code> which\n * enables extra behaviour to be added easily.\n * <ul>\n * <li><code>MultiKeyMap.decorate(new LinkedMap())</code> creates an ordered map.\n * <li><code>MultiKeyMap.decorate(new LRUMap())</code> creates an least recently used map.\n * <li><code>MultiKeyMap.decorate(new ReferenceMap())</code> creates a garbage collector sensitive map.\n * </ul>\n * Note that <code>IdentityMap</code> and <code>ReferenceIdentityMap</code> are unsuitable\n * for use as the key comparison would work on the whole MultiKey, not the elements within.\n * <p>\n * As an example, consider a least recently used cache that uses a String airline code\n * and a Locale to lookup the airline's name:\n * <pre>\n * private MultiKeyMap cache = MultiKeyMap.multiKeyMap(new LRUMap(50));\n *\n * public String getAirlineName(String code, String locale) {\n *   String name = (String) cache.get(code, locale);\n *   if (name == null) {\n *     name = getAirlineNameFromDB(code, locale);\n *     cache.put(code, locale, name);\n *   }\n *   return name;\n * }\n * </pre>\n * <p>\n * <strong>Note that MultiKeyMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. This class may throw exceptions when accessed\n * by concurrent threads without synchronization.\n *\n * @since 3.1\n * @version $Id: MultiKeyMap.java 1686855 2015-06-22 13:00:27Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4.map;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.MapIterator;\nimport org.apache.commons.collections4.keyvalue.MultiKey;\n\n/**\n * A <code>Map</code> implementation that uses multiple keys to map the value.\n * <p>\n * This class is the most efficient way to uses multiple keys to map to a value.\n * The best way to use this class is via the additional map-style methods.\n * These provide <code>get</code>, <code>containsKey</code>, <code>put</code> and\n * <code>remove</code> for individual keys which operate without extra object creation.\n * <p>\n * The additional methods are the main interface of this map.\n * As such, you will not normally hold this map in a variable of type <code>Map</code>.\n * <p>\n * The normal map methods take in and return a {@link MultiKey}.\n * If you try to use <code>put()</code> with any other object type a\n * <code>ClassCastException</code> is thrown. If you try to use <code>null</code> as\n * the key in <code>put()</code> a <code>NullPointerException</code> is thrown.\n * <p>\n * This map is implemented as a decorator of a <code>AbstractHashedMap</code> which\n * enables extra behaviour to be added easily.\n * <ul>\n * <li><code>MultiKeyMap.decorate(new LinkedMap())</code> creates an ordered map.\n * <li><code>MultiKeyMap.decorate(new LRUMap())</code> creates an least recently used map.\n * <li><code>MultiKeyMap.decorate(new ReferenceMap())</code> creates a garbage collector sensitive map.\n * </ul>\n * Note that <code>IdentityMap</code> and <code>ReferenceIdentityMap</code> are unsuitable\n * for use as the key comparison would work on the whole MultiKey, not the elements within.\n * <p>\n * As an example, consider a least recently used cache that uses a String airline code\n * and a Locale to lookup the airline's name:\n * <pre>\n * private MultiKeyMap cache = MultiKeyMap.multiKeyMap(new LRUMap(50));\n *\n * public String getAirlineName(String code, String locale) {\n *   String name = (String) cache.get(code, locale);\n *   if (name == null) {\n *     name = getAirlineNameFromDB(code, locale);\n *     cache.put(code, locale, name);\n *   }\n *   return name;\n * }\n * </pre>\n * <p>\n * <strong>Note that MultiKeyMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. This class may throw exceptions when accessed\n * by concurrent threads without synchronization.\n *\n * @since 3.1\n * @version $Id: MultiKeyMap.java 1686855 2015-06-22 13:00:27Z tn $\n */\npublic class MultiKeyMap<K, V> extends AbstractMapDecorator<MultiKey<? extends K>, V>\n        implements Serializable, Cloneable {\n\n    /** Serialisation version */\n    private static final long serialVersionUID = -1788199231038721040L;\n\n    //-----------------------------------------------------------------------\n    /**\n     * Decorates the specified map to add the MultiKeyMap API and fast query.\n     * The map must not be null and must be empty.\n     *\n     * @param <K>  the key type\n     * @param <V>  the value type\n     * @param map  the map to decorate, not null\n     * @return a new multi key map\n     * @throws NullPointerException if map is null\n     * @throws IllegalArgumentException if the map is not empty\n     * @since 4.0\n     */\n    public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map) {\n        if (map == null) {\n            throw new NullPointerException(\"Map must not be null\");\n        }\n        if (map.size() > 0) {\n            throw new IllegalArgumentException(\"Map must be empty\");\n        }\n        return new MultiKeyMap<K, V>(map);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Constructs a new MultiKeyMap that decorates a <code>HashedMap</code>.\n     */\n    public MultiKeyMap() {\n        this(new HashedMap<MultiKey<? extends K>, V>());\n    }\n\n    /**\n     * Constructor that decorates the specified map and is called from\n     * {@link #multiKeyMap(AbstractHashedMap)}.\n     * The map must not be null and should be empty or only contain valid keys.\n     * This constructor performs no validation.\n     *\n     * @param map  the map to decorate\n     */\n    protected MultiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map) {\n        super(map);\n        this.map = map;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final V value) {\n        final int hashCode = hash(key1, key2);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n            final Object key1, final Object key2) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 2 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final V value) {\n        final int hashCode = hash(key1, key2, key3);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n                                 final Object key1, final Object key2, final Object key3) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 3 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final K key4, final V value) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3, key4), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3, final Object key4) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        if (key4 != null) {\n            h ^= key4.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n                                 final Object key1, final Object key2, final Object key3, final Object key4) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 4 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2))) &&\n            (key4 == multi.getKey(3) || key4 != null && key4.equals(multi.getKey(3)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3,\n                               final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final K key4, final K key5, final V value) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3, key4, key5), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3,\n                            final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        if (key4 != null) {\n            h ^= key4.hashCode();\n        }\n        if (key5 != null) {\n            h ^= key5.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n            final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 5 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2))) &&\n            (key4 == multi.getKey(3) || key4 != null && key4.equals(multi.getKey(3))) &&\n            (key5 == multi.getKey(4) || key5 != null && key5.equals(multi.getKey(4)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Removes all mappings where the first key is that specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has one or more keys, and the first matches that specified.\n     *\n     * @param key1  the first key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 1 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first two keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has two or more keys, and the first two match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 2 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first three keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has three or more keys, and the first three match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2, final Object key3) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 3 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1))) &&\n                (key3 == null ? multi.getKey(2) == null : key3.equals(multi.getKey(2)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first four keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has four or more keys, and the first four match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2, final Object key3, final Object key4) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 4 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1))) &&\n                (key3 == null ? multi.getKey(2) == null : key3.equals(multi.getKey(2))) &&\n                (key4 == null ? multi.getKey(3) == null : key4.equals(multi.getKey(3)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Check to ensure that input keys are valid MultiKey objects.\n     *\n     * @param key  the key to check\n     */\n    protected void checkKey(final MultiKey<?> key) {\n        if (key == null) {\n            throw new NullPointerException(\"Key must not be null\");\n        }\n    }\n\n    /**\n     * Clones the map without cloning the keys or values.\n     *\n     * @return a shallow clone\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public MultiKeyMap<K, V> clone() {\n        try {\n            return (MultiKeyMap<K, V>) super.clone();\n        } catch (final CloneNotSupportedException e) {\n            throw new InternalError();\n        }\n    }\n\n    /**\n     * Puts the key and value into the map, where the key must be a non-null\n     * MultiKey object.\n     *\n     * @param key  the non-null MultiKey object\n     * @param value  the value to store\n     * @return the previous value for the key\n     * @throws NullPointerException if the key is null\n     * @throws ClassCastException if the key is not a MultiKey\n     */\n    @Override\n    public V put(final MultiKey<? extends K> key, final V value) {\n        checkKey(key);\n        return super.put(key, value);\n    }\n\n    /**\n     * Copies all of the keys and values from the specified map to this map.\n     * Each key must be non-null and a MultiKey object.\n     *\n     * @param mapToCopy  to this map\n     * @throws NullPointerException if the mapToCopy or any key within is null\n     * @throws ClassCastException if any key in mapToCopy is not a MultiKey\n     */\n    @Override\n    public void putAll(final Map<? extends MultiKey<? extends K>, ? extends V> mapToCopy) {\n        for (final MultiKey<? extends K> key : mapToCopy.keySet()) {\n            checkKey(key);\n        }\n        super.putAll(mapToCopy);\n    }\n\n    //-----------------------------------------------------------------------\n    @Override\n    public MapIterator<MultiKey<? extends K>, V> mapIterator() {\n        return decorated().mapIterator();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected AbstractHashedMap<MultiKey<? extends K>, V> decorated() {\n        return (AbstractHashedMap<MultiKey<? extends K>, V>) super.decorated();\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Write the map out using a custom routine.\n     *\n     * @param out  the output stream\n     * @throws IOException\n     */\n    private void writeObject(final ObjectOutputStream out) throws IOException {\n        out.defaultWriteObject();\n        out.writeObject(map);\n    }\n\n    /**\n     * Read the map in using a custom routine.\n     *\n     * @param in  the input stream\n     * @throws IOException\n     * @throws ClassNotFoundException\n     */\n    @SuppressWarnings(\"unchecked\")\n    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n        in.defaultReadObject();\n        map = (Map<MultiKey<? extends K>, V>) in.readObject();\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ [ "1", "int" ], [ "2", "int" ], [ "3", "int" ], [ "4", "int" ], [ "5", "int" ], [ "4.0", "double" ] ],
  "tokensMethodArguments" : [ [ "key1", "java.lang", "Object" ], [ "key2", "java.lang", "Object" ], [ "key3", "java.lang", "Object" ], [ "key4", "java.lang", "Object" ], [ "key5", "java.lang", "Object" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "isEmpty", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean isEmpty()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2)" ], [ "mapIterator", "org.apache.commons.collections4.map", "MultiKeyMap", "public MapIterator<MultiKey<? extends K>, V> mapIterator()" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3)" ], [ "containsKey", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean containsKey(Object arg0)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1)" ], [ "values", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Collection<V> values()" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final V value)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final V value)" ], [ "compute", "java.util", "Map", "public default V compute(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "putIfAbsent", "java.util", "Map", "public default V putIfAbsent(K arg0, V arg1)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "decorated", "org.apache.commons.collections4.map", "MultiKeyMap", "protected AbstractHashedMap<MultiKey<? extends K>, V> decorated()" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3)" ], [ "computeIfPresent", "java.util", "Map", "public default V computeIfPresent(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2)" ], [ "get", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public V get(Object arg0)" ], [ "size", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int size()" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3)" ], [ "replace", "java.util", "Map", "public default V replace(K arg0, V arg1)" ], [ "remove", "java.util", "Map", "public default boolean remove(Object arg0, Object arg1)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2)" ], [ "replace", "java.util", "Map", "public default boolean replace(K arg0, V arg1, V arg2)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "remove", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public V remove(Object arg0)" ], [ "equals", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean equals(Object arg0)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "clone", "org.apache.commons.collections4.map", "MultiKeyMap", "public MultiKeyMap<K, V> clone()" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2, final Object key3)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final K key4, final K key5, final V value)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "computeIfAbsent", "java.util", "Map", "public default V computeIfAbsent(K arg0, Function<? super K, ? extends V> arg1)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final K key4, final V value)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3)" ], [ "entrySet", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Set<Map.Entry<K, V>> entrySet()" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "getOrDefault", "java.util", "Map", "public default V getOrDefault(Object arg0, V arg1)" ], [ "decorated", "org.apache.commons.collections4.map", "AbstractMapDecorator", "protected Map<K, V> decorated()" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "put", "org.apache.commons.collections4", "Put", "public abstract Object put(K arg0, V arg1)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "keySet", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Set<K> keySet()" ], [ "toString", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public String toString()" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final MultiKey<? extends K> key, final V value)" ], [ "containsValue", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean containsValue(Object arg0)" ], [ "mapIterator", "org.apache.commons.collections4.map", "AbstractIterableMap", "public MapIterator<K, V> mapIterator()" ], [ "merge", "java.util", "Map", "public default V merge(K arg0, V arg1, BiFunction<? super V, ? super V, ? extends V> arg2)" ], [ "hashCode", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int hashCode()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "map", "org.apache.commons.collections4.map", "AbstractMapDecorator", "Map<MultiKey<? extends K>, V> map;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 8262,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4.map",
  "className" : "MultiKeyMap",
  "javadocTag" : "@param key5 the fifth key",
  "methodJavadoc" : "    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the hash code\n     */",
  "methodSourceCode" : "protected int hash(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5){\n    int h = 0;\n    if (key1 != null) {\n        h ^= key1.hashCode();\n    }\n    if (key2 != null) {\n        h ^= key2.hashCode();\n    }\n    if (key3 != null) {\n        h ^= key3.hashCode();\n    }\n    if (key4 != null) {\n        h ^= key4.hashCode();\n    }\n    if (key5 != null) {\n        h ^= key5.hashCode();\n    }\n    h += ~(h << 9);\n    h ^= h >>> 14;\n    h += h << 4;\n    h ^= h >>> 10;\n    return h;\n}",
  "classJavadoc" : "/**\n * A <code>Map</code> implementation that uses multiple keys to map the value.\n * <p>\n * This class is the most efficient way to uses multiple keys to map to a value.\n * The best way to use this class is via the additional map-style methods.\n * These provide <code>get</code>, <code>containsKey</code>, <code>put</code> and\n * <code>remove</code> for individual keys which operate without extra object creation.\n * <p>\n * The additional methods are the main interface of this map.\n * As such, you will not normally hold this map in a variable of type <code>Map</code>.\n * <p>\n * The normal map methods take in and return a {@link MultiKey}.\n * If you try to use <code>put()</code> with any other object type a\n * <code>ClassCastException</code> is thrown. If you try to use <code>null</code> as\n * the key in <code>put()</code> a <code>NullPointerException</code> is thrown.\n * <p>\n * This map is implemented as a decorator of a <code>AbstractHashedMap</code> which\n * enables extra behaviour to be added easily.\n * <ul>\n * <li><code>MultiKeyMap.decorate(new LinkedMap())</code> creates an ordered map.\n * <li><code>MultiKeyMap.decorate(new LRUMap())</code> creates an least recently used map.\n * <li><code>MultiKeyMap.decorate(new ReferenceMap())</code> creates a garbage collector sensitive map.\n * </ul>\n * Note that <code>IdentityMap</code> and <code>ReferenceIdentityMap</code> are unsuitable\n * for use as the key comparison would work on the whole MultiKey, not the elements within.\n * <p>\n * As an example, consider a least recently used cache that uses a String airline code\n * and a Locale to lookup the airline's name:\n * <pre>\n * private MultiKeyMap cache = MultiKeyMap.multiKeyMap(new LRUMap(50));\n *\n * public String getAirlineName(String code, String locale) {\n *   String name = (String) cache.get(code, locale);\n *   if (name == null) {\n *     name = getAirlineNameFromDB(code, locale);\n *     cache.put(code, locale, name);\n *   }\n *   return name;\n * }\n * </pre>\n * <p>\n * <strong>Note that MultiKeyMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. This class may throw exceptions when accessed\n * by concurrent threads without synchronization.\n *\n * @since 3.1\n * @version $Id: MultiKeyMap.java 1686855 2015-06-22 13:00:27Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4.map;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.MapIterator;\nimport org.apache.commons.collections4.keyvalue.MultiKey;\n\n/**\n * A <code>Map</code> implementation that uses multiple keys to map the value.\n * <p>\n * This class is the most efficient way to uses multiple keys to map to a value.\n * The best way to use this class is via the additional map-style methods.\n * These provide <code>get</code>, <code>containsKey</code>, <code>put</code> and\n * <code>remove</code> for individual keys which operate without extra object creation.\n * <p>\n * The additional methods are the main interface of this map.\n * As such, you will not normally hold this map in a variable of type <code>Map</code>.\n * <p>\n * The normal map methods take in and return a {@link MultiKey}.\n * If you try to use <code>put()</code> with any other object type a\n * <code>ClassCastException</code> is thrown. If you try to use <code>null</code> as\n * the key in <code>put()</code> a <code>NullPointerException</code> is thrown.\n * <p>\n * This map is implemented as a decorator of a <code>AbstractHashedMap</code> which\n * enables extra behaviour to be added easily.\n * <ul>\n * <li><code>MultiKeyMap.decorate(new LinkedMap())</code> creates an ordered map.\n * <li><code>MultiKeyMap.decorate(new LRUMap())</code> creates an least recently used map.\n * <li><code>MultiKeyMap.decorate(new ReferenceMap())</code> creates a garbage collector sensitive map.\n * </ul>\n * Note that <code>IdentityMap</code> and <code>ReferenceIdentityMap</code> are unsuitable\n * for use as the key comparison would work on the whole MultiKey, not the elements within.\n * <p>\n * As an example, consider a least recently used cache that uses a String airline code\n * and a Locale to lookup the airline's name:\n * <pre>\n * private MultiKeyMap cache = MultiKeyMap.multiKeyMap(new LRUMap(50));\n *\n * public String getAirlineName(String code, String locale) {\n *   String name = (String) cache.get(code, locale);\n *   if (name == null) {\n *     name = getAirlineNameFromDB(code, locale);\n *     cache.put(code, locale, name);\n *   }\n *   return name;\n * }\n * </pre>\n * <p>\n * <strong>Note that MultiKeyMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. This class may throw exceptions when accessed\n * by concurrent threads without synchronization.\n *\n * @since 3.1\n * @version $Id: MultiKeyMap.java 1686855 2015-06-22 13:00:27Z tn $\n */\npublic class MultiKeyMap<K, V> extends AbstractMapDecorator<MultiKey<? extends K>, V>\n        implements Serializable, Cloneable {\n\n    /** Serialisation version */\n    private static final long serialVersionUID = -1788199231038721040L;\n\n    //-----------------------------------------------------------------------\n    /**\n     * Decorates the specified map to add the MultiKeyMap API and fast query.\n     * The map must not be null and must be empty.\n     *\n     * @param <K>  the key type\n     * @param <V>  the value type\n     * @param map  the map to decorate, not null\n     * @return a new multi key map\n     * @throws NullPointerException if map is null\n     * @throws IllegalArgumentException if the map is not empty\n     * @since 4.0\n     */\n    public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map) {\n        if (map == null) {\n            throw new NullPointerException(\"Map must not be null\");\n        }\n        if (map.size() > 0) {\n            throw new IllegalArgumentException(\"Map must be empty\");\n        }\n        return new MultiKeyMap<K, V>(map);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Constructs a new MultiKeyMap that decorates a <code>HashedMap</code>.\n     */\n    public MultiKeyMap() {\n        this(new HashedMap<MultiKey<? extends K>, V>());\n    }\n\n    /**\n     * Constructor that decorates the specified map and is called from\n     * {@link #multiKeyMap(AbstractHashedMap)}.\n     * The map must not be null and should be empty or only contain valid keys.\n     * This constructor performs no validation.\n     *\n     * @param map  the map to decorate\n     */\n    protected MultiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map) {\n        super(map);\n        this.map = map;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final V value) {\n        final int hashCode = hash(key1, key2);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n            final Object key1, final Object key2) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 2 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final V value) {\n        final int hashCode = hash(key1, key2, key3);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n                                 final Object key1, final Object key2, final Object key3) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 3 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final K key4, final V value) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3, key4), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3, final Object key4) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        if (key4 != null) {\n            h ^= key4.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n                                 final Object key1, final Object key2, final Object key3, final Object key4) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 4 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2))) &&\n            (key4 == multi.getKey(3) || key4 != null && key4.equals(multi.getKey(3)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3,\n                               final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final K key4, final K key5, final V value) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3, key4, key5), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3,\n                            final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        if (key4 != null) {\n            h ^= key4.hashCode();\n        }\n        if (key5 != null) {\n            h ^= key5.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n            final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 5 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2))) &&\n            (key4 == multi.getKey(3) || key4 != null && key4.equals(multi.getKey(3))) &&\n            (key5 == multi.getKey(4) || key5 != null && key5.equals(multi.getKey(4)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Removes all mappings where the first key is that specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has one or more keys, and the first matches that specified.\n     *\n     * @param key1  the first key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 1 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first two keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has two or more keys, and the first two match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 2 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first three keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has three or more keys, and the first three match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2, final Object key3) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 3 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1))) &&\n                (key3 == null ? multi.getKey(2) == null : key3.equals(multi.getKey(2)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first four keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has four or more keys, and the first four match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2, final Object key3, final Object key4) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 4 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1))) &&\n                (key3 == null ? multi.getKey(2) == null : key3.equals(multi.getKey(2))) &&\n                (key4 == null ? multi.getKey(3) == null : key4.equals(multi.getKey(3)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Check to ensure that input keys are valid MultiKey objects.\n     *\n     * @param key  the key to check\n     */\n    protected void checkKey(final MultiKey<?> key) {\n        if (key == null) {\n            throw new NullPointerException(\"Key must not be null\");\n        }\n    }\n\n    /**\n     * Clones the map without cloning the keys or values.\n     *\n     * @return a shallow clone\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public MultiKeyMap<K, V> clone() {\n        try {\n            return (MultiKeyMap<K, V>) super.clone();\n        } catch (final CloneNotSupportedException e) {\n            throw new InternalError();\n        }\n    }\n\n    /**\n     * Puts the key and value into the map, where the key must be a non-null\n     * MultiKey object.\n     *\n     * @param key  the non-null MultiKey object\n     * @param value  the value to store\n     * @return the previous value for the key\n     * @throws NullPointerException if the key is null\n     * @throws ClassCastException if the key is not a MultiKey\n     */\n    @Override\n    public V put(final MultiKey<? extends K> key, final V value) {\n        checkKey(key);\n        return super.put(key, value);\n    }\n\n    /**\n     * Copies all of the keys and values from the specified map to this map.\n     * Each key must be non-null and a MultiKey object.\n     *\n     * @param mapToCopy  to this map\n     * @throws NullPointerException if the mapToCopy or any key within is null\n     * @throws ClassCastException if any key in mapToCopy is not a MultiKey\n     */\n    @Override\n    public void putAll(final Map<? extends MultiKey<? extends K>, ? extends V> mapToCopy) {\n        for (final MultiKey<? extends K> key : mapToCopy.keySet()) {\n            checkKey(key);\n        }\n        super.putAll(mapToCopy);\n    }\n\n    //-----------------------------------------------------------------------\n    @Override\n    public MapIterator<MultiKey<? extends K>, V> mapIterator() {\n        return decorated().mapIterator();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected AbstractHashedMap<MultiKey<? extends K>, V> decorated() {\n        return (AbstractHashedMap<MultiKey<? extends K>, V>) super.decorated();\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Write the map out using a custom routine.\n     *\n     * @param out  the output stream\n     * @throws IOException\n     */\n    private void writeObject(final ObjectOutputStream out) throws IOException {\n        out.defaultWriteObject();\n        out.writeObject(map);\n    }\n\n    /**\n     * Read the map in using a custom routine.\n     *\n     * @param in  the input stream\n     * @throws IOException\n     * @throws ClassNotFoundException\n     */\n    @SuppressWarnings(\"unchecked\")\n    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n        in.defaultReadObject();\n        map = (Map<MultiKey<? extends K>, V>) in.readObject();\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ [ "1", "int" ], [ "2", "int" ], [ "3", "int" ], [ "4", "int" ], [ "5", "int" ] ],
  "tokensMethodArguments" : [ [ "key1", "java.lang", "Object" ], [ "key2", "java.lang", "Object" ], [ "key3", "java.lang", "Object" ], [ "key4", "java.lang", "Object" ], [ "key5", "java.lang", "Object" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "compute", "java.util", "Map", "public default V compute(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "containsValue", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean containsValue(Object arg0)" ], [ "toString", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public String toString()" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2)" ], [ "clone", "org.apache.commons.collections4.map", "MultiKeyMap", "public MultiKeyMap<K, V> clone()" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final K key4, final K key5, final V value)" ], [ "entrySet", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Set<Map.Entry<K, V>> entrySet()" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2)" ], [ "mapIterator", "org.apache.commons.collections4.map", "AbstractIterableMap", "public MapIterator<K, V> mapIterator()" ], [ "values", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Collection<V> values()" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2)" ], [ "putIfAbsent", "java.util", "Map", "public default V putIfAbsent(K arg0, V arg1)" ], [ "computeIfPresent", "java.util", "Map", "public default V computeIfPresent(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "merge", "java.util", "Map", "public default V merge(K arg0, V arg1, BiFunction<? super V, ? super V, ? extends V> arg2)" ], [ "remove", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public V remove(Object arg0)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final K key4, final V value)" ], [ "keySet", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Set<K> keySet()" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final V value)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "decorated", "org.apache.commons.collections4.map", "AbstractMapDecorator", "protected Map<K, V> decorated()" ], [ "getOrDefault", "java.util", "Map", "public default V getOrDefault(Object arg0, V arg1)" ], [ "decorated", "org.apache.commons.collections4.map", "MultiKeyMap", "protected AbstractHashedMap<MultiKey<? extends K>, V> decorated()" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final V value)" ], [ "computeIfAbsent", "java.util", "Map", "public default V computeIfAbsent(K arg0, Function<? super K, ? extends V> arg1)" ], [ "size", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int size()" ], [ "remove", "java.util", "Map", "public default boolean remove(Object arg0, Object arg1)" ], [ "hashCode", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int hashCode()" ], [ "replace", "java.util", "Map", "public default boolean replace(K arg0, V arg1, V arg2)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "get", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public V get(Object arg0)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "mapIterator", "org.apache.commons.collections4.map", "MultiKeyMap", "public MapIterator<MultiKey<? extends K>, V> mapIterator()" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2, final Object key3)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2)" ], [ "replace", "java.util", "Map", "public default V replace(K arg0, V arg1)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1)" ], [ "equals", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean equals(Object arg0)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "put", "org.apache.commons.collections4", "Put", "public abstract Object put(K arg0, V arg1)" ], [ "containsKey", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean containsKey(Object arg0)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3)" ], [ "isEmpty", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean isEmpty()" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final MultiKey<? extends K> key, final V value)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "map", "org.apache.commons.collections4.map", "AbstractMapDecorator", "Map<MultiKey<? extends K>, V> map;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 8263,
  "oracle" : ";",
  "oracleType" : "NORMAL_POST",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4.map",
  "className" : "MultiKeyMap",
  "javadocTag" : "@return the hash code",
  "methodJavadoc" : "    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the hash code\n     */",
  "methodSourceCode" : "protected int hash(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5){\n    int h = 0;\n    if (key1 != null) {\n        h ^= key1.hashCode();\n    }\n    if (key2 != null) {\n        h ^= key2.hashCode();\n    }\n    if (key3 != null) {\n        h ^= key3.hashCode();\n    }\n    if (key4 != null) {\n        h ^= key4.hashCode();\n    }\n    if (key5 != null) {\n        h ^= key5.hashCode();\n    }\n    h += ~(h << 9);\n    h ^= h >>> 14;\n    h += h << 4;\n    h ^= h >>> 10;\n    return h;\n}",
  "classJavadoc" : "/**\n * A <code>Map</code> implementation that uses multiple keys to map the value.\n * <p>\n * This class is the most efficient way to uses multiple keys to map to a value.\n * The best way to use this class is via the additional map-style methods.\n * These provide <code>get</code>, <code>containsKey</code>, <code>put</code> and\n * <code>remove</code> for individual keys which operate without extra object creation.\n * <p>\n * The additional methods are the main interface of this map.\n * As such, you will not normally hold this map in a variable of type <code>Map</code>.\n * <p>\n * The normal map methods take in and return a {@link MultiKey}.\n * If you try to use <code>put()</code> with any other object type a\n * <code>ClassCastException</code> is thrown. If you try to use <code>null</code> as\n * the key in <code>put()</code> a <code>NullPointerException</code> is thrown.\n * <p>\n * This map is implemented as a decorator of a <code>AbstractHashedMap</code> which\n * enables extra behaviour to be added easily.\n * <ul>\n * <li><code>MultiKeyMap.decorate(new LinkedMap())</code> creates an ordered map.\n * <li><code>MultiKeyMap.decorate(new LRUMap())</code> creates an least recently used map.\n * <li><code>MultiKeyMap.decorate(new ReferenceMap())</code> creates a garbage collector sensitive map.\n * </ul>\n * Note that <code>IdentityMap</code> and <code>ReferenceIdentityMap</code> are unsuitable\n * for use as the key comparison would work on the whole MultiKey, not the elements within.\n * <p>\n * As an example, consider a least recently used cache that uses a String airline code\n * and a Locale to lookup the airline's name:\n * <pre>\n * private MultiKeyMap cache = MultiKeyMap.multiKeyMap(new LRUMap(50));\n *\n * public String getAirlineName(String code, String locale) {\n *   String name = (String) cache.get(code, locale);\n *   if (name == null) {\n *     name = getAirlineNameFromDB(code, locale);\n *     cache.put(code, locale, name);\n *   }\n *   return name;\n * }\n * </pre>\n * <p>\n * <strong>Note that MultiKeyMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. This class may throw exceptions when accessed\n * by concurrent threads without synchronization.\n *\n * @since 3.1\n * @version $Id: MultiKeyMap.java 1686855 2015-06-22 13:00:27Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4.map;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.MapIterator;\nimport org.apache.commons.collections4.keyvalue.MultiKey;\n\n/**\n * A <code>Map</code> implementation that uses multiple keys to map the value.\n * <p>\n * This class is the most efficient way to uses multiple keys to map to a value.\n * The best way to use this class is via the additional map-style methods.\n * These provide <code>get</code>, <code>containsKey</code>, <code>put</code> and\n * <code>remove</code> for individual keys which operate without extra object creation.\n * <p>\n * The additional methods are the main interface of this map.\n * As such, you will not normally hold this map in a variable of type <code>Map</code>.\n * <p>\n * The normal map methods take in and return a {@link MultiKey}.\n * If you try to use <code>put()</code> with any other object type a\n * <code>ClassCastException</code> is thrown. If you try to use <code>null</code> as\n * the key in <code>put()</code> a <code>NullPointerException</code> is thrown.\n * <p>\n * This map is implemented as a decorator of a <code>AbstractHashedMap</code> which\n * enables extra behaviour to be added easily.\n * <ul>\n * <li><code>MultiKeyMap.decorate(new LinkedMap())</code> creates an ordered map.\n * <li><code>MultiKeyMap.decorate(new LRUMap())</code> creates an least recently used map.\n * <li><code>MultiKeyMap.decorate(new ReferenceMap())</code> creates a garbage collector sensitive map.\n * </ul>\n * Note that <code>IdentityMap</code> and <code>ReferenceIdentityMap</code> are unsuitable\n * for use as the key comparison would work on the whole MultiKey, not the elements within.\n * <p>\n * As an example, consider a least recently used cache that uses a String airline code\n * and a Locale to lookup the airline's name:\n * <pre>\n * private MultiKeyMap cache = MultiKeyMap.multiKeyMap(new LRUMap(50));\n *\n * public String getAirlineName(String code, String locale) {\n *   String name = (String) cache.get(code, locale);\n *   if (name == null) {\n *     name = getAirlineNameFromDB(code, locale);\n *     cache.put(code, locale, name);\n *   }\n *   return name;\n * }\n * </pre>\n * <p>\n * <strong>Note that MultiKeyMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. This class may throw exceptions when accessed\n * by concurrent threads without synchronization.\n *\n * @since 3.1\n * @version $Id: MultiKeyMap.java 1686855 2015-06-22 13:00:27Z tn $\n */\npublic class MultiKeyMap<K, V> extends AbstractMapDecorator<MultiKey<? extends K>, V>\n        implements Serializable, Cloneable {\n\n    /** Serialisation version */\n    private static final long serialVersionUID = -1788199231038721040L;\n\n    //-----------------------------------------------------------------------\n    /**\n     * Decorates the specified map to add the MultiKeyMap API and fast query.\n     * The map must not be null and must be empty.\n     *\n     * @param <K>  the key type\n     * @param <V>  the value type\n     * @param map  the map to decorate, not null\n     * @return a new multi key map\n     * @throws NullPointerException if map is null\n     * @throws IllegalArgumentException if the map is not empty\n     * @since 4.0\n     */\n    public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map) {\n        if (map == null) {\n            throw new NullPointerException(\"Map must not be null\");\n        }\n        if (map.size() > 0) {\n            throw new IllegalArgumentException(\"Map must be empty\");\n        }\n        return new MultiKeyMap<K, V>(map);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Constructs a new MultiKeyMap that decorates a <code>HashedMap</code>.\n     */\n    public MultiKeyMap() {\n        this(new HashedMap<MultiKey<? extends K>, V>());\n    }\n\n    /**\n     * Constructor that decorates the specified map and is called from\n     * {@link #multiKeyMap(AbstractHashedMap)}.\n     * The map must not be null and should be empty or only contain valid keys.\n     * This constructor performs no validation.\n     *\n     * @param map  the map to decorate\n     */\n    protected MultiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map) {\n        super(map);\n        this.map = map;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final V value) {\n        final int hashCode = hash(key1, key2);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n            final Object key1, final Object key2) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 2 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final V value) {\n        final int hashCode = hash(key1, key2, key3);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n                                 final Object key1, final Object key2, final Object key3) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 3 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final K key4, final V value) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3, key4), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3, final Object key4) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        if (key4 != null) {\n            h ^= key4.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n                                 final Object key1, final Object key2, final Object key3, final Object key4) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 4 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2))) &&\n            (key4 == multi.getKey(3) || key4 != null && key4.equals(multi.getKey(3)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3,\n                               final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final K key4, final K key5, final V value) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3, key4, key5), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3,\n                            final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        if (key4 != null) {\n            h ^= key4.hashCode();\n        }\n        if (key5 != null) {\n            h ^= key5.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n            final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 5 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2))) &&\n            (key4 == multi.getKey(3) || key4 != null && key4.equals(multi.getKey(3))) &&\n            (key5 == multi.getKey(4) || key5 != null && key5.equals(multi.getKey(4)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Removes all mappings where the first key is that specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has one or more keys, and the first matches that specified.\n     *\n     * @param key1  the first key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 1 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first two keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has two or more keys, and the first two match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 2 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first three keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has three or more keys, and the first three match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2, final Object key3) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 3 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1))) &&\n                (key3 == null ? multi.getKey(2) == null : key3.equals(multi.getKey(2)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first four keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has four or more keys, and the first four match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2, final Object key3, final Object key4) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 4 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1))) &&\n                (key3 == null ? multi.getKey(2) == null : key3.equals(multi.getKey(2))) &&\n                (key4 == null ? multi.getKey(3) == null : key4.equals(multi.getKey(3)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Check to ensure that input keys are valid MultiKey objects.\n     *\n     * @param key  the key to check\n     */\n    protected void checkKey(final MultiKey<?> key) {\n        if (key == null) {\n            throw new NullPointerException(\"Key must not be null\");\n        }\n    }\n\n    /**\n     * Clones the map without cloning the keys or values.\n     *\n     * @return a shallow clone\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public MultiKeyMap<K, V> clone() {\n        try {\n            return (MultiKeyMap<K, V>) super.clone();\n        } catch (final CloneNotSupportedException e) {\n            throw new InternalError();\n        }\n    }\n\n    /**\n     * Puts the key and value into the map, where the key must be a non-null\n     * MultiKey object.\n     *\n     * @param key  the non-null MultiKey object\n     * @param value  the value to store\n     * @return the previous value for the key\n     * @throws NullPointerException if the key is null\n     * @throws ClassCastException if the key is not a MultiKey\n     */\n    @Override\n    public V put(final MultiKey<? extends K> key, final V value) {\n        checkKey(key);\n        return super.put(key, value);\n    }\n\n    /**\n     * Copies all of the keys and values from the specified map to this map.\n     * Each key must be non-null and a MultiKey object.\n     *\n     * @param mapToCopy  to this map\n     * @throws NullPointerException if the mapToCopy or any key within is null\n     * @throws ClassCastException if any key in mapToCopy is not a MultiKey\n     */\n    @Override\n    public void putAll(final Map<? extends MultiKey<? extends K>, ? extends V> mapToCopy) {\n        for (final MultiKey<? extends K> key : mapToCopy.keySet()) {\n            checkKey(key);\n        }\n        super.putAll(mapToCopy);\n    }\n\n    //-----------------------------------------------------------------------\n    @Override\n    public MapIterator<MultiKey<? extends K>, V> mapIterator() {\n        return decorated().mapIterator();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected AbstractHashedMap<MultiKey<? extends K>, V> decorated() {\n        return (AbstractHashedMap<MultiKey<? extends K>, V>) super.decorated();\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Write the map out using a custom routine.\n     *\n     * @param out  the output stream\n     * @throws IOException\n     */\n    private void writeObject(final ObjectOutputStream out) throws IOException {\n        out.defaultWriteObject();\n        out.writeObject(map);\n    }\n\n    /**\n     * Read the map in using a custom routine.\n     *\n     * @param in  the input stream\n     * @throws IOException\n     * @throws ClassNotFoundException\n     */\n    @SuppressWarnings(\"unchecked\")\n    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n        in.defaultReadObject();\n        map = (Map<MultiKey<? extends K>, V>) in.readObject();\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ [ "1", "int" ], [ "2", "int" ], [ "3", "int" ], [ "4", "int" ], [ "5", "int" ] ],
  "tokensMethodArguments" : [ [ "key1", "java.lang", "Object" ], [ "key2", "java.lang", "Object" ], [ "key3", "java.lang", "Object" ], [ "key4", "java.lang", "Object" ], [ "key5", "java.lang", "Object" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2)" ], [ "equals", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean equals(Object arg0)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final V value)" ], [ "get", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public V get(Object arg0)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final V value)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "replace", "java.util", "Map", "public default boolean replace(K arg0, V arg1, V arg2)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3)" ], [ "getOrDefault", "java.util", "Map", "public default V getOrDefault(Object arg0, V arg1)" ], [ "keySet", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Set<K> keySet()" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final K key4, final K key5, final V value)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "replace", "java.util", "Map", "public default V replace(K arg0, V arg1)" ], [ "mapIterator", "org.apache.commons.collections4.map", "MultiKeyMap", "public MapIterator<MultiKey<? extends K>, V> mapIterator()" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1)" ], [ "containsValue", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean containsValue(Object arg0)" ], [ "decorated", "org.apache.commons.collections4.map", "MultiKeyMap", "protected AbstractHashedMap<MultiKey<? extends K>, V> decorated()" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final K key4, final V value)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "hashCode", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int hashCode()" ], [ "containsKey", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean containsKey(Object arg0)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final MultiKey<? extends K> key, final V value)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2)" ], [ "decorated", "org.apache.commons.collections4.map", "AbstractMapDecorator", "protected Map<K, V> decorated()" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "isEmpty", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean isEmpty()" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "compute", "java.util", "Map", "public default V compute(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "put", "org.apache.commons.collections4", "Put", "public abstract Object put(K arg0, V arg1)" ], [ "values", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Collection<V> values()" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2)" ], [ "computeIfAbsent", "java.util", "Map", "public default V computeIfAbsent(K arg0, Function<? super K, ? extends V> arg1)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2, final Object key3)" ], [ "entrySet", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Set<Map.Entry<K, V>> entrySet()" ], [ "putIfAbsent", "java.util", "Map", "public default V putIfAbsent(K arg0, V arg1)" ], [ "clone", "org.apache.commons.collections4.map", "MultiKeyMap", "public MultiKeyMap<K, V> clone()" ], [ "toString", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public String toString()" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "mapIterator", "org.apache.commons.collections4.map", "AbstractIterableMap", "public MapIterator<K, V> mapIterator()" ], [ "remove", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public V remove(Object arg0)" ], [ "remove", "java.util", "Map", "public default boolean remove(Object arg0, Object arg1)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3)" ], [ "merge", "java.util", "Map", "public default V merge(K arg0, V arg1, BiFunction<? super V, ? super V, ? extends V> arg2)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "size", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int size()" ], [ "computeIfPresent", "java.util", "Map", "public default V computeIfPresent(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "map", "org.apache.commons.collections4.map", "AbstractMapDecorator", "Map<MultiKey<? extends K>, V> map;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 8281,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4.map",
  "className" : "MultiKeyMap",
  "javadocTag" : "@param key2 the second key",
  "methodJavadoc" : "    /**\n     * Removes all mappings where the first four keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has four or more keys, and the first four match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if any elements were removed\n     */",
  "methodSourceCode" : "public boolean removeAll(final Object key1, final Object key2, final Object key3, final Object key4){\n    boolean modified = false;\n    final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n    while (it.hasNext()) {\n        final MultiKey<? extends K> multi = it.next();\n        if (multi.size() >= 4 && (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) && (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1))) && (key3 == null ? multi.getKey(2) == null : key3.equals(multi.getKey(2))) && (key4 == null ? multi.getKey(3) == null : key4.equals(multi.getKey(3)))) {\n            it.remove();\n            modified = true;\n        }\n    }\n    return modified;\n}",
  "classJavadoc" : "/**\n * A <code>Map</code> implementation that uses multiple keys to map the value.\n * <p>\n * This class is the most efficient way to uses multiple keys to map to a value.\n * The best way to use this class is via the additional map-style methods.\n * These provide <code>get</code>, <code>containsKey</code>, <code>put</code> and\n * <code>remove</code> for individual keys which operate without extra object creation.\n * <p>\n * The additional methods are the main interface of this map.\n * As such, you will not normally hold this map in a variable of type <code>Map</code>.\n * <p>\n * The normal map methods take in and return a {@link MultiKey}.\n * If you try to use <code>put()</code> with any other object type a\n * <code>ClassCastException</code> is thrown. If you try to use <code>null</code> as\n * the key in <code>put()</code> a <code>NullPointerException</code> is thrown.\n * <p>\n * This map is implemented as a decorator of a <code>AbstractHashedMap</code> which\n * enables extra behaviour to be added easily.\n * <ul>\n * <li><code>MultiKeyMap.decorate(new LinkedMap())</code> creates an ordered map.\n * <li><code>MultiKeyMap.decorate(new LRUMap())</code> creates an least recently used map.\n * <li><code>MultiKeyMap.decorate(new ReferenceMap())</code> creates a garbage collector sensitive map.\n * </ul>\n * Note that <code>IdentityMap</code> and <code>ReferenceIdentityMap</code> are unsuitable\n * for use as the key comparison would work on the whole MultiKey, not the elements within.\n * <p>\n * As an example, consider a least recently used cache that uses a String airline code\n * and a Locale to lookup the airline's name:\n * <pre>\n * private MultiKeyMap cache = MultiKeyMap.multiKeyMap(new LRUMap(50));\n *\n * public String getAirlineName(String code, String locale) {\n *   String name = (String) cache.get(code, locale);\n *   if (name == null) {\n *     name = getAirlineNameFromDB(code, locale);\n *     cache.put(code, locale, name);\n *   }\n *   return name;\n * }\n * </pre>\n * <p>\n * <strong>Note that MultiKeyMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. This class may throw exceptions when accessed\n * by concurrent threads without synchronization.\n *\n * @since 3.1\n * @version $Id: MultiKeyMap.java 1686855 2015-06-22 13:00:27Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4.map;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.MapIterator;\nimport org.apache.commons.collections4.keyvalue.MultiKey;\n\n/**\n * A <code>Map</code> implementation that uses multiple keys to map the value.\n * <p>\n * This class is the most efficient way to uses multiple keys to map to a value.\n * The best way to use this class is via the additional map-style methods.\n * These provide <code>get</code>, <code>containsKey</code>, <code>put</code> and\n * <code>remove</code> for individual keys which operate without extra object creation.\n * <p>\n * The additional methods are the main interface of this map.\n * As such, you will not normally hold this map in a variable of type <code>Map</code>.\n * <p>\n * The normal map methods take in and return a {@link MultiKey}.\n * If you try to use <code>put()</code> with any other object type a\n * <code>ClassCastException</code> is thrown. If you try to use <code>null</code> as\n * the key in <code>put()</code> a <code>NullPointerException</code> is thrown.\n * <p>\n * This map is implemented as a decorator of a <code>AbstractHashedMap</code> which\n * enables extra behaviour to be added easily.\n * <ul>\n * <li><code>MultiKeyMap.decorate(new LinkedMap())</code> creates an ordered map.\n * <li><code>MultiKeyMap.decorate(new LRUMap())</code> creates an least recently used map.\n * <li><code>MultiKeyMap.decorate(new ReferenceMap())</code> creates a garbage collector sensitive map.\n * </ul>\n * Note that <code>IdentityMap</code> and <code>ReferenceIdentityMap</code> are unsuitable\n * for use as the key comparison would work on the whole MultiKey, not the elements within.\n * <p>\n * As an example, consider a least recently used cache that uses a String airline code\n * and a Locale to lookup the airline's name:\n * <pre>\n * private MultiKeyMap cache = MultiKeyMap.multiKeyMap(new LRUMap(50));\n *\n * public String getAirlineName(String code, String locale) {\n *   String name = (String) cache.get(code, locale);\n *   if (name == null) {\n *     name = getAirlineNameFromDB(code, locale);\n *     cache.put(code, locale, name);\n *   }\n *   return name;\n * }\n * </pre>\n * <p>\n * <strong>Note that MultiKeyMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. This class may throw exceptions when accessed\n * by concurrent threads without synchronization.\n *\n * @since 3.1\n * @version $Id: MultiKeyMap.java 1686855 2015-06-22 13:00:27Z tn $\n */\npublic class MultiKeyMap<K, V> extends AbstractMapDecorator<MultiKey<? extends K>, V>\n        implements Serializable, Cloneable {\n\n    /** Serialisation version */\n    private static final long serialVersionUID = -1788199231038721040L;\n\n    //-----------------------------------------------------------------------\n    /**\n     * Decorates the specified map to add the MultiKeyMap API and fast query.\n     * The map must not be null and must be empty.\n     *\n     * @param <K>  the key type\n     * @param <V>  the value type\n     * @param map  the map to decorate, not null\n     * @return a new multi key map\n     * @throws NullPointerException if map is null\n     * @throws IllegalArgumentException if the map is not empty\n     * @since 4.0\n     */\n    public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map) {\n        if (map == null) {\n            throw new NullPointerException(\"Map must not be null\");\n        }\n        if (map.size() > 0) {\n            throw new IllegalArgumentException(\"Map must be empty\");\n        }\n        return new MultiKeyMap<K, V>(map);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Constructs a new MultiKeyMap that decorates a <code>HashedMap</code>.\n     */\n    public MultiKeyMap() {\n        this(new HashedMap<MultiKey<? extends K>, V>());\n    }\n\n    /**\n     * Constructor that decorates the specified map and is called from\n     * {@link #multiKeyMap(AbstractHashedMap)}.\n     * The map must not be null and should be empty or only contain valid keys.\n     * This constructor performs no validation.\n     *\n     * @param map  the map to decorate\n     */\n    protected MultiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map) {\n        super(map);\n        this.map = map;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final V value) {\n        final int hashCode = hash(key1, key2);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n            final Object key1, final Object key2) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 2 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final V value) {\n        final int hashCode = hash(key1, key2, key3);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n                                 final Object key1, final Object key2, final Object key3) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 3 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final K key4, final V value) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3, key4), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3, final Object key4) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        if (key4 != null) {\n            h ^= key4.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n                                 final Object key1, final Object key2, final Object key3, final Object key4) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 4 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2))) &&\n            (key4 == multi.getKey(3) || key4 != null && key4.equals(multi.getKey(3)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3,\n                               final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final K key4, final K key5, final V value) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3, key4, key5), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3,\n                            final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        if (key4 != null) {\n            h ^= key4.hashCode();\n        }\n        if (key5 != null) {\n            h ^= key5.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n            final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 5 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2))) &&\n            (key4 == multi.getKey(3) || key4 != null && key4.equals(multi.getKey(3))) &&\n            (key5 == multi.getKey(4) || key5 != null && key5.equals(multi.getKey(4)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Removes all mappings where the first key is that specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has one or more keys, and the first matches that specified.\n     *\n     * @param key1  the first key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 1 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first two keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has two or more keys, and the first two match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 2 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first three keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has three or more keys, and the first three match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2, final Object key3) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 3 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1))) &&\n                (key3 == null ? multi.getKey(2) == null : key3.equals(multi.getKey(2)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first four keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has four or more keys, and the first four match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2, final Object key3, final Object key4) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 4 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1))) &&\n                (key3 == null ? multi.getKey(2) == null : key3.equals(multi.getKey(2))) &&\n                (key4 == null ? multi.getKey(3) == null : key4.equals(multi.getKey(3)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Check to ensure that input keys are valid MultiKey objects.\n     *\n     * @param key  the key to check\n     */\n    protected void checkKey(final MultiKey<?> key) {\n        if (key == null) {\n            throw new NullPointerException(\"Key must not be null\");\n        }\n    }\n\n    /**\n     * Clones the map without cloning the keys or values.\n     *\n     * @return a shallow clone\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public MultiKeyMap<K, V> clone() {\n        try {\n            return (MultiKeyMap<K, V>) super.clone();\n        } catch (final CloneNotSupportedException e) {\n            throw new InternalError();\n        }\n    }\n\n    /**\n     * Puts the key and value into the map, where the key must be a non-null\n     * MultiKey object.\n     *\n     * @param key  the non-null MultiKey object\n     * @param value  the value to store\n     * @return the previous value for the key\n     * @throws NullPointerException if the key is null\n     * @throws ClassCastException if the key is not a MultiKey\n     */\n    @Override\n    public V put(final MultiKey<? extends K> key, final V value) {\n        checkKey(key);\n        return super.put(key, value);\n    }\n\n    /**\n     * Copies all of the keys and values from the specified map to this map.\n     * Each key must be non-null and a MultiKey object.\n     *\n     * @param mapToCopy  to this map\n     * @throws NullPointerException if the mapToCopy or any key within is null\n     * @throws ClassCastException if any key in mapToCopy is not a MultiKey\n     */\n    @Override\n    public void putAll(final Map<? extends MultiKey<? extends K>, ? extends V> mapToCopy) {\n        for (final MultiKey<? extends K> key : mapToCopy.keySet()) {\n            checkKey(key);\n        }\n        super.putAll(mapToCopy);\n    }\n\n    //-----------------------------------------------------------------------\n    @Override\n    public MapIterator<MultiKey<? extends K>, V> mapIterator() {\n        return decorated().mapIterator();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected AbstractHashedMap<MultiKey<? extends K>, V> decorated() {\n        return (AbstractHashedMap<MultiKey<? extends K>, V>) super.decorated();\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Write the map out using a custom routine.\n     *\n     * @param out  the output stream\n     * @throws IOException\n     */\n    private void writeObject(final ObjectOutputStream out) throws IOException {\n        out.defaultWriteObject();\n        out.writeObject(map);\n    }\n\n    /**\n     * Read the map in using a custom routine.\n     *\n     * @param in  the input stream\n     * @throws IOException\n     * @throws ClassNotFoundException\n     */\n    @SuppressWarnings(\"unchecked\")\n    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n        in.defaultReadObject();\n        map = (Map<MultiKey<? extends K>, V>) in.readObject();\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ [ "1", "int" ], [ "2", "int" ], [ "3", "int" ], [ "4", "int" ] ],
  "tokensMethodArguments" : [ [ "key1", "java.lang", "Object" ], [ "key2", "java.lang", "Object" ], [ "key3", "java.lang", "Object" ], [ "key4", "java.lang", "Object" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "computeIfAbsent", "java.util", "Map", "public default V computeIfAbsent(K arg0, Function<? super K, ? extends V> arg1)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final V value)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "size", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int size()" ], [ "computeIfPresent", "java.util", "Map", "public default V computeIfPresent(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "entrySet", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Set<Map.Entry<K, V>> entrySet()" ], [ "hashCode", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int hashCode()" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1)" ], [ "equals", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean equals(Object arg0)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final K key4, final V value)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2)" ], [ "containsValue", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean containsValue(Object arg0)" ], [ "remove", "java.util", "Map", "public default boolean remove(Object arg0, Object arg1)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "mapIterator", "org.apache.commons.collections4.map", "AbstractIterableMap", "public MapIterator<K, V> mapIterator()" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2)" ], [ "remove", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public V remove(Object arg0)" ], [ "decorated", "org.apache.commons.collections4.map", "AbstractMapDecorator", "protected Map<K, V> decorated()" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3)" ], [ "clone", "org.apache.commons.collections4.map", "MultiKeyMap", "public MultiKeyMap<K, V> clone()" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final MultiKey<? extends K> key, final V value)" ], [ "isEmpty", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean isEmpty()" ], [ "get", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public V get(Object arg0)" ], [ "keySet", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Set<K> keySet()" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "compute", "java.util", "Map", "public default V compute(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "values", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Collection<V> values()" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2, final Object key3)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "decorated", "org.apache.commons.collections4.map", "MultiKeyMap", "protected AbstractHashedMap<MultiKey<? extends K>, V> decorated()" ], [ "replace", "java.util", "Map", "public default V replace(K arg0, V arg1)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2)" ], [ "merge", "java.util", "Map", "public default V merge(K arg0, V arg1, BiFunction<? super V, ? super V, ? extends V> arg2)" ], [ "containsKey", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean containsKey(Object arg0)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final K key4, final K key5, final V value)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "put", "org.apache.commons.collections4", "Put", "public abstract Object put(K arg0, V arg1)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2)" ], [ "toString", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public String toString()" ], [ "mapIterator", "org.apache.commons.collections4.map", "MultiKeyMap", "public MapIterator<MultiKey<? extends K>, V> mapIterator()" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final V value)" ], [ "putIfAbsent", "java.util", "Map", "public default V putIfAbsent(K arg0, V arg1)" ], [ "getOrDefault", "java.util", "Map", "public default V getOrDefault(Object arg0, V arg1)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3)" ], [ "replace", "java.util", "Map", "public default boolean replace(K arg0, V arg1, V arg2)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "map", "org.apache.commons.collections4.map", "AbstractMapDecorator", "Map<MultiKey<? extends K>, V> map;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 8283,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4.map",
  "className" : "MultiKeyMap",
  "javadocTag" : "@param key4 the fourth key",
  "methodJavadoc" : "    /**\n     * Removes all mappings where the first four keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has four or more keys, and the first four match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if any elements were removed\n     */",
  "methodSourceCode" : "public boolean removeAll(final Object key1, final Object key2, final Object key3, final Object key4){\n    boolean modified = false;\n    final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n    while (it.hasNext()) {\n        final MultiKey<? extends K> multi = it.next();\n        if (multi.size() >= 4 && (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) && (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1))) && (key3 == null ? multi.getKey(2) == null : key3.equals(multi.getKey(2))) && (key4 == null ? multi.getKey(3) == null : key4.equals(multi.getKey(3)))) {\n            it.remove();\n            modified = true;\n        }\n    }\n    return modified;\n}",
  "classJavadoc" : "/**\n * A <code>Map</code> implementation that uses multiple keys to map the value.\n * <p>\n * This class is the most efficient way to uses multiple keys to map to a value.\n * The best way to use this class is via the additional map-style methods.\n * These provide <code>get</code>, <code>containsKey</code>, <code>put</code> and\n * <code>remove</code> for individual keys which operate without extra object creation.\n * <p>\n * The additional methods are the main interface of this map.\n * As such, you will not normally hold this map in a variable of type <code>Map</code>.\n * <p>\n * The normal map methods take in and return a {@link MultiKey}.\n * If you try to use <code>put()</code> with any other object type a\n * <code>ClassCastException</code> is thrown. If you try to use <code>null</code> as\n * the key in <code>put()</code> a <code>NullPointerException</code> is thrown.\n * <p>\n * This map is implemented as a decorator of a <code>AbstractHashedMap</code> which\n * enables extra behaviour to be added easily.\n * <ul>\n * <li><code>MultiKeyMap.decorate(new LinkedMap())</code> creates an ordered map.\n * <li><code>MultiKeyMap.decorate(new LRUMap())</code> creates an least recently used map.\n * <li><code>MultiKeyMap.decorate(new ReferenceMap())</code> creates a garbage collector sensitive map.\n * </ul>\n * Note that <code>IdentityMap</code> and <code>ReferenceIdentityMap</code> are unsuitable\n * for use as the key comparison would work on the whole MultiKey, not the elements within.\n * <p>\n * As an example, consider a least recently used cache that uses a String airline code\n * and a Locale to lookup the airline's name:\n * <pre>\n * private MultiKeyMap cache = MultiKeyMap.multiKeyMap(new LRUMap(50));\n *\n * public String getAirlineName(String code, String locale) {\n *   String name = (String) cache.get(code, locale);\n *   if (name == null) {\n *     name = getAirlineNameFromDB(code, locale);\n *     cache.put(code, locale, name);\n *   }\n *   return name;\n * }\n * </pre>\n * <p>\n * <strong>Note that MultiKeyMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. This class may throw exceptions when accessed\n * by concurrent threads without synchronization.\n *\n * @since 3.1\n * @version $Id: MultiKeyMap.java 1686855 2015-06-22 13:00:27Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4.map;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.MapIterator;\nimport org.apache.commons.collections4.keyvalue.MultiKey;\n\n/**\n * A <code>Map</code> implementation that uses multiple keys to map the value.\n * <p>\n * This class is the most efficient way to uses multiple keys to map to a value.\n * The best way to use this class is via the additional map-style methods.\n * These provide <code>get</code>, <code>containsKey</code>, <code>put</code> and\n * <code>remove</code> for individual keys which operate without extra object creation.\n * <p>\n * The additional methods are the main interface of this map.\n * As such, you will not normally hold this map in a variable of type <code>Map</code>.\n * <p>\n * The normal map methods take in and return a {@link MultiKey}.\n * If you try to use <code>put()</code> with any other object type a\n * <code>ClassCastException</code> is thrown. If you try to use <code>null</code> as\n * the key in <code>put()</code> a <code>NullPointerException</code> is thrown.\n * <p>\n * This map is implemented as a decorator of a <code>AbstractHashedMap</code> which\n * enables extra behaviour to be added easily.\n * <ul>\n * <li><code>MultiKeyMap.decorate(new LinkedMap())</code> creates an ordered map.\n * <li><code>MultiKeyMap.decorate(new LRUMap())</code> creates an least recently used map.\n * <li><code>MultiKeyMap.decorate(new ReferenceMap())</code> creates a garbage collector sensitive map.\n * </ul>\n * Note that <code>IdentityMap</code> and <code>ReferenceIdentityMap</code> are unsuitable\n * for use as the key comparison would work on the whole MultiKey, not the elements within.\n * <p>\n * As an example, consider a least recently used cache that uses a String airline code\n * and a Locale to lookup the airline's name:\n * <pre>\n * private MultiKeyMap cache = MultiKeyMap.multiKeyMap(new LRUMap(50));\n *\n * public String getAirlineName(String code, String locale) {\n *   String name = (String) cache.get(code, locale);\n *   if (name == null) {\n *     name = getAirlineNameFromDB(code, locale);\n *     cache.put(code, locale, name);\n *   }\n *   return name;\n * }\n * </pre>\n * <p>\n * <strong>Note that MultiKeyMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. This class may throw exceptions when accessed\n * by concurrent threads without synchronization.\n *\n * @since 3.1\n * @version $Id: MultiKeyMap.java 1686855 2015-06-22 13:00:27Z tn $\n */\npublic class MultiKeyMap<K, V> extends AbstractMapDecorator<MultiKey<? extends K>, V>\n        implements Serializable, Cloneable {\n\n    /** Serialisation version */\n    private static final long serialVersionUID = -1788199231038721040L;\n\n    //-----------------------------------------------------------------------\n    /**\n     * Decorates the specified map to add the MultiKeyMap API and fast query.\n     * The map must not be null and must be empty.\n     *\n     * @param <K>  the key type\n     * @param <V>  the value type\n     * @param map  the map to decorate, not null\n     * @return a new multi key map\n     * @throws NullPointerException if map is null\n     * @throws IllegalArgumentException if the map is not empty\n     * @since 4.0\n     */\n    public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map) {\n        if (map == null) {\n            throw new NullPointerException(\"Map must not be null\");\n        }\n        if (map.size() > 0) {\n            throw new IllegalArgumentException(\"Map must be empty\");\n        }\n        return new MultiKeyMap<K, V>(map);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Constructs a new MultiKeyMap that decorates a <code>HashedMap</code>.\n     */\n    public MultiKeyMap() {\n        this(new HashedMap<MultiKey<? extends K>, V>());\n    }\n\n    /**\n     * Constructor that decorates the specified map and is called from\n     * {@link #multiKeyMap(AbstractHashedMap)}.\n     * The map must not be null and should be empty or only contain valid keys.\n     * This constructor performs no validation.\n     *\n     * @param map  the map to decorate\n     */\n    protected MultiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map) {\n        super(map);\n        this.map = map;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final V value) {\n        final int hashCode = hash(key1, key2);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n            final Object key1, final Object key2) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 2 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final V value) {\n        final int hashCode = hash(key1, key2, key3);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n                                 final Object key1, final Object key2, final Object key3) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 3 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final K key4, final V value) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3, key4), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3, final Object key4) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        if (key4 != null) {\n            h ^= key4.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n                                 final Object key1, final Object key2, final Object key3, final Object key4) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 4 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2))) &&\n            (key4 == multi.getKey(3) || key4 != null && key4.equals(multi.getKey(3)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3,\n                               final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final K key4, final K key5, final V value) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3, key4, key5), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3,\n                            final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        if (key4 != null) {\n            h ^= key4.hashCode();\n        }\n        if (key5 != null) {\n            h ^= key5.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n            final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 5 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2))) &&\n            (key4 == multi.getKey(3) || key4 != null && key4.equals(multi.getKey(3))) &&\n            (key5 == multi.getKey(4) || key5 != null && key5.equals(multi.getKey(4)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Removes all mappings where the first key is that specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has one or more keys, and the first matches that specified.\n     *\n     * @param key1  the first key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 1 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first two keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has two or more keys, and the first two match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 2 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first three keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has three or more keys, and the first three match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2, final Object key3) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 3 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1))) &&\n                (key3 == null ? multi.getKey(2) == null : key3.equals(multi.getKey(2)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first four keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has four or more keys, and the first four match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2, final Object key3, final Object key4) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 4 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1))) &&\n                (key3 == null ? multi.getKey(2) == null : key3.equals(multi.getKey(2))) &&\n                (key4 == null ? multi.getKey(3) == null : key4.equals(multi.getKey(3)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Check to ensure that input keys are valid MultiKey objects.\n     *\n     * @param key  the key to check\n     */\n    protected void checkKey(final MultiKey<?> key) {\n        if (key == null) {\n            throw new NullPointerException(\"Key must not be null\");\n        }\n    }\n\n    /**\n     * Clones the map without cloning the keys or values.\n     *\n     * @return a shallow clone\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public MultiKeyMap<K, V> clone() {\n        try {\n            return (MultiKeyMap<K, V>) super.clone();\n        } catch (final CloneNotSupportedException e) {\n            throw new InternalError();\n        }\n    }\n\n    /**\n     * Puts the key and value into the map, where the key must be a non-null\n     * MultiKey object.\n     *\n     * @param key  the non-null MultiKey object\n     * @param value  the value to store\n     * @return the previous value for the key\n     * @throws NullPointerException if the key is null\n     * @throws ClassCastException if the key is not a MultiKey\n     */\n    @Override\n    public V put(final MultiKey<? extends K> key, final V value) {\n        checkKey(key);\n        return super.put(key, value);\n    }\n\n    /**\n     * Copies all of the keys and values from the specified map to this map.\n     * Each key must be non-null and a MultiKey object.\n     *\n     * @param mapToCopy  to this map\n     * @throws NullPointerException if the mapToCopy or any key within is null\n     * @throws ClassCastException if any key in mapToCopy is not a MultiKey\n     */\n    @Override\n    public void putAll(final Map<? extends MultiKey<? extends K>, ? extends V> mapToCopy) {\n        for (final MultiKey<? extends K> key : mapToCopy.keySet()) {\n            checkKey(key);\n        }\n        super.putAll(mapToCopy);\n    }\n\n    //-----------------------------------------------------------------------\n    @Override\n    public MapIterator<MultiKey<? extends K>, V> mapIterator() {\n        return decorated().mapIterator();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected AbstractHashedMap<MultiKey<? extends K>, V> decorated() {\n        return (AbstractHashedMap<MultiKey<? extends K>, V>) super.decorated();\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Write the map out using a custom routine.\n     *\n     * @param out  the output stream\n     * @throws IOException\n     */\n    private void writeObject(final ObjectOutputStream out) throws IOException {\n        out.defaultWriteObject();\n        out.writeObject(map);\n    }\n\n    /**\n     * Read the map in using a custom routine.\n     *\n     * @param in  the input stream\n     * @throws IOException\n     * @throws ClassNotFoundException\n     */\n    @SuppressWarnings(\"unchecked\")\n    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n        in.defaultReadObject();\n        map = (Map<MultiKey<? extends K>, V>) in.readObject();\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ [ "1", "int" ], [ "2", "int" ], [ "3", "int" ], [ "4", "int" ] ],
  "tokensMethodArguments" : [ [ "key1", "java.lang", "Object" ], [ "key2", "java.lang", "Object" ], [ "key3", "java.lang", "Object" ], [ "key4", "java.lang", "Object" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2, final Object key3)" ], [ "decorated", "org.apache.commons.collections4.map", "AbstractMapDecorator", "protected Map<K, V> decorated()" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final K key4, final K key5, final V value)" ], [ "computeIfAbsent", "java.util", "Map", "public default V computeIfAbsent(K arg0, Function<? super K, ? extends V> arg1)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final K key4, final V value)" ], [ "containsValue", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean containsValue(Object arg0)" ], [ "put", "org.apache.commons.collections4", "Put", "public abstract Object put(K arg0, V arg1)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "containsKey", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean containsKey(Object arg0)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "replace", "java.util", "Map", "public default V replace(K arg0, V arg1)" ], [ "merge", "java.util", "Map", "public default V merge(K arg0, V arg1, BiFunction<? super V, ? super V, ? extends V> arg2)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "keySet", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Set<K> keySet()" ], [ "mapIterator", "org.apache.commons.collections4.map", "AbstractIterableMap", "public MapIterator<K, V> mapIterator()" ], [ "compute", "java.util", "Map", "public default V compute(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "toString", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public String toString()" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3)" ], [ "isEmpty", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean isEmpty()" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2)" ], [ "computeIfPresent", "java.util", "Map", "public default V computeIfPresent(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "getOrDefault", "java.util", "Map", "public default V getOrDefault(Object arg0, V arg1)" ], [ "clone", "org.apache.commons.collections4.map", "MultiKeyMap", "public MultiKeyMap<K, V> clone()" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2)" ], [ "replace", "java.util", "Map", "public default boolean replace(K arg0, V arg1, V arg2)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final V value)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final MultiKey<? extends K> key, final V value)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "remove", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public V remove(Object arg0)" ], [ "size", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int size()" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final V value)" ], [ "remove", "java.util", "Map", "public default boolean remove(Object arg0, Object arg1)" ], [ "get", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public V get(Object arg0)" ], [ "decorated", "org.apache.commons.collections4.map", "MultiKeyMap", "protected AbstractHashedMap<MultiKey<? extends K>, V> decorated()" ], [ "putIfAbsent", "java.util", "Map", "public default V putIfAbsent(K arg0, V arg1)" ], [ "equals", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean equals(Object arg0)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "values", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Collection<V> values()" ], [ "mapIterator", "org.apache.commons.collections4.map", "MultiKeyMap", "public MapIterator<MultiKey<? extends K>, V> mapIterator()" ], [ "entrySet", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Set<Map.Entry<K, V>> entrySet()" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2)" ], [ "hashCode", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int hashCode()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "toString", "java.lang", "Object", "public String toString()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "map", "org.apache.commons.collections4.map", "AbstractMapDecorator", "Map<MultiKey<? extends K>, V> map;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 8291,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4.map",
  "className" : "MultiKeyMap",
  "javadocTag" : "@throws ClassCastException if any key in mapToCopy is not a MultiKey",
  "methodJavadoc" : "    /**\n     * Copies all of the keys and values from the specified map to this map.\n     * Each key must be non-null and a MultiKey object.\n     *\n     * @param mapToCopy  to this map\n     * @throws NullPointerException if the mapToCopy or any key within is null\n     * @throws ClassCastException if any key in mapToCopy is not a MultiKey\n     */",
  "methodSourceCode" : "public void putAll(final Map<? extends MultiKey<? extends K>, ? extends V> mapToCopy){\n    for (final MultiKey<? extends K> key : mapToCopy.keySet()) {\n        checkKey(key);\n    }\n    super.putAll(mapToCopy);\n}",
  "classJavadoc" : "/**\n * A <code>Map</code> implementation that uses multiple keys to map the value.\n * <p>\n * This class is the most efficient way to uses multiple keys to map to a value.\n * The best way to use this class is via the additional map-style methods.\n * These provide <code>get</code>, <code>containsKey</code>, <code>put</code> and\n * <code>remove</code> for individual keys which operate without extra object creation.\n * <p>\n * The additional methods are the main interface of this map.\n * As such, you will not normally hold this map in a variable of type <code>Map</code>.\n * <p>\n * The normal map methods take in and return a {@link MultiKey}.\n * If you try to use <code>put()</code> with any other object type a\n * <code>ClassCastException</code> is thrown. If you try to use <code>null</code> as\n * the key in <code>put()</code> a <code>NullPointerException</code> is thrown.\n * <p>\n * This map is implemented as a decorator of a <code>AbstractHashedMap</code> which\n * enables extra behaviour to be added easily.\n * <ul>\n * <li><code>MultiKeyMap.decorate(new LinkedMap())</code> creates an ordered map.\n * <li><code>MultiKeyMap.decorate(new LRUMap())</code> creates an least recently used map.\n * <li><code>MultiKeyMap.decorate(new ReferenceMap())</code> creates a garbage collector sensitive map.\n * </ul>\n * Note that <code>IdentityMap</code> and <code>ReferenceIdentityMap</code> are unsuitable\n * for use as the key comparison would work on the whole MultiKey, not the elements within.\n * <p>\n * As an example, consider a least recently used cache that uses a String airline code\n * and a Locale to lookup the airline's name:\n * <pre>\n * private MultiKeyMap cache = MultiKeyMap.multiKeyMap(new LRUMap(50));\n *\n * public String getAirlineName(String code, String locale) {\n *   String name = (String) cache.get(code, locale);\n *   if (name == null) {\n *     name = getAirlineNameFromDB(code, locale);\n *     cache.put(code, locale, name);\n *   }\n *   return name;\n * }\n * </pre>\n * <p>\n * <strong>Note that MultiKeyMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. This class may throw exceptions when accessed\n * by concurrent threads without synchronization.\n *\n * @since 3.1\n * @version $Id: MultiKeyMap.java 1686855 2015-06-22 13:00:27Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4.map;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.MapIterator;\nimport org.apache.commons.collections4.keyvalue.MultiKey;\n\n/**\n * A <code>Map</code> implementation that uses multiple keys to map the value.\n * <p>\n * This class is the most efficient way to uses multiple keys to map to a value.\n * The best way to use this class is via the additional map-style methods.\n * These provide <code>get</code>, <code>containsKey</code>, <code>put</code> and\n * <code>remove</code> for individual keys which operate without extra object creation.\n * <p>\n * The additional methods are the main interface of this map.\n * As such, you will not normally hold this map in a variable of type <code>Map</code>.\n * <p>\n * The normal map methods take in and return a {@link MultiKey}.\n * If you try to use <code>put()</code> with any other object type a\n * <code>ClassCastException</code> is thrown. If you try to use <code>null</code> as\n * the key in <code>put()</code> a <code>NullPointerException</code> is thrown.\n * <p>\n * This map is implemented as a decorator of a <code>AbstractHashedMap</code> which\n * enables extra behaviour to be added easily.\n * <ul>\n * <li><code>MultiKeyMap.decorate(new LinkedMap())</code> creates an ordered map.\n * <li><code>MultiKeyMap.decorate(new LRUMap())</code> creates an least recently used map.\n * <li><code>MultiKeyMap.decorate(new ReferenceMap())</code> creates a garbage collector sensitive map.\n * </ul>\n * Note that <code>IdentityMap</code> and <code>ReferenceIdentityMap</code> are unsuitable\n * for use as the key comparison would work on the whole MultiKey, not the elements within.\n * <p>\n * As an example, consider a least recently used cache that uses a String airline code\n * and a Locale to lookup the airline's name:\n * <pre>\n * private MultiKeyMap cache = MultiKeyMap.multiKeyMap(new LRUMap(50));\n *\n * public String getAirlineName(String code, String locale) {\n *   String name = (String) cache.get(code, locale);\n *   if (name == null) {\n *     name = getAirlineNameFromDB(code, locale);\n *     cache.put(code, locale, name);\n *   }\n *   return name;\n * }\n * </pre>\n * <p>\n * <strong>Note that MultiKeyMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. This class may throw exceptions when accessed\n * by concurrent threads without synchronization.\n *\n * @since 3.1\n * @version $Id: MultiKeyMap.java 1686855 2015-06-22 13:00:27Z tn $\n */\npublic class MultiKeyMap<K, V> extends AbstractMapDecorator<MultiKey<? extends K>, V>\n        implements Serializable, Cloneable {\n\n    /** Serialisation version */\n    private static final long serialVersionUID = -1788199231038721040L;\n\n    //-----------------------------------------------------------------------\n    /**\n     * Decorates the specified map to add the MultiKeyMap API and fast query.\n     * The map must not be null and must be empty.\n     *\n     * @param <K>  the key type\n     * @param <V>  the value type\n     * @param map  the map to decorate, not null\n     * @return a new multi key map\n     * @throws NullPointerException if map is null\n     * @throws IllegalArgumentException if the map is not empty\n     * @since 4.0\n     */\n    public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map) {\n        if (map == null) {\n            throw new NullPointerException(\"Map must not be null\");\n        }\n        if (map.size() > 0) {\n            throw new IllegalArgumentException(\"Map must be empty\");\n        }\n        return new MultiKeyMap<K, V>(map);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Constructs a new MultiKeyMap that decorates a <code>HashedMap</code>.\n     */\n    public MultiKeyMap() {\n        this(new HashedMap<MultiKey<? extends K>, V>());\n    }\n\n    /**\n     * Constructor that decorates the specified map and is called from\n     * {@link #multiKeyMap(AbstractHashedMap)}.\n     * The map must not be null and should be empty or only contain valid keys.\n     * This constructor performs no validation.\n     *\n     * @param map  the map to decorate\n     */\n    protected MultiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map) {\n        super(map);\n        this.map = map;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final V value) {\n        final int hashCode = hash(key1, key2);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n            final Object key1, final Object key2) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 2 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final V value) {\n        final int hashCode = hash(key1, key2, key3);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n                                 final Object key1, final Object key2, final Object key3) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 3 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final K key4, final V value) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3, key4), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3, final Object key4) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        if (key4 != null) {\n            h ^= key4.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n                                 final Object key1, final Object key2, final Object key3, final Object key4) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 4 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2))) &&\n            (key4 == multi.getKey(3) || key4 != null && key4.equals(multi.getKey(3)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3,\n                               final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final K key4, final K key5, final V value) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3, key4, key5), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3,\n                            final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        if (key4 != null) {\n            h ^= key4.hashCode();\n        }\n        if (key5 != null) {\n            h ^= key5.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n            final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 5 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2))) &&\n            (key4 == multi.getKey(3) || key4 != null && key4.equals(multi.getKey(3))) &&\n            (key5 == multi.getKey(4) || key5 != null && key5.equals(multi.getKey(4)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Removes all mappings where the first key is that specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has one or more keys, and the first matches that specified.\n     *\n     * @param key1  the first key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 1 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first two keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has two or more keys, and the first two match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 2 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first three keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has three or more keys, and the first three match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2, final Object key3) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 3 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1))) &&\n                (key3 == null ? multi.getKey(2) == null : key3.equals(multi.getKey(2)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first four keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has four or more keys, and the first four match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2, final Object key3, final Object key4) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 4 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1))) &&\n                (key3 == null ? multi.getKey(2) == null : key3.equals(multi.getKey(2))) &&\n                (key4 == null ? multi.getKey(3) == null : key4.equals(multi.getKey(3)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Check to ensure that input keys are valid MultiKey objects.\n     *\n     * @param key  the key to check\n     */\n    protected void checkKey(final MultiKey<?> key) {\n        if (key == null) {\n            throw new NullPointerException(\"Key must not be null\");\n        }\n    }\n\n    /**\n     * Clones the map without cloning the keys or values.\n     *\n     * @return a shallow clone\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public MultiKeyMap<K, V> clone() {\n        try {\n            return (MultiKeyMap<K, V>) super.clone();\n        } catch (final CloneNotSupportedException e) {\n            throw new InternalError();\n        }\n    }\n\n    /**\n     * Puts the key and value into the map, where the key must be a non-null\n     * MultiKey object.\n     *\n     * @param key  the non-null MultiKey object\n     * @param value  the value to store\n     * @return the previous value for the key\n     * @throws NullPointerException if the key is null\n     * @throws ClassCastException if the key is not a MultiKey\n     */\n    @Override\n    public V put(final MultiKey<? extends K> key, final V value) {\n        checkKey(key);\n        return super.put(key, value);\n    }\n\n    /**\n     * Copies all of the keys and values from the specified map to this map.\n     * Each key must be non-null and a MultiKey object.\n     *\n     * @param mapToCopy  to this map\n     * @throws NullPointerException if the mapToCopy or any key within is null\n     * @throws ClassCastException if any key in mapToCopy is not a MultiKey\n     */\n    @Override\n    public void putAll(final Map<? extends MultiKey<? extends K>, ? extends V> mapToCopy) {\n        for (final MultiKey<? extends K> key : mapToCopy.keySet()) {\n            checkKey(key);\n        }\n        super.putAll(mapToCopy);\n    }\n\n    //-----------------------------------------------------------------------\n    @Override\n    public MapIterator<MultiKey<? extends K>, V> mapIterator() {\n        return decorated().mapIterator();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected AbstractHashedMap<MultiKey<? extends K>, V> decorated() {\n        return (AbstractHashedMap<MultiKey<? extends K>, V>) super.decorated();\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Write the map out using a custom routine.\n     *\n     * @param out  the output stream\n     * @throws IOException\n     */\n    private void writeObject(final ObjectOutputStream out) throws IOException {\n        out.defaultWriteObject();\n        out.writeObject(map);\n    }\n\n    /**\n     * Read the map in using a custom routine.\n     *\n     * @param in  the input stream\n     * @throws IOException\n     * @throws ClassNotFoundException\n     */\n    @SuppressWarnings(\"unchecked\")\n    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n        in.defaultReadObject();\n        map = (Map<MultiKey<? extends K>, V>) in.readObject();\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "mapToCopy", "java.util.Map", "Map<? extends MultiKey<? extends K>, ? extends V>" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final K key4, final V value)" ], [ "equals", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean equals(Object arg0)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final MultiKey<? extends K> key, final V value)" ], [ "merge", "java.util", "Map", "public default V merge(K arg0, V arg1, BiFunction<? super V, ? super V, ? extends V> arg2)" ], [ "mapIterator", "org.apache.commons.collections4.map", "AbstractIterableMap", "public MapIterator<K, V> mapIterator()" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final K key4, final K key5, final V value)" ], [ "isEmpty", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean isEmpty()" ], [ "decorated", "org.apache.commons.collections4.map", "AbstractMapDecorator", "protected Map<K, V> decorated()" ], [ "putIfAbsent", "java.util", "Map", "public default V putIfAbsent(K arg0, V arg1)" ], [ "decorated", "org.apache.commons.collections4.map", "MultiKeyMap", "protected AbstractHashedMap<MultiKey<? extends K>, V> decorated()" ], [ "toString", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public String toString()" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2)" ], [ "put", "org.apache.commons.collections4", "Put", "public abstract Object put(K arg0, V arg1)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2)" ], [ "getOrDefault", "java.util", "Map", "public default V getOrDefault(Object arg0, V arg1)" ], [ "containsKey", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean containsKey(Object arg0)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2)" ], [ "compute", "java.util", "Map", "public default V compute(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3)" ], [ "hashCode", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int hashCode()" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "keySet", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Set<K> keySet()" ], [ "computeIfAbsent", "java.util", "Map", "public default V computeIfAbsent(K arg0, Function<? super K, ? extends V> arg1)" ], [ "size", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int size()" ], [ "replace", "java.util", "Map", "public default V replace(K arg0, V arg1)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "containsValue", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean containsValue(Object arg0)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "remove", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public V remove(Object arg0)" ], [ "mapIterator", "org.apache.commons.collections4.map", "MultiKeyMap", "public MapIterator<MultiKey<? extends K>, V> mapIterator()" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2, final Object key3)" ], [ "values", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Collection<V> values()" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final V value)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final V value)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "remove", "java.util", "Map", "public default boolean remove(Object arg0, Object arg1)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2)" ], [ "computeIfPresent", "java.util", "Map", "public default V computeIfPresent(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1)" ], [ "clone", "org.apache.commons.collections4.map", "MultiKeyMap", "public MultiKeyMap<K, V> clone()" ], [ "get", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public V get(Object arg0)" ], [ "entrySet", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Set<Map.Entry<K, V>> entrySet()" ], [ "replace", "java.util", "Map", "public default boolean replace(K arg0, V arg1, V arg2)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3)" ], [ "put", "java.util", "Map", "public abstract V put(K arg0, V arg1)" ], [ "values", "java.util", "Map", "public abstract Collection<V> values()" ], [ "isEmpty", "java.util", "Map", "public abstract boolean isEmpty()" ], [ "containsValue", "java.util", "Map", "public abstract boolean containsValue(Object arg0)" ], [ "remove", "java.util", "Map", "public abstract V remove(Object arg0)" ], [ "entrySet", "java.util", "Map", "public abstract Set<Map.Entry<K, V>> entrySet()" ], [ "containsKey", "java.util", "Map", "public abstract boolean containsKey(Object arg0)" ], [ "hashCode", "java.util", "Map", "public abstract int hashCode()" ], [ "size", "java.util", "Map", "public abstract int size()" ], [ "equals", "java.util", "Map", "public abstract boolean equals(Object arg0)" ], [ "keySet", "java.util", "Map", "public abstract Set<K> keySet()" ], [ "get", "java.util", "Map", "public abstract V get(Object arg0)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "map", "org.apache.commons.collections4.map", "AbstractMapDecorator", "Map<MultiKey<? extends K>, V> map;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 8293,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4.map",
  "className" : "MultiKeyMap",
  "javadocTag" : "@throws IOException",
  "methodJavadoc" : "    /**\n     * Write the map out using a custom routine.\n     *\n     * @param out  the output stream\n     * @throws IOException\n     */",
  "methodSourceCode" : "private void writeObject(final ObjectOutputStream out) throws IOException{\n    out.defaultWriteObject();\n    out.writeObject(map);\n}",
  "classJavadoc" : "/**\n * A <code>Map</code> implementation that uses multiple keys to map the value.\n * <p>\n * This class is the most efficient way to uses multiple keys to map to a value.\n * The best way to use this class is via the additional map-style methods.\n * These provide <code>get</code>, <code>containsKey</code>, <code>put</code> and\n * <code>remove</code> for individual keys which operate without extra object creation.\n * <p>\n * The additional methods are the main interface of this map.\n * As such, you will not normally hold this map in a variable of type <code>Map</code>.\n * <p>\n * The normal map methods take in and return a {@link MultiKey}.\n * If you try to use <code>put()</code> with any other object type a\n * <code>ClassCastException</code> is thrown. If you try to use <code>null</code> as\n * the key in <code>put()</code> a <code>NullPointerException</code> is thrown.\n * <p>\n * This map is implemented as a decorator of a <code>AbstractHashedMap</code> which\n * enables extra behaviour to be added easily.\n * <ul>\n * <li><code>MultiKeyMap.decorate(new LinkedMap())</code> creates an ordered map.\n * <li><code>MultiKeyMap.decorate(new LRUMap())</code> creates an least recently used map.\n * <li><code>MultiKeyMap.decorate(new ReferenceMap())</code> creates a garbage collector sensitive map.\n * </ul>\n * Note that <code>IdentityMap</code> and <code>ReferenceIdentityMap</code> are unsuitable\n * for use as the key comparison would work on the whole MultiKey, not the elements within.\n * <p>\n * As an example, consider a least recently used cache that uses a String airline code\n * and a Locale to lookup the airline's name:\n * <pre>\n * private MultiKeyMap cache = MultiKeyMap.multiKeyMap(new LRUMap(50));\n *\n * public String getAirlineName(String code, String locale) {\n *   String name = (String) cache.get(code, locale);\n *   if (name == null) {\n *     name = getAirlineNameFromDB(code, locale);\n *     cache.put(code, locale, name);\n *   }\n *   return name;\n * }\n * </pre>\n * <p>\n * <strong>Note that MultiKeyMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. This class may throw exceptions when accessed\n * by concurrent threads without synchronization.\n *\n * @since 3.1\n * @version $Id: MultiKeyMap.java 1686855 2015-06-22 13:00:27Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4.map;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.MapIterator;\nimport org.apache.commons.collections4.keyvalue.MultiKey;\n\n/**\n * A <code>Map</code> implementation that uses multiple keys to map the value.\n * <p>\n * This class is the most efficient way to uses multiple keys to map to a value.\n * The best way to use this class is via the additional map-style methods.\n * These provide <code>get</code>, <code>containsKey</code>, <code>put</code> and\n * <code>remove</code> for individual keys which operate without extra object creation.\n * <p>\n * The additional methods are the main interface of this map.\n * As such, you will not normally hold this map in a variable of type <code>Map</code>.\n * <p>\n * The normal map methods take in and return a {@link MultiKey}.\n * If you try to use <code>put()</code> with any other object type a\n * <code>ClassCastException</code> is thrown. If you try to use <code>null</code> as\n * the key in <code>put()</code> a <code>NullPointerException</code> is thrown.\n * <p>\n * This map is implemented as a decorator of a <code>AbstractHashedMap</code> which\n * enables extra behaviour to be added easily.\n * <ul>\n * <li><code>MultiKeyMap.decorate(new LinkedMap())</code> creates an ordered map.\n * <li><code>MultiKeyMap.decorate(new LRUMap())</code> creates an least recently used map.\n * <li><code>MultiKeyMap.decorate(new ReferenceMap())</code> creates a garbage collector sensitive map.\n * </ul>\n * Note that <code>IdentityMap</code> and <code>ReferenceIdentityMap</code> are unsuitable\n * for use as the key comparison would work on the whole MultiKey, not the elements within.\n * <p>\n * As an example, consider a least recently used cache that uses a String airline code\n * and a Locale to lookup the airline's name:\n * <pre>\n * private MultiKeyMap cache = MultiKeyMap.multiKeyMap(new LRUMap(50));\n *\n * public String getAirlineName(String code, String locale) {\n *   String name = (String) cache.get(code, locale);\n *   if (name == null) {\n *     name = getAirlineNameFromDB(code, locale);\n *     cache.put(code, locale, name);\n *   }\n *   return name;\n * }\n * </pre>\n * <p>\n * <strong>Note that MultiKeyMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. This class may throw exceptions when accessed\n * by concurrent threads without synchronization.\n *\n * @since 3.1\n * @version $Id: MultiKeyMap.java 1686855 2015-06-22 13:00:27Z tn $\n */\npublic class MultiKeyMap<K, V> extends AbstractMapDecorator<MultiKey<? extends K>, V>\n        implements Serializable, Cloneable {\n\n    /** Serialisation version */\n    private static final long serialVersionUID = -1788199231038721040L;\n\n    //-----------------------------------------------------------------------\n    /**\n     * Decorates the specified map to add the MultiKeyMap API and fast query.\n     * The map must not be null and must be empty.\n     *\n     * @param <K>  the key type\n     * @param <V>  the value type\n     * @param map  the map to decorate, not null\n     * @return a new multi key map\n     * @throws NullPointerException if map is null\n     * @throws IllegalArgumentException if the map is not empty\n     * @since 4.0\n     */\n    public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map) {\n        if (map == null) {\n            throw new NullPointerException(\"Map must not be null\");\n        }\n        if (map.size() > 0) {\n            throw new IllegalArgumentException(\"Map must be empty\");\n        }\n        return new MultiKeyMap<K, V>(map);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Constructs a new MultiKeyMap that decorates a <code>HashedMap</code>.\n     */\n    public MultiKeyMap() {\n        this(new HashedMap<MultiKey<? extends K>, V>());\n    }\n\n    /**\n     * Constructor that decorates the specified map and is called from\n     * {@link #multiKeyMap(AbstractHashedMap)}.\n     * The map must not be null and should be empty or only contain valid keys.\n     * This constructor performs no validation.\n     *\n     * @param map  the map to decorate\n     */\n    protected MultiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map) {\n        super(map);\n        this.map = map;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final V value) {\n        final int hashCode = hash(key1, key2);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n            final Object key1, final Object key2) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 2 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final V value) {\n        final int hashCode = hash(key1, key2, key3);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n                                 final Object key1, final Object key2, final Object key3) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 3 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final K key4, final V value) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3, key4), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3, final Object key4) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        if (key4 != null) {\n            h ^= key4.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n                                 final Object key1, final Object key2, final Object key3, final Object key4) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 4 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2))) &&\n            (key4 == multi.getKey(3) || key4 != null && key4.equals(multi.getKey(3)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3,\n                               final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final K key4, final K key5, final V value) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3, key4, key5), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3,\n                            final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        if (key4 != null) {\n            h ^= key4.hashCode();\n        }\n        if (key5 != null) {\n            h ^= key5.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n            final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 5 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2))) &&\n            (key4 == multi.getKey(3) || key4 != null && key4.equals(multi.getKey(3))) &&\n            (key5 == multi.getKey(4) || key5 != null && key5.equals(multi.getKey(4)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Removes all mappings where the first key is that specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has one or more keys, and the first matches that specified.\n     *\n     * @param key1  the first key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 1 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first two keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has two or more keys, and the first two match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 2 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first three keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has three or more keys, and the first three match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2, final Object key3) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 3 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1))) &&\n                (key3 == null ? multi.getKey(2) == null : key3.equals(multi.getKey(2)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first four keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has four or more keys, and the first four match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2, final Object key3, final Object key4) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 4 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1))) &&\n                (key3 == null ? multi.getKey(2) == null : key3.equals(multi.getKey(2))) &&\n                (key4 == null ? multi.getKey(3) == null : key4.equals(multi.getKey(3)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Check to ensure that input keys are valid MultiKey objects.\n     *\n     * @param key  the key to check\n     */\n    protected void checkKey(final MultiKey<?> key) {\n        if (key == null) {\n            throw new NullPointerException(\"Key must not be null\");\n        }\n    }\n\n    /**\n     * Clones the map without cloning the keys or values.\n     *\n     * @return a shallow clone\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public MultiKeyMap<K, V> clone() {\n        try {\n            return (MultiKeyMap<K, V>) super.clone();\n        } catch (final CloneNotSupportedException e) {\n            throw new InternalError();\n        }\n    }\n\n    /**\n     * Puts the key and value into the map, where the key must be a non-null\n     * MultiKey object.\n     *\n     * @param key  the non-null MultiKey object\n     * @param value  the value to store\n     * @return the previous value for the key\n     * @throws NullPointerException if the key is null\n     * @throws ClassCastException if the key is not a MultiKey\n     */\n    @Override\n    public V put(final MultiKey<? extends K> key, final V value) {\n        checkKey(key);\n        return super.put(key, value);\n    }\n\n    /**\n     * Copies all of the keys and values from the specified map to this map.\n     * Each key must be non-null and a MultiKey object.\n     *\n     * @param mapToCopy  to this map\n     * @throws NullPointerException if the mapToCopy or any key within is null\n     * @throws ClassCastException if any key in mapToCopy is not a MultiKey\n     */\n    @Override\n    public void putAll(final Map<? extends MultiKey<? extends K>, ? extends V> mapToCopy) {\n        for (final MultiKey<? extends K> key : mapToCopy.keySet()) {\n            checkKey(key);\n        }\n        super.putAll(mapToCopy);\n    }\n\n    //-----------------------------------------------------------------------\n    @Override\n    public MapIterator<MultiKey<? extends K>, V> mapIterator() {\n        return decorated().mapIterator();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected AbstractHashedMap<MultiKey<? extends K>, V> decorated() {\n        return (AbstractHashedMap<MultiKey<? extends K>, V>) super.decorated();\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Write the map out using a custom routine.\n     *\n     * @param out  the output stream\n     * @throws IOException\n     */\n    private void writeObject(final ObjectOutputStream out) throws IOException {\n        out.defaultWriteObject();\n        out.writeObject(map);\n    }\n\n    /**\n     * Read the map in using a custom routine.\n     *\n     * @param in  the input stream\n     * @throws IOException\n     * @throws ClassNotFoundException\n     */\n    @SuppressWarnings(\"unchecked\")\n    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n        in.defaultReadObject();\n        map = (Map<MultiKey<? extends K>, V>) in.readObject();\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "out", "java.io", "ObjectOutputStream" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "containsValue", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean containsValue(Object arg0)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final V value)" ], [ "get", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public V get(Object arg0)" ], [ "remove", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public V remove(Object arg0)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "computeIfPresent", "java.util", "Map", "public default V computeIfPresent(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "put", "org.apache.commons.collections4", "Put", "public abstract Object put(K arg0, V arg1)" ], [ "toString", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public String toString()" ], [ "mapIterator", "org.apache.commons.collections4.map", "MultiKeyMap", "public MapIterator<MultiKey<? extends K>, V> mapIterator()" ], [ "remove", "java.util", "Map", "public default boolean remove(Object arg0, Object arg1)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3)" ], [ "entrySet", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Set<Map.Entry<K, V>> entrySet()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "values", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Collection<V> values()" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2)" ], [ "isEmpty", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean isEmpty()" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3)" ], [ "mapIterator", "org.apache.commons.collections4.map", "AbstractIterableMap", "public MapIterator<K, V> mapIterator()" ], [ "containsKey", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean containsKey(Object arg0)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2)" ], [ "clone", "org.apache.commons.collections4.map", "MultiKeyMap", "public MultiKeyMap<K, V> clone()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2, final Object key3)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "getOrDefault", "java.util", "Map", "public default V getOrDefault(Object arg0, V arg1)" ], [ "merge", "java.util", "Map", "public default V merge(K arg0, V arg1, BiFunction<? super V, ? super V, ? extends V> arg2)" ], [ "size", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int size()" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final V value)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "hashCode", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int hashCode()" ], [ "keySet", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Set<K> keySet()" ], [ "compute", "java.util", "Map", "public default V compute(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1)" ], [ "replace", "java.util", "Map", "public default V replace(K arg0, V arg1)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3)" ], [ "decorated", "org.apache.commons.collections4.map", "MultiKeyMap", "protected AbstractHashedMap<MultiKey<? extends K>, V> decorated()" ], [ "decorated", "org.apache.commons.collections4.map", "AbstractMapDecorator", "protected Map<K, V> decorated()" ], [ "computeIfAbsent", "java.util", "Map", "public default V computeIfAbsent(K arg0, Function<? super K, ? extends V> arg1)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final K key4, final K key5, final V value)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final K key4, final V value)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final MultiKey<? extends K> key, final V value)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "equals", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean equals(Object arg0)" ], [ "putIfAbsent", "java.util", "Map", "public default V putIfAbsent(K arg0, V arg1)" ], [ "replace", "java.util", "Map", "public default boolean replace(K arg0, V arg1, V arg2)" ], [ "getProtocolVersion", "java.io", "ObjectOutputStream", "int getProtocolVersion()" ], [ "putFields", "java.io", "ObjectOutputStream", "public ObjectOutputStream.PutField putFields() throws IOException" ], [ "enableReplaceObject", "java.io", "ObjectOutputStream", "protected boolean enableReplaceObject(boolean arg0) throws SecurityException" ], [ "replaceObject", "java.io", "ObjectOutputStream", "protected Object replaceObject(Object arg0) throws IOException" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "toString", "java.lang", "Object", "public String toString()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "map", "org.apache.commons.collections4.map", "AbstractMapDecorator", "Map<MultiKey<? extends K>, V> map;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 8294,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4.map",
  "className" : "MultiKeyMap",
  "javadocTag" : "@param in the input stream",
  "methodJavadoc" : "    /**\n     * Read the map in using a custom routine.\n     *\n     * @param in  the input stream\n     * @throws IOException\n     * @throws ClassNotFoundException\n     */",
  "methodSourceCode" : "private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException{\n    in.defaultReadObject();\n    map = (Map<MultiKey<? extends K>, V>) in.readObject();\n}",
  "classJavadoc" : "/**\n * A <code>Map</code> implementation that uses multiple keys to map the value.\n * <p>\n * This class is the most efficient way to uses multiple keys to map to a value.\n * The best way to use this class is via the additional map-style methods.\n * These provide <code>get</code>, <code>containsKey</code>, <code>put</code> and\n * <code>remove</code> for individual keys which operate without extra object creation.\n * <p>\n * The additional methods are the main interface of this map.\n * As such, you will not normally hold this map in a variable of type <code>Map</code>.\n * <p>\n * The normal map methods take in and return a {@link MultiKey}.\n * If you try to use <code>put()</code> with any other object type a\n * <code>ClassCastException</code> is thrown. If you try to use <code>null</code> as\n * the key in <code>put()</code> a <code>NullPointerException</code> is thrown.\n * <p>\n * This map is implemented as a decorator of a <code>AbstractHashedMap</code> which\n * enables extra behaviour to be added easily.\n * <ul>\n * <li><code>MultiKeyMap.decorate(new LinkedMap())</code> creates an ordered map.\n * <li><code>MultiKeyMap.decorate(new LRUMap())</code> creates an least recently used map.\n * <li><code>MultiKeyMap.decorate(new ReferenceMap())</code> creates a garbage collector sensitive map.\n * </ul>\n * Note that <code>IdentityMap</code> and <code>ReferenceIdentityMap</code> are unsuitable\n * for use as the key comparison would work on the whole MultiKey, not the elements within.\n * <p>\n * As an example, consider a least recently used cache that uses a String airline code\n * and a Locale to lookup the airline's name:\n * <pre>\n * private MultiKeyMap cache = MultiKeyMap.multiKeyMap(new LRUMap(50));\n *\n * public String getAirlineName(String code, String locale) {\n *   String name = (String) cache.get(code, locale);\n *   if (name == null) {\n *     name = getAirlineNameFromDB(code, locale);\n *     cache.put(code, locale, name);\n *   }\n *   return name;\n * }\n * </pre>\n * <p>\n * <strong>Note that MultiKeyMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. This class may throw exceptions when accessed\n * by concurrent threads without synchronization.\n *\n * @since 3.1\n * @version $Id: MultiKeyMap.java 1686855 2015-06-22 13:00:27Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4.map;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.MapIterator;\nimport org.apache.commons.collections4.keyvalue.MultiKey;\n\n/**\n * A <code>Map</code> implementation that uses multiple keys to map the value.\n * <p>\n * This class is the most efficient way to uses multiple keys to map to a value.\n * The best way to use this class is via the additional map-style methods.\n * These provide <code>get</code>, <code>containsKey</code>, <code>put</code> and\n * <code>remove</code> for individual keys which operate without extra object creation.\n * <p>\n * The additional methods are the main interface of this map.\n * As such, you will not normally hold this map in a variable of type <code>Map</code>.\n * <p>\n * The normal map methods take in and return a {@link MultiKey}.\n * If you try to use <code>put()</code> with any other object type a\n * <code>ClassCastException</code> is thrown. If you try to use <code>null</code> as\n * the key in <code>put()</code> a <code>NullPointerException</code> is thrown.\n * <p>\n * This map is implemented as a decorator of a <code>AbstractHashedMap</code> which\n * enables extra behaviour to be added easily.\n * <ul>\n * <li><code>MultiKeyMap.decorate(new LinkedMap())</code> creates an ordered map.\n * <li><code>MultiKeyMap.decorate(new LRUMap())</code> creates an least recently used map.\n * <li><code>MultiKeyMap.decorate(new ReferenceMap())</code> creates a garbage collector sensitive map.\n * </ul>\n * Note that <code>IdentityMap</code> and <code>ReferenceIdentityMap</code> are unsuitable\n * for use as the key comparison would work on the whole MultiKey, not the elements within.\n * <p>\n * As an example, consider a least recently used cache that uses a String airline code\n * and a Locale to lookup the airline's name:\n * <pre>\n * private MultiKeyMap cache = MultiKeyMap.multiKeyMap(new LRUMap(50));\n *\n * public String getAirlineName(String code, String locale) {\n *   String name = (String) cache.get(code, locale);\n *   if (name == null) {\n *     name = getAirlineNameFromDB(code, locale);\n *     cache.put(code, locale, name);\n *   }\n *   return name;\n * }\n * </pre>\n * <p>\n * <strong>Note that MultiKeyMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. This class may throw exceptions when accessed\n * by concurrent threads without synchronization.\n *\n * @since 3.1\n * @version $Id: MultiKeyMap.java 1686855 2015-06-22 13:00:27Z tn $\n */\npublic class MultiKeyMap<K, V> extends AbstractMapDecorator<MultiKey<? extends K>, V>\n        implements Serializable, Cloneable {\n\n    /** Serialisation version */\n    private static final long serialVersionUID = -1788199231038721040L;\n\n    //-----------------------------------------------------------------------\n    /**\n     * Decorates the specified map to add the MultiKeyMap API and fast query.\n     * The map must not be null and must be empty.\n     *\n     * @param <K>  the key type\n     * @param <V>  the value type\n     * @param map  the map to decorate, not null\n     * @return a new multi key map\n     * @throws NullPointerException if map is null\n     * @throws IllegalArgumentException if the map is not empty\n     * @since 4.0\n     */\n    public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map) {\n        if (map == null) {\n            throw new NullPointerException(\"Map must not be null\");\n        }\n        if (map.size() > 0) {\n            throw new IllegalArgumentException(\"Map must be empty\");\n        }\n        return new MultiKeyMap<K, V>(map);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Constructs a new MultiKeyMap that decorates a <code>HashedMap</code>.\n     */\n    public MultiKeyMap() {\n        this(new HashedMap<MultiKey<? extends K>, V>());\n    }\n\n    /**\n     * Constructor that decorates the specified map and is called from\n     * {@link #multiKeyMap(AbstractHashedMap)}.\n     * The map must not be null and should be empty or only contain valid keys.\n     * This constructor performs no validation.\n     *\n     * @param map  the map to decorate\n     */\n    protected MultiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map) {\n        super(map);\n        this.map = map;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final V value) {\n        final int hashCode = hash(key1, key2);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n            final Object key1, final Object key2) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 2 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final V value) {\n        final int hashCode = hash(key1, key2, key3);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n                                 final Object key1, final Object key2, final Object key3) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 3 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final K key4, final V value) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3, key4), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3, final Object key4) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        if (key4 != null) {\n            h ^= key4.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n                                 final Object key1, final Object key2, final Object key3, final Object key4) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 4 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2))) &&\n            (key4 == multi.getKey(3) || key4 != null && key4.equals(multi.getKey(3)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3,\n                               final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final K key4, final K key5, final V value) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3, key4, key5), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3,\n                            final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        if (key4 != null) {\n            h ^= key4.hashCode();\n        }\n        if (key5 != null) {\n            h ^= key5.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n            final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 5 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2))) &&\n            (key4 == multi.getKey(3) || key4 != null && key4.equals(multi.getKey(3))) &&\n            (key5 == multi.getKey(4) || key5 != null && key5.equals(multi.getKey(4)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Removes all mappings where the first key is that specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has one or more keys, and the first matches that specified.\n     *\n     * @param key1  the first key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 1 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first two keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has two or more keys, and the first two match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 2 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first three keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has three or more keys, and the first three match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2, final Object key3) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 3 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1))) &&\n                (key3 == null ? multi.getKey(2) == null : key3.equals(multi.getKey(2)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first four keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has four or more keys, and the first four match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2, final Object key3, final Object key4) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 4 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1))) &&\n                (key3 == null ? multi.getKey(2) == null : key3.equals(multi.getKey(2))) &&\n                (key4 == null ? multi.getKey(3) == null : key4.equals(multi.getKey(3)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Check to ensure that input keys are valid MultiKey objects.\n     *\n     * @param key  the key to check\n     */\n    protected void checkKey(final MultiKey<?> key) {\n        if (key == null) {\n            throw new NullPointerException(\"Key must not be null\");\n        }\n    }\n\n    /**\n     * Clones the map without cloning the keys or values.\n     *\n     * @return a shallow clone\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public MultiKeyMap<K, V> clone() {\n        try {\n            return (MultiKeyMap<K, V>) super.clone();\n        } catch (final CloneNotSupportedException e) {\n            throw new InternalError();\n        }\n    }\n\n    /**\n     * Puts the key and value into the map, where the key must be a non-null\n     * MultiKey object.\n     *\n     * @param key  the non-null MultiKey object\n     * @param value  the value to store\n     * @return the previous value for the key\n     * @throws NullPointerException if the key is null\n     * @throws ClassCastException if the key is not a MultiKey\n     */\n    @Override\n    public V put(final MultiKey<? extends K> key, final V value) {\n        checkKey(key);\n        return super.put(key, value);\n    }\n\n    /**\n     * Copies all of the keys and values from the specified map to this map.\n     * Each key must be non-null and a MultiKey object.\n     *\n     * @param mapToCopy  to this map\n     * @throws NullPointerException if the mapToCopy or any key within is null\n     * @throws ClassCastException if any key in mapToCopy is not a MultiKey\n     */\n    @Override\n    public void putAll(final Map<? extends MultiKey<? extends K>, ? extends V> mapToCopy) {\n        for (final MultiKey<? extends K> key : mapToCopy.keySet()) {\n            checkKey(key);\n        }\n        super.putAll(mapToCopy);\n    }\n\n    //-----------------------------------------------------------------------\n    @Override\n    public MapIterator<MultiKey<? extends K>, V> mapIterator() {\n        return decorated().mapIterator();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected AbstractHashedMap<MultiKey<? extends K>, V> decorated() {\n        return (AbstractHashedMap<MultiKey<? extends K>, V>) super.decorated();\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Write the map out using a custom routine.\n     *\n     * @param out  the output stream\n     * @throws IOException\n     */\n    private void writeObject(final ObjectOutputStream out) throws IOException {\n        out.defaultWriteObject();\n        out.writeObject(map);\n    }\n\n    /**\n     * Read the map in using a custom routine.\n     *\n     * @param in  the input stream\n     * @throws IOException\n     * @throws ClassNotFoundException\n     */\n    @SuppressWarnings(\"unchecked\")\n    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n        in.defaultReadObject();\n        map = (Map<MultiKey<? extends K>, V>) in.readObject();\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "in", "java.io", "ObjectInputStream" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "values", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Collection<V> values()" ], [ "putIfAbsent", "java.util", "Map", "public default V putIfAbsent(K arg0, V arg1)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2)" ], [ "mapIterator", "org.apache.commons.collections4.map", "AbstractIterableMap", "public MapIterator<K, V> mapIterator()" ], [ "toString", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public String toString()" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final K key4, final V value)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2, final Object key3)" ], [ "size", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int size()" ], [ "containsKey", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean containsKey(Object arg0)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "clone", "org.apache.commons.collections4.map", "MultiKeyMap", "public MultiKeyMap<K, V> clone()" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3)" ], [ "entrySet", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Set<Map.Entry<K, V>> entrySet()" ], [ "containsValue", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean containsValue(Object arg0)" ], [ "replace", "java.util", "Map", "public default boolean replace(K arg0, V arg1, V arg2)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "isEmpty", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean isEmpty()" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final MultiKey<? extends K> key, final V value)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final V value)" ], [ "replace", "java.util", "Map", "public default V replace(K arg0, V arg1)" ], [ "put", "org.apache.commons.collections4", "Put", "public abstract Object put(K arg0, V arg1)" ], [ "getOrDefault", "java.util", "Map", "public default V getOrDefault(Object arg0, V arg1)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final K key4, final K key5, final V value)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1)" ], [ "hashCode", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int hashCode()" ], [ "computeIfAbsent", "java.util", "Map", "public default V computeIfAbsent(K arg0, Function<? super K, ? extends V> arg1)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "remove", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public V remove(Object arg0)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "equals", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean equals(Object arg0)" ], [ "merge", "java.util", "Map", "public default V merge(K arg0, V arg1, BiFunction<? super V, ? super V, ? extends V> arg2)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2)" ], [ "keySet", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Set<K> keySet()" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3)" ], [ "computeIfPresent", "java.util", "Map", "public default V computeIfPresent(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "mapIterator", "org.apache.commons.collections4.map", "MultiKeyMap", "public MapIterator<MultiKey<? extends K>, V> mapIterator()" ], [ "get", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public V get(Object arg0)" ], [ "remove", "java.util", "Map", "public default boolean remove(Object arg0, Object arg1)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2)" ], [ "decorated", "org.apache.commons.collections4.map", "AbstractMapDecorator", "protected Map<K, V> decorated()" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final V value)" ], [ "decorated", "org.apache.commons.collections4.map", "MultiKeyMap", "protected AbstractHashedMap<MultiKey<? extends K>, V> decorated()" ], [ "compute", "java.util", "Map", "public default V compute(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "enableResolveObject", "java.io", "ObjectInputStream", "protected boolean enableResolveObject(boolean arg0) throws SecurityException" ], [ "read", "java.io", "ObjectInputStream", "public int read() throws IOException" ], [ "readLine", "java.io", "ObjectInputStream", "public String readLine() throws IOException" ], [ "readUnshared", "java.io", "ObjectInputStream", "public Object readUnshared() throws IOException, ClassNotFoundException" ], [ "read", "java.io", "ObjectInputStream", "public int read(byte[] arg0, int arg1, int arg2) throws IOException" ], [ "readUnsignedByte", "java.io", "ObjectInputStream", "public int readUnsignedByte() throws IOException" ], [ "resolveProxyClass", "java.io", "ObjectInputStream", "protected Class<? extends Object> resolveProxyClass(String[] arg0) throws IOException, ClassNotFoundException" ], [ "skipBytes", "java.io", "ObjectInputStream", "public int skipBytes(int arg0) throws IOException" ], [ "readClassDescriptor", "java.io", "ObjectInputStream", "protected ObjectStreamClass readClassDescriptor() throws IOException, ClassNotFoundException" ], [ "readUTF", "java.io", "ObjectInputStream", "public String readUTF() throws IOException" ], [ "readBoolean", "java.io", "ObjectInputStream", "public boolean readBoolean() throws IOException" ], [ "readByte", "java.io", "ObjectInputStream", "public byte readByte() throws IOException" ], [ "readDouble", "java.io", "ObjectInputStream", "public double readDouble() throws IOException" ], [ "readFields", "java.io", "ObjectInputStream", "public ObjectInputStream.GetField readFields() throws IOException, ClassNotFoundException" ], [ "readShort", "java.io", "ObjectInputStream", "public short readShort() throws IOException" ], [ "resolveObject", "java.io", "ObjectInputStream", "protected Object resolveObject(Object arg0) throws IOException" ], [ "readInt", "java.io", "ObjectInputStream", "public int readInt() throws IOException" ], [ "getObjectInputFilter", "java.io", "ObjectInputStream", "public final ObjectInputFilter getObjectInputFilter()" ], [ "readObject", "java.io", "ObjectInputStream", "public final Object readObject() throws IOException, ClassNotFoundException" ], [ "readUnsignedShort", "java.io", "ObjectInputStream", "public int readUnsignedShort() throws IOException" ], [ "readChar", "java.io", "ObjectInputStream", "public char readChar() throws IOException" ], [ "resolveClass", "java.io", "ObjectInputStream", "protected Class<? extends Object> resolveClass(ObjectStreamClass arg0) throws IOException, ClassNotFoundException" ], [ "readTypeString", "java.io", "ObjectInputStream", "String readTypeString() throws IOException" ], [ "available", "java.io", "ObjectInputStream", "public int available() throws IOException" ], [ "readObjectOverride", "java.io", "ObjectInputStream", "protected Object readObjectOverride() throws IOException, ClassNotFoundException" ], [ "readFloat", "java.io", "ObjectInputStream", "public float readFloat() throws IOException" ], [ "readLong", "java.io", "ObjectInputStream", "public long readLong() throws IOException" ], [ "transferTo", "java.io", "InputStream", "public long transferTo(OutputStream arg0) throws IOException" ], [ "available", "java.io", "InputStream", "public int available() throws IOException" ], [ "read", "java.io", "InputStream", "public int read(byte[] arg0, int arg1, int arg2) throws IOException" ], [ "markSupported", "java.io", "InputStream", "public boolean markSupported()" ], [ "skip", "java.io", "InputStream", "public long skip(long arg0) throws IOException" ], [ "read", "java.io", "InputStream", "public int read(byte[] arg0) throws IOException" ], [ "readAllBytes", "java.io", "InputStream", "public byte[] readAllBytes() throws IOException" ], [ "read", "java.io", "InputStream", "public abstract int read() throws IOException" ], [ "readNBytes", "java.io", "InputStream", "public int readNBytes(byte[] arg0, int arg1, int arg2) throws IOException" ], [ "readNBytes", "java.io", "InputStream", "public byte[] readNBytes(int arg0) throws IOException" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "available", "java.io", "ObjectInput", "public abstract int available() throws IOException" ], [ "read", "java.io", "ObjectInput", "public abstract int read(byte[] arg0) throws IOException" ], [ "readObject", "java.io", "ObjectInput", "public abstract Object readObject() throws ClassNotFoundException, IOException" ], [ "read", "java.io", "ObjectInput", "public abstract int read() throws IOException" ], [ "read", "java.io", "ObjectInput", "public abstract int read(byte[] arg0, int arg1, int arg2) throws IOException" ], [ "skip", "java.io", "ObjectInput", "public abstract long skip(long arg0) throws IOException" ], [ "readInt", "java.io", "DataInput", "public abstract int readInt() throws IOException" ], [ "readUnsignedShort", "java.io", "DataInput", "public abstract int readUnsignedShort() throws IOException" ], [ "skipBytes", "java.io", "DataInput", "public abstract int skipBytes(int arg0) throws IOException" ], [ "readDouble", "java.io", "DataInput", "public abstract double readDouble() throws IOException" ], [ "readBoolean", "java.io", "DataInput", "public abstract boolean readBoolean() throws IOException" ], [ "readUnsignedByte", "java.io", "DataInput", "public abstract int readUnsignedByte() throws IOException" ], [ "readFloat", "java.io", "DataInput", "public abstract float readFloat() throws IOException" ], [ "readByte", "java.io", "DataInput", "public abstract byte readByte() throws IOException" ], [ "readChar", "java.io", "DataInput", "public abstract char readChar() throws IOException" ], [ "readLong", "java.io", "DataInput", "public abstract long readLong() throws IOException" ], [ "readLine", "java.io", "DataInput", "public abstract String readLine() throws IOException" ], [ "readUTF", "java.io", "DataInput", "public abstract String readUTF() throws IOException" ], [ "readShort", "java.io", "DataInput", "public abstract short readShort() throws IOException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "map", "org.apache.commons.collections4.map", "AbstractMapDecorator", "Map<MultiKey<? extends K>, V> map;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 8295,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4.map",
  "className" : "MultiKeyMap",
  "javadocTag" : "@throws IOException",
  "methodJavadoc" : "    /**\n     * Read the map in using a custom routine.\n     *\n     * @param in  the input stream\n     * @throws IOException\n     * @throws ClassNotFoundException\n     */",
  "methodSourceCode" : "private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException{\n    in.defaultReadObject();\n    map = (Map<MultiKey<? extends K>, V>) in.readObject();\n}",
  "classJavadoc" : "/**\n * A <code>Map</code> implementation that uses multiple keys to map the value.\n * <p>\n * This class is the most efficient way to uses multiple keys to map to a value.\n * The best way to use this class is via the additional map-style methods.\n * These provide <code>get</code>, <code>containsKey</code>, <code>put</code> and\n * <code>remove</code> for individual keys which operate without extra object creation.\n * <p>\n * The additional methods are the main interface of this map.\n * As such, you will not normally hold this map in a variable of type <code>Map</code>.\n * <p>\n * The normal map methods take in and return a {@link MultiKey}.\n * If you try to use <code>put()</code> with any other object type a\n * <code>ClassCastException</code> is thrown. If you try to use <code>null</code> as\n * the key in <code>put()</code> a <code>NullPointerException</code> is thrown.\n * <p>\n * This map is implemented as a decorator of a <code>AbstractHashedMap</code> which\n * enables extra behaviour to be added easily.\n * <ul>\n * <li><code>MultiKeyMap.decorate(new LinkedMap())</code> creates an ordered map.\n * <li><code>MultiKeyMap.decorate(new LRUMap())</code> creates an least recently used map.\n * <li><code>MultiKeyMap.decorate(new ReferenceMap())</code> creates a garbage collector sensitive map.\n * </ul>\n * Note that <code>IdentityMap</code> and <code>ReferenceIdentityMap</code> are unsuitable\n * for use as the key comparison would work on the whole MultiKey, not the elements within.\n * <p>\n * As an example, consider a least recently used cache that uses a String airline code\n * and a Locale to lookup the airline's name:\n * <pre>\n * private MultiKeyMap cache = MultiKeyMap.multiKeyMap(new LRUMap(50));\n *\n * public String getAirlineName(String code, String locale) {\n *   String name = (String) cache.get(code, locale);\n *   if (name == null) {\n *     name = getAirlineNameFromDB(code, locale);\n *     cache.put(code, locale, name);\n *   }\n *   return name;\n * }\n * </pre>\n * <p>\n * <strong>Note that MultiKeyMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. This class may throw exceptions when accessed\n * by concurrent threads without synchronization.\n *\n * @since 3.1\n * @version $Id: MultiKeyMap.java 1686855 2015-06-22 13:00:27Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4.map;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.MapIterator;\nimport org.apache.commons.collections4.keyvalue.MultiKey;\n\n/**\n * A <code>Map</code> implementation that uses multiple keys to map the value.\n * <p>\n * This class is the most efficient way to uses multiple keys to map to a value.\n * The best way to use this class is via the additional map-style methods.\n * These provide <code>get</code>, <code>containsKey</code>, <code>put</code> and\n * <code>remove</code> for individual keys which operate without extra object creation.\n * <p>\n * The additional methods are the main interface of this map.\n * As such, you will not normally hold this map in a variable of type <code>Map</code>.\n * <p>\n * The normal map methods take in and return a {@link MultiKey}.\n * If you try to use <code>put()</code> with any other object type a\n * <code>ClassCastException</code> is thrown. If you try to use <code>null</code> as\n * the key in <code>put()</code> a <code>NullPointerException</code> is thrown.\n * <p>\n * This map is implemented as a decorator of a <code>AbstractHashedMap</code> which\n * enables extra behaviour to be added easily.\n * <ul>\n * <li><code>MultiKeyMap.decorate(new LinkedMap())</code> creates an ordered map.\n * <li><code>MultiKeyMap.decorate(new LRUMap())</code> creates an least recently used map.\n * <li><code>MultiKeyMap.decorate(new ReferenceMap())</code> creates a garbage collector sensitive map.\n * </ul>\n * Note that <code>IdentityMap</code> and <code>ReferenceIdentityMap</code> are unsuitable\n * for use as the key comparison would work on the whole MultiKey, not the elements within.\n * <p>\n * As an example, consider a least recently used cache that uses a String airline code\n * and a Locale to lookup the airline's name:\n * <pre>\n * private MultiKeyMap cache = MultiKeyMap.multiKeyMap(new LRUMap(50));\n *\n * public String getAirlineName(String code, String locale) {\n *   String name = (String) cache.get(code, locale);\n *   if (name == null) {\n *     name = getAirlineNameFromDB(code, locale);\n *     cache.put(code, locale, name);\n *   }\n *   return name;\n * }\n * </pre>\n * <p>\n * <strong>Note that MultiKeyMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. This class may throw exceptions when accessed\n * by concurrent threads without synchronization.\n *\n * @since 3.1\n * @version $Id: MultiKeyMap.java 1686855 2015-06-22 13:00:27Z tn $\n */\npublic class MultiKeyMap<K, V> extends AbstractMapDecorator<MultiKey<? extends K>, V>\n        implements Serializable, Cloneable {\n\n    /** Serialisation version */\n    private static final long serialVersionUID = -1788199231038721040L;\n\n    //-----------------------------------------------------------------------\n    /**\n     * Decorates the specified map to add the MultiKeyMap API and fast query.\n     * The map must not be null and must be empty.\n     *\n     * @param <K>  the key type\n     * @param <V>  the value type\n     * @param map  the map to decorate, not null\n     * @return a new multi key map\n     * @throws NullPointerException if map is null\n     * @throws IllegalArgumentException if the map is not empty\n     * @since 4.0\n     */\n    public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map) {\n        if (map == null) {\n            throw new NullPointerException(\"Map must not be null\");\n        }\n        if (map.size() > 0) {\n            throw new IllegalArgumentException(\"Map must be empty\");\n        }\n        return new MultiKeyMap<K, V>(map);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Constructs a new MultiKeyMap that decorates a <code>HashedMap</code>.\n     */\n    public MultiKeyMap() {\n        this(new HashedMap<MultiKey<? extends K>, V>());\n    }\n\n    /**\n     * Constructor that decorates the specified map and is called from\n     * {@link #multiKeyMap(AbstractHashedMap)}.\n     * The map must not be null and should be empty or only contain valid keys.\n     * This constructor performs no validation.\n     *\n     * @param map  the map to decorate\n     */\n    protected MultiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map) {\n        super(map);\n        this.map = map;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final V value) {\n        final int hashCode = hash(key1, key2);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n            final Object key1, final Object key2) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 2 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final V value) {\n        final int hashCode = hash(key1, key2, key3);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n                                 final Object key1, final Object key2, final Object key3) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 3 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final K key4, final V value) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3, key4), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3, final Object key4) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        if (key4 != null) {\n            h ^= key4.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n                                 final Object key1, final Object key2, final Object key3, final Object key4) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 4 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2))) &&\n            (key4 == multi.getKey(3) || key4 != null && key4.equals(multi.getKey(3)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3,\n                               final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final K key4, final K key5, final V value) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3, key4, key5), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3,\n                            final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        if (key4 != null) {\n            h ^= key4.hashCode();\n        }\n        if (key5 != null) {\n            h ^= key5.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n            final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 5 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2))) &&\n            (key4 == multi.getKey(3) || key4 != null && key4.equals(multi.getKey(3))) &&\n            (key5 == multi.getKey(4) || key5 != null && key5.equals(multi.getKey(4)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Removes all mappings where the first key is that specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has one or more keys, and the first matches that specified.\n     *\n     * @param key1  the first key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 1 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first two keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has two or more keys, and the first two match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 2 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first three keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has three or more keys, and the first three match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2, final Object key3) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 3 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1))) &&\n                (key3 == null ? multi.getKey(2) == null : key3.equals(multi.getKey(2)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first four keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has four or more keys, and the first four match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2, final Object key3, final Object key4) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 4 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1))) &&\n                (key3 == null ? multi.getKey(2) == null : key3.equals(multi.getKey(2))) &&\n                (key4 == null ? multi.getKey(3) == null : key4.equals(multi.getKey(3)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Check to ensure that input keys are valid MultiKey objects.\n     *\n     * @param key  the key to check\n     */\n    protected void checkKey(final MultiKey<?> key) {\n        if (key == null) {\n            throw new NullPointerException(\"Key must not be null\");\n        }\n    }\n\n    /**\n     * Clones the map without cloning the keys or values.\n     *\n     * @return a shallow clone\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public MultiKeyMap<K, V> clone() {\n        try {\n            return (MultiKeyMap<K, V>) super.clone();\n        } catch (final CloneNotSupportedException e) {\n            throw new InternalError();\n        }\n    }\n\n    /**\n     * Puts the key and value into the map, where the key must be a non-null\n     * MultiKey object.\n     *\n     * @param key  the non-null MultiKey object\n     * @param value  the value to store\n     * @return the previous value for the key\n     * @throws NullPointerException if the key is null\n     * @throws ClassCastException if the key is not a MultiKey\n     */\n    @Override\n    public V put(final MultiKey<? extends K> key, final V value) {\n        checkKey(key);\n        return super.put(key, value);\n    }\n\n    /**\n     * Copies all of the keys and values from the specified map to this map.\n     * Each key must be non-null and a MultiKey object.\n     *\n     * @param mapToCopy  to this map\n     * @throws NullPointerException if the mapToCopy or any key within is null\n     * @throws ClassCastException if any key in mapToCopy is not a MultiKey\n     */\n    @Override\n    public void putAll(final Map<? extends MultiKey<? extends K>, ? extends V> mapToCopy) {\n        for (final MultiKey<? extends K> key : mapToCopy.keySet()) {\n            checkKey(key);\n        }\n        super.putAll(mapToCopy);\n    }\n\n    //-----------------------------------------------------------------------\n    @Override\n    public MapIterator<MultiKey<? extends K>, V> mapIterator() {\n        return decorated().mapIterator();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected AbstractHashedMap<MultiKey<? extends K>, V> decorated() {\n        return (AbstractHashedMap<MultiKey<? extends K>, V>) super.decorated();\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Write the map out using a custom routine.\n     *\n     * @param out  the output stream\n     * @throws IOException\n     */\n    private void writeObject(final ObjectOutputStream out) throws IOException {\n        out.defaultWriteObject();\n        out.writeObject(map);\n    }\n\n    /**\n     * Read the map in using a custom routine.\n     *\n     * @param in  the input stream\n     * @throws IOException\n     * @throws ClassNotFoundException\n     */\n    @SuppressWarnings(\"unchecked\")\n    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n        in.defaultReadObject();\n        map = (Map<MultiKey<? extends K>, V>) in.readObject();\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "in", "java.io", "ObjectInputStream" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "decorated", "org.apache.commons.collections4.map", "AbstractMapDecorator", "protected Map<K, V> decorated()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "putIfAbsent", "java.util", "Map", "public default V putIfAbsent(K arg0, V arg1)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final V value)" ], [ "decorated", "org.apache.commons.collections4.map", "MultiKeyMap", "protected AbstractHashedMap<MultiKey<? extends K>, V> decorated()" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "get", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public V get(Object arg0)" ], [ "replace", "java.util", "Map", "public default boolean replace(K arg0, V arg1, V arg2)" ], [ "computeIfPresent", "java.util", "Map", "public default V computeIfPresent(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "equals", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean equals(Object arg0)" ], [ "compute", "java.util", "Map", "public default V compute(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "isEmpty", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean isEmpty()" ], [ "entrySet", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Set<Map.Entry<K, V>> entrySet()" ], [ "computeIfAbsent", "java.util", "Map", "public default V computeIfAbsent(K arg0, Function<? super K, ? extends V> arg1)" ], [ "toString", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public String toString()" ], [ "values", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Collection<V> values()" ], [ "getOrDefault", "java.util", "Map", "public default V getOrDefault(Object arg0, V arg1)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final V value)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "mapIterator", "org.apache.commons.collections4.map", "MultiKeyMap", "public MapIterator<MultiKey<? extends K>, V> mapIterator()" ], [ "remove", "java.util", "Map", "public default boolean remove(Object arg0, Object arg1)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3)" ], [ "containsKey", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean containsKey(Object arg0)" ], [ "mapIterator", "org.apache.commons.collections4.map", "AbstractIterableMap", "public MapIterator<K, V> mapIterator()" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final K key4, final K key5, final V value)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "containsValue", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean containsValue(Object arg0)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final K key4, final V value)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final MultiKey<? extends K> key, final V value)" ], [ "size", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int size()" ], [ "replace", "java.util", "Map", "public default V replace(K arg0, V arg1)" ], [ "put", "org.apache.commons.collections4", "Put", "public abstract Object put(K arg0, V arg1)" ], [ "merge", "java.util", "Map", "public default V merge(K arg0, V arg1, BiFunction<? super V, ? super V, ? extends V> arg2)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2, final Object key3)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "hashCode", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int hashCode()" ], [ "keySet", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Set<K> keySet()" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2)" ], [ "clone", "org.apache.commons.collections4.map", "MultiKeyMap", "public MultiKeyMap<K, V> clone()" ], [ "remove", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public V remove(Object arg0)" ], [ "readUnsignedByte", "java.io", "ObjectInputStream", "public int readUnsignedByte() throws IOException" ], [ "resolveObject", "java.io", "ObjectInputStream", "protected Object resolveObject(Object arg0) throws IOException" ], [ "readClassDescriptor", "java.io", "ObjectInputStream", "protected ObjectStreamClass readClassDescriptor() throws IOException, ClassNotFoundException" ], [ "resolveClass", "java.io", "ObjectInputStream", "protected Class<? extends Object> resolveClass(ObjectStreamClass arg0) throws IOException, ClassNotFoundException" ], [ "getObjectInputFilter", "java.io", "ObjectInputStream", "public final ObjectInputFilter getObjectInputFilter()" ], [ "readFields", "java.io", "ObjectInputStream", "public ObjectInputStream.GetField readFields() throws IOException, ClassNotFoundException" ], [ "readUnsignedShort", "java.io", "ObjectInputStream", "public int readUnsignedShort() throws IOException" ], [ "read", "java.io", "ObjectInputStream", "public int read(byte[] arg0, int arg1, int arg2) throws IOException" ], [ "readObjectOverride", "java.io", "ObjectInputStream", "protected Object readObjectOverride() throws IOException, ClassNotFoundException" ], [ "readLong", "java.io", "ObjectInputStream", "public long readLong() throws IOException" ], [ "readBoolean", "java.io", "ObjectInputStream", "public boolean readBoolean() throws IOException" ], [ "readFloat", "java.io", "ObjectInputStream", "public float readFloat() throws IOException" ], [ "skipBytes", "java.io", "ObjectInputStream", "public int skipBytes(int arg0) throws IOException" ], [ "readUnshared", "java.io", "ObjectInputStream", "public Object readUnshared() throws IOException, ClassNotFoundException" ], [ "available", "java.io", "ObjectInputStream", "public int available() throws IOException" ], [ "readShort", "java.io", "ObjectInputStream", "public short readShort() throws IOException" ], [ "readLine", "java.io", "ObjectInputStream", "public String readLine() throws IOException" ], [ "readChar", "java.io", "ObjectInputStream", "public char readChar() throws IOException" ], [ "enableResolveObject", "java.io", "ObjectInputStream", "protected boolean enableResolveObject(boolean arg0) throws SecurityException" ], [ "readTypeString", "java.io", "ObjectInputStream", "String readTypeString() throws IOException" ], [ "resolveProxyClass", "java.io", "ObjectInputStream", "protected Class<? extends Object> resolveProxyClass(String[] arg0) throws IOException, ClassNotFoundException" ], [ "readDouble", "java.io", "ObjectInputStream", "public double readDouble() throws IOException" ], [ "readObject", "java.io", "ObjectInputStream", "public final Object readObject() throws IOException, ClassNotFoundException" ], [ "read", "java.io", "ObjectInputStream", "public int read() throws IOException" ], [ "readInt", "java.io", "ObjectInputStream", "public int readInt() throws IOException" ], [ "readByte", "java.io", "ObjectInputStream", "public byte readByte() throws IOException" ], [ "readUTF", "java.io", "ObjectInputStream", "public String readUTF() throws IOException" ], [ "skip", "java.io", "InputStream", "public long skip(long arg0) throws IOException" ], [ "available", "java.io", "InputStream", "public int available() throws IOException" ], [ "readAllBytes", "java.io", "InputStream", "public byte[] readAllBytes() throws IOException" ], [ "read", "java.io", "InputStream", "public int read(byte[] arg0, int arg1, int arg2) throws IOException" ], [ "transferTo", "java.io", "InputStream", "public long transferTo(OutputStream arg0) throws IOException" ], [ "readNBytes", "java.io", "InputStream", "public int readNBytes(byte[] arg0, int arg1, int arg2) throws IOException" ], [ "markSupported", "java.io", "InputStream", "public boolean markSupported()" ], [ "read", "java.io", "InputStream", "public int read(byte[] arg0) throws IOException" ], [ "readNBytes", "java.io", "InputStream", "public byte[] readNBytes(int arg0) throws IOException" ], [ "read", "java.io", "InputStream", "public abstract int read() throws IOException" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "readObject", "java.io", "ObjectInput", "public abstract Object readObject() throws ClassNotFoundException, IOException" ], [ "skip", "java.io", "ObjectInput", "public abstract long skip(long arg0) throws IOException" ], [ "read", "java.io", "ObjectInput", "public abstract int read() throws IOException" ], [ "available", "java.io", "ObjectInput", "public abstract int available() throws IOException" ], [ "read", "java.io", "ObjectInput", "public abstract int read(byte[] arg0, int arg1, int arg2) throws IOException" ], [ "read", "java.io", "ObjectInput", "public abstract int read(byte[] arg0) throws IOException" ], [ "readLine", "java.io", "DataInput", "public abstract String readLine() throws IOException" ], [ "skipBytes", "java.io", "DataInput", "public abstract int skipBytes(int arg0) throws IOException" ], [ "readUnsignedByte", "java.io", "DataInput", "public abstract int readUnsignedByte() throws IOException" ], [ "readUTF", "java.io", "DataInput", "public abstract String readUTF() throws IOException" ], [ "readInt", "java.io", "DataInput", "public abstract int readInt() throws IOException" ], [ "readFloat", "java.io", "DataInput", "public abstract float readFloat() throws IOException" ], [ "readBoolean", "java.io", "DataInput", "public abstract boolean readBoolean() throws IOException" ], [ "readLong", "java.io", "DataInput", "public abstract long readLong() throws IOException" ], [ "readChar", "java.io", "DataInput", "public abstract char readChar() throws IOException" ], [ "readDouble", "java.io", "DataInput", "public abstract double readDouble() throws IOException" ], [ "readUnsignedShort", "java.io", "DataInput", "public abstract int readUnsignedShort() throws IOException" ], [ "readShort", "java.io", "DataInput", "public abstract short readShort() throws IOException" ], [ "readByte", "java.io", "DataInput", "public abstract byte readByte() throws IOException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "map", "org.apache.commons.collections4.map", "AbstractMapDecorator", "Map<MultiKey<? extends K>, V> map;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 8296,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4.map",
  "className" : "MultiKeyMap",
  "javadocTag" : "@throws ClassNotFoundException",
  "methodJavadoc" : "    /**\n     * Read the map in using a custom routine.\n     *\n     * @param in  the input stream\n     * @throws IOException\n     * @throws ClassNotFoundException\n     */",
  "methodSourceCode" : "private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException{\n    in.defaultReadObject();\n    map = (Map<MultiKey<? extends K>, V>) in.readObject();\n}",
  "classJavadoc" : "/**\n * A <code>Map</code> implementation that uses multiple keys to map the value.\n * <p>\n * This class is the most efficient way to uses multiple keys to map to a value.\n * The best way to use this class is via the additional map-style methods.\n * These provide <code>get</code>, <code>containsKey</code>, <code>put</code> and\n * <code>remove</code> for individual keys which operate without extra object creation.\n * <p>\n * The additional methods are the main interface of this map.\n * As such, you will not normally hold this map in a variable of type <code>Map</code>.\n * <p>\n * The normal map methods take in and return a {@link MultiKey}.\n * If you try to use <code>put()</code> with any other object type a\n * <code>ClassCastException</code> is thrown. If you try to use <code>null</code> as\n * the key in <code>put()</code> a <code>NullPointerException</code> is thrown.\n * <p>\n * This map is implemented as a decorator of a <code>AbstractHashedMap</code> which\n * enables extra behaviour to be added easily.\n * <ul>\n * <li><code>MultiKeyMap.decorate(new LinkedMap())</code> creates an ordered map.\n * <li><code>MultiKeyMap.decorate(new LRUMap())</code> creates an least recently used map.\n * <li><code>MultiKeyMap.decorate(new ReferenceMap())</code> creates a garbage collector sensitive map.\n * </ul>\n * Note that <code>IdentityMap</code> and <code>ReferenceIdentityMap</code> are unsuitable\n * for use as the key comparison would work on the whole MultiKey, not the elements within.\n * <p>\n * As an example, consider a least recently used cache that uses a String airline code\n * and a Locale to lookup the airline's name:\n * <pre>\n * private MultiKeyMap cache = MultiKeyMap.multiKeyMap(new LRUMap(50));\n *\n * public String getAirlineName(String code, String locale) {\n *   String name = (String) cache.get(code, locale);\n *   if (name == null) {\n *     name = getAirlineNameFromDB(code, locale);\n *     cache.put(code, locale, name);\n *   }\n *   return name;\n * }\n * </pre>\n * <p>\n * <strong>Note that MultiKeyMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. This class may throw exceptions when accessed\n * by concurrent threads without synchronization.\n *\n * @since 3.1\n * @version $Id: MultiKeyMap.java 1686855 2015-06-22 13:00:27Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4.map;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.MapIterator;\nimport org.apache.commons.collections4.keyvalue.MultiKey;\n\n/**\n * A <code>Map</code> implementation that uses multiple keys to map the value.\n * <p>\n * This class is the most efficient way to uses multiple keys to map to a value.\n * The best way to use this class is via the additional map-style methods.\n * These provide <code>get</code>, <code>containsKey</code>, <code>put</code> and\n * <code>remove</code> for individual keys which operate without extra object creation.\n * <p>\n * The additional methods are the main interface of this map.\n * As such, you will not normally hold this map in a variable of type <code>Map</code>.\n * <p>\n * The normal map methods take in and return a {@link MultiKey}.\n * If you try to use <code>put()</code> with any other object type a\n * <code>ClassCastException</code> is thrown. If you try to use <code>null</code> as\n * the key in <code>put()</code> a <code>NullPointerException</code> is thrown.\n * <p>\n * This map is implemented as a decorator of a <code>AbstractHashedMap</code> which\n * enables extra behaviour to be added easily.\n * <ul>\n * <li><code>MultiKeyMap.decorate(new LinkedMap())</code> creates an ordered map.\n * <li><code>MultiKeyMap.decorate(new LRUMap())</code> creates an least recently used map.\n * <li><code>MultiKeyMap.decorate(new ReferenceMap())</code> creates a garbage collector sensitive map.\n * </ul>\n * Note that <code>IdentityMap</code> and <code>ReferenceIdentityMap</code> are unsuitable\n * for use as the key comparison would work on the whole MultiKey, not the elements within.\n * <p>\n * As an example, consider a least recently used cache that uses a String airline code\n * and a Locale to lookup the airline's name:\n * <pre>\n * private MultiKeyMap cache = MultiKeyMap.multiKeyMap(new LRUMap(50));\n *\n * public String getAirlineName(String code, String locale) {\n *   String name = (String) cache.get(code, locale);\n *   if (name == null) {\n *     name = getAirlineNameFromDB(code, locale);\n *     cache.put(code, locale, name);\n *   }\n *   return name;\n * }\n * </pre>\n * <p>\n * <strong>Note that MultiKeyMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. This class may throw exceptions when accessed\n * by concurrent threads without synchronization.\n *\n * @since 3.1\n * @version $Id: MultiKeyMap.java 1686855 2015-06-22 13:00:27Z tn $\n */\npublic class MultiKeyMap<K, V> extends AbstractMapDecorator<MultiKey<? extends K>, V>\n        implements Serializable, Cloneable {\n\n    /** Serialisation version */\n    private static final long serialVersionUID = -1788199231038721040L;\n\n    //-----------------------------------------------------------------------\n    /**\n     * Decorates the specified map to add the MultiKeyMap API and fast query.\n     * The map must not be null and must be empty.\n     *\n     * @param <K>  the key type\n     * @param <V>  the value type\n     * @param map  the map to decorate, not null\n     * @return a new multi key map\n     * @throws NullPointerException if map is null\n     * @throws IllegalArgumentException if the map is not empty\n     * @since 4.0\n     */\n    public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map) {\n        if (map == null) {\n            throw new NullPointerException(\"Map must not be null\");\n        }\n        if (map.size() > 0) {\n            throw new IllegalArgumentException(\"Map must be empty\");\n        }\n        return new MultiKeyMap<K, V>(map);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Constructs a new MultiKeyMap that decorates a <code>HashedMap</code>.\n     */\n    public MultiKeyMap() {\n        this(new HashedMap<MultiKey<? extends K>, V>());\n    }\n\n    /**\n     * Constructor that decorates the specified map and is called from\n     * {@link #multiKeyMap(AbstractHashedMap)}.\n     * The map must not be null and should be empty or only contain valid keys.\n     * This constructor performs no validation.\n     *\n     * @param map  the map to decorate\n     */\n    protected MultiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map) {\n        super(map);\n        this.map = map;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final V value) {\n        final int hashCode = hash(key1, key2);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2) {\n        final int hashCode = hash(key1, key2);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n            final Object key1, final Object key2) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 2 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final V value) {\n        final int hashCode = hash(key1, key2, key3);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3) {\n        final int hashCode = hash(key1, key2, key3);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n                                 final Object key1, final Object key2, final Object key3) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 3 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final K key4, final V value) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3, key4), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4) {\n        final int hashCode = hash(key1, key2, key3, key4);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3, final Object key4) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        if (key4 != null) {\n            h ^= key4.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n                                 final Object key1, final Object key2, final Object key3, final Object key4) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 4 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2))) &&\n            (key4 == multi.getKey(3) || key4 != null && key4.equals(multi.getKey(3)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value mapped to the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the mapped value, null if no match\n     */\n    public V get(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                return entry.getValue();\n            }\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Checks whether the map contains the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return true if the map contains the key\n     */\n    public boolean containsKey(final Object key1, final Object key2, final Object key3,\n                               final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                return true;\n            }\n            entry = entry.next;\n        }\n        return false;\n    }\n\n    /**\n     * Stores the value against the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @param value  the value to store\n     * @return the value previously mapped to this combined key, null if none\n     */\n    public V put(final K key1, final K key2, final K key3, final K key4, final K key5, final V value) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                final V oldValue = entry.getValue();\n                decorated().updateEntry(entry, value);\n                return oldValue;\n            }\n            entry = entry.next;\n        }\n        decorated().addMapping(index, hashCode, new MultiKey<K>(key1, key2, key3, key4, key5), value);\n        return null;\n    }\n\n    /**\n     * Removes the specified multi-key from this map.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the value mapped to the removed key, null if key not in map\n     * @since 4.0 (previous name: remove(Object, Object, Object, Object, Object))\n     */\n    public V removeMultiKey(final Object key1, final Object key2, final Object key3,\n                            final Object key4, final Object key5) {\n        final int hashCode = hash(key1, key2, key3, key4, key5);\n        final int index = decorated().hashIndex(hashCode, decorated().data.length);\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> previous = null;\n        while (entry != null) {\n            if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2, key3, key4, key5)) {\n                final V oldValue = entry.getValue();\n                decorated().removeMapping(entry, index, previous);\n                return oldValue;\n            }\n            previous = entry;\n            entry = entry.next;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the hash code for the specified multi-key.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return the hash code\n     */\n    protected int hash(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        int h = 0;\n        if (key1 != null) {\n            h ^= key1.hashCode();\n        }\n        if (key2 != null) {\n            h ^= key2.hashCode();\n        }\n        if (key3 != null) {\n            h ^= key3.hashCode();\n        }\n        if (key4 != null) {\n            h ^= key4.hashCode();\n        }\n        if (key5 != null) {\n            h ^= key5.hashCode();\n        }\n        h += ~(h << 9);\n        h ^=  h >>> 14;\n        h +=  h << 4;\n        h ^=  h >>> 10;\n        return h;\n    }\n\n    /**\n     * Is the key equal to the combined key.\n     *\n     * @param entry  the entry to compare to\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     * @return true if the key matches\n     */\n    protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry,\n            final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n        final MultiKey<? extends K> multi = entry.getKey();\n        return\n            multi.size() == 5 &&\n            (key1 == multi.getKey(0) || key1 != null && key1.equals(multi.getKey(0))) &&\n            (key2 == multi.getKey(1) || key2 != null && key2.equals(multi.getKey(1))) &&\n            (key3 == multi.getKey(2) || key3 != null && key3.equals(multi.getKey(2))) &&\n            (key4 == multi.getKey(3) || key4 != null && key4.equals(multi.getKey(3))) &&\n            (key5 == multi.getKey(4) || key5 != null && key5.equals(multi.getKey(4)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Removes all mappings where the first key is that specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has one or more keys, and the first matches that specified.\n     *\n     * @param key1  the first key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 1 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first two keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has two or more keys, and the first two match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 2 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first three keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has three or more keys, and the first three match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2, final Object key3) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 3 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1))) &&\n                (key3 == null ? multi.getKey(2) == null : key3.equals(multi.getKey(2)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Removes all mappings where the first four keys are those specified.\n     * <p>\n     * This method removes all the mappings where the <code>MultiKey</code>\n     * has four or more keys, and the first four match those specified.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @return true if any elements were removed\n     */\n    public boolean removeAll(final Object key1, final Object key2, final Object key3, final Object key4) {\n        boolean modified = false;\n        final MapIterator<MultiKey<? extends K>, V> it = mapIterator();\n        while (it.hasNext()) {\n            final MultiKey<? extends K> multi = it.next();\n            if (multi.size() >= 4 &&\n                (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) &&\n                (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1))) &&\n                (key3 == null ? multi.getKey(2) == null : key3.equals(multi.getKey(2))) &&\n                (key4 == null ? multi.getKey(3) == null : key4.equals(multi.getKey(3)))) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Check to ensure that input keys are valid MultiKey objects.\n     *\n     * @param key  the key to check\n     */\n    protected void checkKey(final MultiKey<?> key) {\n        if (key == null) {\n            throw new NullPointerException(\"Key must not be null\");\n        }\n    }\n\n    /**\n     * Clones the map without cloning the keys or values.\n     *\n     * @return a shallow clone\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public MultiKeyMap<K, V> clone() {\n        try {\n            return (MultiKeyMap<K, V>) super.clone();\n        } catch (final CloneNotSupportedException e) {\n            throw new InternalError();\n        }\n    }\n\n    /**\n     * Puts the key and value into the map, where the key must be a non-null\n     * MultiKey object.\n     *\n     * @param key  the non-null MultiKey object\n     * @param value  the value to store\n     * @return the previous value for the key\n     * @throws NullPointerException if the key is null\n     * @throws ClassCastException if the key is not a MultiKey\n     */\n    @Override\n    public V put(final MultiKey<? extends K> key, final V value) {\n        checkKey(key);\n        return super.put(key, value);\n    }\n\n    /**\n     * Copies all of the keys and values from the specified map to this map.\n     * Each key must be non-null and a MultiKey object.\n     *\n     * @param mapToCopy  to this map\n     * @throws NullPointerException if the mapToCopy or any key within is null\n     * @throws ClassCastException if any key in mapToCopy is not a MultiKey\n     */\n    @Override\n    public void putAll(final Map<? extends MultiKey<? extends K>, ? extends V> mapToCopy) {\n        for (final MultiKey<? extends K> key : mapToCopy.keySet()) {\n            checkKey(key);\n        }\n        super.putAll(mapToCopy);\n    }\n\n    //-----------------------------------------------------------------------\n    @Override\n    public MapIterator<MultiKey<? extends K>, V> mapIterator() {\n        return decorated().mapIterator();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected AbstractHashedMap<MultiKey<? extends K>, V> decorated() {\n        return (AbstractHashedMap<MultiKey<? extends K>, V>) super.decorated();\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Write the map out using a custom routine.\n     *\n     * @param out  the output stream\n     * @throws IOException\n     */\n    private void writeObject(final ObjectOutputStream out) throws IOException {\n        out.defaultWriteObject();\n        out.writeObject(map);\n    }\n\n    /**\n     * Read the map in using a custom routine.\n     *\n     * @param in  the input stream\n     * @throws IOException\n     * @throws ClassNotFoundException\n     */\n    @SuppressWarnings(\"unchecked\")\n    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n        in.defaultReadObject();\n        map = (Map<MultiKey<? extends K>, V>) in.readObject();\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "in", "java.io", "ObjectInputStream" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "containsKey", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean containsKey(Object arg0)" ], [ "mapIterator", "org.apache.commons.collections4.map", "MultiKeyMap", "public MapIterator<MultiKey<? extends K>, V> mapIterator()" ], [ "hashCode", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int hashCode()" ], [ "put", "org.apache.commons.collections4", "Put", "public abstract Object put(K arg0, V arg1)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2)" ], [ "remove", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public V remove(Object arg0)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final V value)" ], [ "isEmpty", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean isEmpty()" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2)" ], [ "remove", "java.util", "Map", "public default boolean remove(Object arg0, Object arg1)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final K key4, final K key5, final V value)" ], [ "get", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public V get(Object arg0)" ], [ "putIfAbsent", "java.util", "Map", "public default V putIfAbsent(K arg0, V arg1)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final V value)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final MultiKey<? extends K> key, final V value)" ], [ "values", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Collection<V> values()" ], [ "replace", "java.util", "Map", "public default V replace(K arg0, V arg1)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2)" ], [ "containsValue", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean containsValue(Object arg0)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "replace", "java.util", "Map", "public default boolean replace(K arg0, V arg1, V arg2)" ], [ "toString", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public String toString()" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "keySet", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Set<K> keySet()" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "entrySet", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Set<Map.Entry<K, V>> entrySet()" ], [ "merge", "java.util", "Map", "public default V merge(K arg0, V arg1, BiFunction<? super V, ? super V, ? extends V> arg2)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "mapIterator", "org.apache.commons.collections4.map", "AbstractIterableMap", "public MapIterator<K, V> mapIterator()" ], [ "computeIfAbsent", "java.util", "Map", "public default V computeIfAbsent(K arg0, Function<? super K, ? extends V> arg1)" ], [ "put", "org.apache.commons.collections4.map", "MultiKeyMap", "public V put(final K key1, final K key2, final K key3, final K key4, final V value)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "computeIfPresent", "java.util", "Map", "public default V computeIfPresent(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3)" ], [ "removeMultiKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public V removeMultiKey(final Object key1, final Object key2, final Object key3)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "MultiKeyMap", "protected boolean isEqualKey(final AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry, final Object key1, final Object key2, final Object key3)" ], [ "getOrDefault", "java.util", "Map", "public default V getOrDefault(Object arg0, V arg1)" ], [ "decorated", "org.apache.commons.collections4.map", "MultiKeyMap", "protected AbstractHashedMap<MultiKey<? extends K>, V> decorated()" ], [ "compute", "java.util", "Map", "public default V compute(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "decorated", "org.apache.commons.collections4.map", "AbstractMapDecorator", "protected Map<K, V> decorated()" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "size", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int size()" ], [ "clone", "org.apache.commons.collections4.map", "MultiKeyMap", "public MultiKeyMap<K, V> clone()" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1, final Object key2, final Object key3)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)" ], [ "hash", "org.apache.commons.collections4.map", "MultiKeyMap", "protected int hash(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "removeAll", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean removeAll(final Object key1)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "equals", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean equals(Object arg0)" ], [ "get", "org.apache.commons.collections4.map", "MultiKeyMap", "public V get(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "containsKey", "org.apache.commons.collections4.map", "MultiKeyMap", "public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4)" ], [ "readLine", "java.io", "ObjectInputStream", "public String readLine() throws IOException" ], [ "readClassDescriptor", "java.io", "ObjectInputStream", "protected ObjectStreamClass readClassDescriptor() throws IOException, ClassNotFoundException" ], [ "available", "java.io", "ObjectInputStream", "public int available() throws IOException" ], [ "readShort", "java.io", "ObjectInputStream", "public short readShort() throws IOException" ], [ "resolveClass", "java.io", "ObjectInputStream", "protected Class<? extends Object> resolveClass(ObjectStreamClass arg0) throws IOException, ClassNotFoundException" ], [ "readDouble", "java.io", "ObjectInputStream", "public double readDouble() throws IOException" ], [ "readBoolean", "java.io", "ObjectInputStream", "public boolean readBoolean() throws IOException" ], [ "resolveObject", "java.io", "ObjectInputStream", "protected Object resolveObject(Object arg0) throws IOException" ], [ "readObjectOverride", "java.io", "ObjectInputStream", "protected Object readObjectOverride() throws IOException, ClassNotFoundException" ], [ "skipBytes", "java.io", "ObjectInputStream", "public int skipBytes(int arg0) throws IOException" ], [ "readFields", "java.io", "ObjectInputStream", "public ObjectInputStream.GetField readFields() throws IOException, ClassNotFoundException" ], [ "getObjectInputFilter", "java.io", "ObjectInputStream", "public final ObjectInputFilter getObjectInputFilter()" ], [ "readUnshared", "java.io", "ObjectInputStream", "public Object readUnshared() throws IOException, ClassNotFoundException" ], [ "readInt", "java.io", "ObjectInputStream", "public int readInt() throws IOException" ], [ "readByte", "java.io", "ObjectInputStream", "public byte readByte() throws IOException" ], [ "readChar", "java.io", "ObjectInputStream", "public char readChar() throws IOException" ], [ "readUnsignedShort", "java.io", "ObjectInputStream", "public int readUnsignedShort() throws IOException" ], [ "resolveProxyClass", "java.io", "ObjectInputStream", "protected Class<? extends Object> resolveProxyClass(String[] arg0) throws IOException, ClassNotFoundException" ], [ "readUTF", "java.io", "ObjectInputStream", "public String readUTF() throws IOException" ], [ "readTypeString", "java.io", "ObjectInputStream", "String readTypeString() throws IOException" ], [ "readLong", "java.io", "ObjectInputStream", "public long readLong() throws IOException" ], [ "readFloat", "java.io", "ObjectInputStream", "public float readFloat() throws IOException" ], [ "enableResolveObject", "java.io", "ObjectInputStream", "protected boolean enableResolveObject(boolean arg0) throws SecurityException" ], [ "readUnsignedByte", "java.io", "ObjectInputStream", "public int readUnsignedByte() throws IOException" ], [ "read", "java.io", "ObjectInputStream", "public int read(byte[] arg0, int arg1, int arg2) throws IOException" ], [ "read", "java.io", "ObjectInputStream", "public int read() throws IOException" ], [ "readObject", "java.io", "ObjectInputStream", "public final Object readObject() throws IOException, ClassNotFoundException" ], [ "transferTo", "java.io", "InputStream", "public long transferTo(OutputStream arg0) throws IOException" ], [ "skip", "java.io", "InputStream", "public long skip(long arg0) throws IOException" ], [ "available", "java.io", "InputStream", "public int available() throws IOException" ], [ "read", "java.io", "InputStream", "public abstract int read() throws IOException" ], [ "readNBytes", "java.io", "InputStream", "public byte[] readNBytes(int arg0) throws IOException" ], [ "readAllBytes", "java.io", "InputStream", "public byte[] readAllBytes() throws IOException" ], [ "read", "java.io", "InputStream", "public int read(byte[] arg0) throws IOException" ], [ "read", "java.io", "InputStream", "public int read(byte[] arg0, int arg1, int arg2) throws IOException" ], [ "markSupported", "java.io", "InputStream", "public boolean markSupported()" ], [ "readNBytes", "java.io", "InputStream", "public int readNBytes(byte[] arg0, int arg1, int arg2) throws IOException" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "read", "java.io", "ObjectInput", "public abstract int read(byte[] arg0) throws IOException" ], [ "available", "java.io", "ObjectInput", "public abstract int available() throws IOException" ], [ "skip", "java.io", "ObjectInput", "public abstract long skip(long arg0) throws IOException" ], [ "read", "java.io", "ObjectInput", "public abstract int read() throws IOException" ], [ "read", "java.io", "ObjectInput", "public abstract int read(byte[] arg0, int arg1, int arg2) throws IOException" ], [ "readObject", "java.io", "ObjectInput", "public abstract Object readObject() throws ClassNotFoundException, IOException" ], [ "readLong", "java.io", "DataInput", "public abstract long readLong() throws IOException" ], [ "readShort", "java.io", "DataInput", "public abstract short readShort() throws IOException" ], [ "readUnsignedByte", "java.io", "DataInput", "public abstract int readUnsignedByte() throws IOException" ], [ "readBoolean", "java.io", "DataInput", "public abstract boolean readBoolean() throws IOException" ], [ "readInt", "java.io", "DataInput", "public abstract int readInt() throws IOException" ], [ "readFloat", "java.io", "DataInput", "public abstract float readFloat() throws IOException" ], [ "skipBytes", "java.io", "DataInput", "public abstract int skipBytes(int arg0) throws IOException" ], [ "readUnsignedShort", "java.io", "DataInput", "public abstract int readUnsignedShort() throws IOException" ], [ "readByte", "java.io", "DataInput", "public abstract byte readByte() throws IOException" ], [ "readLine", "java.io", "DataInput", "public abstract String readLine() throws IOException" ], [ "readDouble", "java.io", "DataInput", "public abstract double readDouble() throws IOException" ], [ "readChar", "java.io", "DataInput", "public abstract char readChar() throws IOException" ], [ "readUTF", "java.io", "DataInput", "public abstract String readUTF() throws IOException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "map", "org.apache.commons.collections4.map", "AbstractMapDecorator", "Map<MultiKey<? extends K>, V> map;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 8300,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4.map",
  "className" : "HashedMap",
  "javadocTag" : "@param initialCapacity the initial capacity",
  "methodJavadoc" : "    /**\n     * Constructs a new, empty map with the specified initial capacity and\n     * load factor.\n     *\n     * @param initialCapacity  the initial capacity\n     * @param loadFactor  the load factor\n     * @throws IllegalArgumentException if the initial capacity is negative\n     * @throws IllegalArgumentException if the load factor is less than zero\n     */",
  "methodSourceCode" : "public HashedMap(final int initialCapacity, final float loadFactor){\n    super(initialCapacity, loadFactor);\n}",
  "classJavadoc" : "/**\n * A <code>Map</code> implementation that is a general purpose alternative\n * to <code>HashMap</code>.\n * <p>\n * This implementation improves on the JDK1.4 HashMap by adding the\n * {@link org.apache.commons.collections4.MapIterator MapIterator}\n * functionality and many methods for subclassing.\n * <p>\n * <strong>Note that HashedMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. The simplest approach is to wrap this map\n * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw\n * exceptions when accessed by concurrent threads without synchronization.\n *\n * @since 3.0\n * @version $Id: HashedMap.java 1533984 2013-10-20 21:12:51Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4.map;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.Map;\n\n/**\n * A <code>Map</code> implementation that is a general purpose alternative\n * to <code>HashMap</code>.\n * <p>\n * This implementation improves on the JDK1.4 HashMap by adding the\n * {@link org.apache.commons.collections4.MapIterator MapIterator}\n * functionality and many methods for subclassing.\n * <p>\n * <strong>Note that HashedMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. The simplest approach is to wrap this map\n * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw\n * exceptions when accessed by concurrent threads without synchronization.\n *\n * @since 3.0\n * @version $Id: HashedMap.java 1533984 2013-10-20 21:12:51Z tn $\n */\npublic class HashedMap<K, V>\n        extends AbstractHashedMap<K, V> implements Serializable, Cloneable {\n\n    /** Serialisation version */\n    private static final long serialVersionUID = -1788199231038721040L;\n\n    /**\n     * Constructs a new empty map with default size and load factor.\n     */\n    public HashedMap() {\n        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);\n    }\n\n    /**\n     * Constructs a new, empty map with the specified initial capacity.\n     *\n     * @param initialCapacity  the initial capacity\n     * @throws IllegalArgumentException if the initial capacity is negative\n     */\n    public HashedMap(final int initialCapacity) {\n        super(initialCapacity);\n    }\n\n    /**\n     * Constructs a new, empty map with the specified initial capacity and\n     * load factor.\n     *\n     * @param initialCapacity  the initial capacity\n     * @param loadFactor  the load factor\n     * @throws IllegalArgumentException if the initial capacity is negative\n     * @throws IllegalArgumentException if the load factor is less than zero\n     */\n    public HashedMap(final int initialCapacity, final float loadFactor) {\n        super(initialCapacity, loadFactor);\n    }\n\n    /**\n     * Constructor copying elements from another map.\n     *\n     * @param map  the map to copy\n     * @throws NullPointerException if the map is null\n     */\n    public HashedMap(final Map<? extends K, ? extends V> map) {\n        super(map);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Clones the map without cloning the keys or values.\n     *\n     * @return a shallow clone\n     */\n    @Override\n    public HashedMap<K, V> clone() {\n        return (HashedMap<K, V>) super.clone();\n    }\n\n    /**\n     * Write the map out using a custom routine.\n     */\n    private void writeObject(final ObjectOutputStream out) throws IOException {\n        out.defaultWriteObject();\n        doWriteObject(out);\n    }\n\n    /**\n     * Read the map in using a custom routine.\n     */\n    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n        in.defaultReadObject();\n        doReadObject(in);\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "initialCapacity", "", "int" ], [ "loadFactor", "", "float" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "containsValue", "org.apache.commons.collections4.map", "AbstractHashedMap", "public boolean containsValue(Object arg0)" ], [ "merge", "java.util", "Map", "public default V merge(K arg0, V arg1, BiFunction<? super V, ? super V, ? extends V> arg2)" ], [ "put", "org.apache.commons.collections4.map", "AbstractHashedMap", "public V put(K arg0, V arg1)" ], [ "putIfAbsent", "java.util", "Map", "public default V putIfAbsent(K arg0, V arg1)" ], [ "createValuesIterator", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected Iterator<V> createValuesIterator()" ], [ "getOrDefault", "java.util", "Map", "public default V getOrDefault(Object arg0, V arg1)" ], [ "replace", "java.util", "Map", "public default V replace(K arg0, V arg1)" ], [ "mapIterator", "org.apache.commons.collections4.map", "AbstractHashedMap", "public MapIterator<K, V> mapIterator()" ], [ "calculateNewCapacity", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected int calculateNewCapacity(int arg0)" ], [ "calculateThreshold", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected int calculateThreshold(int arg0, float arg1)" ], [ "values", "org.apache.commons.collections4.map", "AbstractHashedMap", "public Collection<V> values()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "get", "org.apache.commons.collections4.map", "AbstractHashedMap", "public V get(Object arg0)" ], [ "hash", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected int hash(Object arg0)" ], [ "remove", "org.apache.commons.collections4.map", "AbstractHashedMap", "public V remove(Object arg0)" ], [ "hashIndex", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected int hashIndex(int arg0, int arg1)" ], [ "put", "org.apache.commons.collections4", "Put", "public abstract Object put(K arg0, V arg1)" ], [ "entryValue", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected V entryValue(AbstractHashedMap.HashEntry<K, V> arg0)" ], [ "size", "org.apache.commons.collections4.map", "AbstractHashedMap", "public int size()" ], [ "entryHashCode", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected int entryHashCode(AbstractHashedMap.HashEntry<K, V> arg0)" ], [ "keySet", "org.apache.commons.collections4.map", "AbstractHashedMap", "public Set<K> keySet()" ], [ "computeIfPresent", "java.util", "Map", "public default V computeIfPresent(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "replace", "java.util", "Map", "public default boolean replace(K arg0, V arg1, V arg2)" ], [ "isEqualKey", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected boolean isEqualKey(Object arg0, Object arg1)" ], [ "isEqualValue", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected boolean isEqualValue(Object arg0, Object arg1)" ], [ "entrySet", "org.apache.commons.collections4.map", "AbstractHashedMap", "public Set<Map.Entry<K, V>> entrySet()" ], [ "equals", "org.apache.commons.collections4.map", "AbstractHashedMap", "public boolean equals(Object arg0)" ], [ "entryKey", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected K entryKey(AbstractHashedMap.HashEntry<K, V> arg0)" ], [ "clone", "java.util", "AbstractMap", "protected Object clone() throws CloneNotSupportedException" ], [ "toString", "org.apache.commons.collections4.map", "AbstractHashedMap", "public String toString()" ], [ "clone", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected AbstractHashedMap<K, V> clone()" ], [ "compute", "java.util", "Map", "public default V compute(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "remove", "java.util", "Map", "public default boolean remove(Object arg0, Object arg1)" ], [ "convertKey", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected Object convertKey(Object arg0)" ], [ "createKeySetIterator", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected Iterator<K> createKeySetIterator()" ], [ "createEntry", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected AbstractHashedMap.HashEntry<K, V> createEntry(AbstractHashedMap.HashEntry<K, V> arg0, int arg1, K arg2, V arg3)" ], [ "entryNext", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected AbstractHashedMap.HashEntry<K, V> entryNext(AbstractHashedMap.HashEntry<K, V> arg0)" ], [ "hashCode", "org.apache.commons.collections4.map", "AbstractHashedMap", "public int hashCode()" ], [ "getEntry", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected AbstractHashedMap.HashEntry<K, V> getEntry(Object arg0)" ], [ "containsKey", "org.apache.commons.collections4.map", "AbstractHashedMap", "public boolean containsKey(Object arg0)" ], [ "computeIfAbsent", "java.util", "Map", "public default V computeIfAbsent(K arg0, Function<? super K, ? extends V> arg1)" ], [ "createEntrySetIterator", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected Iterator<Map.Entry<K, V>> createEntrySetIterator()" ], [ "clone", "org.apache.commons.collections4.map", "HashedMap", "public HashedMap<K, V> clone()" ], [ "isEmpty", "org.apache.commons.collections4.map", "AbstractHashedMap", "public boolean isEmpty()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "toString", "java.lang", "Object", "public String toString()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "loadFactor", "org.apache.commons.collections4.map", "AbstractHashedMap", "float loadFactor;" ], [ "size", "org.apache.commons.collections4.map", "AbstractHashedMap", "int size;" ], [ "data", "org.apache.commons.collections4.map", "AbstractHashedMap", "AbstractHashedMap.HashEntry<K, V>[] data;" ], [ "threshold", "org.apache.commons.collections4.map", "AbstractHashedMap", "int threshold;" ], [ "modCount", "org.apache.commons.collections4.map", "AbstractHashedMap", "int modCount;" ], [ "entrySet", "org.apache.commons.collections4.map", "AbstractHashedMap", "AbstractHashedMap.EntrySet<K, V> entrySet;" ], [ "keySet", "org.apache.commons.collections4.map", "AbstractHashedMap", "AbstractHashedMap.KeySet<K> keySet;" ], [ "values", "org.apache.commons.collections4.map", "AbstractHashedMap", "AbstractHashedMap.Values<V> values;" ], [ "keySet", "java.util", "AbstractMap", "Set<K> keySet;" ], [ "values", "java.util", "AbstractMap", "Collection<V> values;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 8305,
  "oracle" : ";",
  "oracleType" : "NORMAL_POST",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4.map",
  "className" : "LazyMap",
  "javadocTag" : "@return a new lazy map",
  "methodJavadoc" : "    /**\n     * Factory method to create a lazily instantiated map.\n     *\n     * @param <K>  the key type\n     * @param <V>  the value type\n     * @param map  the map to decorate, must not be null\n     * @param factory  the factory to use, must not be null\n     * @return a new lazy map\n     * @throws NullPointerException if map or factory is null\n     * @since 4.0\n     */",
  "methodSourceCode" : "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory){\n    return new LazyMap<K, V>(map, factory);\n}",
  "classJavadoc" : "/**\n * Decorates another <code>Map</code> to create objects in the map on demand.\n * <p>\n * When the {@link #get(Object)} method is called with a key that does not\n * exist in the map, the factory is used to create the object. The created\n * object will be added to the map using the requested key.\n * <p>\n * For instance:\n * <pre>\n * Factory&lt;Date&gt; factory = new Factory&lt;Date&gt;() {\n *     public Date create() {\n *         return new Date();\n *     }\n * }\n * Map&lt;String, Date&gt; lazy = LazyMap.lazyMap(new HashMap&lt;String, Date&gt;(), factory);\n * Date date = lazy.get(\"NOW\");\n * </pre>\n *\n * After the above code is executed, <code>date</code> will refer to\n * a new <code>Date</code> instance. Furthermore, that <code>Date</code>\n * instance is mapped to the \"NOW\" key in the map.\n * <p>\n * <strong>Note that LazyMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. The simplest approach is to wrap this map\n * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw\n * exceptions when accessed by concurrent threads without synchronization.\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n *\n * @since 3.0\n * @version $Id: LazyMap.java 1686855 2015-06-22 13:00:27Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4.map;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.Factory;\nimport org.apache.commons.collections4.Transformer;\nimport org.apache.commons.collections4.functors.FactoryTransformer;\n\n/**\n * Decorates another <code>Map</code> to create objects in the map on demand.\n * <p>\n * When the {@link #get(Object)} method is called with a key that does not\n * exist in the map, the factory is used to create the object. The created\n * object will be added to the map using the requested key.\n * <p>\n * For instance:\n * <pre>\n * Factory&lt;Date&gt; factory = new Factory&lt;Date&gt;() {\n *     public Date create() {\n *         return new Date();\n *     }\n * }\n * Map&lt;String, Date&gt; lazy = LazyMap.lazyMap(new HashMap&lt;String, Date&gt;(), factory);\n * Date date = lazy.get(\"NOW\");\n * </pre>\n *\n * After the above code is executed, <code>date</code> will refer to\n * a new <code>Date</code> instance. Furthermore, that <code>Date</code>\n * instance is mapped to the \"NOW\" key in the map.\n * <p>\n * <strong>Note that LazyMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. The simplest approach is to wrap this map\n * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw\n * exceptions when accessed by concurrent threads without synchronization.\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n *\n * @since 3.0\n * @version $Id: LazyMap.java 1686855 2015-06-22 13:00:27Z tn $\n */\npublic class LazyMap<K, V> extends AbstractMapDecorator<K, V> implements Serializable {\n\n    /** Serialization version */\n    private static final long serialVersionUID = 7990956402564206740L;\n\n    /** The factory to use to construct elements */\n    protected final Transformer<? super K, ? extends V> factory;\n\n    /**\n     * Factory method to create a lazily instantiated map.\n     *\n     * @param <K>  the key type\n     * @param <V>  the value type\n     * @param map  the map to decorate, must not be null\n     * @param factory  the factory to use, must not be null\n     * @return a new lazy map\n     * @throws NullPointerException if map or factory is null\n     * @since 4.0\n     */\n    public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory< ? extends V> factory) {\n        return new LazyMap<K,V>(map, factory);\n    }\n\n    /**\n     * Factory method to create a lazily instantiated map.\n     *\n     * @param <K>  the key type\n     * @param <V>  the value type\n     * @param map  the map to decorate, must not be null\n     * @param factory  the factory to use, must not be null\n     * @return a new lazy map\n     * @throws NullPointerException if map or factory is null\n     * @since 4.0\n     */\n    public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory) {\n        return new LazyMap<K,V>(map, factory);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Constructor that wraps (not copies).\n     *\n     * @param map  the map to decorate, must not be null\n     * @param factory  the factory to use, must not be null\n     * @throws NullPointerException if map or factory is null\n     */\n    protected LazyMap(final Map<K,V> map, final Factory<? extends V> factory) {\n        super(map);\n        if (factory == null) {\n            throw new NullPointerException(\"Factory must not be null\");\n        }\n        this.factory = FactoryTransformer.factoryTransformer(factory);\n    }\n\n    /**\n     * Constructor that wraps (not copies).\n     *\n     * @param map  the map to decorate, must not be null\n     * @param factory  the factory to use, must not be null\n     * @throws NullPointerException if map or factory is null\n     */\n    protected LazyMap(final Map<K,V> map, final Transformer<? super K, ? extends V> factory) {\n        super(map);\n        if (factory == null) {\n            throw new NullPointerException(\"Factory must not be null\");\n        }\n        this.factory = factory;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Write the map out using a custom routine.\n     *\n     * @param out  the output stream\n     * @throws IOException\n     * @since 3.1\n     */\n    private void writeObject(final ObjectOutputStream out) throws IOException {\n        out.defaultWriteObject();\n        out.writeObject(map);\n    }\n\n    /**\n     * Read the map in using a custom routine.\n     *\n     * @param in  the input stream\n     * @throws IOException\n     * @throws ClassNotFoundException\n     * @since 3.1\n     */\n    @SuppressWarnings(\"unchecked\")\n    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n        in.defaultReadObject();\n        map = (Map<K, V>) in.readObject();\n    }\n\n    //-----------------------------------------------------------------------\n    @Override\n    public V get(final Object key) {\n        // create value for key if key is not currently in the map\n        if (map.containsKey(key) == false) {\n            @SuppressWarnings(\"unchecked\")\n            final K castKey = (K) key;\n            final V value = factory.transform(castKey);\n            map.put(castKey, value);\n            return value;\n        }\n        return map.get(key);\n    }\n\n    // no need to wrap keySet, entrySet or values as they are views of\n    // existing map entries - you can't do a map-style get on them.\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ [ "4.0", "double" ] ],
  "tokensMethodArguments" : [ [ "map", "java.util.Map", "Map<K, V>" ], [ "factory", "org.apache.commons.collections4.Factory", "Factory<? extends V>" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "replace", "java.util", "Map", "public default V replace(K arg0, V arg1)" ], [ "containsValue", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean containsValue(Object arg0)" ], [ "put", "org.apache.commons.collections4", "Put", "public abstract Object put(K arg0, V arg1)" ], [ "isEmpty", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean isEmpty()" ], [ "remove", "java.util", "Map", "public default boolean remove(Object arg0, Object arg1)" ], [ "computeIfAbsent", "java.util", "Map", "public default V computeIfAbsent(K arg0, Function<? super K, ? extends V> arg1)" ], [ "values", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Collection<V> values()" ], [ "equals", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean equals(Object arg0)" ], [ "put", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public V put(K arg0, V arg1)" ], [ "get", "org.apache.commons.collections4.map", "LazyMap", "public V get(final Object key)" ], [ "hashCode", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int hashCode()" ], [ "computeIfPresent", "java.util", "Map", "public default V computeIfPresent(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "mapIterator", "org.apache.commons.collections4.map", "AbstractIterableMap", "public MapIterator<K, V> mapIterator()" ], [ "keySet", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Set<K> keySet()" ], [ "toString", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public String toString()" ], [ "remove", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public V remove(Object arg0)" ], [ "containsKey", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean containsKey(Object arg0)" ], [ "size", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int size()" ], [ "entrySet", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Set<Map.Entry<K, V>> entrySet()" ], [ "merge", "java.util", "Map", "public default V merge(K arg0, V arg1, BiFunction<? super V, ? super V, ? extends V> arg2)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "putIfAbsent", "java.util", "Map", "public default V putIfAbsent(K arg0, V arg1)" ], [ "replace", "java.util", "Map", "public default boolean replace(K arg0, V arg1, V arg2)" ], [ "compute", "java.util", "Map", "public default V compute(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "getOrDefault", "java.util", "Map", "public default V getOrDefault(Object arg0, V arg1)" ], [ "decorated", "org.apache.commons.collections4.map", "AbstractMapDecorator", "protected Map<K, V> decorated()" ], [ "get", "java.util", "Map", "public abstract V get(Object arg0)" ], [ "containsValue", "java.util", "Map", "public abstract boolean containsValue(Object arg0)" ], [ "containsKey", "java.util", "Map", "public abstract boolean containsKey(Object arg0)" ], [ "size", "java.util", "Map", "public abstract int size()" ], [ "put", "java.util", "Map", "public abstract V put(K arg0, V arg1)" ], [ "remove", "java.util", "Map", "public abstract V remove(Object arg0)" ], [ "equals", "java.util", "Map", "public abstract boolean equals(Object arg0)" ], [ "values", "java.util", "Map", "public abstract Collection<V> values()" ], [ "entrySet", "java.util", "Map", "public abstract Set<Map.Entry<K, V>> entrySet()" ], [ "keySet", "java.util", "Map", "public abstract Set<K> keySet()" ], [ "hashCode", "java.util", "Map", "public abstract int hashCode()" ], [ "isEmpty", "java.util", "Map", "public abstract boolean isEmpty()" ], [ "create", "org.apache.commons.collections4", "Factory", "public abstract T create()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "get", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public V get(Object arg0)" ], [ "mapIterator", "org.apache.commons.collections4", "IterableGet", "public abstract MapIterator<K, V> mapIterator()" ], [ "values", "org.apache.commons.collections4", "Get", "public abstract Collection<V> values()" ], [ "size", "org.apache.commons.collections4", "Get", "public abstract int size()" ], [ "remove", "org.apache.commons.collections4", "Get", "public abstract V remove(Object arg0)" ], [ "keySet", "org.apache.commons.collections4", "Get", "public abstract Set<K> keySet()" ], [ "containsKey", "org.apache.commons.collections4", "Get", "public abstract boolean containsKey(Object arg0)" ], [ "get", "org.apache.commons.collections4", "Get", "public abstract V get(Object arg0)" ], [ "containsValue", "org.apache.commons.collections4", "Get", "public abstract boolean containsValue(Object arg0)" ], [ "entrySet", "org.apache.commons.collections4", "Get", "public abstract Set<Map.Entry<K, V>> entrySet()" ], [ "isEmpty", "org.apache.commons.collections4", "Get", "public abstract boolean isEmpty()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "factory", "org.apache.commons.collections4.map", "LazyMap", "protected final Transformer<? super K,? extends V> factory;" ], [ "map", "org.apache.commons.collections4.map", "AbstractMapDecorator", "Map<K, V> map;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 8312,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4.map",
  "className" : "LazyMap",
  "javadocTag" : "@throws IOException",
  "methodJavadoc" : "    /**\n     * Read the map in using a custom routine.\n     *\n     * @param in  the input stream\n     * @throws IOException\n     * @throws ClassNotFoundException\n     * @since 3.1\n     */",
  "methodSourceCode" : "private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException{\n    in.defaultReadObject();\n    map = (Map<K, V>) in.readObject();\n}",
  "classJavadoc" : "/**\n * Decorates another <code>Map</code> to create objects in the map on demand.\n * <p>\n * When the {@link #get(Object)} method is called with a key that does not\n * exist in the map, the factory is used to create the object. The created\n * object will be added to the map using the requested key.\n * <p>\n * For instance:\n * <pre>\n * Factory&lt;Date&gt; factory = new Factory&lt;Date&gt;() {\n *     public Date create() {\n *         return new Date();\n *     }\n * }\n * Map&lt;String, Date&gt; lazy = LazyMap.lazyMap(new HashMap&lt;String, Date&gt;(), factory);\n * Date date = lazy.get(\"NOW\");\n * </pre>\n *\n * After the above code is executed, <code>date</code> will refer to\n * a new <code>Date</code> instance. Furthermore, that <code>Date</code>\n * instance is mapped to the \"NOW\" key in the map.\n * <p>\n * <strong>Note that LazyMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. The simplest approach is to wrap this map\n * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw\n * exceptions when accessed by concurrent threads without synchronization.\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n *\n * @since 3.0\n * @version $Id: LazyMap.java 1686855 2015-06-22 13:00:27Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4.map;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.Factory;\nimport org.apache.commons.collections4.Transformer;\nimport org.apache.commons.collections4.functors.FactoryTransformer;\n\n/**\n * Decorates another <code>Map</code> to create objects in the map on demand.\n * <p>\n * When the {@link #get(Object)} method is called with a key that does not\n * exist in the map, the factory is used to create the object. The created\n * object will be added to the map using the requested key.\n * <p>\n * For instance:\n * <pre>\n * Factory&lt;Date&gt; factory = new Factory&lt;Date&gt;() {\n *     public Date create() {\n *         return new Date();\n *     }\n * }\n * Map&lt;String, Date&gt; lazy = LazyMap.lazyMap(new HashMap&lt;String, Date&gt;(), factory);\n * Date date = lazy.get(\"NOW\");\n * </pre>\n *\n * After the above code is executed, <code>date</code> will refer to\n * a new <code>Date</code> instance. Furthermore, that <code>Date</code>\n * instance is mapped to the \"NOW\" key in the map.\n * <p>\n * <strong>Note that LazyMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. The simplest approach is to wrap this map\n * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw\n * exceptions when accessed by concurrent threads without synchronization.\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n *\n * @since 3.0\n * @version $Id: LazyMap.java 1686855 2015-06-22 13:00:27Z tn $\n */\npublic class LazyMap<K, V> extends AbstractMapDecorator<K, V> implements Serializable {\n\n    /** Serialization version */\n    private static final long serialVersionUID = 7990956402564206740L;\n\n    /** The factory to use to construct elements */\n    protected final Transformer<? super K, ? extends V> factory;\n\n    /**\n     * Factory method to create a lazily instantiated map.\n     *\n     * @param <K>  the key type\n     * @param <V>  the value type\n     * @param map  the map to decorate, must not be null\n     * @param factory  the factory to use, must not be null\n     * @return a new lazy map\n     * @throws NullPointerException if map or factory is null\n     * @since 4.0\n     */\n    public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory< ? extends V> factory) {\n        return new LazyMap<K,V>(map, factory);\n    }\n\n    /**\n     * Factory method to create a lazily instantiated map.\n     *\n     * @param <K>  the key type\n     * @param <V>  the value type\n     * @param map  the map to decorate, must not be null\n     * @param factory  the factory to use, must not be null\n     * @return a new lazy map\n     * @throws NullPointerException if map or factory is null\n     * @since 4.0\n     */\n    public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory) {\n        return new LazyMap<K,V>(map, factory);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Constructor that wraps (not copies).\n     *\n     * @param map  the map to decorate, must not be null\n     * @param factory  the factory to use, must not be null\n     * @throws NullPointerException if map or factory is null\n     */\n    protected LazyMap(final Map<K,V> map, final Factory<? extends V> factory) {\n        super(map);\n        if (factory == null) {\n            throw new NullPointerException(\"Factory must not be null\");\n        }\n        this.factory = FactoryTransformer.factoryTransformer(factory);\n    }\n\n    /**\n     * Constructor that wraps (not copies).\n     *\n     * @param map  the map to decorate, must not be null\n     * @param factory  the factory to use, must not be null\n     * @throws NullPointerException if map or factory is null\n     */\n    protected LazyMap(final Map<K,V> map, final Transformer<? super K, ? extends V> factory) {\n        super(map);\n        if (factory == null) {\n            throw new NullPointerException(\"Factory must not be null\");\n        }\n        this.factory = factory;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Write the map out using a custom routine.\n     *\n     * @param out  the output stream\n     * @throws IOException\n     * @since 3.1\n     */\n    private void writeObject(final ObjectOutputStream out) throws IOException {\n        out.defaultWriteObject();\n        out.writeObject(map);\n    }\n\n    /**\n     * Read the map in using a custom routine.\n     *\n     * @param in  the input stream\n     * @throws IOException\n     * @throws ClassNotFoundException\n     * @since 3.1\n     */\n    @SuppressWarnings(\"unchecked\")\n    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n        in.defaultReadObject();\n        map = (Map<K, V>) in.readObject();\n    }\n\n    //-----------------------------------------------------------------------\n    @Override\n    public V get(final Object key) {\n        // create value for key if key is not currently in the map\n        if (map.containsKey(key) == false) {\n            @SuppressWarnings(\"unchecked\")\n            final K castKey = (K) key;\n            final V value = factory.transform(castKey);\n            map.put(castKey, value);\n            return value;\n        }\n        return map.get(key);\n    }\n\n    // no need to wrap keySet, entrySet or values as they are views of\n    // existing map entries - you can't do a map-style get on them.\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ [ "3.1", "double" ] ],
  "tokensMethodArguments" : [ [ "in", "java.io", "ObjectInputStream" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "putIfAbsent", "java.util", "Map", "public default V putIfAbsent(K arg0, V arg1)" ], [ "put", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public V put(K arg0, V arg1)" ], [ "put", "org.apache.commons.collections4", "Put", "public abstract Object put(K arg0, V arg1)" ], [ "keySet", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Set<K> keySet()" ], [ "entrySet", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Set<Map.Entry<K, V>> entrySet()" ], [ "mapIterator", "org.apache.commons.collections4.map", "AbstractIterableMap", "public MapIterator<K, V> mapIterator()" ], [ "replace", "java.util", "Map", "public default boolean replace(K arg0, V arg1, V arg2)" ], [ "size", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int size()" ], [ "containsKey", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean containsKey(Object arg0)" ], [ "computeIfAbsent", "java.util", "Map", "public default V computeIfAbsent(K arg0, Function<? super K, ? extends V> arg1)" ], [ "isEmpty", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean isEmpty()" ], [ "decorated", "org.apache.commons.collections4.map", "AbstractMapDecorator", "protected Map<K, V> decorated()" ], [ "remove", "java.util", "Map", "public default boolean remove(Object arg0, Object arg1)" ], [ "compute", "java.util", "Map", "public default V compute(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "remove", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public V remove(Object arg0)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "toString", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public String toString()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "merge", "java.util", "Map", "public default V merge(K arg0, V arg1, BiFunction<? super V, ? super V, ? extends V> arg2)" ], [ "getOrDefault", "java.util", "Map", "public default V getOrDefault(Object arg0, V arg1)" ], [ "hashCode", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int hashCode()" ], [ "replace", "java.util", "Map", "public default V replace(K arg0, V arg1)" ], [ "values", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Collection<V> values()" ], [ "containsValue", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean containsValue(Object arg0)" ], [ "computeIfPresent", "java.util", "Map", "public default V computeIfPresent(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "equals", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean equals(Object arg0)" ], [ "get", "org.apache.commons.collections4.map", "LazyMap", "public V get(final Object key)" ], [ "readLong", "java.io", "ObjectInputStream", "public long readLong() throws IOException" ], [ "readChar", "java.io", "ObjectInputStream", "public char readChar() throws IOException" ], [ "readDouble", "java.io", "ObjectInputStream", "public double readDouble() throws IOException" ], [ "readUnsignedByte", "java.io", "ObjectInputStream", "public int readUnsignedByte() throws IOException" ], [ "readObjectOverride", "java.io", "ObjectInputStream", "protected Object readObjectOverride() throws IOException, ClassNotFoundException" ], [ "resolveProxyClass", "java.io", "ObjectInputStream", "protected Class<? extends Object> resolveProxyClass(String[] arg0) throws IOException, ClassNotFoundException" ], [ "enableResolveObject", "java.io", "ObjectInputStream", "protected boolean enableResolveObject(boolean arg0) throws SecurityException" ], [ "readTypeString", "java.io", "ObjectInputStream", "String readTypeString() throws IOException" ], [ "readUnsignedShort", "java.io", "ObjectInputStream", "public int readUnsignedShort() throws IOException" ], [ "readFields", "java.io", "ObjectInputStream", "public ObjectInputStream.GetField readFields() throws IOException, ClassNotFoundException" ], [ "read", "java.io", "ObjectInputStream", "public int read(byte[] arg0, int arg1, int arg2) throws IOException" ], [ "readLine", "java.io", "ObjectInputStream", "public String readLine() throws IOException" ], [ "readUTF", "java.io", "ObjectInputStream", "public String readUTF() throws IOException" ], [ "readUnshared", "java.io", "ObjectInputStream", "public Object readUnshared() throws IOException, ClassNotFoundException" ], [ "readByte", "java.io", "ObjectInputStream", "public byte readByte() throws IOException" ], [ "read", "java.io", "ObjectInputStream", "public int read() throws IOException" ], [ "resolveObject", "java.io", "ObjectInputStream", "protected Object resolveObject(Object arg0) throws IOException" ], [ "available", "java.io", "ObjectInputStream", "public int available() throws IOException" ], [ "readInt", "java.io", "ObjectInputStream", "public int readInt() throws IOException" ], [ "getObjectInputFilter", "java.io", "ObjectInputStream", "public final ObjectInputFilter getObjectInputFilter()" ], [ "skipBytes", "java.io", "ObjectInputStream", "public int skipBytes(int arg0) throws IOException" ], [ "readObject", "java.io", "ObjectInputStream", "public final Object readObject() throws IOException, ClassNotFoundException" ], [ "readClassDescriptor", "java.io", "ObjectInputStream", "protected ObjectStreamClass readClassDescriptor() throws IOException, ClassNotFoundException" ], [ "readShort", "java.io", "ObjectInputStream", "public short readShort() throws IOException" ], [ "readFloat", "java.io", "ObjectInputStream", "public float readFloat() throws IOException" ], [ "readBoolean", "java.io", "ObjectInputStream", "public boolean readBoolean() throws IOException" ], [ "resolveClass", "java.io", "ObjectInputStream", "protected Class<? extends Object> resolveClass(ObjectStreamClass arg0) throws IOException, ClassNotFoundException" ], [ "readNBytes", "java.io", "InputStream", "public int readNBytes(byte[] arg0, int arg1, int arg2) throws IOException" ], [ "readNBytes", "java.io", "InputStream", "public byte[] readNBytes(int arg0) throws IOException" ], [ "read", "java.io", "InputStream", "public int read(byte[] arg0) throws IOException" ], [ "markSupported", "java.io", "InputStream", "public boolean markSupported()" ], [ "read", "java.io", "InputStream", "public int read(byte[] arg0, int arg1, int arg2) throws IOException" ], [ "readAllBytes", "java.io", "InputStream", "public byte[] readAllBytes() throws IOException" ], [ "available", "java.io", "InputStream", "public int available() throws IOException" ], [ "read", "java.io", "InputStream", "public abstract int read() throws IOException" ], [ "skip", "java.io", "InputStream", "public long skip(long arg0) throws IOException" ], [ "transferTo", "java.io", "InputStream", "public long transferTo(OutputStream arg0) throws IOException" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "read", "java.io", "ObjectInput", "public abstract int read() throws IOException" ], [ "available", "java.io", "ObjectInput", "public abstract int available() throws IOException" ], [ "readObject", "java.io", "ObjectInput", "public abstract Object readObject() throws ClassNotFoundException, IOException" ], [ "read", "java.io", "ObjectInput", "public abstract int read(byte[] arg0) throws IOException" ], [ "skip", "java.io", "ObjectInput", "public abstract long skip(long arg0) throws IOException" ], [ "read", "java.io", "ObjectInput", "public abstract int read(byte[] arg0, int arg1, int arg2) throws IOException" ], [ "readUTF", "java.io", "DataInput", "public abstract String readUTF() throws IOException" ], [ "skipBytes", "java.io", "DataInput", "public abstract int skipBytes(int arg0) throws IOException" ], [ "readChar", "java.io", "DataInput", "public abstract char readChar() throws IOException" ], [ "readInt", "java.io", "DataInput", "public abstract int readInt() throws IOException" ], [ "readUnsignedByte", "java.io", "DataInput", "public abstract int readUnsignedByte() throws IOException" ], [ "readFloat", "java.io", "DataInput", "public abstract float readFloat() throws IOException" ], [ "readLine", "java.io", "DataInput", "public abstract String readLine() throws IOException" ], [ "readDouble", "java.io", "DataInput", "public abstract double readDouble() throws IOException" ], [ "readLong", "java.io", "DataInput", "public abstract long readLong() throws IOException" ], [ "readBoolean", "java.io", "DataInput", "public abstract boolean readBoolean() throws IOException" ], [ "readShort", "java.io", "DataInput", "public abstract short readShort() throws IOException" ], [ "readUnsignedShort", "java.io", "DataInput", "public abstract int readUnsignedShort() throws IOException" ], [ "readByte", "java.io", "DataInput", "public abstract byte readByte() throws IOException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "factory", "org.apache.commons.collections4.map", "LazyMap", "protected final Transformer<? super K,? extends V> factory;" ], [ "map", "org.apache.commons.collections4.map", "AbstractMapDecorator", "Map<K, V> map;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 8313,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4.map",
  "className" : "LazyMap",
  "javadocTag" : "@throws ClassNotFoundException",
  "methodJavadoc" : "    /**\n     * Read the map in using a custom routine.\n     *\n     * @param in  the input stream\n     * @throws IOException\n     * @throws ClassNotFoundException\n     * @since 3.1\n     */",
  "methodSourceCode" : "private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException{\n    in.defaultReadObject();\n    map = (Map<K, V>) in.readObject();\n}",
  "classJavadoc" : "/**\n * Decorates another <code>Map</code> to create objects in the map on demand.\n * <p>\n * When the {@link #get(Object)} method is called with a key that does not\n * exist in the map, the factory is used to create the object. The created\n * object will be added to the map using the requested key.\n * <p>\n * For instance:\n * <pre>\n * Factory&lt;Date&gt; factory = new Factory&lt;Date&gt;() {\n *     public Date create() {\n *         return new Date();\n *     }\n * }\n * Map&lt;String, Date&gt; lazy = LazyMap.lazyMap(new HashMap&lt;String, Date&gt;(), factory);\n * Date date = lazy.get(\"NOW\");\n * </pre>\n *\n * After the above code is executed, <code>date</code> will refer to\n * a new <code>Date</code> instance. Furthermore, that <code>Date</code>\n * instance is mapped to the \"NOW\" key in the map.\n * <p>\n * <strong>Note that LazyMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. The simplest approach is to wrap this map\n * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw\n * exceptions when accessed by concurrent threads without synchronization.\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n *\n * @since 3.0\n * @version $Id: LazyMap.java 1686855 2015-06-22 13:00:27Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4.map;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.Factory;\nimport org.apache.commons.collections4.Transformer;\nimport org.apache.commons.collections4.functors.FactoryTransformer;\n\n/**\n * Decorates another <code>Map</code> to create objects in the map on demand.\n * <p>\n * When the {@link #get(Object)} method is called with a key that does not\n * exist in the map, the factory is used to create the object. The created\n * object will be added to the map using the requested key.\n * <p>\n * For instance:\n * <pre>\n * Factory&lt;Date&gt; factory = new Factory&lt;Date&gt;() {\n *     public Date create() {\n *         return new Date();\n *     }\n * }\n * Map&lt;String, Date&gt; lazy = LazyMap.lazyMap(new HashMap&lt;String, Date&gt;(), factory);\n * Date date = lazy.get(\"NOW\");\n * </pre>\n *\n * After the above code is executed, <code>date</code> will refer to\n * a new <code>Date</code> instance. Furthermore, that <code>Date</code>\n * instance is mapped to the \"NOW\" key in the map.\n * <p>\n * <strong>Note that LazyMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. The simplest approach is to wrap this map\n * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw\n * exceptions when accessed by concurrent threads without synchronization.\n * <p>\n * This class is Serializable from Commons Collections 3.1.\n *\n * @since 3.0\n * @version $Id: LazyMap.java 1686855 2015-06-22 13:00:27Z tn $\n */\npublic class LazyMap<K, V> extends AbstractMapDecorator<K, V> implements Serializable {\n\n    /** Serialization version */\n    private static final long serialVersionUID = 7990956402564206740L;\n\n    /** The factory to use to construct elements */\n    protected final Transformer<? super K, ? extends V> factory;\n\n    /**\n     * Factory method to create a lazily instantiated map.\n     *\n     * @param <K>  the key type\n     * @param <V>  the value type\n     * @param map  the map to decorate, must not be null\n     * @param factory  the factory to use, must not be null\n     * @return a new lazy map\n     * @throws NullPointerException if map or factory is null\n     * @since 4.0\n     */\n    public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory< ? extends V> factory) {\n        return new LazyMap<K,V>(map, factory);\n    }\n\n    /**\n     * Factory method to create a lazily instantiated map.\n     *\n     * @param <K>  the key type\n     * @param <V>  the value type\n     * @param map  the map to decorate, must not be null\n     * @param factory  the factory to use, must not be null\n     * @return a new lazy map\n     * @throws NullPointerException if map or factory is null\n     * @since 4.0\n     */\n    public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory) {\n        return new LazyMap<K,V>(map, factory);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Constructor that wraps (not copies).\n     *\n     * @param map  the map to decorate, must not be null\n     * @param factory  the factory to use, must not be null\n     * @throws NullPointerException if map or factory is null\n     */\n    protected LazyMap(final Map<K,V> map, final Factory<? extends V> factory) {\n        super(map);\n        if (factory == null) {\n            throw new NullPointerException(\"Factory must not be null\");\n        }\n        this.factory = FactoryTransformer.factoryTransformer(factory);\n    }\n\n    /**\n     * Constructor that wraps (not copies).\n     *\n     * @param map  the map to decorate, must not be null\n     * @param factory  the factory to use, must not be null\n     * @throws NullPointerException if map or factory is null\n     */\n    protected LazyMap(final Map<K,V> map, final Transformer<? super K, ? extends V> factory) {\n        super(map);\n        if (factory == null) {\n            throw new NullPointerException(\"Factory must not be null\");\n        }\n        this.factory = factory;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Write the map out using a custom routine.\n     *\n     * @param out  the output stream\n     * @throws IOException\n     * @since 3.1\n     */\n    private void writeObject(final ObjectOutputStream out) throws IOException {\n        out.defaultWriteObject();\n        out.writeObject(map);\n    }\n\n    /**\n     * Read the map in using a custom routine.\n     *\n     * @param in  the input stream\n     * @throws IOException\n     * @throws ClassNotFoundException\n     * @since 3.1\n     */\n    @SuppressWarnings(\"unchecked\")\n    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n        in.defaultReadObject();\n        map = (Map<K, V>) in.readObject();\n    }\n\n    //-----------------------------------------------------------------------\n    @Override\n    public V get(final Object key) {\n        // create value for key if key is not currently in the map\n        if (map.containsKey(key) == false) {\n            @SuppressWarnings(\"unchecked\")\n            final K castKey = (K) key;\n            final V value = factory.transform(castKey);\n            map.put(castKey, value);\n            return value;\n        }\n        return map.get(key);\n    }\n\n    // no need to wrap keySet, entrySet or values as they are views of\n    // existing map entries - you can't do a map-style get on them.\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ [ "3.1", "double" ] ],
  "tokensMethodArguments" : [ [ "in", "java.io", "ObjectInputStream" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "replace", "java.util", "Map", "public default boolean replace(K arg0, V arg1, V arg2)" ], [ "put", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public V put(K arg0, V arg1)" ], [ "entrySet", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Set<Map.Entry<K, V>> entrySet()" ], [ "mapIterator", "org.apache.commons.collections4.map", "AbstractIterableMap", "public MapIterator<K, V> mapIterator()" ], [ "toString", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public String toString()" ], [ "hashCode", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int hashCode()" ], [ "isEmpty", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean isEmpty()" ], [ "replace", "java.util", "Map", "public default V replace(K arg0, V arg1)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "remove", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public V remove(Object arg0)" ], [ "get", "org.apache.commons.collections4.map", "LazyMap", "public V get(final Object key)" ], [ "remove", "java.util", "Map", "public default boolean remove(Object arg0, Object arg1)" ], [ "size", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int size()" ], [ "merge", "java.util", "Map", "public default V merge(K arg0, V arg1, BiFunction<? super V, ? super V, ? extends V> arg2)" ], [ "equals", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean equals(Object arg0)" ], [ "decorated", "org.apache.commons.collections4.map", "AbstractMapDecorator", "protected Map<K, V> decorated()" ], [ "values", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Collection<V> values()" ], [ "put", "org.apache.commons.collections4", "Put", "public abstract Object put(K arg0, V arg1)" ], [ "computeIfAbsent", "java.util", "Map", "public default V computeIfAbsent(K arg0, Function<? super K, ? extends V> arg1)" ], [ "containsValue", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean containsValue(Object arg0)" ], [ "compute", "java.util", "Map", "public default V compute(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "containsKey", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean containsKey(Object arg0)" ], [ "computeIfPresent", "java.util", "Map", "public default V computeIfPresent(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "keySet", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public Set<K> keySet()" ], [ "putIfAbsent", "java.util", "Map", "public default V putIfAbsent(K arg0, V arg1)" ], [ "getOrDefault", "java.util", "Map", "public default V getOrDefault(Object arg0, V arg1)" ], [ "enableResolveObject", "java.io", "ObjectInputStream", "protected boolean enableResolveObject(boolean arg0) throws SecurityException" ], [ "readShort", "java.io", "ObjectInputStream", "public short readShort() throws IOException" ], [ "readObject", "java.io", "ObjectInputStream", "public final Object readObject() throws IOException, ClassNotFoundException" ], [ "readBoolean", "java.io", "ObjectInputStream", "public boolean readBoolean() throws IOException" ], [ "getObjectInputFilter", "java.io", "ObjectInputStream", "public final ObjectInputFilter getObjectInputFilter()" ], [ "readClassDescriptor", "java.io", "ObjectInputStream", "protected ObjectStreamClass readClassDescriptor() throws IOException, ClassNotFoundException" ], [ "readUnshared", "java.io", "ObjectInputStream", "public Object readUnshared() throws IOException, ClassNotFoundException" ], [ "read", "java.io", "ObjectInputStream", "public int read(byte[] arg0, int arg1, int arg2) throws IOException" ], [ "resolveProxyClass", "java.io", "ObjectInputStream", "protected Class<? extends Object> resolveProxyClass(String[] arg0) throws IOException, ClassNotFoundException" ], [ "readTypeString", "java.io", "ObjectInputStream", "String readTypeString() throws IOException" ], [ "readFields", "java.io", "ObjectInputStream", "public ObjectInputStream.GetField readFields() throws IOException, ClassNotFoundException" ], [ "readByte", "java.io", "ObjectInputStream", "public byte readByte() throws IOException" ], [ "readInt", "java.io", "ObjectInputStream", "public int readInt() throws IOException" ], [ "readUnsignedShort", "java.io", "ObjectInputStream", "public int readUnsignedShort() throws IOException" ], [ "readLine", "java.io", "ObjectInputStream", "public String readLine() throws IOException" ], [ "readChar", "java.io", "ObjectInputStream", "public char readChar() throws IOException" ], [ "readUnsignedByte", "java.io", "ObjectInputStream", "public int readUnsignedByte() throws IOException" ], [ "available", "java.io", "ObjectInputStream", "public int available() throws IOException" ], [ "resolveClass", "java.io", "ObjectInputStream", "protected Class<? extends Object> resolveClass(ObjectStreamClass arg0) throws IOException, ClassNotFoundException" ], [ "readLong", "java.io", "ObjectInputStream", "public long readLong() throws IOException" ], [ "resolveObject", "java.io", "ObjectInputStream", "protected Object resolveObject(Object arg0) throws IOException" ], [ "readObjectOverride", "java.io", "ObjectInputStream", "protected Object readObjectOverride() throws IOException, ClassNotFoundException" ], [ "readFloat", "java.io", "ObjectInputStream", "public float readFloat() throws IOException" ], [ "readDouble", "java.io", "ObjectInputStream", "public double readDouble() throws IOException" ], [ "read", "java.io", "ObjectInputStream", "public int read() throws IOException" ], [ "readUTF", "java.io", "ObjectInputStream", "public String readUTF() throws IOException" ], [ "skipBytes", "java.io", "ObjectInputStream", "public int skipBytes(int arg0) throws IOException" ], [ "skip", "java.io", "InputStream", "public long skip(long arg0) throws IOException" ], [ "read", "java.io", "InputStream", "public abstract int read() throws IOException" ], [ "available", "java.io", "InputStream", "public int available() throws IOException" ], [ "read", "java.io", "InputStream", "public int read(byte[] arg0, int arg1, int arg2) throws IOException" ], [ "read", "java.io", "InputStream", "public int read(byte[] arg0) throws IOException" ], [ "readNBytes", "java.io", "InputStream", "public byte[] readNBytes(int arg0) throws IOException" ], [ "markSupported", "java.io", "InputStream", "public boolean markSupported()" ], [ "readAllBytes", "java.io", "InputStream", "public byte[] readAllBytes() throws IOException" ], [ "transferTo", "java.io", "InputStream", "public long transferTo(OutputStream arg0) throws IOException" ], [ "readNBytes", "java.io", "InputStream", "public int readNBytes(byte[] arg0, int arg1, int arg2) throws IOException" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "skip", "java.io", "ObjectInput", "public abstract long skip(long arg0) throws IOException" ], [ "read", "java.io", "ObjectInput", "public abstract int read(byte[] arg0) throws IOException" ], [ "read", "java.io", "ObjectInput", "public abstract int read() throws IOException" ], [ "available", "java.io", "ObjectInput", "public abstract int available() throws IOException" ], [ "readObject", "java.io", "ObjectInput", "public abstract Object readObject() throws ClassNotFoundException, IOException" ], [ "read", "java.io", "ObjectInput", "public abstract int read(byte[] arg0, int arg1, int arg2) throws IOException" ], [ "readBoolean", "java.io", "DataInput", "public abstract boolean readBoolean() throws IOException" ], [ "readInt", "java.io", "DataInput", "public abstract int readInt() throws IOException" ], [ "readFloat", "java.io", "DataInput", "public abstract float readFloat() throws IOException" ], [ "readLine", "java.io", "DataInput", "public abstract String readLine() throws IOException" ], [ "skipBytes", "java.io", "DataInput", "public abstract int skipBytes(int arg0) throws IOException" ], [ "readDouble", "java.io", "DataInput", "public abstract double readDouble() throws IOException" ], [ "readUnsignedShort", "java.io", "DataInput", "public abstract int readUnsignedShort() throws IOException" ], [ "readUTF", "java.io", "DataInput", "public abstract String readUTF() throws IOException" ], [ "readChar", "java.io", "DataInput", "public abstract char readChar() throws IOException" ], [ "readByte", "java.io", "DataInput", "public abstract byte readByte() throws IOException" ], [ "readLong", "java.io", "DataInput", "public abstract long readLong() throws IOException" ], [ "readUnsignedByte", "java.io", "DataInput", "public abstract int readUnsignedByte() throws IOException" ], [ "readShort", "java.io", "DataInput", "public abstract short readShort() throws IOException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "factory", "org.apache.commons.collections4.map", "LazyMap", "protected final Transformer<? super K,? extends V> factory;" ], [ "map", "org.apache.commons.collections4.map", "AbstractMapDecorator", "Map<K, V> map;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 8318,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4.map",
  "className" : "PassiveExpiringMap",
  "javadocTag" : "@param expirationTimeObject the expiration time value retrieved from\n       {@link #expirationMap}, can be null.",
  "methodJavadoc" : "    /**\n     * Determines if the given expiration time is less than <code>now</code>.\n     *\n     * @param now the time in milliseconds used to compare against the\n     *        expiration time.\n     * @param expirationTimeObject the expiration time value retrieved from\n     *        {@link #expirationMap}, can be null.\n     * @return <code>true</code> if <code>expirationTimeObject</code> is &ge; 0\n     *         and <code>expirationTimeObject</code> &lt; <code>now</code>.\n     *         <code>false</code> otherwise.\n     */",
  "methodSourceCode" : "private boolean isExpired(final long now, final Long expirationTimeObject){\n    if (expirationTimeObject != null) {\n        final long expirationTime = expirationTimeObject.longValue();\n        return expirationTime >= 0 && now >= expirationTime;\n    }\n    return false;\n}",
  "classJavadoc" : "/**\n * Decorates a <code>Map</code> to evict expired entries once their expiration\n * time has been reached.\n * <p>\n * When putting a key-value pair in the map this decorator uses a\n * {@link ExpirationPolicy} to determine how long the entry should remain alive\n * as defined by an expiration time value.\n * </p>\n * <p>\n * When accessing the mapped value for a key, its expiration time is checked,\n * and if it is a negative value or if it is greater than the current time, the\n * mapped value is returned. Otherwise, the key is removed from the decorated\n * map, and <code>null</code> is returned.\n * </p>\n * <p>\n * When invoking methods that involve accessing the entire map contents (i.e\n * {@link #containsKey(Object)}, {@link #entrySet()}, etc.) this decorator\n * removes all expired entries prior to actually completing the invocation.\n * </p>\n * <p>\n * <strong>Note that {@link PassiveExpiringMap} is not synchronized and is not\n * thread-safe.</strong> If you wish to use this map from multiple threads\n * concurrently, you must use appropriate synchronization. The simplest approach\n * is to wrap this map using {@link java.util.Collections#synchronizedMap(Map)}.\n * This class may throw exceptions when accessed by concurrent threads without\n * synchronization.\n * </p>\n *\n * @param <K> the type of the keys in the map\n * @param <V> the type of the values in the map\n * @since 4.0\n * @version $Id: PassiveExpiringMap.java 1686855 2015-06-22 13:00:27Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4.map;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * Decorates a <code>Map</code> to evict expired entries once their expiration\n * time has been reached.\n * <p>\n * When putting a key-value pair in the map this decorator uses a\n * {@link ExpirationPolicy} to determine how long the entry should remain alive\n * as defined by an expiration time value.\n * </p>\n * <p>\n * When accessing the mapped value for a key, its expiration time is checked,\n * and if it is a negative value or if it is greater than the current time, the\n * mapped value is returned. Otherwise, the key is removed from the decorated\n * map, and <code>null</code> is returned.\n * </p>\n * <p>\n * When invoking methods that involve accessing the entire map contents (i.e\n * {@link #containsKey(Object)}, {@link #entrySet()}, etc.) this decorator\n * removes all expired entries prior to actually completing the invocation.\n * </p>\n * <p>\n * <strong>Note that {@link PassiveExpiringMap} is not synchronized and is not\n * thread-safe.</strong> If you wish to use this map from multiple threads\n * concurrently, you must use appropriate synchronization. The simplest approach\n * is to wrap this map using {@link java.util.Collections#synchronizedMap(Map)}.\n * This class may throw exceptions when accessed by concurrent threads without\n * synchronization.\n * </p>\n *\n * @param <K> the type of the keys in the map\n * @param <V> the type of the values in the map\n * @since 4.0\n * @version $Id: PassiveExpiringMap.java 1686855 2015-06-22 13:00:27Z tn $\n */\npublic class PassiveExpiringMap<K, V>\n    extends AbstractMapDecorator<K, V>\n    implements Serializable {\n\n    /**\n     * A {@link org.apache.commons.collections4.map.PassiveExpiringMap.ExpirationPolicy ExpirationPolicy}\n     * that returns a expiration time that is a\n     * constant about of time in the future from the current time.\n     *\n     * @param <K> the type of the keys in the map\n     * @param <V> the type of the values in the map\n     * @since 4.0\n     * @version $Id: PassiveExpiringMap.java 1686855 2015-06-22 13:00:27Z tn $\n     */\n    public static class ConstantTimeToLiveExpirationPolicy<K, V>\n        implements ExpirationPolicy<K, V> {\n\n        /** Serialization version */\n        private static final long serialVersionUID = 1L;\n\n        /** the constant time-to-live value measured in milliseconds. */\n        private final long timeToLiveMillis;\n\n        /**\n         * Default constructor. Constructs a policy using a negative\n         * time-to-live value that results in entries never expiring.\n         */\n        public ConstantTimeToLiveExpirationPolicy() {\n            this(-1L);\n        }\n\n        /**\n         * Construct a policy with the given time-to-live constant measured in\n         * milliseconds. A negative time-to-live value indicates entries never\n         * expire. A zero time-to-live value indicates entries expire (nearly)\n         * immediately.\n         *\n         * @param timeToLiveMillis the constant amount of time (in milliseconds)\n         *        an entry is available before it expires. A negative value\n         *        results in entries that NEVER expire. A zero value results in\n         *        entries that ALWAYS expire.\n         */\n        public ConstantTimeToLiveExpirationPolicy(final long timeToLiveMillis) {\n            super();\n            this.timeToLiveMillis = timeToLiveMillis;\n        }\n\n        /**\n         * Construct a policy with the given time-to-live constant measured in\n         * the given time unit of measure.\n         *\n         * @param timeToLive the constant amount of time an entry is available\n         *        before it expires. A negative value results in entries that\n         *        NEVER expire. A zero value results in entries that ALWAYS\n         *        expire.\n         * @param timeUnit the unit of time for the <code>timeToLive</code>\n         *        parameter, must not be null.\n         * @throws NullPointerException if the time unit is null.\n         */\n        public ConstantTimeToLiveExpirationPolicy(final long timeToLive,\n                                                  final TimeUnit timeUnit) {\n            this(validateAndConvertToMillis(timeToLive, timeUnit));\n        }\n\n        /**\n         * Determine the expiration time for the given key-value entry.\n         *\n         * @param key the key for the entry (ignored).\n         * @param value the value for the entry (ignored).\n         * @return if {@link #timeToLiveMillis} &ge; 0, an expiration time of\n         *         {@link #timeToLiveMillis} +\n         *         {@link System#currentTimeMillis()} is returned. Otherwise, -1\n         *         is returned indicating the entry never expires.\n         */\n        public long expirationTime(final K key, final V value) {\n            if (timeToLiveMillis >= 0L) {\n                // avoid numerical overflow\n                final long now = System.currentTimeMillis();\n                if (now > Long.MAX_VALUE - timeToLiveMillis) {\n                    // expiration would be greater than Long.MAX_VALUE\n                    // never expire\n                    return -1;\n                }\n\n                // timeToLiveMillis in the future\n                return now + timeToLiveMillis;\n            }\n\n            // never expire\n            return -1L;\n        }\n    }\n\n    /**\n     * A policy to determine the expiration time for key-value entries.\n     *\n     * @param <K> the key object type.\n     * @param <V> the value object type\n     * @since 4.0\n     * @version $Id: PassiveExpiringMap.java 1686855 2015-06-22 13:00:27Z tn $\n     */\n    public static interface ExpirationPolicy<K, V>\n        extends Serializable {\n\n        /**\n         * Determine the expiration time for the given key-value entry.\n         *\n         * @param key the key for the entry.\n         * @param value the value for the entry.\n         * @return the expiration time value measured in milliseconds. A\n         *         negative return value indicates the entry never expires.\n         */\n        long expirationTime(K key, V value);\n    }\n\n    /** Serialization version */\n    private static final long serialVersionUID = 1L;\n\n    /**\n     * First validate the input parameters. If the parameters are valid, convert\n     * the given time measured in the given units to the same time measured in\n     * milliseconds.\n     *\n     * @param timeToLive the constant amount of time an entry is available\n     *        before it expires. A negative value results in entries that NEVER\n     *        expire. A zero value results in entries that ALWAYS expire.\n     * @param timeUnit the unit of time for the <code>timeToLive</code>\n     *        parameter, must not be null.\n     * @throws NullPointerException if the time unit is null.\n     */\n    private static long validateAndConvertToMillis(final long timeToLive,\n                                                   final TimeUnit timeUnit) {\n        if (timeUnit == null) {\n            throw new NullPointerException(\"Time unit must not be null\");\n        }\n        return TimeUnit.MILLISECONDS.convert(timeToLive, timeUnit);\n    }\n\n    /** map used to manage expiration times for the actual map entries. */\n    private final Map<Object, Long> expirationMap = new HashMap<Object, Long>();\n\n    /** the policy used to determine time-to-live values for map entries. */\n    private final ExpirationPolicy<K, V> expiringPolicy;\n\n    /**\n     * Default constructor. Constructs a map decorator that results in entries\n     * NEVER expiring.\n     */\n    public PassiveExpiringMap() {\n        this(-1L);\n    }\n\n    /**\n     * Construct a map decorator using the given expiration policy to determine\n     * expiration times.\n     *\n     * @param expiringPolicy the policy used to determine expiration times of\n     *        entries as they are added.\n     * @throws NullPointerException if expiringPolicy is null\n     */\n    public PassiveExpiringMap(final ExpirationPolicy<K, V> expiringPolicy) {\n        this(expiringPolicy, new HashMap<K, V>());\n    }\n\n    /**\n     * Construct a map decorator that decorates the given map and uses the given\n     * expiration policy to determine expiration times. If there are any\n     * elements already in the map being decorated, they will NEVER expire\n     * unless they are replaced.\n     *\n     * @param expiringPolicy the policy used to determine expiration times of\n     *        entries as they are added.\n     * @param map the map to decorate, must not be null.\n     * @throws NullPointerException if the map or expiringPolicy is null.\n     */\n    public PassiveExpiringMap(final ExpirationPolicy<K, V> expiringPolicy,\n                              final Map<K, V> map) {\n        super(map);\n        if (expiringPolicy == null) {\n            throw new NullPointerException(\"Policy must not be null.\");\n        }\n        this.expiringPolicy = expiringPolicy;\n    }\n\n    /**\n     * Construct a map decorator that decorates the given map using the given\n     * time-to-live value measured in milliseconds to create and use a\n     * {@link ConstantTimeToLiveExpirationPolicy} expiration policy.\n     *\n     * @param timeToLiveMillis the constant amount of time (in milliseconds) an\n     *        entry is available before it expires. A negative value results in\n     *        entries that NEVER expire. A zero value results in entries that\n     *        ALWAYS expire.\n     */\n    public PassiveExpiringMap(final long timeToLiveMillis) {\n        this(new ConstantTimeToLiveExpirationPolicy<K, V>(timeToLiveMillis),\n             new HashMap<K, V>());\n    }\n\n    /**\n     * Construct a map decorator using the given time-to-live value measured in\n     * milliseconds to create and use a\n     * {@link ConstantTimeToLiveExpirationPolicy} expiration policy. If there\n     * are any elements already in the map being decorated, they will NEVER\n     * expire unless they are replaced.\n     *\n     * @param timeToLiveMillis the constant amount of time (in milliseconds) an\n     *        entry is available before it expires. A negative value results in\n     *        entries that NEVER expire. A zero value results in entries that\n     *        ALWAYS expire.\n     * @param map the map to decorate, must not be null.\n     * @throws NullPointerException if the map is null.\n     */\n    public PassiveExpiringMap(final long timeToLiveMillis, final Map<K, V> map) {\n        this(new ConstantTimeToLiveExpirationPolicy<K, V>(timeToLiveMillis),\n             map);\n    }\n\n    /**\n     * Construct a map decorator using the given time-to-live value measured in\n     * the given time units of measure to create and use a\n     * {@link ConstantTimeToLiveExpirationPolicy} expiration policy.\n     *\n     * @param timeToLive the constant amount of time an entry is available\n     *        before it expires. A negative value results in entries that NEVER\n     *        expire. A zero value results in entries that ALWAYS expire.\n     * @param timeUnit the unit of time for the <code>timeToLive</code>\n     *        parameter, must not be null.\n     * @throws NullPointerException if the time unit is null.\n     */\n    public PassiveExpiringMap(final long timeToLive, final TimeUnit timeUnit) {\n        this(validateAndConvertToMillis(timeToLive, timeUnit));\n    }\n\n    /**\n     * Construct a map decorator that decorates the given map using the given\n     * time-to-live value measured in the given time units of measure to create\n     * {@link ConstantTimeToLiveExpirationPolicy} expiration policy. This policy\n     * is used to determine expiration times. If there are any elements already\n     * in the map being decorated, they will NEVER expire unless they are\n     * replaced.\n     *\n     * @param timeToLive the constant amount of time an entry is available\n     *        before it expires. A negative value results in entries that NEVER\n     *        expire. A zero value results in entries that ALWAYS expire.\n     * @param timeUnit the unit of time for the <code>timeToLive</code>\n     *        parameter, must not be null.\n     * @param map the map to decorate, must not be null.\n     * @throws NullPointerException if the map or time unit is null.\n     */\n    public PassiveExpiringMap(final long timeToLive, final TimeUnit timeUnit, final Map<K, V> map) {\n        this(validateAndConvertToMillis(timeToLive, timeUnit), map);\n    }\n\n    /**\n     * Constructs a map decorator that decorates the given map and results in\n     * entries NEVER expiring. If there are any elements already in the map\n     * being decorated, they also will NEVER expire.\n     *\n     * @param map the map to decorate, must not be null.\n     * @throws NullPointerException if the map is null.\n     */\n    public PassiveExpiringMap(final Map<K, V> map) {\n        this(-1L, map);\n    }\n\n    /**\n     * Normal {@link Map#clear()} behavior with the addition of clearing all\n     * expiration entries as well.\n     */\n    @Override\n    public void clear() {\n        super.clear();\n        expirationMap.clear();\n    }\n\n    /**\n     * All expired entries are removed from the map prior to determining the\n     * contains result.\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean containsKey(final Object key) {\n        removeIfExpired(key, now());\n        return super.containsKey(key);\n    }\n\n    /**\n     * All expired entries are removed from the map prior to determining the\n     * contains result.\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean containsValue(final Object value) {\n        removeAllExpired(now());\n        return super.containsValue(value);\n    }\n\n    /**\n     * All expired entries are removed from the map prior to returning the entry set.\n     * {@inheritDoc}\n     */\n    @Override\n    public Set<Entry<K, V>> entrySet() {\n        removeAllExpired(now());\n        return super.entrySet();\n    }\n\n    /**\n     * All expired entries are removed from the map prior to returning the entry value.\n     * {@inheritDoc}\n     */\n    @Override\n    public V get(final Object key) {\n        removeIfExpired(key, now());\n        return super.get(key);\n    }\n\n    /**\n     * All expired entries are removed from the map prior to determining if it is empty.\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean isEmpty() {\n        removeAllExpired(now());\n        return super.isEmpty();\n    }\n\n    /**\n     * Determines if the given expiration time is less than <code>now</code>.\n     *\n     * @param now the time in milliseconds used to compare against the\n     *        expiration time.\n     * @param expirationTimeObject the expiration time value retrieved from\n     *        {@link #expirationMap}, can be null.\n     * @return <code>true</code> if <code>expirationTimeObject</code> is &ge; 0\n     *         and <code>expirationTimeObject</code> &lt; <code>now</code>.\n     *         <code>false</code> otherwise.\n     */\n    private boolean isExpired(final long now, final Long expirationTimeObject) {\n        if (expirationTimeObject != null) {\n            final long expirationTime = expirationTimeObject.longValue();\n            return expirationTime >= 0 && now >= expirationTime;\n        }\n        return false;\n    }\n\n    /**\n     * All expired entries are removed from the map prior to returning the key set.\n     * {@inheritDoc}\n     */\n    @Override\n    public Set<K> keySet() {\n        removeAllExpired(now());\n        return super.keySet();\n    }\n\n    /**\n     * The current time in milliseconds.\n     */\n    private long now() {\n        return System.currentTimeMillis();\n    }\n\n    /**\n    * Add the given key-value pair to this map as well as recording the entry's expiration time based on\n    * the current time in milliseconds and this map's {@link #expiringPolicy}.\n    * <p>\n    * {@inheritDoc}\n    */\n    @Override\n    public V put(final K key, final V value) {\n        // record expiration time of new entry\n        final long expirationTime = expiringPolicy.expirationTime(key, value);\n        expirationMap.put(key, Long.valueOf(expirationTime));\n\n        return super.put(key, value);\n    }\n\n    @Override\n    public void putAll(final Map<? extends K, ? extends V> mapToCopy) {\n        for (final Map.Entry<? extends K, ? extends V> entry : mapToCopy.entrySet()) {\n            put(entry.getKey(), entry.getValue());\n        }\n    }\n\n    /**\n     * Normal {@link Map#remove(Object)} behavior with the addition of removing\n     * any expiration entry as well.\n     * {@inheritDoc}\n     */\n    @Override\n    public V remove(final Object key) {\n        expirationMap.remove(key);\n        return super.remove(key);\n    }\n\n    /**\n     * Removes all entries in the map whose expiration time is less than\n     * <code>now</code>. The exceptions are entries with negative expiration\n     * times; those entries are never removed.\n     *\n     * @see #isExpired(long, Long)\n     */\n    private void removeAllExpired(final long now) {\n        final Iterator<Map.Entry<Object, Long>> iter = expirationMap.entrySet().iterator();\n        while (iter.hasNext()) {\n            final Map.Entry<Object, Long> expirationEntry = iter.next();\n            if (isExpired(now, expirationEntry.getValue())) {\n                // remove entry from collection\n                super.remove(expirationEntry.getKey());\n                // remove entry from expiration map\n                iter.remove();\n            }\n        }\n    }\n\n    /**\n     * Removes the entry with the given key if the entry's expiration time is\n     * less than <code>now</code>. If the entry has a negative expiration time,\n     * the entry is never removed.\n     */\n    private void removeIfExpired(final Object key, final long now) {\n        final Long expirationTimeObject = expirationMap.get(key);\n        if (isExpired(now, expirationTimeObject)) {\n            remove(key);\n        }\n    }\n\n    /**\n     * All expired entries are removed from the map prior to returning the size.\n     * {@inheritDoc}\n     */\n    @Override\n    public int size() {\n        removeAllExpired(now());\n        return super.size();\n    }\n\n    /**\n     * Read the map in using a custom routine.\n     *\n     * @param in the input stream\n     * @throws IOException\n     * @throws ClassNotFoundException\n     */\n    @SuppressWarnings(\"unchecked\")\n    // (1) should only fail if input stream is incorrect\n    private void readObject(final ObjectInputStream in)\n        throws IOException, ClassNotFoundException {\n        in.defaultReadObject();\n        map = (Map<K, V>) in.readObject(); // (1)\n    }\n\n    /**\n     * Write the map out using a custom routine.\n     *\n     * @param out the output stream\n     * @throws IOException\n     */\n    private void writeObject(final ObjectOutputStream out)\n        throws IOException {\n        out.defaultWriteObject();\n        out.writeObject(map);\n    }\n\n    /**\n     * All expired entries are removed from the map prior to returning the value collection.\n     * {@inheritDoc}\n     */\n    @Override\n    public Collection<V> values() {\n        removeAllExpired(now());\n        return super.values();\n    }\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ [ "0", "int" ] ],
  "tokensMethodArguments" : [ [ "now", "", "long" ], [ "expirationTimeObject", "java.lang", "Long" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "decorated", "org.apache.commons.collections4.map", "AbstractMapDecorator", "protected Map<K, V> decorated()" ], [ "size", "org.apache.commons.collections4.map", "PassiveExpiringMap", "public int size()" ], [ "get", "org.apache.commons.collections4.map", "PassiveExpiringMap", "public V get(final Object key)" ], [ "compute", "java.util", "Map", "public default V compute(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "computeIfPresent", "java.util", "Map", "public default V computeIfPresent(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "computeIfAbsent", "java.util", "Map", "public default V computeIfAbsent(K arg0, Function<? super K, ? extends V> arg1)" ], [ "merge", "java.util", "Map", "public default V merge(K arg0, V arg1, BiFunction<? super V, ? super V, ? extends V> arg2)" ], [ "keySet", "org.apache.commons.collections4.map", "PassiveExpiringMap", "public Set<K> keySet()" ], [ "hashCode", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int hashCode()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "values", "org.apache.commons.collections4.map", "PassiveExpiringMap", "public Collection<V> values()" ], [ "getOrDefault", "java.util", "Map", "public default V getOrDefault(Object arg0, V arg1)" ], [ "containsKey", "org.apache.commons.collections4.map", "PassiveExpiringMap", "public boolean containsKey(final Object key)" ], [ "toString", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public String toString()" ], [ "mapIterator", "org.apache.commons.collections4.map", "AbstractIterableMap", "public MapIterator<K, V> mapIterator()" ], [ "replace", "java.util", "Map", "public default V replace(K arg0, V arg1)" ], [ "equals", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean equals(Object arg0)" ], [ "replace", "java.util", "Map", "public default boolean replace(K arg0, V arg1, V arg2)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "remove", "org.apache.commons.collections4.map", "PassiveExpiringMap", "public V remove(final Object key)" ], [ "containsValue", "org.apache.commons.collections4.map", "PassiveExpiringMap", "public boolean containsValue(final Object value)" ], [ "remove", "java.util", "Map", "public default boolean remove(Object arg0, Object arg1)" ], [ "putIfAbsent", "java.util", "Map", "public default V putIfAbsent(K arg0, V arg1)" ], [ "isEmpty", "org.apache.commons.collections4.map", "PassiveExpiringMap", "public boolean isEmpty()" ], [ "entrySet", "org.apache.commons.collections4.map", "PassiveExpiringMap", "public Set<Entry<K, V>> entrySet()" ], [ "put", "org.apache.commons.collections4.map", "PassiveExpiringMap", "public V put(final K key, final V value)" ], [ "put", "org.apache.commons.collections4", "Put", "public abstract Object put(K arg0, V arg1)" ], [ "intValue", "java.lang", "Long", "public int intValue()" ], [ "equals", "java.lang", "Long", "public boolean equals(Object arg0)" ], [ "floatValue", "java.lang", "Long", "public float floatValue()" ], [ "toString", "java.lang", "Long", "public String toString()" ], [ "describeConstable", "java.lang", "Long", "public Optional<Long> describeConstable()" ], [ "doubleValue", "java.lang", "Long", "public double doubleValue()" ], [ "compareTo", "java.lang", "Long", "public int compareTo(Long arg0)" ], [ "hashCode", "java.lang", "Long", "public int hashCode()" ], [ "byteValue", "java.lang", "Long", "public byte byteValue()" ], [ "shortValue", "java.lang", "Long", "public short shortValue()" ], [ "longValue", "java.lang", "Long", "public long longValue()" ], [ "resolveConstantDesc", "java.lang", "Long", "public Long resolveConstantDesc(MethodHandles.Lookup arg0)" ], [ "byteValue", "java.lang", "Number", "public byte byteValue()" ], [ "doubleValue", "java.lang", "Number", "public abstract double doubleValue()" ], [ "intValue", "java.lang", "Number", "public abstract int intValue()" ], [ "floatValue", "java.lang", "Number", "public abstract float floatValue()" ], [ "longValue", "java.lang", "Number", "public abstract long longValue()" ], [ "shortValue", "java.lang", "Number", "public short shortValue()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "compareTo", "java.lang", "Comparable", "public abstract int compareTo(T arg0)" ], [ "describeConstable", "java.lang.constant", "Constable", "public abstract Optional<? extends ConstantDesc> describeConstable()" ], [ "resolveConstantDesc", "java.lang.constant", "ConstantDesc", "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "map", "org.apache.commons.collections4.map", "AbstractMapDecorator", "Map<K, V> map;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 8322,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4.map",
  "className" : "PassiveExpiringMap",
  "javadocTag" : "@throws ClassNotFoundException",
  "methodJavadoc" : "    /**\n     * Read the map in using a custom routine.\n     *\n     * @param in the input stream\n     * @throws IOException\n     * @throws ClassNotFoundException\n     */",
  "methodSourceCode" : "private // (1) should only fail if input stream is incorrect\nvoid readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException{\n    in.defaultReadObject();\n    // (1)\n    map = (Map<K, V>) in.readObject();\n}",
  "classJavadoc" : "/**\n * Decorates a <code>Map</code> to evict expired entries once their expiration\n * time has been reached.\n * <p>\n * When putting a key-value pair in the map this decorator uses a\n * {@link ExpirationPolicy} to determine how long the entry should remain alive\n * as defined by an expiration time value.\n * </p>\n * <p>\n * When accessing the mapped value for a key, its expiration time is checked,\n * and if it is a negative value or if it is greater than the current time, the\n * mapped value is returned. Otherwise, the key is removed from the decorated\n * map, and <code>null</code> is returned.\n * </p>\n * <p>\n * When invoking methods that involve accessing the entire map contents (i.e\n * {@link #containsKey(Object)}, {@link #entrySet()}, etc.) this decorator\n * removes all expired entries prior to actually completing the invocation.\n * </p>\n * <p>\n * <strong>Note that {@link PassiveExpiringMap} is not synchronized and is not\n * thread-safe.</strong> If you wish to use this map from multiple threads\n * concurrently, you must use appropriate synchronization. The simplest approach\n * is to wrap this map using {@link java.util.Collections#synchronizedMap(Map)}.\n * This class may throw exceptions when accessed by concurrent threads without\n * synchronization.\n * </p>\n *\n * @param <K> the type of the keys in the map\n * @param <V> the type of the values in the map\n * @since 4.0\n * @version $Id: PassiveExpiringMap.java 1686855 2015-06-22 13:00:27Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4.map;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * Decorates a <code>Map</code> to evict expired entries once their expiration\n * time has been reached.\n * <p>\n * When putting a key-value pair in the map this decorator uses a\n * {@link ExpirationPolicy} to determine how long the entry should remain alive\n * as defined by an expiration time value.\n * </p>\n * <p>\n * When accessing the mapped value for a key, its expiration time is checked,\n * and if it is a negative value or if it is greater than the current time, the\n * mapped value is returned. Otherwise, the key is removed from the decorated\n * map, and <code>null</code> is returned.\n * </p>\n * <p>\n * When invoking methods that involve accessing the entire map contents (i.e\n * {@link #containsKey(Object)}, {@link #entrySet()}, etc.) this decorator\n * removes all expired entries prior to actually completing the invocation.\n * </p>\n * <p>\n * <strong>Note that {@link PassiveExpiringMap} is not synchronized and is not\n * thread-safe.</strong> If you wish to use this map from multiple threads\n * concurrently, you must use appropriate synchronization. The simplest approach\n * is to wrap this map using {@link java.util.Collections#synchronizedMap(Map)}.\n * This class may throw exceptions when accessed by concurrent threads without\n * synchronization.\n * </p>\n *\n * @param <K> the type of the keys in the map\n * @param <V> the type of the values in the map\n * @since 4.0\n * @version $Id: PassiveExpiringMap.java 1686855 2015-06-22 13:00:27Z tn $\n */\npublic class PassiveExpiringMap<K, V>\n    extends AbstractMapDecorator<K, V>\n    implements Serializable {\n\n    /**\n     * A {@link org.apache.commons.collections4.map.PassiveExpiringMap.ExpirationPolicy ExpirationPolicy}\n     * that returns a expiration time that is a\n     * constant about of time in the future from the current time.\n     *\n     * @param <K> the type of the keys in the map\n     * @param <V> the type of the values in the map\n     * @since 4.0\n     * @version $Id: PassiveExpiringMap.java 1686855 2015-06-22 13:00:27Z tn $\n     */\n    public static class ConstantTimeToLiveExpirationPolicy<K, V>\n        implements ExpirationPolicy<K, V> {\n\n        /** Serialization version */\n        private static final long serialVersionUID = 1L;\n\n        /** the constant time-to-live value measured in milliseconds. */\n        private final long timeToLiveMillis;\n\n        /**\n         * Default constructor. Constructs a policy using a negative\n         * time-to-live value that results in entries never expiring.\n         */\n        public ConstantTimeToLiveExpirationPolicy() {\n            this(-1L);\n        }\n\n        /**\n         * Construct a policy with the given time-to-live constant measured in\n         * milliseconds. A negative time-to-live value indicates entries never\n         * expire. A zero time-to-live value indicates entries expire (nearly)\n         * immediately.\n         *\n         * @param timeToLiveMillis the constant amount of time (in milliseconds)\n         *        an entry is available before it expires. A negative value\n         *        results in entries that NEVER expire. A zero value results in\n         *        entries that ALWAYS expire.\n         */\n        public ConstantTimeToLiveExpirationPolicy(final long timeToLiveMillis) {\n            super();\n            this.timeToLiveMillis = timeToLiveMillis;\n        }\n\n        /**\n         * Construct a policy with the given time-to-live constant measured in\n         * the given time unit of measure.\n         *\n         * @param timeToLive the constant amount of time an entry is available\n         *        before it expires. A negative value results in entries that\n         *        NEVER expire. A zero value results in entries that ALWAYS\n         *        expire.\n         * @param timeUnit the unit of time for the <code>timeToLive</code>\n         *        parameter, must not be null.\n         * @throws NullPointerException if the time unit is null.\n         */\n        public ConstantTimeToLiveExpirationPolicy(final long timeToLive,\n                                                  final TimeUnit timeUnit) {\n            this(validateAndConvertToMillis(timeToLive, timeUnit));\n        }\n\n        /**\n         * Determine the expiration time for the given key-value entry.\n         *\n         * @param key the key for the entry (ignored).\n         * @param value the value for the entry (ignored).\n         * @return if {@link #timeToLiveMillis} &ge; 0, an expiration time of\n         *         {@link #timeToLiveMillis} +\n         *         {@link System#currentTimeMillis()} is returned. Otherwise, -1\n         *         is returned indicating the entry never expires.\n         */\n        public long expirationTime(final K key, final V value) {\n            if (timeToLiveMillis >= 0L) {\n                // avoid numerical overflow\n                final long now = System.currentTimeMillis();\n                if (now > Long.MAX_VALUE - timeToLiveMillis) {\n                    // expiration would be greater than Long.MAX_VALUE\n                    // never expire\n                    return -1;\n                }\n\n                // timeToLiveMillis in the future\n                return now + timeToLiveMillis;\n            }\n\n            // never expire\n            return -1L;\n        }\n    }\n\n    /**\n     * A policy to determine the expiration time for key-value entries.\n     *\n     * @param <K> the key object type.\n     * @param <V> the value object type\n     * @since 4.0\n     * @version $Id: PassiveExpiringMap.java 1686855 2015-06-22 13:00:27Z tn $\n     */\n    public static interface ExpirationPolicy<K, V>\n        extends Serializable {\n\n        /**\n         * Determine the expiration time for the given key-value entry.\n         *\n         * @param key the key for the entry.\n         * @param value the value for the entry.\n         * @return the expiration time value measured in milliseconds. A\n         *         negative return value indicates the entry never expires.\n         */\n        long expirationTime(K key, V value);\n    }\n\n    /** Serialization version */\n    private static final long serialVersionUID = 1L;\n\n    /**\n     * First validate the input parameters. If the parameters are valid, convert\n     * the given time measured in the given units to the same time measured in\n     * milliseconds.\n     *\n     * @param timeToLive the constant amount of time an entry is available\n     *        before it expires. A negative value results in entries that NEVER\n     *        expire. A zero value results in entries that ALWAYS expire.\n     * @param timeUnit the unit of time for the <code>timeToLive</code>\n     *        parameter, must not be null.\n     * @throws NullPointerException if the time unit is null.\n     */\n    private static long validateAndConvertToMillis(final long timeToLive,\n                                                   final TimeUnit timeUnit) {\n        if (timeUnit == null) {\n            throw new NullPointerException(\"Time unit must not be null\");\n        }\n        return TimeUnit.MILLISECONDS.convert(timeToLive, timeUnit);\n    }\n\n    /** map used to manage expiration times for the actual map entries. */\n    private final Map<Object, Long> expirationMap = new HashMap<Object, Long>();\n\n    /** the policy used to determine time-to-live values for map entries. */\n    private final ExpirationPolicy<K, V> expiringPolicy;\n\n    /**\n     * Default constructor. Constructs a map decorator that results in entries\n     * NEVER expiring.\n     */\n    public PassiveExpiringMap() {\n        this(-1L);\n    }\n\n    /**\n     * Construct a map decorator using the given expiration policy to determine\n     * expiration times.\n     *\n     * @param expiringPolicy the policy used to determine expiration times of\n     *        entries as they are added.\n     * @throws NullPointerException if expiringPolicy is null\n     */\n    public PassiveExpiringMap(final ExpirationPolicy<K, V> expiringPolicy) {\n        this(expiringPolicy, new HashMap<K, V>());\n    }\n\n    /**\n     * Construct a map decorator that decorates the given map and uses the given\n     * expiration policy to determine expiration times. If there are any\n     * elements already in the map being decorated, they will NEVER expire\n     * unless they are replaced.\n     *\n     * @param expiringPolicy the policy used to determine expiration times of\n     *        entries as they are added.\n     * @param map the map to decorate, must not be null.\n     * @throws NullPointerException if the map or expiringPolicy is null.\n     */\n    public PassiveExpiringMap(final ExpirationPolicy<K, V> expiringPolicy,\n                              final Map<K, V> map) {\n        super(map);\n        if (expiringPolicy == null) {\n            throw new NullPointerException(\"Policy must not be null.\");\n        }\n        this.expiringPolicy = expiringPolicy;\n    }\n\n    /**\n     * Construct a map decorator that decorates the given map using the given\n     * time-to-live value measured in milliseconds to create and use a\n     * {@link ConstantTimeToLiveExpirationPolicy} expiration policy.\n     *\n     * @param timeToLiveMillis the constant amount of time (in milliseconds) an\n     *        entry is available before it expires. A negative value results in\n     *        entries that NEVER expire. A zero value results in entries that\n     *        ALWAYS expire.\n     */\n    public PassiveExpiringMap(final long timeToLiveMillis) {\n        this(new ConstantTimeToLiveExpirationPolicy<K, V>(timeToLiveMillis),\n             new HashMap<K, V>());\n    }\n\n    /**\n     * Construct a map decorator using the given time-to-live value measured in\n     * milliseconds to create and use a\n     * {@link ConstantTimeToLiveExpirationPolicy} expiration policy. If there\n     * are any elements already in the map being decorated, they will NEVER\n     * expire unless they are replaced.\n     *\n     * @param timeToLiveMillis the constant amount of time (in milliseconds) an\n     *        entry is available before it expires. A negative value results in\n     *        entries that NEVER expire. A zero value results in entries that\n     *        ALWAYS expire.\n     * @param map the map to decorate, must not be null.\n     * @throws NullPointerException if the map is null.\n     */\n    public PassiveExpiringMap(final long timeToLiveMillis, final Map<K, V> map) {\n        this(new ConstantTimeToLiveExpirationPolicy<K, V>(timeToLiveMillis),\n             map);\n    }\n\n    /**\n     * Construct a map decorator using the given time-to-live value measured in\n     * the given time units of measure to create and use a\n     * {@link ConstantTimeToLiveExpirationPolicy} expiration policy.\n     *\n     * @param timeToLive the constant amount of time an entry is available\n     *        before it expires. A negative value results in entries that NEVER\n     *        expire. A zero value results in entries that ALWAYS expire.\n     * @param timeUnit the unit of time for the <code>timeToLive</code>\n     *        parameter, must not be null.\n     * @throws NullPointerException if the time unit is null.\n     */\n    public PassiveExpiringMap(final long timeToLive, final TimeUnit timeUnit) {\n        this(validateAndConvertToMillis(timeToLive, timeUnit));\n    }\n\n    /**\n     * Construct a map decorator that decorates the given map using the given\n     * time-to-live value measured in the given time units of measure to create\n     * {@link ConstantTimeToLiveExpirationPolicy} expiration policy. This policy\n     * is used to determine expiration times. If there are any elements already\n     * in the map being decorated, they will NEVER expire unless they are\n     * replaced.\n     *\n     * @param timeToLive the constant amount of time an entry is available\n     *        before it expires. A negative value results in entries that NEVER\n     *        expire. A zero value results in entries that ALWAYS expire.\n     * @param timeUnit the unit of time for the <code>timeToLive</code>\n     *        parameter, must not be null.\n     * @param map the map to decorate, must not be null.\n     * @throws NullPointerException if the map or time unit is null.\n     */\n    public PassiveExpiringMap(final long timeToLive, final TimeUnit timeUnit, final Map<K, V> map) {\n        this(validateAndConvertToMillis(timeToLive, timeUnit), map);\n    }\n\n    /**\n     * Constructs a map decorator that decorates the given map and results in\n     * entries NEVER expiring. If there are any elements already in the map\n     * being decorated, they also will NEVER expire.\n     *\n     * @param map the map to decorate, must not be null.\n     * @throws NullPointerException if the map is null.\n     */\n    public PassiveExpiringMap(final Map<K, V> map) {\n        this(-1L, map);\n    }\n\n    /**\n     * Normal {@link Map#clear()} behavior with the addition of clearing all\n     * expiration entries as well.\n     */\n    @Override\n    public void clear() {\n        super.clear();\n        expirationMap.clear();\n    }\n\n    /**\n     * All expired entries are removed from the map prior to determining the\n     * contains result.\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean containsKey(final Object key) {\n        removeIfExpired(key, now());\n        return super.containsKey(key);\n    }\n\n    /**\n     * All expired entries are removed from the map prior to determining the\n     * contains result.\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean containsValue(final Object value) {\n        removeAllExpired(now());\n        return super.containsValue(value);\n    }\n\n    /**\n     * All expired entries are removed from the map prior to returning the entry set.\n     * {@inheritDoc}\n     */\n    @Override\n    public Set<Entry<K, V>> entrySet() {\n        removeAllExpired(now());\n        return super.entrySet();\n    }\n\n    /**\n     * All expired entries are removed from the map prior to returning the entry value.\n     * {@inheritDoc}\n     */\n    @Override\n    public V get(final Object key) {\n        removeIfExpired(key, now());\n        return super.get(key);\n    }\n\n    /**\n     * All expired entries are removed from the map prior to determining if it is empty.\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean isEmpty() {\n        removeAllExpired(now());\n        return super.isEmpty();\n    }\n\n    /**\n     * Determines if the given expiration time is less than <code>now</code>.\n     *\n     * @param now the time in milliseconds used to compare against the\n     *        expiration time.\n     * @param expirationTimeObject the expiration time value retrieved from\n     *        {@link #expirationMap}, can be null.\n     * @return <code>true</code> if <code>expirationTimeObject</code> is &ge; 0\n     *         and <code>expirationTimeObject</code> &lt; <code>now</code>.\n     *         <code>false</code> otherwise.\n     */\n    private boolean isExpired(final long now, final Long expirationTimeObject) {\n        if (expirationTimeObject != null) {\n            final long expirationTime = expirationTimeObject.longValue();\n            return expirationTime >= 0 && now >= expirationTime;\n        }\n        return false;\n    }\n\n    /**\n     * All expired entries are removed from the map prior to returning the key set.\n     * {@inheritDoc}\n     */\n    @Override\n    public Set<K> keySet() {\n        removeAllExpired(now());\n        return super.keySet();\n    }\n\n    /**\n     * The current time in milliseconds.\n     */\n    private long now() {\n        return System.currentTimeMillis();\n    }\n\n    /**\n    * Add the given key-value pair to this map as well as recording the entry's expiration time based on\n    * the current time in milliseconds and this map's {@link #expiringPolicy}.\n    * <p>\n    * {@inheritDoc}\n    */\n    @Override\n    public V put(final K key, final V value) {\n        // record expiration time of new entry\n        final long expirationTime = expiringPolicy.expirationTime(key, value);\n        expirationMap.put(key, Long.valueOf(expirationTime));\n\n        return super.put(key, value);\n    }\n\n    @Override\n    public void putAll(final Map<? extends K, ? extends V> mapToCopy) {\n        for (final Map.Entry<? extends K, ? extends V> entry : mapToCopy.entrySet()) {\n            put(entry.getKey(), entry.getValue());\n        }\n    }\n\n    /**\n     * Normal {@link Map#remove(Object)} behavior with the addition of removing\n     * any expiration entry as well.\n     * {@inheritDoc}\n     */\n    @Override\n    public V remove(final Object key) {\n        expirationMap.remove(key);\n        return super.remove(key);\n    }\n\n    /**\n     * Removes all entries in the map whose expiration time is less than\n     * <code>now</code>. The exceptions are entries with negative expiration\n     * times; those entries are never removed.\n     *\n     * @see #isExpired(long, Long)\n     */\n    private void removeAllExpired(final long now) {\n        final Iterator<Map.Entry<Object, Long>> iter = expirationMap.entrySet().iterator();\n        while (iter.hasNext()) {\n            final Map.Entry<Object, Long> expirationEntry = iter.next();\n            if (isExpired(now, expirationEntry.getValue())) {\n                // remove entry from collection\n                super.remove(expirationEntry.getKey());\n                // remove entry from expiration map\n                iter.remove();\n            }\n        }\n    }\n\n    /**\n     * Removes the entry with the given key if the entry's expiration time is\n     * less than <code>now</code>. If the entry has a negative expiration time,\n     * the entry is never removed.\n     */\n    private void removeIfExpired(final Object key, final long now) {\n        final Long expirationTimeObject = expirationMap.get(key);\n        if (isExpired(now, expirationTimeObject)) {\n            remove(key);\n        }\n    }\n\n    /**\n     * All expired entries are removed from the map prior to returning the size.\n     * {@inheritDoc}\n     */\n    @Override\n    public int size() {\n        removeAllExpired(now());\n        return super.size();\n    }\n\n    /**\n     * Read the map in using a custom routine.\n     *\n     * @param in the input stream\n     * @throws IOException\n     * @throws ClassNotFoundException\n     */\n    @SuppressWarnings(\"unchecked\")\n    // (1) should only fail if input stream is incorrect\n    private void readObject(final ObjectInputStream in)\n        throws IOException, ClassNotFoundException {\n        in.defaultReadObject();\n        map = (Map<K, V>) in.readObject(); // (1)\n    }\n\n    /**\n     * Write the map out using a custom routine.\n     *\n     * @param out the output stream\n     * @throws IOException\n     */\n    private void writeObject(final ObjectOutputStream out)\n        throws IOException {\n        out.defaultWriteObject();\n        out.writeObject(map);\n    }\n\n    /**\n     * All expired entries are removed from the map prior to returning the value collection.\n     * {@inheritDoc}\n     */\n    @Override\n    public Collection<V> values() {\n        removeAllExpired(now());\n        return super.values();\n    }\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "in", "java.io", "ObjectInputStream" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "replace", "java.util", "Map", "public default boolean replace(K arg0, V arg1, V arg2)" ], [ "remove", "java.util", "Map", "public default boolean remove(Object arg0, Object arg1)" ], [ "computeIfAbsent", "java.util", "Map", "public default V computeIfAbsent(K arg0, Function<? super K, ? extends V> arg1)" ], [ "computeIfPresent", "java.util", "Map", "public default V computeIfPresent(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "mapIterator", "org.apache.commons.collections4.map", "AbstractIterableMap", "public MapIterator<K, V> mapIterator()" ], [ "equals", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean equals(Object arg0)" ], [ "replace", "java.util", "Map", "public default V replace(K arg0, V arg1)" ], [ "values", "org.apache.commons.collections4.map", "PassiveExpiringMap", "public Collection<V> values()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "put", "org.apache.commons.collections4", "Put", "public abstract Object put(K arg0, V arg1)" ], [ "decorated", "org.apache.commons.collections4.map", "AbstractMapDecorator", "protected Map<K, V> decorated()" ], [ "getOrDefault", "java.util", "Map", "public default V getOrDefault(Object arg0, V arg1)" ], [ "toString", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public String toString()" ], [ "entrySet", "org.apache.commons.collections4.map", "PassiveExpiringMap", "public Set<Entry<K, V>> entrySet()" ], [ "put", "org.apache.commons.collections4.map", "PassiveExpiringMap", "public V put(final K key, final V value)" ], [ "size", "org.apache.commons.collections4.map", "PassiveExpiringMap", "public int size()" ], [ "hashCode", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int hashCode()" ], [ "isEmpty", "org.apache.commons.collections4.map", "PassiveExpiringMap", "public boolean isEmpty()" ], [ "keySet", "org.apache.commons.collections4.map", "PassiveExpiringMap", "public Set<K> keySet()" ], [ "get", "org.apache.commons.collections4.map", "PassiveExpiringMap", "public V get(final Object key)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "containsValue", "org.apache.commons.collections4.map", "PassiveExpiringMap", "public boolean containsValue(final Object value)" ], [ "merge", "java.util", "Map", "public default V merge(K arg0, V arg1, BiFunction<? super V, ? super V, ? extends V> arg2)" ], [ "containsKey", "org.apache.commons.collections4.map", "PassiveExpiringMap", "public boolean containsKey(final Object key)" ], [ "remove", "org.apache.commons.collections4.map", "PassiveExpiringMap", "public V remove(final Object key)" ], [ "compute", "java.util", "Map", "public default V compute(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "putIfAbsent", "java.util", "Map", "public default V putIfAbsent(K arg0, V arg1)" ], [ "readObjectOverride", "java.io", "ObjectInputStream", "protected Object readObjectOverride() throws IOException, ClassNotFoundException" ], [ "readLong", "java.io", "ObjectInputStream", "public long readLong() throws IOException" ], [ "readClassDescriptor", "java.io", "ObjectInputStream", "protected ObjectStreamClass readClassDescriptor() throws IOException, ClassNotFoundException" ], [ "readObject", "java.io", "ObjectInputStream", "public final Object readObject() throws IOException, ClassNotFoundException" ], [ "readUnsignedShort", "java.io", "ObjectInputStream", "public int readUnsignedShort() throws IOException" ], [ "read", "java.io", "ObjectInputStream", "public int read() throws IOException" ], [ "resolveClass", "java.io", "ObjectInputStream", "protected Class<? extends Object> resolveClass(ObjectStreamClass arg0) throws IOException, ClassNotFoundException" ], [ "readDouble", "java.io", "ObjectInputStream", "public double readDouble() throws IOException" ], [ "readBoolean", "java.io", "ObjectInputStream", "public boolean readBoolean() throws IOException" ], [ "readLine", "java.io", "ObjectInputStream", "public String readLine() throws IOException" ], [ "resolveObject", "java.io", "ObjectInputStream", "protected Object resolveObject(Object arg0) throws IOException" ], [ "read", "java.io", "ObjectInputStream", "public int read(byte[] arg0, int arg1, int arg2) throws IOException" ], [ "readShort", "java.io", "ObjectInputStream", "public short readShort() throws IOException" ], [ "readByte", "java.io", "ObjectInputStream", "public byte readByte() throws IOException" ], [ "available", "java.io", "ObjectInputStream", "public int available() throws IOException" ], [ "readChar", "java.io", "ObjectInputStream", "public char readChar() throws IOException" ], [ "resolveProxyClass", "java.io", "ObjectInputStream", "protected Class<? extends Object> resolveProxyClass(String[] arg0) throws IOException, ClassNotFoundException" ], [ "enableResolveObject", "java.io", "ObjectInputStream", "protected boolean enableResolveObject(boolean arg0) throws SecurityException" ], [ "readTypeString", "java.io", "ObjectInputStream", "String readTypeString() throws IOException" ], [ "readFields", "java.io", "ObjectInputStream", "public ObjectInputStream.GetField readFields() throws IOException, ClassNotFoundException" ], [ "readInt", "java.io", "ObjectInputStream", "public int readInt() throws IOException" ], [ "skipBytes", "java.io", "ObjectInputStream", "public int skipBytes(int arg0) throws IOException" ], [ "readFloat", "java.io", "ObjectInputStream", "public float readFloat() throws IOException" ], [ "readUnsignedByte", "java.io", "ObjectInputStream", "public int readUnsignedByte() throws IOException" ], [ "readUTF", "java.io", "ObjectInputStream", "public String readUTF() throws IOException" ], [ "getObjectInputFilter", "java.io", "ObjectInputStream", "public final ObjectInputFilter getObjectInputFilter()" ], [ "readUnshared", "java.io", "ObjectInputStream", "public Object readUnshared() throws IOException, ClassNotFoundException" ], [ "markSupported", "java.io", "InputStream", "public boolean markSupported()" ], [ "readNBytes", "java.io", "InputStream", "public byte[] readNBytes(int arg0) throws IOException" ], [ "readAllBytes", "java.io", "InputStream", "public byte[] readAllBytes() throws IOException" ], [ "read", "java.io", "InputStream", "public int read(byte[] arg0) throws IOException" ], [ "read", "java.io", "InputStream", "public abstract int read() throws IOException" ], [ "read", "java.io", "InputStream", "public int read(byte[] arg0, int arg1, int arg2) throws IOException" ], [ "available", "java.io", "InputStream", "public int available() throws IOException" ], [ "readNBytes", "java.io", "InputStream", "public int readNBytes(byte[] arg0, int arg1, int arg2) throws IOException" ], [ "skip", "java.io", "InputStream", "public long skip(long arg0) throws IOException" ], [ "transferTo", "java.io", "InputStream", "public long transferTo(OutputStream arg0) throws IOException" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "read", "java.io", "ObjectInput", "public abstract int read() throws IOException" ], [ "read", "java.io", "ObjectInput", "public abstract int read(byte[] arg0) throws IOException" ], [ "read", "java.io", "ObjectInput", "public abstract int read(byte[] arg0, int arg1, int arg2) throws IOException" ], [ "available", "java.io", "ObjectInput", "public abstract int available() throws IOException" ], [ "readObject", "java.io", "ObjectInput", "public abstract Object readObject() throws ClassNotFoundException, IOException" ], [ "skip", "java.io", "ObjectInput", "public abstract long skip(long arg0) throws IOException" ], [ "readByte", "java.io", "DataInput", "public abstract byte readByte() throws IOException" ], [ "readLong", "java.io", "DataInput", "public abstract long readLong() throws IOException" ], [ "readUTF", "java.io", "DataInput", "public abstract String readUTF() throws IOException" ], [ "skipBytes", "java.io", "DataInput", "public abstract int skipBytes(int arg0) throws IOException" ], [ "readShort", "java.io", "DataInput", "public abstract short readShort() throws IOException" ], [ "readChar", "java.io", "DataInput", "public abstract char readChar() throws IOException" ], [ "readDouble", "java.io", "DataInput", "public abstract double readDouble() throws IOException" ], [ "readLine", "java.io", "DataInput", "public abstract String readLine() throws IOException" ], [ "readUnsignedByte", "java.io", "DataInput", "public abstract int readUnsignedByte() throws IOException" ], [ "readUnsignedShort", "java.io", "DataInput", "public abstract int readUnsignedShort() throws IOException" ], [ "readBoolean", "java.io", "DataInput", "public abstract boolean readBoolean() throws IOException" ], [ "readFloat", "java.io", "DataInput", "public abstract float readFloat() throws IOException" ], [ "readInt", "java.io", "DataInput", "public abstract int readInt() throws IOException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "map", "org.apache.commons.collections4.map", "AbstractMapDecorator", "Map<K, V> map;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 8324,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4.map",
  "className" : "PassiveExpiringMap",
  "javadocTag" : "@throws IOException",
  "methodJavadoc" : "    /**\n     * Write the map out using a custom routine.\n     *\n     * @param out the output stream\n     * @throws IOException\n     */",
  "methodSourceCode" : "private void writeObject(final ObjectOutputStream out) throws IOException{\n    out.defaultWriteObject();\n    out.writeObject(map);\n}",
  "classJavadoc" : "/**\n * Decorates a <code>Map</code> to evict expired entries once their expiration\n * time has been reached.\n * <p>\n * When putting a key-value pair in the map this decorator uses a\n * {@link ExpirationPolicy} to determine how long the entry should remain alive\n * as defined by an expiration time value.\n * </p>\n * <p>\n * When accessing the mapped value for a key, its expiration time is checked,\n * and if it is a negative value or if it is greater than the current time, the\n * mapped value is returned. Otherwise, the key is removed from the decorated\n * map, and <code>null</code> is returned.\n * </p>\n * <p>\n * When invoking methods that involve accessing the entire map contents (i.e\n * {@link #containsKey(Object)}, {@link #entrySet()}, etc.) this decorator\n * removes all expired entries prior to actually completing the invocation.\n * </p>\n * <p>\n * <strong>Note that {@link PassiveExpiringMap} is not synchronized and is not\n * thread-safe.</strong> If you wish to use this map from multiple threads\n * concurrently, you must use appropriate synchronization. The simplest approach\n * is to wrap this map using {@link java.util.Collections#synchronizedMap(Map)}.\n * This class may throw exceptions when accessed by concurrent threads without\n * synchronization.\n * </p>\n *\n * @param <K> the type of the keys in the map\n * @param <V> the type of the values in the map\n * @since 4.0\n * @version $Id: PassiveExpiringMap.java 1686855 2015-06-22 13:00:27Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4.map;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * Decorates a <code>Map</code> to evict expired entries once their expiration\n * time has been reached.\n * <p>\n * When putting a key-value pair in the map this decorator uses a\n * {@link ExpirationPolicy} to determine how long the entry should remain alive\n * as defined by an expiration time value.\n * </p>\n * <p>\n * When accessing the mapped value for a key, its expiration time is checked,\n * and if it is a negative value or if it is greater than the current time, the\n * mapped value is returned. Otherwise, the key is removed from the decorated\n * map, and <code>null</code> is returned.\n * </p>\n * <p>\n * When invoking methods that involve accessing the entire map contents (i.e\n * {@link #containsKey(Object)}, {@link #entrySet()}, etc.) this decorator\n * removes all expired entries prior to actually completing the invocation.\n * </p>\n * <p>\n * <strong>Note that {@link PassiveExpiringMap} is not synchronized and is not\n * thread-safe.</strong> If you wish to use this map from multiple threads\n * concurrently, you must use appropriate synchronization. The simplest approach\n * is to wrap this map using {@link java.util.Collections#synchronizedMap(Map)}.\n * This class may throw exceptions when accessed by concurrent threads without\n * synchronization.\n * </p>\n *\n * @param <K> the type of the keys in the map\n * @param <V> the type of the values in the map\n * @since 4.0\n * @version $Id: PassiveExpiringMap.java 1686855 2015-06-22 13:00:27Z tn $\n */\npublic class PassiveExpiringMap<K, V>\n    extends AbstractMapDecorator<K, V>\n    implements Serializable {\n\n    /**\n     * A {@link org.apache.commons.collections4.map.PassiveExpiringMap.ExpirationPolicy ExpirationPolicy}\n     * that returns a expiration time that is a\n     * constant about of time in the future from the current time.\n     *\n     * @param <K> the type of the keys in the map\n     * @param <V> the type of the values in the map\n     * @since 4.0\n     * @version $Id: PassiveExpiringMap.java 1686855 2015-06-22 13:00:27Z tn $\n     */\n    public static class ConstantTimeToLiveExpirationPolicy<K, V>\n        implements ExpirationPolicy<K, V> {\n\n        /** Serialization version */\n        private static final long serialVersionUID = 1L;\n\n        /** the constant time-to-live value measured in milliseconds. */\n        private final long timeToLiveMillis;\n\n        /**\n         * Default constructor. Constructs a policy using a negative\n         * time-to-live value that results in entries never expiring.\n         */\n        public ConstantTimeToLiveExpirationPolicy() {\n            this(-1L);\n        }\n\n        /**\n         * Construct a policy with the given time-to-live constant measured in\n         * milliseconds. A negative time-to-live value indicates entries never\n         * expire. A zero time-to-live value indicates entries expire (nearly)\n         * immediately.\n         *\n         * @param timeToLiveMillis the constant amount of time (in milliseconds)\n         *        an entry is available before it expires. A negative value\n         *        results in entries that NEVER expire. A zero value results in\n         *        entries that ALWAYS expire.\n         */\n        public ConstantTimeToLiveExpirationPolicy(final long timeToLiveMillis) {\n            super();\n            this.timeToLiveMillis = timeToLiveMillis;\n        }\n\n        /**\n         * Construct a policy with the given time-to-live constant measured in\n         * the given time unit of measure.\n         *\n         * @param timeToLive the constant amount of time an entry is available\n         *        before it expires. A negative value results in entries that\n         *        NEVER expire. A zero value results in entries that ALWAYS\n         *        expire.\n         * @param timeUnit the unit of time for the <code>timeToLive</code>\n         *        parameter, must not be null.\n         * @throws NullPointerException if the time unit is null.\n         */\n        public ConstantTimeToLiveExpirationPolicy(final long timeToLive,\n                                                  final TimeUnit timeUnit) {\n            this(validateAndConvertToMillis(timeToLive, timeUnit));\n        }\n\n        /**\n         * Determine the expiration time for the given key-value entry.\n         *\n         * @param key the key for the entry (ignored).\n         * @param value the value for the entry (ignored).\n         * @return if {@link #timeToLiveMillis} &ge; 0, an expiration time of\n         *         {@link #timeToLiveMillis} +\n         *         {@link System#currentTimeMillis()} is returned. Otherwise, -1\n         *         is returned indicating the entry never expires.\n         */\n        public long expirationTime(final K key, final V value) {\n            if (timeToLiveMillis >= 0L) {\n                // avoid numerical overflow\n                final long now = System.currentTimeMillis();\n                if (now > Long.MAX_VALUE - timeToLiveMillis) {\n                    // expiration would be greater than Long.MAX_VALUE\n                    // never expire\n                    return -1;\n                }\n\n                // timeToLiveMillis in the future\n                return now + timeToLiveMillis;\n            }\n\n            // never expire\n            return -1L;\n        }\n    }\n\n    /**\n     * A policy to determine the expiration time for key-value entries.\n     *\n     * @param <K> the key object type.\n     * @param <V> the value object type\n     * @since 4.0\n     * @version $Id: PassiveExpiringMap.java 1686855 2015-06-22 13:00:27Z tn $\n     */\n    public static interface ExpirationPolicy<K, V>\n        extends Serializable {\n\n        /**\n         * Determine the expiration time for the given key-value entry.\n         *\n         * @param key the key for the entry.\n         * @param value the value for the entry.\n         * @return the expiration time value measured in milliseconds. A\n         *         negative return value indicates the entry never expires.\n         */\n        long expirationTime(K key, V value);\n    }\n\n    /** Serialization version */\n    private static final long serialVersionUID = 1L;\n\n    /**\n     * First validate the input parameters. If the parameters are valid, convert\n     * the given time measured in the given units to the same time measured in\n     * milliseconds.\n     *\n     * @param timeToLive the constant amount of time an entry is available\n     *        before it expires. A negative value results in entries that NEVER\n     *        expire. A zero value results in entries that ALWAYS expire.\n     * @param timeUnit the unit of time for the <code>timeToLive</code>\n     *        parameter, must not be null.\n     * @throws NullPointerException if the time unit is null.\n     */\n    private static long validateAndConvertToMillis(final long timeToLive,\n                                                   final TimeUnit timeUnit) {\n        if (timeUnit == null) {\n            throw new NullPointerException(\"Time unit must not be null\");\n        }\n        return TimeUnit.MILLISECONDS.convert(timeToLive, timeUnit);\n    }\n\n    /** map used to manage expiration times for the actual map entries. */\n    private final Map<Object, Long> expirationMap = new HashMap<Object, Long>();\n\n    /** the policy used to determine time-to-live values for map entries. */\n    private final ExpirationPolicy<K, V> expiringPolicy;\n\n    /**\n     * Default constructor. Constructs a map decorator that results in entries\n     * NEVER expiring.\n     */\n    public PassiveExpiringMap() {\n        this(-1L);\n    }\n\n    /**\n     * Construct a map decorator using the given expiration policy to determine\n     * expiration times.\n     *\n     * @param expiringPolicy the policy used to determine expiration times of\n     *        entries as they are added.\n     * @throws NullPointerException if expiringPolicy is null\n     */\n    public PassiveExpiringMap(final ExpirationPolicy<K, V> expiringPolicy) {\n        this(expiringPolicy, new HashMap<K, V>());\n    }\n\n    /**\n     * Construct a map decorator that decorates the given map and uses the given\n     * expiration policy to determine expiration times. If there are any\n     * elements already in the map being decorated, they will NEVER expire\n     * unless they are replaced.\n     *\n     * @param expiringPolicy the policy used to determine expiration times of\n     *        entries as they are added.\n     * @param map the map to decorate, must not be null.\n     * @throws NullPointerException if the map or expiringPolicy is null.\n     */\n    public PassiveExpiringMap(final ExpirationPolicy<K, V> expiringPolicy,\n                              final Map<K, V> map) {\n        super(map);\n        if (expiringPolicy == null) {\n            throw new NullPointerException(\"Policy must not be null.\");\n        }\n        this.expiringPolicy = expiringPolicy;\n    }\n\n    /**\n     * Construct a map decorator that decorates the given map using the given\n     * time-to-live value measured in milliseconds to create and use a\n     * {@link ConstantTimeToLiveExpirationPolicy} expiration policy.\n     *\n     * @param timeToLiveMillis the constant amount of time (in milliseconds) an\n     *        entry is available before it expires. A negative value results in\n     *        entries that NEVER expire. A zero value results in entries that\n     *        ALWAYS expire.\n     */\n    public PassiveExpiringMap(final long timeToLiveMillis) {\n        this(new ConstantTimeToLiveExpirationPolicy<K, V>(timeToLiveMillis),\n             new HashMap<K, V>());\n    }\n\n    /**\n     * Construct a map decorator using the given time-to-live value measured in\n     * milliseconds to create and use a\n     * {@link ConstantTimeToLiveExpirationPolicy} expiration policy. If there\n     * are any elements already in the map being decorated, they will NEVER\n     * expire unless they are replaced.\n     *\n     * @param timeToLiveMillis the constant amount of time (in milliseconds) an\n     *        entry is available before it expires. A negative value results in\n     *        entries that NEVER expire. A zero value results in entries that\n     *        ALWAYS expire.\n     * @param map the map to decorate, must not be null.\n     * @throws NullPointerException if the map is null.\n     */\n    public PassiveExpiringMap(final long timeToLiveMillis, final Map<K, V> map) {\n        this(new ConstantTimeToLiveExpirationPolicy<K, V>(timeToLiveMillis),\n             map);\n    }\n\n    /**\n     * Construct a map decorator using the given time-to-live value measured in\n     * the given time units of measure to create and use a\n     * {@link ConstantTimeToLiveExpirationPolicy} expiration policy.\n     *\n     * @param timeToLive the constant amount of time an entry is available\n     *        before it expires. A negative value results in entries that NEVER\n     *        expire. A zero value results in entries that ALWAYS expire.\n     * @param timeUnit the unit of time for the <code>timeToLive</code>\n     *        parameter, must not be null.\n     * @throws NullPointerException if the time unit is null.\n     */\n    public PassiveExpiringMap(final long timeToLive, final TimeUnit timeUnit) {\n        this(validateAndConvertToMillis(timeToLive, timeUnit));\n    }\n\n    /**\n     * Construct a map decorator that decorates the given map using the given\n     * time-to-live value measured in the given time units of measure to create\n     * {@link ConstantTimeToLiveExpirationPolicy} expiration policy. This policy\n     * is used to determine expiration times. If there are any elements already\n     * in the map being decorated, they will NEVER expire unless they are\n     * replaced.\n     *\n     * @param timeToLive the constant amount of time an entry is available\n     *        before it expires. A negative value results in entries that NEVER\n     *        expire. A zero value results in entries that ALWAYS expire.\n     * @param timeUnit the unit of time for the <code>timeToLive</code>\n     *        parameter, must not be null.\n     * @param map the map to decorate, must not be null.\n     * @throws NullPointerException if the map or time unit is null.\n     */\n    public PassiveExpiringMap(final long timeToLive, final TimeUnit timeUnit, final Map<K, V> map) {\n        this(validateAndConvertToMillis(timeToLive, timeUnit), map);\n    }\n\n    /**\n     * Constructs a map decorator that decorates the given map and results in\n     * entries NEVER expiring. If there are any elements already in the map\n     * being decorated, they also will NEVER expire.\n     *\n     * @param map the map to decorate, must not be null.\n     * @throws NullPointerException if the map is null.\n     */\n    public PassiveExpiringMap(final Map<K, V> map) {\n        this(-1L, map);\n    }\n\n    /**\n     * Normal {@link Map#clear()} behavior with the addition of clearing all\n     * expiration entries as well.\n     */\n    @Override\n    public void clear() {\n        super.clear();\n        expirationMap.clear();\n    }\n\n    /**\n     * All expired entries are removed from the map prior to determining the\n     * contains result.\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean containsKey(final Object key) {\n        removeIfExpired(key, now());\n        return super.containsKey(key);\n    }\n\n    /**\n     * All expired entries are removed from the map prior to determining the\n     * contains result.\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean containsValue(final Object value) {\n        removeAllExpired(now());\n        return super.containsValue(value);\n    }\n\n    /**\n     * All expired entries are removed from the map prior to returning the entry set.\n     * {@inheritDoc}\n     */\n    @Override\n    public Set<Entry<K, V>> entrySet() {\n        removeAllExpired(now());\n        return super.entrySet();\n    }\n\n    /**\n     * All expired entries are removed from the map prior to returning the entry value.\n     * {@inheritDoc}\n     */\n    @Override\n    public V get(final Object key) {\n        removeIfExpired(key, now());\n        return super.get(key);\n    }\n\n    /**\n     * All expired entries are removed from the map prior to determining if it is empty.\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean isEmpty() {\n        removeAllExpired(now());\n        return super.isEmpty();\n    }\n\n    /**\n     * Determines if the given expiration time is less than <code>now</code>.\n     *\n     * @param now the time in milliseconds used to compare against the\n     *        expiration time.\n     * @param expirationTimeObject the expiration time value retrieved from\n     *        {@link #expirationMap}, can be null.\n     * @return <code>true</code> if <code>expirationTimeObject</code> is &ge; 0\n     *         and <code>expirationTimeObject</code> &lt; <code>now</code>.\n     *         <code>false</code> otherwise.\n     */\n    private boolean isExpired(final long now, final Long expirationTimeObject) {\n        if (expirationTimeObject != null) {\n            final long expirationTime = expirationTimeObject.longValue();\n            return expirationTime >= 0 && now >= expirationTime;\n        }\n        return false;\n    }\n\n    /**\n     * All expired entries are removed from the map prior to returning the key set.\n     * {@inheritDoc}\n     */\n    @Override\n    public Set<K> keySet() {\n        removeAllExpired(now());\n        return super.keySet();\n    }\n\n    /**\n     * The current time in milliseconds.\n     */\n    private long now() {\n        return System.currentTimeMillis();\n    }\n\n    /**\n    * Add the given key-value pair to this map as well as recording the entry's expiration time based on\n    * the current time in milliseconds and this map's {@link #expiringPolicy}.\n    * <p>\n    * {@inheritDoc}\n    */\n    @Override\n    public V put(final K key, final V value) {\n        // record expiration time of new entry\n        final long expirationTime = expiringPolicy.expirationTime(key, value);\n        expirationMap.put(key, Long.valueOf(expirationTime));\n\n        return super.put(key, value);\n    }\n\n    @Override\n    public void putAll(final Map<? extends K, ? extends V> mapToCopy) {\n        for (final Map.Entry<? extends K, ? extends V> entry : mapToCopy.entrySet()) {\n            put(entry.getKey(), entry.getValue());\n        }\n    }\n\n    /**\n     * Normal {@link Map#remove(Object)} behavior with the addition of removing\n     * any expiration entry as well.\n     * {@inheritDoc}\n     */\n    @Override\n    public V remove(final Object key) {\n        expirationMap.remove(key);\n        return super.remove(key);\n    }\n\n    /**\n     * Removes all entries in the map whose expiration time is less than\n     * <code>now</code>. The exceptions are entries with negative expiration\n     * times; those entries are never removed.\n     *\n     * @see #isExpired(long, Long)\n     */\n    private void removeAllExpired(final long now) {\n        final Iterator<Map.Entry<Object, Long>> iter = expirationMap.entrySet().iterator();\n        while (iter.hasNext()) {\n            final Map.Entry<Object, Long> expirationEntry = iter.next();\n            if (isExpired(now, expirationEntry.getValue())) {\n                // remove entry from collection\n                super.remove(expirationEntry.getKey());\n                // remove entry from expiration map\n                iter.remove();\n            }\n        }\n    }\n\n    /**\n     * Removes the entry with the given key if the entry's expiration time is\n     * less than <code>now</code>. If the entry has a negative expiration time,\n     * the entry is never removed.\n     */\n    private void removeIfExpired(final Object key, final long now) {\n        final Long expirationTimeObject = expirationMap.get(key);\n        if (isExpired(now, expirationTimeObject)) {\n            remove(key);\n        }\n    }\n\n    /**\n     * All expired entries are removed from the map prior to returning the size.\n     * {@inheritDoc}\n     */\n    @Override\n    public int size() {\n        removeAllExpired(now());\n        return super.size();\n    }\n\n    /**\n     * Read the map in using a custom routine.\n     *\n     * @param in the input stream\n     * @throws IOException\n     * @throws ClassNotFoundException\n     */\n    @SuppressWarnings(\"unchecked\")\n    // (1) should only fail if input stream is incorrect\n    private void readObject(final ObjectInputStream in)\n        throws IOException, ClassNotFoundException {\n        in.defaultReadObject();\n        map = (Map<K, V>) in.readObject(); // (1)\n    }\n\n    /**\n     * Write the map out using a custom routine.\n     *\n     * @param out the output stream\n     * @throws IOException\n     */\n    private void writeObject(final ObjectOutputStream out)\n        throws IOException {\n        out.defaultWriteObject();\n        out.writeObject(map);\n    }\n\n    /**\n     * All expired entries are removed from the map prior to returning the value collection.\n     * {@inheritDoc}\n     */\n    @Override\n    public Collection<V> values() {\n        removeAllExpired(now());\n        return super.values();\n    }\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "out", "java.io", "ObjectOutputStream" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "remove", "org.apache.commons.collections4.map", "PassiveExpiringMap", "public V remove(final Object key)" ], [ "toString", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public String toString()" ], [ "keySet", "org.apache.commons.collections4.map", "PassiveExpiringMap", "public Set<K> keySet()" ], [ "get", "org.apache.commons.collections4.map", "PassiveExpiringMap", "public V get(final Object key)" ], [ "replace", "java.util", "Map", "public default V replace(K arg0, V arg1)" ], [ "decorated", "org.apache.commons.collections4.map", "AbstractMapDecorator", "protected Map<K, V> decorated()" ], [ "computeIfAbsent", "java.util", "Map", "public default V computeIfAbsent(K arg0, Function<? super K, ? extends V> arg1)" ], [ "entrySet", "org.apache.commons.collections4.map", "PassiveExpiringMap", "public Set<Entry<K, V>> entrySet()" ], [ "mapIterator", "org.apache.commons.collections4.map", "AbstractIterableMap", "public MapIterator<K, V> mapIterator()" ], [ "size", "org.apache.commons.collections4.map", "PassiveExpiringMap", "public int size()" ], [ "containsValue", "org.apache.commons.collections4.map", "PassiveExpiringMap", "public boolean containsValue(final Object value)" ], [ "merge", "java.util", "Map", "public default V merge(K arg0, V arg1, BiFunction<? super V, ? super V, ? extends V> arg2)" ], [ "values", "org.apache.commons.collections4.map", "PassiveExpiringMap", "public Collection<V> values()" ], [ "replace", "java.util", "Map", "public default boolean replace(K arg0, V arg1, V arg2)" ], [ "compute", "java.util", "Map", "public default V compute(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "putIfAbsent", "java.util", "Map", "public default V putIfAbsent(K arg0, V arg1)" ], [ "put", "org.apache.commons.collections4.map", "PassiveExpiringMap", "public V put(final K key, final V value)" ], [ "containsKey", "org.apache.commons.collections4.map", "PassiveExpiringMap", "public boolean containsKey(final Object key)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "isEmpty", "org.apache.commons.collections4.map", "PassiveExpiringMap", "public boolean isEmpty()" ], [ "equals", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public boolean equals(Object arg0)" ], [ "remove", "java.util", "Map", "public default boolean remove(Object arg0, Object arg1)" ], [ "put", "org.apache.commons.collections4", "Put", "public abstract Object put(K arg0, V arg1)" ], [ "hashCode", "org.apache.commons.collections4.map", "AbstractMapDecorator", "public int hashCode()" ], [ "getOrDefault", "java.util", "Map", "public default V getOrDefault(Object arg0, V arg1)" ], [ "computeIfPresent", "java.util", "Map", "public default V computeIfPresent(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "putFields", "java.io", "ObjectOutputStream", "public ObjectOutputStream.PutField putFields() throws IOException" ], [ "enableReplaceObject", "java.io", "ObjectOutputStream", "protected boolean enableReplaceObject(boolean arg0) throws SecurityException" ], [ "replaceObject", "java.io", "ObjectOutputStream", "protected Object replaceObject(Object arg0) throws IOException" ], [ "getProtocolVersion", "java.io", "ObjectOutputStream", "int getProtocolVersion()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "toString", "java.lang", "Object", "public String toString()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "map", "org.apache.commons.collections4.map", "AbstractMapDecorator", "Map<K, V> map;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
} ]