[ {
  "id" : 25926,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "jgrapht-core-0.9.2",
  "packageName" : "org.jgrapht.graph",
  "className" : "Pseudograph",
  "javadocTag" : "@param edgeClass class on which to base factory for edges",
  "methodJavadoc" : "    /**\n     * Creates a new pseudograph.\n     *\n     * @param edgeClass class on which to base factory for edges\n     */",
  "methodSourceCode" : "public Pseudograph(Class<? extends E> edgeClass){\n    this(new ClassBasedEdgeFactory<V, E>(edgeClass));\n}",
  "classJavadoc" : "/**\n * A pseudograph. A pseudograph is a non-simple undirected graph in which both\n * graph loops and multiple edges are permitted. If you're unsure about\n * pseudographs, see: <a href=\"http://mathworld.wolfram.com/Pseudograph.html\">\n * http://mathworld.wolfram.com/Pseudograph.html</a>.\n */",
  "classSourceCode" : "/* ==========================================\n * JGraphT : a free Java graph-theory library\n * ==========================================\n *\n * Project Info:  http://jgrapht.sourceforge.net/\n * Project Creator:  Barak Naveh (http://sourceforge.net/users/barak_naveh)\n *\n * (C) Copyright 2003-2008, by Barak Naveh and Contributors.\n *\n * This program and the accompanying materials are dual-licensed under\n * either\n *\n * (a) the terms of the GNU Lesser General Public License version 2.1\n * as published by the Free Software Foundation, or (at your option) any\n * later version.\n *\n * or (per the licensee's choosing)\n *\n * (b) the terms of the Eclipse Public License v1.0 as published by\n * the Eclipse Foundation.\n */\n/* ----------------\n * Pseudograph.java\n * ----------------\n * (C) Copyright 2003-2008, by Barak Naveh and Contributors.\n *\n * Original Author:  Barak Naveh\n * Contributor(s):   Christian Hammer\n *\n * $Id$\n *\n * Changes\n * -------\n * 05-Aug-2003 : Initial revision (BN);\n * 11-Mar-2004 : Made generic (CH);\n * 28-May-2006 : Moved connectivity info from edge to graph (JVS);\n *\n */\npackage org.jgrapht.graph;\n\nimport org.jgrapht.*;\nimport org.jgrapht.graph.builder.*;\n\n\n/**\n * A pseudograph. A pseudograph is a non-simple undirected graph in which both\n * graph loops and multiple edges are permitted. If you're unsure about\n * pseudographs, see: <a href=\"http://mathworld.wolfram.com/Pseudograph.html\">\n * http://mathworld.wolfram.com/Pseudograph.html</a>.\n */\npublic class Pseudograph<V, E>\n    extends AbstractBaseGraph<V, E>\n    implements UndirectedGraph<V, E>\n{\n    private static final long serialVersionUID = 3833183614484755253L;\n\n    /**\n     * Creates a new pseudograph.\n     *\n     * @param edgeClass class on which to base factory for edges\n     */\n    public Pseudograph(Class<? extends E> edgeClass)\n    {\n        this(new ClassBasedEdgeFactory<V, E>(edgeClass));\n    }\n\n    /**\n     * Creates a new pseudograph with the specified edge factory.\n     *\n     * @param ef the edge factory of the new graph.\n     */\n    public Pseudograph(EdgeFactory<V, E> ef)\n    {\n        super(ef, true, true);\n    }\n\n    public static <V, E> UndirectedGraphBuilderBase<V,\n        E, ? extends Pseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)\n    {\n        return new UndirectedGraphBuilder<V, E, Pseudograph<V, E>>(\n            new Pseudograph<V, E>(edgeClass));\n    }\n\n    public static <V, E> UndirectedGraphBuilderBase<V,\n        E, ? extends Pseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)\n    {\n        return new UndirectedGraphBuilder<V, E, Pseudograph<V, E>>(\n            new Pseudograph<V, E>(ef));\n    }\n}\n\n// End Pseudograph.java\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "PartiteRandomGraphGenerator", "org.jgrapht.experimental" ], [ "RandomGraphHelper", "org.jgrapht.experimental" ], [ "GraphReader", "org.jgrapht.experimental" ], [ "DirectedAcyclicGraph", "org.jgrapht.experimental.dag" ], [ "GraphSquare", "org.jgrapht.experimental" ], [ "UniformRandomGraphGenerator", "org.jgrapht.experimental" ], [ "GraphTests", "org.jgrapht.experimental" ], [ "ApproximationAlgorithm", "org.jgrapht.experimental.alg" ], [ "BrownBacktrackColoring", "org.jgrapht.experimental.alg.color" ], [ "GreedyColoring", "org.jgrapht.experimental.alg.color" ], [ "IntArrayGraphAlgorithm", "org.jgrapht.experimental.alg" ], [ "ExactAlgorithm", "org.jgrapht.experimental.alg" ], [ "ListenableGraph", "org.jgrapht" ], [ "ModifiableInteger", "org.jgrapht.util" ], [ "FibonacciHeapNode", "org.jgrapht.util" ], [ "WeightCombiner", "org.jgrapht.util" ], [ "FibonacciHeap", "org.jgrapht.util" ], [ "TypeUtil", "org.jgrapht.util" ], [ "ArrayUnenforcedSet", "org.jgrapht.util" ], [ "VertexPair", "org.jgrapht.util" ], [ "MathUtil", "org.jgrapht.util" ], [ "PrefetchIterator", "org.jgrapht.util" ], [ "VertexFactory", "org.jgrapht" ], [ "Graph", "org.jgrapht" ], [ "GraphPath", "org.jgrapht" ], [ "UndirectedGraphUnion", "org.jgrapht.graph" ], [ "SimpleGraph", "org.jgrapht.graph" ], [ "MixedGraphUnion", "org.jgrapht.graph" ], [ "DefaultGraphMapping", "org.jgrapht.graph" ], [ "WeightedPseudograph", "org.jgrapht.graph" ], [ "UndirectedMaskSubgraph", "org.jgrapht.graph" ], [ "MaskEdgeSet", "org.jgrapht.graph" ], [ "Pseudograph", "org.jgrapht.graph" ], [ "MaskFunctor", "org.jgrapht.graph" ], [ "GraphUnion", "org.jgrapht.graph" ], [ "DirectedMaskSubgraph", "org.jgrapht.graph" ], [ "DirectedMultigraph", "org.jgrapht.graph" ], [ "AbstractBaseGraph", "org.jgrapht.graph" ], [ "DirectedWeightedPseudograph", "org.jgrapht.graph" ], [ "Multigraph", "org.jgrapht.graph" ], [ "DefaultDirectedGraph", "org.jgrapht.graph" ], [ "DefaultWeightedEdge", "org.jgrapht.graph" ], [ "ListenableDirectedWeightedGraph", "org.jgrapht.graph" ], [ "DirectedGraphUnion", "org.jgrapht.graph" ], [ "AsUnweightedGraph", "org.jgrapht.graph" ], [ "EdgeSetFactory", "org.jgrapht.graph" ], [ "GraphDelegator", "org.jgrapht.graph" ], [ "DefaultListenableGraph", "org.jgrapht.graph" ], [ "AsUndirectedGraph", "org.jgrapht.graph" ], [ "ClassBasedVertexFactory", "org.jgrapht.graph" ], [ "DefaultEdge", "org.jgrapht.graph" ], [ "MaskVertexSet", "org.jgrapht.graph" ], [ "ListenableUndirectedGraph", "org.jgrapht.graph" ], [ "DirectedWeightedSubgraph", "org.jgrapht.graph" ], [ "ListenableUndirectedWeightedGraph", "org.jgrapht.graph" ], [ "AsUnweightedDirectedGraph", "org.jgrapht.graph" ], [ "DefaultDirectedWeightedGraph", "org.jgrapht.graph" ], [ "IntrusiveEdge", "org.jgrapht.graph" ], [ "UnmodifiableGraph", "org.jgrapht.graph" ], [ "GraphPathImpl", "org.jgrapht.graph" ], [ "Subgraph", "org.jgrapht.graph" ], [ "UndirectedWeightedSubgraph", "org.jgrapht.graph" ], [ "DirectedPseudograph", "org.jgrapht.graph" ], [ "AbstractGraph", "org.jgrapht.graph" ], [ "MaskSubgraph", "org.jgrapht.graph" ], [ "ClassBasedEdgeFactory", "org.jgrapht.graph" ], [ "SimpleWeightedGraph", "org.jgrapht.graph" ], [ "AsWeightedDirectedGraph", "org.jgrapht.graph" ], [ "SimpleDirectedWeightedGraph", "org.jgrapht.graph" ], [ "UnmodifiableUndirectedGraph", "org.jgrapht.graph" ], [ "UndirectedSubgraph", "org.jgrapht.graph" ], [ "WeightedMultigraph", "org.jgrapht.graph" ], [ "EdgeReversedGraph", "org.jgrapht.graph" ], [ "AsWeightedGraph", "org.jgrapht.graph" ], [ "DirectedGraphBuilder", "org.jgrapht.graph.builder" ], [ "UndirectedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "UndirectedGraphBuilder", "org.jgrapht.graph.builder" ], [ "UndirectedWeightedGraphBuilder", "org.jgrapht.graph.builder" ], [ "UndirectedWeightedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "DirectedWeightedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "AbstractGraphBuilder", "org.jgrapht.graph.builder" ], [ "DirectedWeightedGraphBuilder", "org.jgrapht.graph.builder" ], [ "DirectedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "ListenableDirectedGraph", "org.jgrapht.graph" ], [ "UnmodifiableDirectedGraph", "org.jgrapht.graph" ], [ "SimpleGraphPath", "org.jgrapht.graph" ], [ "ParanoidGraph", "org.jgrapht.graph" ], [ "DirectedWeightedMultigraph", "org.jgrapht.graph" ], [ "DirectedSubgraph", "org.jgrapht.graph" ], [ "SimpleDirectedGraph", "org.jgrapht.graph" ], [ "GraphHelper", "org.jgrapht" ], [ "Graphs", "org.jgrapht" ], [ "DirectedGraph", "org.jgrapht" ], [ "WeightedGraph", "org.jgrapht" ], [ "HyperCubeGraphGenerator", "org.jgrapht.generate" ], [ "RingGraphGenerator", "org.jgrapht.generate" ], [ "SimpleWeightedGraphMatrixGenerator", "org.jgrapht.generate" ], [ "WeightedGraphGenerator", "org.jgrapht.generate" ], [ "WheelGraphGenerator", "org.jgrapht.generate" ], [ "GridGraphGenerator", "org.jgrapht.generate" ], [ "ScaleFreeGraphGenerator", "org.jgrapht.generate" ], [ "SimpleWeightedBipartiteGraphMatrixGenerator", "org.jgrapht.generate" ], [ "LinearGraphGenerator", "org.jgrapht.generate" ], [ "CompleteGraphGenerator", "org.jgrapht.generate" ], [ "RandomGraphGenerator", "org.jgrapht.generate" ], [ "WeightedGraphGeneratorAdapter", "org.jgrapht.generate" ], [ "EmptyGraphGenerator", "org.jgrapht.generate" ], [ "CompleteBipartiteGraphGenerator", "org.jgrapht.generate" ], [ "GraphGenerator", "org.jgrapht.generate" ], [ "StarGraphGenerator", "org.jgrapht.generate" ], [ "UndirectedGraph", "org.jgrapht" ], [ "TopologicalOrderIterator", "org.jgrapht.traverse" ], [ "CrossComponentIterator", "org.jgrapht.traverse" ], [ "AbstractGraphIterator", "org.jgrapht.traverse" ], [ "ClosestFirstIterator", "org.jgrapht.traverse" ], [ "BreadthFirstIterator", "org.jgrapht.traverse" ], [ "DepthFirstIterator", "org.jgrapht.traverse" ], [ "GraphIterator", "org.jgrapht.traverse" ], [ "EdgeFactory", "org.jgrapht" ], [ "GraphMapping", "org.jgrapht" ], [ "VertexSetListener", "org.jgrapht.event" ], [ "EdgeTraversalEvent", "org.jgrapht.event" ], [ "TraversalListener", "org.jgrapht.event" ], [ "GraphEdgeChangeEvent", "org.jgrapht.event" ], [ "VertexTraversalEvent", "org.jgrapht.event" ], [ "GraphChangeEvent", "org.jgrapht.event" ], [ "GraphListener", "org.jgrapht.event" ], [ "TraversalListenerAdapter", "org.jgrapht.event" ], [ "ConnectedComponentTraversalEvent", "org.jgrapht.event" ], [ "GraphVertexChangeEvent", "org.jgrapht.event" ], [ "TarjanLowestCommonAncestor", "org.jgrapht.alg" ], [ "PrimMinimumSpanningTree", "org.jgrapht.alg" ], [ "BlockCutpointGraph", "org.jgrapht.alg" ], [ "AllDirectedPaths", "org.jgrapht.alg" ], [ "KShortestPathsIterator", "org.jgrapht.alg" ], [ "KruskalMinimumSpanningTree", "org.jgrapht.alg" ], [ "StrongConnectivityInspector", "org.jgrapht.alg" ], [ "VF2State", "org.jgrapht.alg.isomorphism" ], [ "VF2GraphIsomorphismState", "org.jgrapht.alg.isomorphism" ], [ "VF2AbstractIsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "VF2SubgraphIsomorphismState", "org.jgrapht.alg.isomorphism" ], [ "IsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "VF2SubgraphIsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "GraphOrdering", "org.jgrapht.alg.isomorphism" ], [ "VF2GraphMappingIterator", "org.jgrapht.alg.isomorphism" ], [ "IsomorphicGraphMapping", "org.jgrapht.alg.isomorphism" ], [ "VF2GraphIsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "VF2SubgraphMappingIterator", "org.jgrapht.alg.isomorphism" ], [ "VF2MappingIterator", "org.jgrapht.alg.isomorphism" ], [ "BronKerboschCliqueFinder", "org.jgrapht.alg" ], [ "ChromaticNumber", "org.jgrapht.alg" ], [ "KosarajuStrongConnectivityInspector", "org.jgrapht.alg" ], [ "BellmanFordShortestPath", "org.jgrapht.alg" ], [ "DijkstraShortestPath", "org.jgrapht.alg" ], [ "RankingPathElement", "org.jgrapht.alg" ], [ "AStarShortestPath", "org.jgrapht.alg" ], [ "EdmondsKarpMaximumFlow", "org.jgrapht.alg" ], [ "BellmanFordPathElement", "org.jgrapht.alg" ], [ "FloydWarshallShortestPaths", "org.jgrapht.alg" ], [ "UnionFind", "org.jgrapht.alg.util" ], [ "AlwaysEqualComparator", "org.jgrapht.alg.util" ], [ "Extension", "org.jgrapht.alg.util" ], [ "VertexDegreeComparator", "org.jgrapht.alg.util" ], [ "Pair", "org.jgrapht.alg.util" ], [ "GabowStrongConnectivityInspector", "org.jgrapht.alg" ], [ "HawickJamesSimpleCycles", "org.jgrapht.alg.cycle" ], [ "DirectedSimpleCycles", "org.jgrapht.alg.cycle" ], [ "JohnsonSimpleCycles", "org.jgrapht.alg.cycle" ], [ "TiernanSimpleCycles", "org.jgrapht.alg.cycle" ], [ "UndirectedCycleBase", "org.jgrapht.alg.cycle" ], [ "PatonCycleBase", "org.jgrapht.alg.cycle" ], [ "TarjanSimpleCycles", "org.jgrapht.alg.cycle" ], [ "SzwarcfiterLauerSimpleCycles", "org.jgrapht.alg.cycle" ], [ "BiconnectivityInspector", "org.jgrapht.alg" ], [ "ConnectivityInspector", "org.jgrapht.alg" ], [ "MinSourceSinkCut", "org.jgrapht.alg" ], [ "RankingPathElementList", "org.jgrapht.alg" ], [ "EdmondsBlossomShrinking", "org.jgrapht.alg" ], [ "TransitiveClosure", "org.jgrapht.alg" ], [ "HopcroftKarpBipartiteMatching", "org.jgrapht.alg" ], [ "StoerWagnerMinimumCut", "org.jgrapht.alg" ], [ "AbstractPathElementList", "org.jgrapht.alg" ], [ "KuhnMunkresMinimalWeightBipartitePerfectMatching", "org.jgrapht.alg" ], [ "TransitiveReduction", "org.jgrapht.alg" ], [ "EulerianCircuit", "org.jgrapht.alg" ], [ "DirectedNeighborIndex", "org.jgrapht.alg" ], [ "NaiveLcaFinder", "org.jgrapht.alg" ], [ "MaximumWeightBipartiteMatching", "org.jgrapht.alg" ], [ "HamiltonianCycle", "org.jgrapht.alg" ], [ "KShortestPaths", "org.jgrapht.alg" ], [ "NeighborIndex", "org.jgrapht.alg" ], [ "VertexCovers", "org.jgrapht.alg" ], [ "CycleDetector", "org.jgrapht.alg" ], [ "AStarAdmissibleHeuristic", "org.jgrapht.alg.interfaces" ], [ "MinimumSpanningTree", "org.jgrapht.alg.interfaces" ], [ "WeightedMatchingAlgorithm", "org.jgrapht.alg.interfaces" ], [ "StrongConnectivityAlgorithm", "org.jgrapht.alg.interfaces" ], [ "MaximumFlowAlgorithm", "org.jgrapht.alg.interfaces" ], [ "MatchingAlgorithm", "org.jgrapht.alg.interfaces" ], [ "CliqueMinimalSeparatorDecomposition", "org.jgrapht.alg" ], [ "BellmanFordIterator", "org.jgrapht.alg" ], [ "AbstractPathElement", "org.jgrapht.alg" ], [ "EdmondsKarpMaximumFlow", "org.jgrapht.alg.flow" ], [ "PushRelabelMaximumFlow", "org.jgrapht.alg.flow" ], [ "MaximumFlowAlgorithmBase", "org.jgrapht.alg.flow" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "addVertices", "org.jgrapht.experimental", "RandomGraphHelper", "public static Object[] addVertices(Graph target, VertexFactory vertexFactory, int numVertices)" ], [ "isEmpty", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isEmpty(Graph<V, E> g)" ], [ "isComplete", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isComplete(Graph<V, E> g)" ], [ "isConnected", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isConnected(Graph<V, E> g)" ], [ "isTree", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isTree(Graph<V, E> g)" ], [ "isBipartite", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isBipartite(Graph<V, E> g)" ], [ "union", "org.jgrapht.util", "FibonacciHeap", "public static <T> FibonacciHeap<T> union(FibonacciHeap<T> h1, FibonacciHeap<T> h2)" ], [ "uncheckedCast", "org.jgrapht.util", "TypeUtil", "public static <T> T uncheckedCast(Object o, TypeUtil<T> typeDecl)" ], [ "factorial", "org.jgrapht.util", "MathUtil", "public static long factorial(int N)" ], [ "builder", "org.jgrapht.graph", "SimpleGraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends SimpleGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleGraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends SimpleGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "WeightedPseudograph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "WeightedPseudograph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "Pseudograph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Pseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "Pseudograph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Pseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedMultigraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedMultigraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedPseudograph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedPseudograph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "Multigraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Multigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "Multigraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Multigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DefaultDirectedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DefaultDirectedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DefaultDirectedWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DefaultDirectedWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedPseudograph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedPseudograph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "SimpleWeightedGraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends SimpleWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleWeightedGraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends SimpleWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends SimpleDirectedWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends SimpleDirectedWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "WeightedMultigraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "WeightedMultigraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedMultigraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedMultigraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends SimpleDirectedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends SimpleDirectedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "addEdge", "org.jgrapht", "Graphs", "public static <V, E> E addEdge(Graph<V, E> g, V sourceVertex, V targetVertex, double weight)" ], [ "addEdgeWithVertices", "org.jgrapht", "Graphs", "public static <V, E> E addEdgeWithVertices(Graph<V, E> g, V sourceVertex, V targetVertex)" ], [ "addEdgeWithVertices", "org.jgrapht", "Graphs", "public static <V, E> boolean addEdgeWithVertices(Graph<V, E> targetGraph, Graph<V, E> sourceGraph, E edge)" ], [ "addEdgeWithVertices", "org.jgrapht", "Graphs", "public static <V, E> E addEdgeWithVertices(Graph<V, E> g, V sourceVertex, V targetVertex, double weight)" ], [ "addGraph", "org.jgrapht", "Graphs", "public static <V, E> boolean addGraph(Graph<? super V, ? super E> destination, Graph<V, E> source)" ], [ "addAllEdges", "org.jgrapht", "Graphs", "public static <V, E> boolean addAllEdges(Graph<? super V, ? super E> destination, Graph<V, E> source, Collection<? extends E> edges)" ], [ "addAllVertices", "org.jgrapht", "Graphs", "public static <V, E> boolean addAllVertices(Graph<? super V, ? super E> destination, Collection<? extends V> vertices)" ], [ "neighborListOf", "org.jgrapht", "Graphs", "public static <V, E> List<V> neighborListOf(Graph<V, E> g, V vertex)" ], [ "predecessorListOf", "org.jgrapht", "Graphs", "public static <V, E> List<V> predecessorListOf(DirectedGraph<V, E> g, V vertex)" ], [ "successorListOf", "org.jgrapht", "Graphs", "public static <V, E> List<V> successorListOf(DirectedGraph<V, E> g, V vertex)" ], [ "undirectedGraph", "org.jgrapht", "Graphs", "public static <V, E> UndirectedGraph<V, E> undirectedGraph(Graph<V, E> g)" ], [ "testIncidence", "org.jgrapht", "Graphs", "public static <V, E> boolean testIncidence(Graph<V, E> g, E e, V v)" ], [ "getOppositeVertex", "org.jgrapht", "Graphs", "public static <V, E> V getOppositeVertex(Graph<V, E> g, E e, V v)" ], [ "getPathVertexList", "org.jgrapht", "Graphs", "public static <V, E> List<V> getPathVertexList(GraphPath<V, E> path)" ], [ "range", "org.jgrapht.generate", "SimpleWeightedGraphMatrixGenerator", "public static int[] range(final int from, final int to)" ], [ "createGraphSpecifics", "org.jgrapht.traverse", "CrossComponentIterator", "static <V, E> Specifics<V, E> createGraphSpecifics(Graph<V, E> g)" ], [ "findGreedyChromaticNumber", "org.jgrapht.alg", "ChromaticNumber", "public static <V, E> int findGreedyChromaticNumber(UndirectedGraph<V, E> g)" ], [ "findGreedyColoredGroups", "org.jgrapht.alg", "ChromaticNumber", "public static <V, E> Map<Integer, Set<V>> findGreedyColoredGroups(UndirectedGraph<V, E> g)" ], [ "findPathBetween", "org.jgrapht.alg", "BellmanFordShortestPath", "public static <V, E> List<E> findPathBetween(Graph<V, E> graph, V startVertex, V endVertex)" ], [ "findPathBetween", "org.jgrapht.alg", "DijkstraShortestPath", "public static <V, E> List<E> findPathBetween(Graph<V, E> graph, V startVertex, V endVertex)" ], [ "of", "org.jgrapht.alg.util", "Pair", "public static <A, B> Pair<A, B> of(A a, B b)" ], [ "isEulerian", "org.jgrapht.alg", "EulerianCircuit", "public static <V, E> boolean isEulerian(UndirectedGraph<V, E> g)" ], [ "getEulerianCircuitVertices", "org.jgrapht.alg", "EulerianCircuit", "public static <V, E> List<V> getEulerianCircuitVertices(UndirectedGraph<V, E> g)" ], [ "getApproximateOptimalForCompleteGraph", "org.jgrapht.alg", "HamiltonianCycle", "public static <V, E> List<V> getApproximateOptimalForCompleteGraph(SimpleWeightedGraph<V, E> g)" ], [ "find2ApproximationCover", "org.jgrapht.alg", "VertexCovers", "public static <V, E> Set<V> find2ApproximationCover(Graph<V, E> g)" ], [ "findGreedyCover", "org.jgrapht.alg", "VertexCovers", "public static <V, E> Set<V> findGreedyCover(UndirectedGraph<V, E> g)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "BEST_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int BEST_ORDER = 0;" ], [ "NATURAL_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int NATURAL_ORDER = 1;" ], [ "SMALLEST_DEGREE_LAST_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int SMALLEST_DEGREE_LAST_ORDER = 2;" ], [ "LARGEST_SATURATION_FIRST_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int LARGEST_SATURATION_FIRST_ORDER = 3;" ], [ "DEFAULT_EDGE_WEIGHT", "org.jgrapht", "WeightedGraph", "public static double DEFAULT_EDGE_WEIGHT = 1.0;" ], [ "HUB_VERTEX", "org.jgrapht.generate", "WheelGraphGenerator", "public static final String HUB_VERTEX = \"Hub Vertex\";" ], [ "CORNER_VERTEX", "org.jgrapht.generate", "GridGraphGenerator", "public static final String CORNER_VERTEX = \"Corner Vertex\";" ], [ "START_VERTEX", "org.jgrapht.generate", "LinearGraphGenerator", "public static final String START_VERTEX = \"Start Vertex\";" ], [ "END_VERTEX", "org.jgrapht.generate", "LinearGraphGenerator", "public static final String END_VERTEX = \"End Vertex\";" ], [ "CENTER_VERTEX", "org.jgrapht.generate", "StarGraphGenerator", "public static final String CENTER_VERTEX = \"Center Vertex\";" ], [ "SENTINEL", "org.jgrapht.traverse", "DepthFirstIterator", "public static final Object SENTINEL = new Object();" ], [ "BEFORE_EDGE_ADDED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int BEFORE_EDGE_ADDED = 21;" ], [ "BEFORE_EDGE_REMOVED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int BEFORE_EDGE_REMOVED = 22;" ], [ "EDGE_ADDED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int EDGE_ADDED = 23;" ], [ "EDGE_REMOVED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int EDGE_REMOVED = 24;" ], [ "CONNECTED_COMPONENT_STARTED", "org.jgrapht.event", "ConnectedComponentTraversalEvent", "public static final int CONNECTED_COMPONENT_STARTED = 31;" ], [ "CONNECTED_COMPONENT_FINISHED", "org.jgrapht.event", "ConnectedComponentTraversalEvent", "public static final int CONNECTED_COMPONENT_FINISHED = 32;" ], [ "BEFORE_VERTEX_ADDED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int BEFORE_VERTEX_ADDED = 11;" ], [ "BEFORE_VERTEX_REMOVED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int BEFORE_VERTEX_REMOVED = 12;" ], [ "VERTEX_ADDED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int VERTEX_ADDED = 13;" ], [ "VERTEX_REMOVED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int VERTEX_REMOVED = 14;" ], [ "NULL_NODE", "org.jgrapht.alg.isomorphism", "VF2State", "public static final int NULL_NODE = -1;" ], [ "DEBUG", "org.jgrapht.alg.isomorphism", "VF2State", "protected static final boolean DEBUG = false;" ], [ "DEFAULT_EPSILON", "org.jgrapht.alg", "EdmondsKarpMaximumFlow", "public static final double DEFAULT_EPSILON = 0.000000001;" ], [ "INSTANCE", "org.jgrapht.alg", "TransitiveClosure", "public static final TransitiveClosure INSTANCE = new TransitiveClosure();" ], [ "INSTANCE", "org.jgrapht.alg", "TransitiveReduction", "public static final TransitiveReduction INSTANCE = new TransitiveReduction();" ], [ "NEGATIVE_UNDIRECTED_EDGE", "org.jgrapht.alg", "BellmanFordIterator", "protected final static String NEGATIVE_UNDIRECTED_EDGE = \"Negative\" + \"edge-weights are not allowed in an unidrected graph!\";" ], [ "DEFAULT_EPSILON", "org.jgrapht.alg.flow", "MaximumFlowAlgorithmBase", "public static final double DEFAULT_EPSILON = 1e-9;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "edgeClass", "java.lang.Class", "Class<? extends E>" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "containsEdge", "org.jgrapht.graph", "AbstractGraph", "public boolean containsEdge(V arg0, V arg1)" ], [ "assertVertexExist", "org.jgrapht.graph", "AbstractGraph", "protected boolean assertVertexExist(V arg0)" ], [ "incomingEdgesOf", "org.jgrapht.graph", "AbstractBaseGraph", "public Set<E> incomingEdgesOf(V arg0)" ], [ "addEdge", "org.jgrapht.graph", "AbstractBaseGraph", "public E addEdge(V arg0, V arg1)" ], [ "getEdge", "org.jgrapht.graph", "AbstractBaseGraph", "public E getEdge(V arg0, V arg1)" ], [ "vertexSet", "org.jgrapht.graph", "AbstractBaseGraph", "public Set<V> vertexSet()" ], [ "removeAllEdges", "org.jgrapht.graph", "AbstractGraph", "protected boolean removeAllEdges(E[] arg0)" ], [ "outgoingEdgesOf", "org.jgrapht.graph", "AbstractBaseGraph", "public Set<E> outgoingEdgesOf(V arg0)" ], [ "hashCode", "org.jgrapht.graph", "AbstractGraph", "public int hashCode()" ], [ "addEdge", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean addEdge(V arg0, V arg1, E arg2)" ], [ "toStringFromSets", "org.jgrapht.graph", "AbstractGraph", "protected String toStringFromSets(Collection<? extends V> arg0, Collection<? extends E> arg1, boolean arg2)" ], [ "getEdgeTarget", "org.jgrapht.graph", "AbstractBaseGraph", "public V getEdgeTarget(E arg0)" ], [ "removeAllVertices", "org.jgrapht.graph", "AbstractGraph", "public boolean removeAllVertices(Collection<? extends V> arg0)" ], [ "removeVertex", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean removeVertex(V arg0)" ], [ "createDirectedSpecifics", "org.jgrapht.graph", "AbstractBaseGraph", "protected AbstractBaseGraph.DirectedSpecifics createDirectedSpecifics()" ], [ "containsVertex", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean containsVertex(V arg0)" ], [ "getAllEdges", "org.jgrapht.graph", "AbstractBaseGraph", "public Set<E> getAllEdges(V arg0, V arg1)" ], [ "isAllowingMultipleEdges", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean isAllowingMultipleEdges()" ], [ "outDegreeOf", "org.jgrapht.graph", "AbstractBaseGraph", "public int outDegreeOf(V arg0)" ], [ "equals", "org.jgrapht.graph", "AbstractGraph", "public boolean equals(Object arg0)" ], [ "getEdgeFactory", "org.jgrapht.graph", "AbstractBaseGraph", "public EdgeFactory<V, E> getEdgeFactory()" ], [ "addVertex", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean addVertex(V arg0)" ], [ "getEdgeWeight", "org.jgrapht.graph", "AbstractBaseGraph", "public double getEdgeWeight(E arg0)" ], [ "removeEdge", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean removeEdge(E arg0)" ], [ "containsEdge", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean containsEdge(E arg0)" ], [ "degreeOf", "org.jgrapht.graph", "AbstractBaseGraph", "public int degreeOf(V arg0)" ], [ "clone", "org.jgrapht.graph", "AbstractBaseGraph", "public Object clone()" ], [ "edgeSet", "org.jgrapht.graph", "AbstractBaseGraph", "public Set<E> edgeSet()" ], [ "isAllowingLoops", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean isAllowingLoops()" ], [ "getEdgeSource", "org.jgrapht.graph", "AbstractBaseGraph", "public V getEdgeSource(E arg0)" ], [ "removeAllEdges", "org.jgrapht.graph", "AbstractGraph", "public Set<E> removeAllEdges(V arg0, V arg1)" ], [ "inDegreeOf", "org.jgrapht.graph", "AbstractBaseGraph", "public int inDegreeOf(V arg0)" ], [ "toString", "org.jgrapht.graph", "AbstractGraph", "public String toString()" ], [ "edgesOf", "org.jgrapht.graph", "AbstractBaseGraph", "public Set<E> edgesOf(V arg0)" ], [ "removeAllEdges", "org.jgrapht.graph", "AbstractGraph", "public boolean removeAllEdges(Collection<? extends E> arg0)" ], [ "removeEdge", "org.jgrapht.graph", "AbstractBaseGraph", "public E removeEdge(V arg0, V arg1)" ], [ "createUndirectedSpecifics", "org.jgrapht.graph", "AbstractBaseGraph", "protected AbstractBaseGraph.UndirectedSpecifics createUndirectedSpecifics()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "desiredAssertionStatus", "java.lang", "Class", "public boolean desiredAssertionStatus()" ], [ "isPrimitive", "java.lang", "Class", "public native boolean isPrimitive()" ], [ "getDeclaredClasses", "java.lang", "Class", "public Class<? extends Object>[] getDeclaredClasses() throws SecurityException" ], [ "getDeclaredAnnotationsByType", "java.lang", "Class", "public <A> A[] getDeclaredAnnotationsByType(Class<A> arg0)" ], [ "getModule", "java.lang", "Class", "public Module getModule()" ], [ "getDeclaredAnnotationMap", "java.lang", "Class", "Map<Class<? extends Annotation>, Annotation> getDeclaredAnnotationMap()" ], [ "getEnclosingClass", "java.lang", "Class", "public Class<? extends Object> getEnclosingClass() throws SecurityException" ], [ "isEnum", "java.lang", "Class", "public boolean isEnum()" ], [ "getConstantPool", "java.lang", "Class", "native ConstantPool getConstantPool()" ], [ "getNestHost", "java.lang", "Class", "public Class<? extends Object> getNestHost()" ], [ "isHidden", "java.lang", "Class", "public native boolean isHidden()" ], [ "getTypeName", "java.lang", "Class", "public String getTypeName()" ], [ "getDeclaringClass", "java.lang", "Class", "public Class<? extends Object> getDeclaringClass() throws SecurityException" ], [ "getDeclaredConstructor", "java.lang", "Class", "public Constructor<T> getDeclaredConstructor(Class<? extends Object>[] arg0) throws NoSuchMethodException, SecurityException" ], [ "isAssignableFrom", "java.lang", "Class", "public native boolean isAssignableFrom(Class<? extends Object> arg0)" ], [ "getDeclaredMethods", "java.lang", "Class", "public Method[] getDeclaredMethods() throws SecurityException" ], [ "isSealed", "java.lang", "Class", "public boolean isSealed()" ], [ "getConstructor", "java.lang", "Class", "public Constructor<T> getConstructor(Class<? extends Object>[] arg0) throws NoSuchMethodException, SecurityException" ], [ "getDeclaredAnnotation", "java.lang", "Class", "public <A> A getDeclaredAnnotation(Class<A> arg0)" ], [ "isInstance", "java.lang", "Class", "public native boolean isInstance(Object arg0)" ], [ "getTypeParameters", "java.lang", "Class", "public TypeVariable<Class<T>>[] getTypeParameters()" ], [ "getEnumConstants", "java.lang", "Class", "public T[] getEnumConstants()" ], [ "isSynthetic", "java.lang", "Class", "public boolean isSynthetic()" ], [ "describeConstable", "java.lang", "Class", "public Optional<ClassDesc> describeConstable()" ], [ "getEnclosingMethod", "java.lang", "Class", "public Method getEnclosingMethod() throws SecurityException" ], [ "getDeclaredField", "java.lang", "Class", "public Field getDeclaredField(String arg0) throws NoSuchFieldException, SecurityException" ], [ "getGenericSuperclass", "java.lang", "Class", "public Type getGenericSuperclass()" ], [ "newInstance", "java.lang", "Class", "public T newInstance() throws InstantiationException, IllegalAccessException" ], [ "toGenericString", "java.lang", "Class", "public String toGenericString()" ], [ "getAnnotatedInterfaces", "java.lang", "Class", "public AnnotatedType[] getAnnotatedInterfaces()" ], [ "getPermittedSubclasses", "java.lang", "Class", "public Class<? extends Object>[] getPermittedSubclasses()" ], [ "getName", "java.lang", "Class", "public String getName()" ], [ "getAnnotationsByType", "java.lang", "Class", "public <A> A[] getAnnotationsByType(Class<A> arg0)" ], [ "getDeclaredAnnotations", "java.lang", "Class", "public Annotation[] getDeclaredAnnotations()" ], [ "getComponentType", "java.lang", "Class", "public Class<? extends Object> getComponentType()" ], [ "getGenericInterfaces", "java.lang", "Class", "public Type[] getGenericInterfaces()" ], [ "casAnnotationType", "java.lang", "Class", "boolean casAnnotationType(AnnotationType arg0, AnnotationType arg1)" ], [ "getDeclaredFields", "java.lang", "Class", "public Field[] getDeclaredFields() throws SecurityException" ], [ "asSubclass", "java.lang", "Class", "public <U> Class<? extends U> asSubclass(Class<U> arg0)" ], [ "getRawTypeAnnotations", "java.lang", "Class", "native byte[] getRawTypeAnnotations()" ], [ "isAnnotation", "java.lang", "Class", "public boolean isAnnotation()" ], [ "getSuperclass", "java.lang", "Class", "public native Class<? super T> getSuperclass()" ], [ "getSimpleName", "java.lang", "Class", "public String getSimpleName()" ], [ "isInterface", "java.lang", "Class", "public native boolean isInterface()" ], [ "getModifiers", "java.lang", "Class", "public native int getModifiers()" ], [ "getResourceAsStream", "java.lang", "Class", "public InputStream getResourceAsStream(String arg0)" ], [ "getRecordComponents", "java.lang", "Class", "public RecordComponent[] getRecordComponents()" ], [ "getAnnotation", "java.lang", "Class", "public <A> A getAnnotation(Class<A> arg0)" ], [ "getSigners", "java.lang", "Class", "public native Object[] getSigners()" ], [ "isMemberClass", "java.lang", "Class", "public boolean isMemberClass()" ], [ "getMethods", "java.lang", "Class", "public Method[] getMethods() throws SecurityException" ], [ "getDeclaredMethod", "java.lang", "Class", "public Method getDeclaredMethod(String arg0, Class<? extends Object>[] arg1) throws NoSuchMethodException, SecurityException" ], [ "toString", "java.lang", "Class", "public String toString()" ], [ "enumConstantDirectory", "java.lang", "Class", "Map<String, T> enumConstantDirectory()" ], [ "getClasses", "java.lang", "Class", "public Class<? extends Object>[] getClasses()" ], [ "getAnnotationType", "java.lang", "Class", "AnnotationType getAnnotationType()" ], [ "isAnonymousClass", "java.lang", "Class", "public boolean isAnonymousClass()" ], [ "getEnumConstantsShared", "java.lang", "Class", "T[] getEnumConstantsShared()" ], [ "getDeclaredConstructors", "java.lang", "Class", "public Constructor<? extends Object>[] getDeclaredConstructors() throws SecurityException" ], [ "getMethod", "java.lang", "Class", "public Method getMethod(String arg0, Class<? extends Object>[] arg1) throws NoSuchMethodException, SecurityException" ], [ "getInterfaces", "java.lang", "Class", "public Class<? extends Object>[] getInterfaces()" ], [ "isNestmateOf", "java.lang", "Class", "public boolean isNestmateOf(Class<? extends Object> arg0)" ], [ "getEnclosingConstructor", "java.lang", "Class", "public Constructor<? extends Object> getEnclosingConstructor() throws SecurityException" ], [ "getProtectionDomain", "java.lang", "Class", "public ProtectionDomain getProtectionDomain()" ], [ "getClassLoader", "java.lang", "Class", "public ClassLoader getClassLoader()" ], [ "descriptorString", "java.lang", "Class", "public String descriptorString()" ], [ "getAnnotatedSuperclass", "java.lang", "Class", "public AnnotatedType getAnnotatedSuperclass()" ], [ "getFields", "java.lang", "Class", "public Field[] getFields() throws SecurityException" ], [ "getPackage", "java.lang", "Class", "public Package getPackage()" ], [ "protectionDomain", "java.lang", "Class", "ProtectionDomain protectionDomain()" ], [ "getConstructors", "java.lang", "Class", "public Constructor<? extends Object>[] getConstructors() throws SecurityException" ], [ "getNestMembers", "java.lang", "Class", "public Class<? extends Object>[] getNestMembers()" ], [ "isArray", "java.lang", "Class", "public native boolean isArray()" ], [ "isRecord", "java.lang", "Class", "public boolean isRecord()" ], [ "getCanonicalName", "java.lang", "Class", "public String getCanonicalName()" ], [ "getPackageName", "java.lang", "Class", "public String getPackageName()" ], [ "getField", "java.lang", "Class", "public Field getField(String arg0) throws NoSuchFieldException, SecurityException" ], [ "cast", "java.lang", "Class", "public T cast(Object arg0)" ], [ "isLocalClass", "java.lang", "Class", "public boolean isLocalClass()" ], [ "getRawAnnotations", "java.lang", "Class", "native byte[] getRawAnnotations()" ], [ "getResource", "java.lang", "Class", "public URL getResource(String arg0)" ], [ "isAnnotationPresent", "java.lang", "Class", "public boolean isAnnotationPresent(Class<? extends Annotation> arg0)" ], [ "componentType", "java.lang", "Class", "public Class<? extends Object> componentType()" ], [ "getClassLoader0", "java.lang", "Class", "ClassLoader getClassLoader0()" ], [ "arrayType", "java.lang", "Class", "public Class<? extends Object> arrayType()" ], [ "getAnnotations", "java.lang", "Class", "public Annotation[] getAnnotations()" ], [ "getClassData", "java.lang", "Class", "Object getClassData()" ], [ "getDeclaredPublicMethods", "java.lang", "Class", "List<Method> getDeclaredPublicMethods(String arg0, Class<? extends Object>[] arg1)" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "getTypeParameters", "java.lang.reflect", "GenericDeclaration", "public abstract TypeVariable<? extends Object>[] getTypeParameters()" ], [ "getAnnotationsByType", "java.lang.reflect", "AnnotatedElement", "public default <T> T[] getAnnotationsByType(Class<T> arg0)" ], [ "getDeclaredAnnotations", "java.lang.reflect", "AnnotatedElement", "public abstract Annotation[] getDeclaredAnnotations()" ], [ "getDeclaredAnnotationsByType", "java.lang.reflect", "AnnotatedElement", "public default <T> T[] getDeclaredAnnotationsByType(Class<T> arg0)" ], [ "getDeclaredAnnotation", "java.lang.reflect", "AnnotatedElement", "public default <T> T getDeclaredAnnotation(Class<T> arg0)" ], [ "isAnnotationPresent", "java.lang.reflect", "AnnotatedElement", "public default boolean isAnnotationPresent(Class<? extends Annotation> arg0)" ], [ "getAnnotation", "java.lang.reflect", "AnnotatedElement", "public abstract <T> T getAnnotation(Class<T> arg0)" ], [ "getAnnotations", "java.lang.reflect", "AnnotatedElement", "public abstract Annotation[] getAnnotations()" ], [ "getTypeName", "java.lang.reflect", "Type", "public default String getTypeName()" ], [ "isArray", "java.lang.invoke", "TypeDescriptor.OfField", "public abstract boolean isArray()" ], [ "isPrimitive", "java.lang.invoke", "TypeDescriptor.OfField", "public abstract boolean isPrimitive()" ], [ "arrayType", "java.lang.invoke", "TypeDescriptor.OfField", "public abstract F arrayType()" ], [ "componentType", "java.lang.invoke", "TypeDescriptor.OfField", "public abstract F componentType()" ], [ "descriptorString", "java.lang.invoke", "TypeDescriptor", "public abstract String descriptorString()" ], [ "describeConstable", "java.lang.constant", "Constable", "public abstract Optional<? extends ConstantDesc> describeConstable()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "allowingLoops", "org.jgrapht.graph", "AbstractBaseGraph", "boolean allowingLoops;" ], [ "classValueMap", "java.lang", "Class", "transient ClassValue.ClassValueMap classValueMap;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 25939,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "jgrapht-core-0.9.2",
  "packageName" : "org.jgrapht.graph",
  "className" : "AbstractBaseGraph",
  "javadocTag" : "@throws RuntimeException",
  "methodJavadoc" : "    /**\n     * Returns a shallow copy of this graph instance. Neither edges nor vertices\n     * are cloned.\n     *\n     * @return a shallow copy of this set.\n     *\n     * @throws RuntimeException\n     *\n     * @see java.lang.Object#clone()\n     */",
  "methodSourceCode" : "public Object clone(){\n    try {\n        TypeUtil<AbstractBaseGraph<V, E>> typeDecl = null;\n        AbstractBaseGraph<V, E> newGraph = TypeUtil.uncheckedCast(super.clone(), typeDecl);\n        newGraph.edgeMap = new LinkedHashMap<E, IntrusiveEdge>();\n        newGraph.edgeFactory = this.edgeFactory;\n        newGraph.unmodifiableEdgeSet = null;\n        newGraph.unmodifiableVertexSet = null;\n        // NOTE:  it's important for this to happen in an object\n        // method so that the new inner class instance gets associated with\n        // the right outer class instance\n        newGraph.specifics = newGraph.createSpecifics();\n        Graphs.addGraph(newGraph, this);\n        return newGraph;\n    } catch (CloneNotSupportedException e) {\n        e.printStackTrace();\n        throw new RuntimeException();\n    }\n}",
  "classJavadoc" : "/**\n * The most general implementation of the {@link org.jgrapht.Graph} interface.\n * Its subclasses add various restrictions to get more specific graphs. The\n * decision whether it is directed or undirected is decided at construction time\n * and cannot be later modified (see constructor for details).\n *\n * <p>This graph implementation guarantees deterministic vertex and edge set\n * ordering (via {@link LinkedHashMap} and {@link LinkedHashSet}).</p>\n *\n * @author Barak Naveh\n * @since Jul 24, 2003\n */",
  "classSourceCode" : "/* ==========================================\n * JGraphT : a free Java graph-theory library\n * ==========================================\n *\n * Project Info:  http://jgrapht.sourceforge.net/\n * Project Creator:  Barak Naveh (http://sourceforge.net/users/barak_naveh)\n *\n * (C) Copyright 2003-2008, by Barak Naveh and Contributors.\n *\n * This program and the accompanying materials are dual-licensed under\n * either\n *\n * (a) the terms of the GNU Lesser General Public License version 2.1\n * as published by the Free Software Foundation, or (at your option) any\n * later version.\n *\n * or (per the licensee's choosing)\n *\n * (b) the terms of the Eclipse Public License v1.0 as published by\n * the Eclipse Foundation.\n */\n/* ----------------------\n * AbstractBaseGraph.java\n * ----------------------\n * (C) Copyright 2003-2008, by Barak Naveh and Contributors.\n *\n * Original Author:  Barak Naveh\n * Contributor(s):   John V. Sichi\n *                   Christian Hammer\n *\n * $Id$\n *\n * Changes\n * -------\n * 24-Jul-2003 : Initial revision (BN);\n * 10-Aug-2003 : General edge refactoring (BN);\n * 06-Nov-2003 : Change edge sharing semantics (JVS);\n * 07-Feb-2004 : Enabled serialization (BN);\n * 11-Mar-2004 : Made generic (CH);\n * 01-Jun-2005 : Added EdgeListFactory (JVS);\n * 07-May-2006 : Changed from List<Edge> to Set<Edge> (JVS);\n * 28-May-2006 : Moved connectivity info from edge to graph (JVS);\n *\n */\npackage org.jgrapht.graph;\n\nimport java.io.*;\n\nimport java.util.*;\n\nimport org.jgrapht.*;\nimport org.jgrapht.util.*;\n\n\n/**\n * The most general implementation of the {@link org.jgrapht.Graph} interface.\n * Its subclasses add various restrictions to get more specific graphs. The\n * decision whether it is directed or undirected is decided at construction time\n * and cannot be later modified (see constructor for details).\n *\n * <p>This graph implementation guarantees deterministic vertex and edge set\n * ordering (via {@link LinkedHashMap} and {@link LinkedHashSet}).</p>\n *\n * @author Barak Naveh\n * @since Jul 24, 2003\n */\npublic abstract class AbstractBaseGraph<V, E>\n    extends AbstractGraph<V, E>\n    implements Graph<V, E>,\n        Cloneable,\n        Serializable\n{\n    private static final long serialVersionUID = -1263088497616142427L;\n\n    private static final String LOOPS_NOT_ALLOWED = \"loops not allowed\";\n\n    boolean allowingLoops;\n\n    private EdgeFactory<V, E> edgeFactory;\n    private EdgeSetFactory<V, E> edgeSetFactory;\n    private Map<E, IntrusiveEdge> edgeMap;\n    private transient Set<E> unmodifiableEdgeSet = null;\n    private transient Set<V> unmodifiableVertexSet = null;\n    private Specifics specifics;\n    private boolean allowingMultipleEdges;\n\n    private transient TypeUtil<V> vertexTypeDecl = null;\n\n    /**\n     * Construct a new graph. The graph can either be directed or undirected,\n     * depending on the specified edge factory.\n     *\n     * @param ef the edge factory of the new graph.\n     * @param allowMultipleEdges whether to allow multiple edges or not.\n     * @param allowLoops whether to allow edges that are self-loops or not.\n     *\n     * @throws NullPointerException if the specified edge factory is <code>\n     * null</code>.\n     */\n    protected AbstractBaseGraph(\n        EdgeFactory<V, E> ef,\n        boolean allowMultipleEdges,\n        boolean allowLoops)\n    {\n        if (ef == null) {\n            throw new NullPointerException();\n        }\n\n        edgeMap = new LinkedHashMap<E, IntrusiveEdge>();\n        edgeFactory = ef;\n        allowingLoops = allowLoops;\n        allowingMultipleEdges = allowMultipleEdges;\n\n        specifics = createSpecifics();\n\n        this.edgeSetFactory = new ArrayListFactory<V, E>();\n    }\n\n    /**\n     * @see Graph#getAllEdges(Object, Object)\n     */\n    @Override public Set<E> getAllEdges(V sourceVertex, V targetVertex)\n    {\n        return specifics.getAllEdges(sourceVertex, targetVertex);\n    }\n\n    /**\n     * Returns <code>true</code> if and only if self-loops are allowed in this\n     * graph. A self loop is an edge that its source and target vertices are the\n     * same.\n     *\n     * @return <code>true</code> if and only if graph loops are allowed.\n     */\n    public boolean isAllowingLoops()\n    {\n        return allowingLoops;\n    }\n\n    /**\n     * Returns <code>true</code> if and only if multiple edges are allowed in\n     * this graph. The meaning of multiple edges is that there can be many edges\n     * going from vertex v1 to vertex v2.\n     *\n     * @return <code>true</code> if and only if multiple edges are allowed.\n     */\n    public boolean isAllowingMultipleEdges()\n    {\n        return allowingMultipleEdges;\n    }\n\n    /**\n     * @see Graph#getEdge(Object, Object)\n     */\n    @Override public E getEdge(V sourceVertex, V targetVertex)\n    {\n        return specifics.getEdge(sourceVertex, targetVertex);\n    }\n\n    /**\n     * @see Graph#getEdgeFactory()\n     */\n    @Override public EdgeFactory<V, E> getEdgeFactory()\n    {\n        return edgeFactory;\n    }\n\n    /**\n     * Set the {@link EdgeSetFactory} to use for this graph. Initially, a graph\n     * is created with a default implementation which always supplies an {@link\n     * java.util.ArrayList} with capacity 1.\n     *\n     * @param edgeSetFactory factory to use for subsequently created edge sets\n     * (this call has no effect on existing edge sets)\n     */\n    public void setEdgeSetFactory(EdgeSetFactory<V, E> edgeSetFactory)\n    {\n        this.edgeSetFactory = edgeSetFactory;\n    }\n\n    /**\n     * @see Graph#addEdge(Object, Object)\n     */\n    @Override public E addEdge(V sourceVertex, V targetVertex)\n    {\n        assertVertexExist(sourceVertex);\n        assertVertexExist(targetVertex);\n\n        if (!allowingMultipleEdges\n            && containsEdge(sourceVertex, targetVertex))\n        {\n            return null;\n        }\n\n        if (!allowingLoops && sourceVertex.equals(targetVertex)) {\n            throw new IllegalArgumentException(LOOPS_NOT_ALLOWED);\n        }\n\n        E e = edgeFactory.createEdge(sourceVertex, targetVertex);\n\n        if (containsEdge(e)) { // this restriction should stay!\n\n            return null;\n        } else {\n            IntrusiveEdge intrusiveEdge =\n                createIntrusiveEdge(e, sourceVertex, targetVertex);\n\n            edgeMap.put(e, intrusiveEdge);\n            specifics.addEdgeToTouchingVertices(e);\n\n            return e;\n        }\n    }\n\n    /**\n     * @see Graph#addEdge(Object, Object, Object)\n     */\n    @Override public boolean addEdge(V sourceVertex, V targetVertex, E e)\n    {\n        if (e == null) {\n            throw new NullPointerException();\n        } else if (containsEdge(e)) {\n            return false;\n        }\n\n        assertVertexExist(sourceVertex);\n        assertVertexExist(targetVertex);\n\n        if (!allowingMultipleEdges\n            && containsEdge(sourceVertex, targetVertex))\n        {\n            return false;\n        }\n\n        if (!allowingLoops && sourceVertex.equals(targetVertex)) {\n            throw new IllegalArgumentException(LOOPS_NOT_ALLOWED);\n        }\n\n        IntrusiveEdge intrusiveEdge =\n            createIntrusiveEdge(e, sourceVertex, targetVertex);\n\n        edgeMap.put(e, intrusiveEdge);\n        specifics.addEdgeToTouchingVertices(e);\n\n        return true;\n    }\n\n    private IntrusiveEdge createIntrusiveEdge(\n        E e,\n        V sourceVertex,\n        V targetVertex)\n    {\n        IntrusiveEdge intrusiveEdge;\n        if (e instanceof IntrusiveEdge) {\n            intrusiveEdge = (IntrusiveEdge) e;\n        } else {\n            intrusiveEdge = new IntrusiveEdge();\n        }\n        intrusiveEdge.source = sourceVertex;\n        intrusiveEdge.target = targetVertex;\n        return intrusiveEdge;\n    }\n\n    /**\n     * @see Graph#addVertex(Object)\n     */\n    @Override public boolean addVertex(V v)\n    {\n        if (v == null) {\n            throw new NullPointerException();\n        } else if (containsVertex(v)) {\n            return false;\n        } else {\n            specifics.addVertex(v);\n\n            return true;\n        }\n    }\n\n    /**\n     * @see Graph#getEdgeSource(Object)\n     */\n    @Override public V getEdgeSource(E e)\n    {\n        return TypeUtil.uncheckedCast(\n            getIntrusiveEdge(e).source,\n            vertexTypeDecl);\n    }\n\n    /**\n     * @see Graph#getEdgeTarget(Object)\n     */\n    @Override public V getEdgeTarget(E e)\n    {\n        return TypeUtil.uncheckedCast(\n            getIntrusiveEdge(e).target,\n            vertexTypeDecl);\n    }\n\n    private IntrusiveEdge getIntrusiveEdge(E e)\n    {\n        if (e instanceof IntrusiveEdge) {\n            return (IntrusiveEdge) e;\n        }\n\n        return edgeMap.get(e);\n    }\n\n    /**\n     * Returns a shallow copy of this graph instance. Neither edges nor vertices\n     * are cloned.\n     *\n     * @return a shallow copy of this set.\n     *\n     * @throws RuntimeException\n     *\n     * @see java.lang.Object#clone()\n     */\n    @Override public Object clone()\n    {\n        try {\n            TypeUtil<AbstractBaseGraph<V, E>> typeDecl = null;\n\n            AbstractBaseGraph<V, E> newGraph =\n                TypeUtil.uncheckedCast(super.clone(), typeDecl);\n\n            newGraph.edgeMap = new LinkedHashMap<E, IntrusiveEdge>();\n\n            newGraph.edgeFactory = this.edgeFactory;\n            newGraph.unmodifiableEdgeSet = null;\n            newGraph.unmodifiableVertexSet = null;\n\n            // NOTE:  it's important for this to happen in an object\n            // method so that the new inner class instance gets associated with\n            // the right outer class instance\n            newGraph.specifics = newGraph.createSpecifics();\n\n            Graphs.addGraph(newGraph, this);\n\n            return newGraph;\n        } catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n            throw new RuntimeException();\n        }\n    }\n\n    /**\n     * @see Graph#containsEdge(Object)\n     */\n    @Override public boolean containsEdge(E e)\n    {\n        return edgeMap.containsKey(e);\n    }\n\n    /**\n     * @see Graph#containsVertex(Object)\n     */\n    @Override public boolean containsVertex(V v)\n    {\n        return specifics.getVertexSet().contains(v);\n    }\n\n    /**\n     * @see UndirectedGraph#degreeOf(Object)\n     */\n    public int degreeOf(V vertex)\n    {\n        return specifics.degreeOf(vertex);\n    }\n\n    /**\n     * @see Graph#edgeSet()\n     */\n    @Override public Set<E> edgeSet()\n    {\n        if (unmodifiableEdgeSet == null) {\n            unmodifiableEdgeSet = Collections.unmodifiableSet(edgeMap.keySet());\n        }\n\n        return unmodifiableEdgeSet;\n    }\n\n    /**\n     * @see Graph#edgesOf(Object)\n     */\n    @Override public Set<E> edgesOf(V vertex)\n    {\n        return specifics.edgesOf(vertex);\n    }\n\n    /**\n     * @see DirectedGraph#inDegreeOf(Object)\n     */\n    public int inDegreeOf(V vertex)\n    {\n        return specifics.inDegreeOf(vertex);\n    }\n\n    /**\n     * @see DirectedGraph#incomingEdgesOf(Object)\n     */\n    public Set<E> incomingEdgesOf(V vertex)\n    {\n        return specifics.incomingEdgesOf(vertex);\n    }\n\n    /**\n     * @see DirectedGraph#outDegreeOf(Object)\n     */\n    public int outDegreeOf(V vertex)\n    {\n        return specifics.outDegreeOf(vertex);\n    }\n\n    /**\n     * @see DirectedGraph#outgoingEdgesOf(Object)\n     */\n    public Set<E> outgoingEdgesOf(V vertex)\n    {\n        return specifics.outgoingEdgesOf(vertex);\n    }\n\n    /**\n     * @see Graph#removeEdge(Object, Object)\n     */\n    @Override public E removeEdge(V sourceVertex, V targetVertex)\n    {\n        E e = getEdge(sourceVertex, targetVertex);\n\n        if (e != null) {\n            specifics.removeEdgeFromTouchingVertices(e);\n            edgeMap.remove(e);\n        }\n\n        return e;\n    }\n\n    /**\n     * @see Graph#removeEdge(Object)\n     */\n    @Override public boolean removeEdge(E e)\n    {\n        if (containsEdge(e)) {\n            specifics.removeEdgeFromTouchingVertices(e);\n            edgeMap.remove(e);\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @see Graph#removeVertex(Object)\n     */\n    @Override public boolean removeVertex(V v)\n    {\n        if (containsVertex(v)) {\n            Set<E> touchingEdgesList = edgesOf(v);\n\n            // cannot iterate over list - will cause\n            // ConcurrentModificationException\n            removeAllEdges(new ArrayList<E>(touchingEdgesList));\n\n            specifics.getVertexSet().remove(v); // remove the vertex itself\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @see Graph#vertexSet()\n     */\n    @Override public Set<V> vertexSet()\n    {\n        if (unmodifiableVertexSet == null) {\n            unmodifiableVertexSet =\n                Collections.unmodifiableSet(specifics.getVertexSet());\n        }\n\n        return unmodifiableVertexSet;\n    }\n\n    /**\n     * @see Graph#getEdgeWeight(Object)\n     */\n    @Override public double getEdgeWeight(E e)\n    {\n        if (e instanceof DefaultWeightedEdge) {\n            return ((DefaultWeightedEdge) e).getWeight();\n        } else if (e == null) {\n            throw new NullPointerException();\n        } else {\n            return WeightedGraph.DEFAULT_EDGE_WEIGHT;\n        }\n    }\n\n    /**\n     * @see WeightedGraph#setEdgeWeight(Object, double)\n     */\n    public void setEdgeWeight(E e, double weight)\n    {\n        assert (e instanceof DefaultWeightedEdge) : e.getClass();\n        ((DefaultWeightedEdge) e).weight = weight;\n    }\n\n    private Specifics createSpecifics()\n    {\n        if (this instanceof DirectedGraph<?, ?>) {\n            return createDirectedSpecifics();\n        } else if (this instanceof UndirectedGraph<?, ?>) {\n            return createUndirectedSpecifics();\n        } else {\n            throw new IllegalArgumentException(\n                \"must be instance of either DirectedGraph or UndirectedGraph\");\n        }\n    }\n\n    protected UndirectedSpecifics createUndirectedSpecifics()\n    {\n        return new UndirectedSpecifics();\n    }\n\n    protected DirectedSpecifics createDirectedSpecifics()\n    {\n        return new DirectedSpecifics();\n    }\n\n    /**\n     * .\n     *\n     * @author Barak Naveh\n     */\n    private abstract class Specifics\n        implements Serializable\n    {\n        private static final long serialVersionUID = 785196247314761183L;\n\n        public abstract void addVertex(V vertex);\n\n        public abstract Set<V> getVertexSet();\n\n        /**\n         * .\n         *\n         * @param sourceVertex\n         * @param targetVertex\n         *\n         * @return\n         */\n        public abstract Set<E> getAllEdges(V sourceVertex,\n            V targetVertex);\n\n        /**\n         * .\n         *\n         * @param sourceVertex\n         * @param targetVertex\n         *\n         * @return\n         */\n        public abstract E getEdge(V sourceVertex, V targetVertex);\n\n        /**\n         * Adds the specified edge to the edge containers of its source and\n         * target vertices.\n         *\n         * @param e\n         */\n        public abstract void addEdgeToTouchingVertices(E e);\n\n        /**\n         * .\n         *\n         * @param vertex\n         *\n         * @return\n         */\n        public abstract int degreeOf(V vertex);\n\n        /**\n         * .\n         *\n         * @param vertex\n         *\n         * @return\n         */\n        public abstract Set<E> edgesOf(V vertex);\n\n        /**\n         * .\n         *\n         * @param vertex\n         *\n         * @return\n         */\n        public abstract int inDegreeOf(V vertex);\n\n        /**\n         * .\n         *\n         * @param vertex\n         *\n         * @return\n         */\n        public abstract Set<E> incomingEdgesOf(V vertex);\n\n        /**\n         * .\n         *\n         * @param vertex\n         *\n         * @return\n         */\n        public abstract int outDegreeOf(V vertex);\n\n        /**\n         * .\n         *\n         * @param vertex\n         *\n         * @return\n         */\n        public abstract Set<E> outgoingEdgesOf(V vertex);\n\n        /**\n         * Removes the specified edge from the edge containers of its source and\n         * target vertices.\n         *\n         * @param e\n         */\n        public abstract void removeEdgeFromTouchingVertices(E e);\n    }\n\n    private static class ArrayListFactory<VV, EE>\n        implements EdgeSetFactory<VV, EE>,\n            Serializable\n    {\n        private static final long serialVersionUID = 5936902837403445985L;\n\n        /**\n         * @see EdgeSetFactory.createEdgeSet\n         */\n        @Override public Set<EE> createEdgeSet(VV vertex)\n        {\n            // NOTE:  use size 1 to keep memory usage under control\n            // for the common case of vertices with low degree\n            return new ArrayUnenforcedSet<EE>(1);\n        }\n    }\n\n    /**\n     * A container for vertex edges.\n     *\n     * <p>In this edge container we use array lists to minimize memory toll.\n     * However, for high-degree vertices we replace the entire edge container\n     * with a direct access subclass (to be implemented).</p>\n     *\n     * @author Barak Naveh\n     */\n    protected static class DirectedEdgeContainer<VV, EE>\n        implements Serializable\n    {\n        private static final long serialVersionUID = 7494242245729767106L;\n        Set<EE> incoming;\n        Set<EE> outgoing;\n        private transient Set<EE> unmodifiableIncoming = null;\n        private transient Set<EE> unmodifiableOutgoing = null;\n\n        DirectedEdgeContainer(EdgeSetFactory<VV, EE> edgeSetFactory,\n            VV vertex)\n        {\n            incoming = edgeSetFactory.createEdgeSet(vertex);\n            outgoing = edgeSetFactory.createEdgeSet(vertex);\n        }\n\n        /**\n         * A lazy build of unmodifiable incoming edge set.\n         *\n         * @return\n         */\n        public Set<EE> getUnmodifiableIncomingEdges()\n        {\n            if (unmodifiableIncoming == null) {\n                unmodifiableIncoming = Collections.unmodifiableSet(incoming);\n            }\n\n            return unmodifiableIncoming;\n        }\n\n        /**\n         * A lazy build of unmodifiable outgoing edge set.\n         *\n         * @return\n         */\n        public Set<EE> getUnmodifiableOutgoingEdges()\n        {\n            if (unmodifiableOutgoing == null) {\n                unmodifiableOutgoing = Collections.unmodifiableSet(outgoing);\n            }\n\n            return unmodifiableOutgoing;\n        }\n\n        /**\n         * .\n         *\n         * @param e\n         */\n        public void addIncomingEdge(EE e)\n        {\n            incoming.add(e);\n        }\n\n        /**\n         * .\n         *\n         * @param e\n         */\n        public void addOutgoingEdge(EE e)\n        {\n            outgoing.add(e);\n        }\n\n        /**\n         * .\n         *\n         * @param e\n         */\n        public void removeIncomingEdge(EE e)\n        {\n            incoming.remove(e);\n        }\n\n        /**\n         * .\n         *\n         * @param e\n         */\n        public void removeOutgoingEdge(EE e)\n        {\n            outgoing.remove(e);\n        }\n    }\n\n    /**\n     * .\n     *\n     * @author Barak Naveh\n     */\n    protected class DirectedSpecifics\n        extends Specifics\n        implements Serializable\n    {\n        private static final long serialVersionUID = 8971725103718958232L;\n        private static final String NOT_IN_DIRECTED_GRAPH =\n            \"no such operation in a directed graph\";\n\n        protected Map<V, DirectedEdgeContainer<V, E>> vertexMapDirected;\n\n        public DirectedSpecifics()\n        {\n            this(new LinkedHashMap<V, DirectedEdgeContainer<V, E>>());\n        }\n\n        public DirectedSpecifics(Map<V, DirectedEdgeContainer<V, E>> vertexMap)\n        {\n            this.vertexMapDirected = vertexMap;\n        }\n\n        @Override public void addVertex(V v)\n        {\n            // add with a lazy edge container entry\n            vertexMapDirected.put(v, null);\n        }\n\n        @Override public Set<V> getVertexSet()\n        {\n            return vertexMapDirected.keySet();\n        }\n\n        /**\n         * @see Graph#getAllEdges(Object, Object)\n         */\n        @Override public Set<E> getAllEdges(V sourceVertex, V targetVertex)\n        {\n            Set<E> edges = null;\n\n            if (containsVertex(sourceVertex)\n                && containsVertex(targetVertex))\n            {\n                edges = new ArrayUnenforcedSet<E>();\n\n                DirectedEdgeContainer<V, E> ec = getEdgeContainer(sourceVertex);\n\n                Iterator<E> iter = ec.outgoing.iterator();\n\n                while (iter.hasNext()) {\n                    E e = iter.next();\n\n                    if (getEdgeTarget(e).equals(targetVertex)) {\n                        edges.add(e);\n                    }\n                }\n            }\n\n            return edges;\n        }\n\n        /**\n         * @see Graph#getEdge(Object, Object)\n         */\n        @Override public E getEdge(V sourceVertex, V targetVertex)\n        {\n            if (containsVertex(sourceVertex)\n                && containsVertex(targetVertex))\n            {\n                DirectedEdgeContainer<V, E> ec = getEdgeContainer(sourceVertex);\n\n                Iterator<E> iter = ec.outgoing.iterator();\n\n                while (iter.hasNext()) {\n                    E e = iter.next();\n\n                    if (getEdgeTarget(e).equals(targetVertex)) {\n                        return e;\n                    }\n                }\n            }\n\n            return null;\n        }\n\n        @Override public void addEdgeToTouchingVertices(E e)\n        {\n            V source = getEdgeSource(e);\n            V target = getEdgeTarget(e);\n\n            getEdgeContainer(source).addOutgoingEdge(e);\n            getEdgeContainer(target).addIncomingEdge(e);\n        }\n\n        /**\n         * @see UndirectedGraph#degreeOf(Object)\n         */\n        @Override public int degreeOf(V vertex)\n        {\n            throw new UnsupportedOperationException(NOT_IN_DIRECTED_GRAPH);\n        }\n\n        /**\n         * @see Graph#edgesOf(Object)\n         */\n        @Override public Set<E> edgesOf(V vertex)\n        {\n            ArrayUnenforcedSet<E> inAndOut =\n                new ArrayUnenforcedSet<E>(getEdgeContainer(vertex).incoming);\n            inAndOut.addAll(getEdgeContainer(vertex).outgoing);\n\n            // we have two copies for each self-loop - remove one of them.\n            if (allowingLoops) {\n                Set<E> loops = getAllEdges(vertex, vertex);\n\n                for (int i = 0; i < inAndOut.size();) {\n                    Object e = inAndOut.get(i);\n\n                    if (loops.contains(e)) {\n                        inAndOut.remove(i);\n                        loops.remove(e); // so we remove it only once\n                    } else {\n                        i++;\n                    }\n                }\n            }\n\n            return Collections.unmodifiableSet(inAndOut);\n        }\n\n        /**\n         * @see DirectedGraph#inDegreeOf(Object)\n         */\n        @Override public int inDegreeOf(V vertex)\n        {\n            return getEdgeContainer(vertex).incoming.size();\n        }\n\n        /**\n         * @see DirectedGraph#incomingEdgesOf(Object)\n         */\n        @Override public Set<E> incomingEdgesOf(V vertex)\n        {\n            return getEdgeContainer(vertex).getUnmodifiableIncomingEdges();\n        }\n\n        /**\n         * @see DirectedGraph#outDegreeOf(Object)\n         */\n        @Override public int outDegreeOf(V vertex)\n        {\n            return getEdgeContainer(vertex).outgoing.size();\n        }\n\n        /**\n         * @see DirectedGraph#outgoingEdgesOf(Object)\n         */\n        @Override public Set<E> outgoingEdgesOf(V vertex)\n        {\n            return getEdgeContainer(vertex).getUnmodifiableOutgoingEdges();\n        }\n\n        @Override public void removeEdgeFromTouchingVertices(E e)\n        {\n            V source = getEdgeSource(e);\n            V target = getEdgeTarget(e);\n\n            getEdgeContainer(source).removeOutgoingEdge(e);\n            getEdgeContainer(target).removeIncomingEdge(e);\n        }\n\n        /**\n         * A lazy build of edge container for specified vertex.\n         *\n         * @param vertex a vertex in this graph.\n         *\n         * @return EdgeContainer\n         */\n        private DirectedEdgeContainer<V, E> getEdgeContainer(V vertex)\n        {\n            assertVertexExist(vertex);\n\n            DirectedEdgeContainer<V, E> ec = vertexMapDirected.get(vertex);\n\n            if (ec == null) {\n                ec = new DirectedEdgeContainer<V, E>(edgeSetFactory, vertex);\n                vertexMapDirected.put(vertex, ec);\n            }\n\n            return ec;\n        }\n    }\n\n    /**\n     * A container of for vertex edges.\n     *\n     * <p>In this edge container we use array lists to minimize memory toll.\n     * However, for high-degree vertices we replace the entire edge container\n     * with a direct access subclass (to be implemented).</p>\n     *\n     * @author Barak Naveh\n     */\n    private static class UndirectedEdgeContainer<VV, EE>\n        implements Serializable\n    {\n        private static final long serialVersionUID = -6623207588411170010L;\n        Set<EE> vertexEdges;\n        private transient Set<EE> unmodifiableVertexEdges = null;\n\n        UndirectedEdgeContainer(\n            EdgeSetFactory<VV, EE> edgeSetFactory,\n            VV vertex)\n        {\n            vertexEdges = edgeSetFactory.createEdgeSet(vertex);\n        }\n\n        /**\n         * A lazy build of unmodifiable list of vertex edges\n         *\n         * @return\n         */\n        public Set<EE> getUnmodifiableVertexEdges()\n        {\n            if (unmodifiableVertexEdges == null) {\n                unmodifiableVertexEdges =\n                    Collections.unmodifiableSet(vertexEdges);\n            }\n\n            return unmodifiableVertexEdges;\n        }\n\n        /**\n         * .\n         *\n         * @param e\n         */\n        public void addEdge(EE e)\n        {\n            vertexEdges.add(e);\n        }\n\n        /**\n         * .\n         *\n         * @return\n         */\n        public int edgeCount()\n        {\n            return vertexEdges.size();\n        }\n\n        /**\n         * .\n         *\n         * @param e\n         */\n        public void removeEdge(EE e)\n        {\n            vertexEdges.remove(e);\n        }\n    }\n\n    /**\n     * .\n     *\n     * @author Barak Naveh\n     */\n    protected class UndirectedSpecifics\n        extends Specifics\n        implements Serializable\n    {\n        private static final long serialVersionUID = 6494588405178655873L;\n        private static final String NOT_IN_UNDIRECTED_GRAPH =\n            \"no such operation in an undirected graph\";\n\n        private Map<V, UndirectedEdgeContainer<V, E>> vertexMapUndirected;\n\n        public UndirectedSpecifics()\n        {\n            this(new LinkedHashMap<V, UndirectedEdgeContainer<V, E>>());\n        }\n\n        public UndirectedSpecifics(\n            Map<V, UndirectedEdgeContainer<V, E>> vertexMap)\n        {\n            this.vertexMapUndirected = vertexMap;\n        }\n\n        @Override public void addVertex(V v)\n        {\n            // add with a lazy edge container entry\n            vertexMapUndirected.put(v, null);\n        }\n\n        @Override public Set<V> getVertexSet()\n        {\n            return vertexMapUndirected.keySet();\n        }\n\n        /**\n         * @see Graph#getAllEdges(Object, Object)\n         */\n        @Override public Set<E> getAllEdges(V sourceVertex, V targetVertex)\n        {\n            Set<E> edges = null;\n\n            if (containsVertex(sourceVertex)\n                && containsVertex(targetVertex))\n            {\n                edges = new ArrayUnenforcedSet<E>();\n\n                Iterator<E> iter =\n                    getEdgeContainer(sourceVertex).vertexEdges.iterator();\n\n                while (iter.hasNext()) {\n                    E e = iter.next();\n\n                    boolean equal =\n                        isEqualsStraightOrInverted(\n                            sourceVertex,\n                            targetVertex,\n                            e);\n\n                    if (equal) {\n                        edges.add(e);\n                    }\n                }\n            }\n\n            return edges;\n        }\n\n        /**\n         * @see Graph#getEdge(Object, Object)\n         */\n        @Override public E getEdge(V sourceVertex, V targetVertex)\n        {\n            if (containsVertex(sourceVertex)\n                && containsVertex(targetVertex))\n            {\n                Iterator<E> iter =\n                    getEdgeContainer(sourceVertex).vertexEdges.iterator();\n\n                while (iter.hasNext()) {\n                    E e = iter.next();\n\n                    boolean equal =\n                        isEqualsStraightOrInverted(\n                            sourceVertex,\n                            targetVertex,\n                            e);\n\n                    if (equal) {\n                        return e;\n                    }\n                }\n            }\n\n            return null;\n        }\n\n        private boolean isEqualsStraightOrInverted(\n            Object sourceVertex,\n            Object targetVertex,\n            E e)\n        {\n            boolean equalStraight =\n                sourceVertex.equals(getEdgeSource(e))\n                && targetVertex.equals(getEdgeTarget(e));\n\n            boolean equalInverted =\n                sourceVertex.equals(getEdgeTarget(e))\n                && targetVertex.equals(getEdgeSource(e));\n            return equalStraight || equalInverted;\n        }\n\n        @Override public void addEdgeToTouchingVertices(E e)\n        {\n            V source = getEdgeSource(e);\n            V target = getEdgeTarget(e);\n\n            getEdgeContainer(source).addEdge(e);\n\n            if (!source.equals(target)) {\n                getEdgeContainer(target).addEdge(e);\n            }\n        }\n\n        @Override public int degreeOf(V vertex)\n        {\n            if (allowingLoops) { // then we must count, and add loops twice\n\n                int degree = 0;\n                Set<E> edges = getEdgeContainer(vertex).vertexEdges;\n\n                for (E e : edges) {\n                    if (getEdgeSource(e).equals(getEdgeTarget(e))) {\n                        degree += 2;\n                    } else {\n                        degree += 1;\n                    }\n                }\n\n                return degree;\n            } else {\n                return getEdgeContainer(vertex).edgeCount();\n            }\n        }\n\n        /**\n         * @see Graph#edgesOf(Object)\n         */\n        @Override public Set<E> edgesOf(V vertex)\n        {\n            return getEdgeContainer(vertex).getUnmodifiableVertexEdges();\n        }\n\n        /**\n         * @see DirectedGraph#inDegreeOf(Object)\n         */\n        @Override public int inDegreeOf(V vertex)\n        {\n            throw new UnsupportedOperationException(NOT_IN_UNDIRECTED_GRAPH);\n        }\n\n        /**\n         * @see DirectedGraph#incomingEdgesOf(Object)\n         */\n        @Override public Set<E> incomingEdgesOf(V vertex)\n        {\n            throw new UnsupportedOperationException(NOT_IN_UNDIRECTED_GRAPH);\n        }\n\n        /**\n         * @see DirectedGraph#outDegreeOf(Object)\n         */\n        @Override public int outDegreeOf(V vertex)\n        {\n            throw new UnsupportedOperationException(NOT_IN_UNDIRECTED_GRAPH);\n        }\n\n        /**\n         * @see DirectedGraph#outgoingEdgesOf(Object)\n         */\n        @Override public Set<E> outgoingEdgesOf(V vertex)\n        {\n            throw new UnsupportedOperationException(NOT_IN_UNDIRECTED_GRAPH);\n        }\n\n        @Override public void removeEdgeFromTouchingVertices(E e)\n        {\n            V source = getEdgeSource(e);\n            V target = getEdgeTarget(e);\n\n            getEdgeContainer(source).removeEdge(e);\n\n            if (!source.equals(target)) {\n                getEdgeContainer(target).removeEdge(e);\n            }\n        }\n\n        /**\n         * A lazy build of edge container for specified vertex.\n         *\n         * @param vertex a vertex in this graph.\n         *\n         * @return EdgeContainer\n         */\n        private UndirectedEdgeContainer<V, E> getEdgeContainer(V vertex)\n        {\n            assertVertexExist(vertex);\n\n            UndirectedEdgeContainer<V, E> ec = vertexMapUndirected.get(vertex);\n\n            if (ec == null) {\n                ec = new UndirectedEdgeContainer<V, E>(\n                    edgeSetFactory,\n                    vertex);\n                vertexMapUndirected.put(vertex, ec);\n            }\n\n            return ec;\n        }\n    }\n}\n\n// End AbstractBaseGraph.java\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "PartiteRandomGraphGenerator", "org.jgrapht.experimental" ], [ "RandomGraphHelper", "org.jgrapht.experimental" ], [ "GraphReader", "org.jgrapht.experimental" ], [ "DirectedAcyclicGraph", "org.jgrapht.experimental.dag" ], [ "GraphSquare", "org.jgrapht.experimental" ], [ "UniformRandomGraphGenerator", "org.jgrapht.experimental" ], [ "GraphTests", "org.jgrapht.experimental" ], [ "ApproximationAlgorithm", "org.jgrapht.experimental.alg" ], [ "BrownBacktrackColoring", "org.jgrapht.experimental.alg.color" ], [ "GreedyColoring", "org.jgrapht.experimental.alg.color" ], [ "IntArrayGraphAlgorithm", "org.jgrapht.experimental.alg" ], [ "ExactAlgorithm", "org.jgrapht.experimental.alg" ], [ "ListenableGraph", "org.jgrapht" ], [ "ModifiableInteger", "org.jgrapht.util" ], [ "FibonacciHeapNode", "org.jgrapht.util" ], [ "WeightCombiner", "org.jgrapht.util" ], [ "FibonacciHeap", "org.jgrapht.util" ], [ "TypeUtil", "org.jgrapht.util" ], [ "ArrayUnenforcedSet", "org.jgrapht.util" ], [ "VertexPair", "org.jgrapht.util" ], [ "MathUtil", "org.jgrapht.util" ], [ "PrefetchIterator", "org.jgrapht.util" ], [ "VertexFactory", "org.jgrapht" ], [ "Graph", "org.jgrapht" ], [ "GraphPath", "org.jgrapht" ], [ "UndirectedGraphUnion", "org.jgrapht.graph" ], [ "SimpleGraph", "org.jgrapht.graph" ], [ "MixedGraphUnion", "org.jgrapht.graph" ], [ "DefaultGraphMapping", "org.jgrapht.graph" ], [ "WeightedPseudograph", "org.jgrapht.graph" ], [ "UndirectedMaskSubgraph", "org.jgrapht.graph" ], [ "MaskEdgeSet", "org.jgrapht.graph" ], [ "Pseudograph", "org.jgrapht.graph" ], [ "MaskFunctor", "org.jgrapht.graph" ], [ "GraphUnion", "org.jgrapht.graph" ], [ "DirectedMaskSubgraph", "org.jgrapht.graph" ], [ "DirectedMultigraph", "org.jgrapht.graph" ], [ "AbstractBaseGraph", "org.jgrapht.graph" ], [ "DirectedWeightedPseudograph", "org.jgrapht.graph" ], [ "Multigraph", "org.jgrapht.graph" ], [ "DefaultDirectedGraph", "org.jgrapht.graph" ], [ "DefaultWeightedEdge", "org.jgrapht.graph" ], [ "ListenableDirectedWeightedGraph", "org.jgrapht.graph" ], [ "DirectedGraphUnion", "org.jgrapht.graph" ], [ "AsUnweightedGraph", "org.jgrapht.graph" ], [ "EdgeSetFactory", "org.jgrapht.graph" ], [ "GraphDelegator", "org.jgrapht.graph" ], [ "DefaultListenableGraph", "org.jgrapht.graph" ], [ "AsUndirectedGraph", "org.jgrapht.graph" ], [ "ClassBasedVertexFactory", "org.jgrapht.graph" ], [ "DefaultEdge", "org.jgrapht.graph" ], [ "MaskVertexSet", "org.jgrapht.graph" ], [ "ListenableUndirectedGraph", "org.jgrapht.graph" ], [ "DirectedWeightedSubgraph", "org.jgrapht.graph" ], [ "ListenableUndirectedWeightedGraph", "org.jgrapht.graph" ], [ "AsUnweightedDirectedGraph", "org.jgrapht.graph" ], [ "DefaultDirectedWeightedGraph", "org.jgrapht.graph" ], [ "IntrusiveEdge", "org.jgrapht.graph" ], [ "UnmodifiableGraph", "org.jgrapht.graph" ], [ "GraphPathImpl", "org.jgrapht.graph" ], [ "Subgraph", "org.jgrapht.graph" ], [ "UndirectedWeightedSubgraph", "org.jgrapht.graph" ], [ "DirectedPseudograph", "org.jgrapht.graph" ], [ "AbstractGraph", "org.jgrapht.graph" ], [ "MaskSubgraph", "org.jgrapht.graph" ], [ "ClassBasedEdgeFactory", "org.jgrapht.graph" ], [ "SimpleWeightedGraph", "org.jgrapht.graph" ], [ "AsWeightedDirectedGraph", "org.jgrapht.graph" ], [ "SimpleDirectedWeightedGraph", "org.jgrapht.graph" ], [ "UnmodifiableUndirectedGraph", "org.jgrapht.graph" ], [ "UndirectedSubgraph", "org.jgrapht.graph" ], [ "WeightedMultigraph", "org.jgrapht.graph" ], [ "EdgeReversedGraph", "org.jgrapht.graph" ], [ "AsWeightedGraph", "org.jgrapht.graph" ], [ "DirectedGraphBuilder", "org.jgrapht.graph.builder" ], [ "UndirectedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "UndirectedGraphBuilder", "org.jgrapht.graph.builder" ], [ "UndirectedWeightedGraphBuilder", "org.jgrapht.graph.builder" ], [ "UndirectedWeightedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "DirectedWeightedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "AbstractGraphBuilder", "org.jgrapht.graph.builder" ], [ "DirectedWeightedGraphBuilder", "org.jgrapht.graph.builder" ], [ "DirectedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "ListenableDirectedGraph", "org.jgrapht.graph" ], [ "UnmodifiableDirectedGraph", "org.jgrapht.graph" ], [ "SimpleGraphPath", "org.jgrapht.graph" ], [ "ParanoidGraph", "org.jgrapht.graph" ], [ "DirectedWeightedMultigraph", "org.jgrapht.graph" ], [ "DirectedSubgraph", "org.jgrapht.graph" ], [ "SimpleDirectedGraph", "org.jgrapht.graph" ], [ "GraphHelper", "org.jgrapht" ], [ "Graphs", "org.jgrapht" ], [ "DirectedGraph", "org.jgrapht" ], [ "WeightedGraph", "org.jgrapht" ], [ "HyperCubeGraphGenerator", "org.jgrapht.generate" ], [ "RingGraphGenerator", "org.jgrapht.generate" ], [ "SimpleWeightedGraphMatrixGenerator", "org.jgrapht.generate" ], [ "WeightedGraphGenerator", "org.jgrapht.generate" ], [ "WheelGraphGenerator", "org.jgrapht.generate" ], [ "GridGraphGenerator", "org.jgrapht.generate" ], [ "ScaleFreeGraphGenerator", "org.jgrapht.generate" ], [ "SimpleWeightedBipartiteGraphMatrixGenerator", "org.jgrapht.generate" ], [ "LinearGraphGenerator", "org.jgrapht.generate" ], [ "CompleteGraphGenerator", "org.jgrapht.generate" ], [ "RandomGraphGenerator", "org.jgrapht.generate" ], [ "WeightedGraphGeneratorAdapter", "org.jgrapht.generate" ], [ "EmptyGraphGenerator", "org.jgrapht.generate" ], [ "CompleteBipartiteGraphGenerator", "org.jgrapht.generate" ], [ "GraphGenerator", "org.jgrapht.generate" ], [ "StarGraphGenerator", "org.jgrapht.generate" ], [ "UndirectedGraph", "org.jgrapht" ], [ "TopologicalOrderIterator", "org.jgrapht.traverse" ], [ "CrossComponentIterator", "org.jgrapht.traverse" ], [ "AbstractGraphIterator", "org.jgrapht.traverse" ], [ "ClosestFirstIterator", "org.jgrapht.traverse" ], [ "BreadthFirstIterator", "org.jgrapht.traverse" ], [ "DepthFirstIterator", "org.jgrapht.traverse" ], [ "GraphIterator", "org.jgrapht.traverse" ], [ "EdgeFactory", "org.jgrapht" ], [ "GraphMapping", "org.jgrapht" ], [ "VertexSetListener", "org.jgrapht.event" ], [ "EdgeTraversalEvent", "org.jgrapht.event" ], [ "TraversalListener", "org.jgrapht.event" ], [ "GraphEdgeChangeEvent", "org.jgrapht.event" ], [ "VertexTraversalEvent", "org.jgrapht.event" ], [ "GraphChangeEvent", "org.jgrapht.event" ], [ "GraphListener", "org.jgrapht.event" ], [ "TraversalListenerAdapter", "org.jgrapht.event" ], [ "ConnectedComponentTraversalEvent", "org.jgrapht.event" ], [ "GraphVertexChangeEvent", "org.jgrapht.event" ], [ "TarjanLowestCommonAncestor", "org.jgrapht.alg" ], [ "PrimMinimumSpanningTree", "org.jgrapht.alg" ], [ "BlockCutpointGraph", "org.jgrapht.alg" ], [ "AllDirectedPaths", "org.jgrapht.alg" ], [ "KShortestPathsIterator", "org.jgrapht.alg" ], [ "KruskalMinimumSpanningTree", "org.jgrapht.alg" ], [ "StrongConnectivityInspector", "org.jgrapht.alg" ], [ "VF2State", "org.jgrapht.alg.isomorphism" ], [ "VF2GraphIsomorphismState", "org.jgrapht.alg.isomorphism" ], [ "VF2AbstractIsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "VF2SubgraphIsomorphismState", "org.jgrapht.alg.isomorphism" ], [ "IsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "VF2SubgraphIsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "GraphOrdering", "org.jgrapht.alg.isomorphism" ], [ "VF2GraphMappingIterator", "org.jgrapht.alg.isomorphism" ], [ "IsomorphicGraphMapping", "org.jgrapht.alg.isomorphism" ], [ "VF2GraphIsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "VF2SubgraphMappingIterator", "org.jgrapht.alg.isomorphism" ], [ "VF2MappingIterator", "org.jgrapht.alg.isomorphism" ], [ "BronKerboschCliqueFinder", "org.jgrapht.alg" ], [ "ChromaticNumber", "org.jgrapht.alg" ], [ "KosarajuStrongConnectivityInspector", "org.jgrapht.alg" ], [ "BellmanFordShortestPath", "org.jgrapht.alg" ], [ "DijkstraShortestPath", "org.jgrapht.alg" ], [ "RankingPathElement", "org.jgrapht.alg" ], [ "AStarShortestPath", "org.jgrapht.alg" ], [ "EdmondsKarpMaximumFlow", "org.jgrapht.alg" ], [ "BellmanFordPathElement", "org.jgrapht.alg" ], [ "FloydWarshallShortestPaths", "org.jgrapht.alg" ], [ "UnionFind", "org.jgrapht.alg.util" ], [ "AlwaysEqualComparator", "org.jgrapht.alg.util" ], [ "Extension", "org.jgrapht.alg.util" ], [ "VertexDegreeComparator", "org.jgrapht.alg.util" ], [ "Pair", "org.jgrapht.alg.util" ], [ "GabowStrongConnectivityInspector", "org.jgrapht.alg" ], [ "HawickJamesSimpleCycles", "org.jgrapht.alg.cycle" ], [ "DirectedSimpleCycles", "org.jgrapht.alg.cycle" ], [ "JohnsonSimpleCycles", "org.jgrapht.alg.cycle" ], [ "TiernanSimpleCycles", "org.jgrapht.alg.cycle" ], [ "UndirectedCycleBase", "org.jgrapht.alg.cycle" ], [ "PatonCycleBase", "org.jgrapht.alg.cycle" ], [ "TarjanSimpleCycles", "org.jgrapht.alg.cycle" ], [ "SzwarcfiterLauerSimpleCycles", "org.jgrapht.alg.cycle" ], [ "BiconnectivityInspector", "org.jgrapht.alg" ], [ "ConnectivityInspector", "org.jgrapht.alg" ], [ "MinSourceSinkCut", "org.jgrapht.alg" ], [ "RankingPathElementList", "org.jgrapht.alg" ], [ "EdmondsBlossomShrinking", "org.jgrapht.alg" ], [ "TransitiveClosure", "org.jgrapht.alg" ], [ "HopcroftKarpBipartiteMatching", "org.jgrapht.alg" ], [ "StoerWagnerMinimumCut", "org.jgrapht.alg" ], [ "AbstractPathElementList", "org.jgrapht.alg" ], [ "KuhnMunkresMinimalWeightBipartitePerfectMatching", "org.jgrapht.alg" ], [ "TransitiveReduction", "org.jgrapht.alg" ], [ "EulerianCircuit", "org.jgrapht.alg" ], [ "DirectedNeighborIndex", "org.jgrapht.alg" ], [ "NaiveLcaFinder", "org.jgrapht.alg" ], [ "MaximumWeightBipartiteMatching", "org.jgrapht.alg" ], [ "HamiltonianCycle", "org.jgrapht.alg" ], [ "KShortestPaths", "org.jgrapht.alg" ], [ "NeighborIndex", "org.jgrapht.alg" ], [ "VertexCovers", "org.jgrapht.alg" ], [ "CycleDetector", "org.jgrapht.alg" ], [ "AStarAdmissibleHeuristic", "org.jgrapht.alg.interfaces" ], [ "MinimumSpanningTree", "org.jgrapht.alg.interfaces" ], [ "WeightedMatchingAlgorithm", "org.jgrapht.alg.interfaces" ], [ "StrongConnectivityAlgorithm", "org.jgrapht.alg.interfaces" ], [ "MaximumFlowAlgorithm", "org.jgrapht.alg.interfaces" ], [ "MatchingAlgorithm", "org.jgrapht.alg.interfaces" ], [ "CliqueMinimalSeparatorDecomposition", "org.jgrapht.alg" ], [ "BellmanFordIterator", "org.jgrapht.alg" ], [ "AbstractPathElement", "org.jgrapht.alg" ], [ "EdmondsKarpMaximumFlow", "org.jgrapht.alg.flow" ], [ "PushRelabelMaximumFlow", "org.jgrapht.alg.flow" ], [ "MaximumFlowAlgorithmBase", "org.jgrapht.alg.flow" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "addVertices", "org.jgrapht.experimental", "RandomGraphHelper", "public static Object[] addVertices(Graph target, VertexFactory vertexFactory, int numVertices)" ], [ "isEmpty", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isEmpty(Graph<V, E> g)" ], [ "isComplete", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isComplete(Graph<V, E> g)" ], [ "isConnected", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isConnected(Graph<V, E> g)" ], [ "isTree", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isTree(Graph<V, E> g)" ], [ "isBipartite", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isBipartite(Graph<V, E> g)" ], [ "union", "org.jgrapht.util", "FibonacciHeap", "public static <T> FibonacciHeap<T> union(FibonacciHeap<T> h1, FibonacciHeap<T> h2)" ], [ "uncheckedCast", "org.jgrapht.util", "TypeUtil", "public static <T> T uncheckedCast(Object o, TypeUtil<T> typeDecl)" ], [ "factorial", "org.jgrapht.util", "MathUtil", "public static long factorial(int N)" ], [ "builder", "org.jgrapht.graph", "SimpleGraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends SimpleGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleGraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends SimpleGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "WeightedPseudograph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "WeightedPseudograph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "Pseudograph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Pseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "Pseudograph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Pseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedMultigraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedMultigraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedPseudograph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedPseudograph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "Multigraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Multigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "Multigraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Multigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DefaultDirectedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DefaultDirectedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DefaultDirectedWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DefaultDirectedWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedPseudograph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedPseudograph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "SimpleWeightedGraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends SimpleWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleWeightedGraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends SimpleWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends SimpleDirectedWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends SimpleDirectedWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "WeightedMultigraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "WeightedMultigraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedMultigraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedMultigraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends SimpleDirectedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends SimpleDirectedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "addEdge", "org.jgrapht", "Graphs", "public static <V, E> E addEdge(Graph<V, E> g, V sourceVertex, V targetVertex, double weight)" ], [ "addEdgeWithVertices", "org.jgrapht", "Graphs", "public static <V, E> E addEdgeWithVertices(Graph<V, E> g, V sourceVertex, V targetVertex)" ], [ "addEdgeWithVertices", "org.jgrapht", "Graphs", "public static <V, E> boolean addEdgeWithVertices(Graph<V, E> targetGraph, Graph<V, E> sourceGraph, E edge)" ], [ "addEdgeWithVertices", "org.jgrapht", "Graphs", "public static <V, E> E addEdgeWithVertices(Graph<V, E> g, V sourceVertex, V targetVertex, double weight)" ], [ "addGraph", "org.jgrapht", "Graphs", "public static <V, E> boolean addGraph(Graph<? super V, ? super E> destination, Graph<V, E> source)" ], [ "addAllEdges", "org.jgrapht", "Graphs", "public static <V, E> boolean addAllEdges(Graph<? super V, ? super E> destination, Graph<V, E> source, Collection<? extends E> edges)" ], [ "addAllVertices", "org.jgrapht", "Graphs", "public static <V, E> boolean addAllVertices(Graph<? super V, ? super E> destination, Collection<? extends V> vertices)" ], [ "neighborListOf", "org.jgrapht", "Graphs", "public static <V, E> List<V> neighborListOf(Graph<V, E> g, V vertex)" ], [ "predecessorListOf", "org.jgrapht", "Graphs", "public static <V, E> List<V> predecessorListOf(DirectedGraph<V, E> g, V vertex)" ], [ "successorListOf", "org.jgrapht", "Graphs", "public static <V, E> List<V> successorListOf(DirectedGraph<V, E> g, V vertex)" ], [ "undirectedGraph", "org.jgrapht", "Graphs", "public static <V, E> UndirectedGraph<V, E> undirectedGraph(Graph<V, E> g)" ], [ "testIncidence", "org.jgrapht", "Graphs", "public static <V, E> boolean testIncidence(Graph<V, E> g, E e, V v)" ], [ "getOppositeVertex", "org.jgrapht", "Graphs", "public static <V, E> V getOppositeVertex(Graph<V, E> g, E e, V v)" ], [ "getPathVertexList", "org.jgrapht", "Graphs", "public static <V, E> List<V> getPathVertexList(GraphPath<V, E> path)" ], [ "range", "org.jgrapht.generate", "SimpleWeightedGraphMatrixGenerator", "public static int[] range(final int from, final int to)" ], [ "createGraphSpecifics", "org.jgrapht.traverse", "CrossComponentIterator", "static <V, E> Specifics<V, E> createGraphSpecifics(Graph<V, E> g)" ], [ "findGreedyChromaticNumber", "org.jgrapht.alg", "ChromaticNumber", "public static <V, E> int findGreedyChromaticNumber(UndirectedGraph<V, E> g)" ], [ "findGreedyColoredGroups", "org.jgrapht.alg", "ChromaticNumber", "public static <V, E> Map<Integer, Set<V>> findGreedyColoredGroups(UndirectedGraph<V, E> g)" ], [ "findPathBetween", "org.jgrapht.alg", "BellmanFordShortestPath", "public static <V, E> List<E> findPathBetween(Graph<V, E> graph, V startVertex, V endVertex)" ], [ "findPathBetween", "org.jgrapht.alg", "DijkstraShortestPath", "public static <V, E> List<E> findPathBetween(Graph<V, E> graph, V startVertex, V endVertex)" ], [ "of", "org.jgrapht.alg.util", "Pair", "public static <A, B> Pair<A, B> of(A a, B b)" ], [ "isEulerian", "org.jgrapht.alg", "EulerianCircuit", "public static <V, E> boolean isEulerian(UndirectedGraph<V, E> g)" ], [ "getEulerianCircuitVertices", "org.jgrapht.alg", "EulerianCircuit", "public static <V, E> List<V> getEulerianCircuitVertices(UndirectedGraph<V, E> g)" ], [ "getApproximateOptimalForCompleteGraph", "org.jgrapht.alg", "HamiltonianCycle", "public static <V, E> List<V> getApproximateOptimalForCompleteGraph(SimpleWeightedGraph<V, E> g)" ], [ "find2ApproximationCover", "org.jgrapht.alg", "VertexCovers", "public static <V, E> Set<V> find2ApproximationCover(Graph<V, E> g)" ], [ "findGreedyCover", "org.jgrapht.alg", "VertexCovers", "public static <V, E> Set<V> findGreedyCover(UndirectedGraph<V, E> g)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "BEST_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int BEST_ORDER = 0;" ], [ "NATURAL_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int NATURAL_ORDER = 1;" ], [ "SMALLEST_DEGREE_LAST_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int SMALLEST_DEGREE_LAST_ORDER = 2;" ], [ "LARGEST_SATURATION_FIRST_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int LARGEST_SATURATION_FIRST_ORDER = 3;" ], [ "DEFAULT_EDGE_WEIGHT", "org.jgrapht", "WeightedGraph", "public static double DEFAULT_EDGE_WEIGHT = 1.0;" ], [ "HUB_VERTEX", "org.jgrapht.generate", "WheelGraphGenerator", "public static final String HUB_VERTEX = \"Hub Vertex\";" ], [ "CORNER_VERTEX", "org.jgrapht.generate", "GridGraphGenerator", "public static final String CORNER_VERTEX = \"Corner Vertex\";" ], [ "START_VERTEX", "org.jgrapht.generate", "LinearGraphGenerator", "public static final String START_VERTEX = \"Start Vertex\";" ], [ "END_VERTEX", "org.jgrapht.generate", "LinearGraphGenerator", "public static final String END_VERTEX = \"End Vertex\";" ], [ "CENTER_VERTEX", "org.jgrapht.generate", "StarGraphGenerator", "public static final String CENTER_VERTEX = \"Center Vertex\";" ], [ "SENTINEL", "org.jgrapht.traverse", "DepthFirstIterator", "public static final Object SENTINEL = new Object();" ], [ "BEFORE_EDGE_ADDED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int BEFORE_EDGE_ADDED = 21;" ], [ "BEFORE_EDGE_REMOVED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int BEFORE_EDGE_REMOVED = 22;" ], [ "EDGE_ADDED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int EDGE_ADDED = 23;" ], [ "EDGE_REMOVED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int EDGE_REMOVED = 24;" ], [ "CONNECTED_COMPONENT_STARTED", "org.jgrapht.event", "ConnectedComponentTraversalEvent", "public static final int CONNECTED_COMPONENT_STARTED = 31;" ], [ "CONNECTED_COMPONENT_FINISHED", "org.jgrapht.event", "ConnectedComponentTraversalEvent", "public static final int CONNECTED_COMPONENT_FINISHED = 32;" ], [ "BEFORE_VERTEX_ADDED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int BEFORE_VERTEX_ADDED = 11;" ], [ "BEFORE_VERTEX_REMOVED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int BEFORE_VERTEX_REMOVED = 12;" ], [ "VERTEX_ADDED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int VERTEX_ADDED = 13;" ], [ "VERTEX_REMOVED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int VERTEX_REMOVED = 14;" ], [ "NULL_NODE", "org.jgrapht.alg.isomorphism", "VF2State", "public static final int NULL_NODE = -1;" ], [ "DEBUG", "org.jgrapht.alg.isomorphism", "VF2State", "protected static final boolean DEBUG = false;" ], [ "DEFAULT_EPSILON", "org.jgrapht.alg", "EdmondsKarpMaximumFlow", "public static final double DEFAULT_EPSILON = 0.000000001;" ], [ "INSTANCE", "org.jgrapht.alg", "TransitiveClosure", "public static final TransitiveClosure INSTANCE = new TransitiveClosure();" ], [ "INSTANCE", "org.jgrapht.alg", "TransitiveReduction", "public static final TransitiveReduction INSTANCE = new TransitiveReduction();" ], [ "NEGATIVE_UNDIRECTED_EDGE", "org.jgrapht.alg", "BellmanFordIterator", "protected final static String NEGATIVE_UNDIRECTED_EDGE = \"Negative\" + \"edge-weights are not allowed in an unidrected graph!\";" ], [ "DEFAULT_EPSILON", "org.jgrapht.alg.flow", "MaximumFlowAlgorithmBase", "public static final double DEFAULT_EPSILON = 1e-9;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "edgesOf", "org.jgrapht.graph", "AbstractBaseGraph", "public Set<E> edgesOf(V vertex)" ], [ "containsEdge", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean containsEdge(E e)" ], [ "equals", "org.jgrapht.graph", "AbstractGraph", "public boolean equals(Object arg0)" ], [ "inDegreeOf", "org.jgrapht.graph", "AbstractBaseGraph", "public int inDegreeOf(V vertex)" ], [ "removeAllEdges", "org.jgrapht.graph", "AbstractGraph", "public Set<E> removeAllEdges(V arg0, V arg1)" ], [ "incomingEdgesOf", "org.jgrapht.graph", "AbstractBaseGraph", "public Set<E> incomingEdgesOf(V vertex)" ], [ "vertexSet", "org.jgrapht.graph", "AbstractBaseGraph", "public Set<V> vertexSet()" ], [ "outDegreeOf", "org.jgrapht.graph", "AbstractBaseGraph", "public int outDegreeOf(V vertex)" ], [ "removeAllEdges", "org.jgrapht.graph", "AbstractGraph", "protected boolean removeAllEdges(E[] arg0)" ], [ "getEdge", "org.jgrapht.graph", "AbstractBaseGraph", "public E getEdge(V sourceVertex, V targetVertex)" ], [ "createUndirectedSpecifics", "org.jgrapht.graph", "AbstractBaseGraph", "protected UndirectedSpecifics createUndirectedSpecifics()" ], [ "hashCode", "org.jgrapht.graph", "AbstractGraph", "public int hashCode()" ], [ "removeAllVertices", "org.jgrapht.graph", "AbstractGraph", "public boolean removeAllVertices(Collection<? extends V> arg0)" ], [ "getEdgeSource", "org.jgrapht.graph", "AbstractBaseGraph", "public V getEdgeSource(E e)" ], [ "isAllowingLoops", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean isAllowingLoops()" ], [ "isAllowingMultipleEdges", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean isAllowingMultipleEdges()" ], [ "getEdgeWeight", "org.jgrapht.graph", "AbstractBaseGraph", "public double getEdgeWeight(E e)" ], [ "toStringFromSets", "org.jgrapht.graph", "AbstractGraph", "protected String toStringFromSets(Collection<? extends V> arg0, Collection<? extends E> arg1, boolean arg2)" ], [ "addEdge", "org.jgrapht.graph", "AbstractBaseGraph", "public E addEdge(V sourceVertex, V targetVertex)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "createDirectedSpecifics", "org.jgrapht.graph", "AbstractBaseGraph", "protected DirectedSpecifics createDirectedSpecifics()" ], [ "assertVertexExist", "org.jgrapht.graph", "AbstractGraph", "protected boolean assertVertexExist(V arg0)" ], [ "addVertex", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean addVertex(V v)" ], [ "getEdgeTarget", "org.jgrapht.graph", "AbstractBaseGraph", "public V getEdgeTarget(E e)" ], [ "getAllEdges", "org.jgrapht.graph", "AbstractBaseGraph", "public Set<E> getAllEdges(V sourceVertex, V targetVertex)" ], [ "clone", "org.jgrapht.graph", "AbstractBaseGraph", "public Object clone()" ], [ "removeAllEdges", "org.jgrapht.graph", "AbstractGraph", "public boolean removeAllEdges(Collection<? extends E> arg0)" ], [ "removeEdge", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean removeEdge(E e)" ], [ "containsEdge", "org.jgrapht.graph", "AbstractGraph", "public boolean containsEdge(V arg0, V arg1)" ], [ "removeVertex", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean removeVertex(V v)" ], [ "removeEdge", "org.jgrapht.graph", "AbstractBaseGraph", "public E removeEdge(V sourceVertex, V targetVertex)" ], [ "getEdgeFactory", "org.jgrapht.graph", "AbstractBaseGraph", "public EdgeFactory<V, E> getEdgeFactory()" ], [ "outgoingEdgesOf", "org.jgrapht.graph", "AbstractBaseGraph", "public Set<E> outgoingEdgesOf(V vertex)" ], [ "degreeOf", "org.jgrapht.graph", "AbstractBaseGraph", "public int degreeOf(V vertex)" ], [ "edgeSet", "org.jgrapht.graph", "AbstractBaseGraph", "public Set<E> edgeSet()" ], [ "toString", "org.jgrapht.graph", "AbstractGraph", "public String toString()" ], [ "addEdge", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean addEdge(V sourceVertex, V targetVertex, E e)" ], [ "containsVertex", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean containsVertex(V v)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "allowingLoops", "org.jgrapht.graph", "AbstractBaseGraph", "boolean allowingLoops;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 25965,
  "oracle" : "g instanceof ListenableGraph<?, ?>;",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "jgrapht-core-0.9.2",
  "packageName" : "org.jgrapht.graph",
  "className" : "DefaultListenableGraph",
  "javadocTag" : "@throws IllegalArgumentException if the backing graph is already a\nlistenable graph.",
  "methodJavadoc" : "    /**\n     * Creates a new listenable graph. If the <code>reuseEvents</code> flag is\n     * set to <code>true</code> this class will reuse previously fired events\n     * and will not create a new object for each event. This option increases\n     * performance but should be used with care, especially in multithreaded\n     * environment.\n     *\n     * @param g the backing graph.\n     * @param reuseEvents whether to reuse previously fired event objects\n     * instead of creating a new event object for each event.\n     *\n     * @throws IllegalArgumentException if the backing graph is already a\n     * listenable graph.\n     */",
  "methodSourceCode" : "public DefaultListenableGraph(Graph<V, E> g, boolean reuseEvents){\n    super(g);\n    this.reuseEvents = reuseEvents;\n    reuseableEdgeEvent = new FlyweightEdgeEvent<V, E>(this, -1, null);\n    reuseableVertexEvent = new FlyweightVertexEvent<V>(this, -1, null);\n    // the following restriction could be probably relaxed in the future.\n    if (g instanceof ListenableGraph<?, ?>) {\n        throw new IllegalArgumentException(\"base graph cannot be listenable\");\n    }\n}",
  "classJavadoc" : "/**\n * A graph backed by the the graph specified at the constructor, which can be\n * listened by <code>GraphListener</code> s and by <code>\n * VertexSetListener</code> s. Operations on this graph \"pass through\" to the to\n * the backing graph. Any modification made to this graph or the backing graph\n * is reflected by the other.\n *\n * <p>This graph does <i>not</i> pass the hashCode and equals operations through\n * to the backing graph, but relies on <tt>Object</tt>'s <tt>equals</tt> and\n * <tt>hashCode</tt> methods.</p>\n *\n * @author Barak Naveh\n * @see GraphListener\n * @see VertexSetListener\n * @since Jul 20, 2003\n */",
  "classSourceCode" : "/* ==========================================\n * JGraphT : a free Java graph-theory library\n * ==========================================\n *\n * Project Info:  http://jgrapht.sourceforge.net/\n * Project Creator:  Barak Naveh (http://sourceforge.net/users/barak_naveh)\n *\n * (C) Copyright 2003-2008, by Barak Naveh and Contributors.\n *\n * This program and the accompanying materials are dual-licensed under\n * either\n *\n * (a) the terms of the GNU Lesser General Public License version 2.1\n * as published by the Free Software Foundation, or (at your option) any\n * later version.\n *\n * or (per the licensee's choosing)\n *\n * (b) the terms of the Eclipse Public License v1.0 as published by\n * the Eclipse Foundation.\n */\n/* ---------------------------\n * DefaultListenableGraph.java\n * ---------------------------\n * (C) Copyright 2003-2008, by Barak Naveh and Contributors.\n *\n * Original Author:  Barak Naveh\n * Contributor(s):   Christian Hammer\n *\n * $Id$\n *\n * Changes\n * -------\n * 24-Jul-2003 : Initial revision (BN);\n * 04-Aug-2003 : Strong refs to listeners instead of weak refs (BN);\n * 10-Aug-2003 : Adaptation to new event model (BN);\n * 07-Mar-2004 : Fixed unnecessary clone bug #819075 (BN);\n * 11-Mar-2004 : Made generic (CH);\n * 07-May-2006 : Changed from List<Edge> to Set<Edge> (JVS);\n * 28-May-2006 : Moved connectivity info from edge to graph (JVS);\n *\n */\npackage org.jgrapht.graph;\n\nimport java.util.*;\n\nimport org.jgrapht.*;\nimport org.jgrapht.event.*;\nimport org.jgrapht.util.*;\n\n\n/**\n * A graph backed by the the graph specified at the constructor, which can be\n * listened by <code>GraphListener</code> s and by <code>\n * VertexSetListener</code> s. Operations on this graph \"pass through\" to the to\n * the backing graph. Any modification made to this graph or the backing graph\n * is reflected by the other.\n *\n * <p>This graph does <i>not</i> pass the hashCode and equals operations through\n * to the backing graph, but relies on <tt>Object</tt>'s <tt>equals</tt> and\n * <tt>hashCode</tt> methods.</p>\n *\n * @author Barak Naveh\n * @see GraphListener\n * @see VertexSetListener\n * @since Jul 20, 2003\n */\npublic class DefaultListenableGraph<V, E>\n    extends GraphDelegator<V, E>\n    implements ListenableGraph<V, E>,\n        Cloneable\n{\n    private static final long serialVersionUID = 3977575900898471984L;\n\n    private List<GraphListener<V, E>> graphListeners =\n        new ArrayList<GraphListener<V, E>>();\n    private List<VertexSetListener<V>> vertexSetListeners =\n        new ArrayList<VertexSetListener<V>>();\n    private FlyweightEdgeEvent<V, E> reuseableEdgeEvent;\n    private FlyweightVertexEvent<V> reuseableVertexEvent;\n    private boolean reuseEvents;\n\n    /**\n     * Creates a new listenable graph.\n     *\n     * @param g the backing graph.\n     */\n    public DefaultListenableGraph(Graph<V, E> g)\n    {\n        this(g, false);\n    }\n\n    /**\n     * Creates a new listenable graph. If the <code>reuseEvents</code> flag is\n     * set to <code>true</code> this class will reuse previously fired events\n     * and will not create a new object for each event. This option increases\n     * performance but should be used with care, especially in multithreaded\n     * environment.\n     *\n     * @param g the backing graph.\n     * @param reuseEvents whether to reuse previously fired event objects\n     * instead of creating a new event object for each event.\n     *\n     * @throws IllegalArgumentException if the backing graph is already a\n     * listenable graph.\n     */\n    public DefaultListenableGraph(Graph<V, E> g, boolean reuseEvents)\n    {\n        super(g);\n        this.reuseEvents = reuseEvents;\n        reuseableEdgeEvent = new FlyweightEdgeEvent<V, E>(this, -1, null);\n        reuseableVertexEvent = new FlyweightVertexEvent<V>(this, -1, null);\n\n        // the following restriction could be probably relaxed in the future.\n        if (g instanceof ListenableGraph<?, ?>) {\n            throw new IllegalArgumentException(\n                \"base graph cannot be listenable\");\n        }\n    }\n\n    /**\n     * If the <code>reuseEvents</code> flag is set to <code>true</code> this\n     * class will reuse previously fired events and will not create a new object\n     * for each event. This option increases performance but should be used with\n     * care, especially in multithreaded environment.\n     *\n     * @param reuseEvents whether to reuse previously fired event objects\n     * instead of creating a new event object for each event.\n     */\n    public void setReuseEvents(boolean reuseEvents)\n    {\n        this.reuseEvents = reuseEvents;\n    }\n\n    /**\n     * Tests whether the <code>reuseEvents</code> flag is set. If the flag is\n     * set to <code>true</code> this class will reuse previously fired events\n     * and will not create a new object for each event. This option increases\n     * performance but should be used with care, especially in multithreaded\n     * environment.\n     *\n     * @return the value of the <code>reuseEvents</code> flag.\n     */\n    public boolean isReuseEvents()\n    {\n        return reuseEvents;\n    }\n\n    /**\n     * @see Graph#addEdge(Object, Object)\n     */\n    @Override public E addEdge(V sourceVertex, V targetVertex)\n    {\n        E e = super.addEdge(sourceVertex, targetVertex);\n\n        if (e != null) {\n            fireEdgeAdded(e, sourceVertex, targetVertex);\n        }\n\n        return e;\n    }\n\n    /**\n     * @see Graph#addEdge(Object, Object, Object)\n     */\n    @Override public boolean addEdge(V sourceVertex, V targetVertex, E e)\n    {\n        boolean added = super.addEdge(sourceVertex, targetVertex, e);\n\n        if (added) {\n            fireEdgeAdded(e, sourceVertex, targetVertex);\n        }\n\n        return added;\n    }\n\n    /**\n     * @see ListenableGraph#addGraphListener(GraphListener)\n     */\n    @Override public void addGraphListener(GraphListener<V, E> l)\n    {\n        addToListenerList(graphListeners, l);\n    }\n\n    /**\n     * @see Graph#addVertex(Object)\n     */\n    @Override public boolean addVertex(V v)\n    {\n        boolean modified = super.addVertex(v);\n\n        if (modified) {\n            fireVertexAdded(v);\n        }\n\n        return modified;\n    }\n\n    /**\n     * @see ListenableGraph#addVertexSetListener(VertexSetListener)\n     */\n    @Override public void addVertexSetListener(VertexSetListener<V> l)\n    {\n        addToListenerList(vertexSetListeners, l);\n    }\n\n    /**\n     * @see java.lang.Object#clone()\n     */\n    @Override public Object clone()\n    {\n        try {\n            TypeUtil<DefaultListenableGraph<V, E>> typeDecl = null;\n\n            DefaultListenableGraph<V, E> g =\n                TypeUtil.uncheckedCast(super.clone(), typeDecl);\n            g.graphListeners = new ArrayList<GraphListener<V, E>>();\n            g.vertexSetListeners = new ArrayList<VertexSetListener<V>>();\n\n            return g;\n        } catch (CloneNotSupportedException e) {\n            // should never get here since we're Cloneable\n            e.printStackTrace();\n            throw new RuntimeException(\"internal error\");\n        }\n    }\n\n    /**\n     * @see Graph#removeEdge(Object, Object)\n     */\n    @Override public E removeEdge(V sourceVertex, V targetVertex)\n    {\n        E e = super.removeEdge(sourceVertex, targetVertex);\n\n        if (e != null) {\n            fireEdgeRemoved(e, sourceVertex, targetVertex);\n        }\n\n        return e;\n    }\n\n    /**\n     * @see Graph#removeEdge(Object)\n     */\n    @Override public boolean removeEdge(E e)\n    {\n        V sourceVertex = getEdgeSource(e);\n        V targetVertex = getEdgeTarget(e);\n\n        boolean modified = super.removeEdge(e);\n\n        if (modified) {\n            fireEdgeRemoved(e, sourceVertex, targetVertex);\n        }\n\n        return modified;\n    }\n\n    /**\n     * @see ListenableGraph#removeGraphListener(GraphListener)\n     */\n    @Override public void removeGraphListener(GraphListener<V, E> l)\n    {\n        graphListeners.remove(l);\n    }\n\n    /**\n     * @see Graph#removeVertex(Object)\n     */\n    @Override public boolean removeVertex(V v)\n    {\n        if (containsVertex(v)) {\n            Set<E> touchingEdgesList = edgesOf(v);\n\n            // copy set to avoid ConcurrentModificationException\n            removeAllEdges(new ArrayList<E>(touchingEdgesList));\n\n            super.removeVertex(v); // remove the vertex itself\n\n            fireVertexRemoved(v);\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @see ListenableGraph#removeVertexSetListener(VertexSetListener)\n     */\n    @Override public void removeVertexSetListener(VertexSetListener<V> l)\n    {\n        vertexSetListeners.remove(l);\n    }\n\n    /**\n     * Notify listeners that the specified edge was added.\n     *\n     * @param edge the edge that was added.\n     * @param source edge source\n     * @param target edge target\n     */\n    protected void fireEdgeAdded(E edge, V source, V target)\n    {\n        GraphEdgeChangeEvent<V, E> e =\n            createGraphEdgeChangeEvent(\n                GraphEdgeChangeEvent.EDGE_ADDED,\n                edge,\n                source,\n                target);\n\n        for (GraphListener<V, E> l : graphListeners) {\n            l.edgeAdded(e);\n        }\n    }\n\n    /**\n     * Notify listeners that the specified edge was removed.\n     *\n     * @param edge the edge that was removed.\n     * @param source edge source\n     * @param target edge target\n     */\n    protected void fireEdgeRemoved(E edge, V source, V target)\n    {\n        GraphEdgeChangeEvent<V, E> e =\n            createGraphEdgeChangeEvent(\n                GraphEdgeChangeEvent.EDGE_REMOVED,\n                edge,\n                source,\n                target);\n\n        for (GraphListener<V, E> l : graphListeners) {\n            l.edgeRemoved(e);\n        }\n    }\n\n    /**\n     * Notify listeners that the specified vertex was added.\n     *\n     * @param vertex the vertex that was added.\n     */\n    protected void fireVertexAdded(V vertex)\n    {\n        GraphVertexChangeEvent<V> e =\n            createGraphVertexChangeEvent(\n                GraphVertexChangeEvent.VERTEX_ADDED,\n                vertex);\n\n        for (VertexSetListener<V> l : vertexSetListeners) {\n            l.vertexAdded(e);\n        }\n\n        for (GraphListener<V, E> l : graphListeners) {\n            l.vertexAdded(e);\n        }\n    }\n\n    /**\n     * Notify listeners that the specified vertex was removed.\n     *\n     * @param vertex the vertex that was removed.\n     */\n    protected void fireVertexRemoved(V vertex)\n    {\n        GraphVertexChangeEvent<V> e =\n            createGraphVertexChangeEvent(\n                GraphVertexChangeEvent.VERTEX_REMOVED,\n                vertex);\n\n        for (VertexSetListener<V> l : vertexSetListeners) {\n            l.vertexRemoved(e);\n        }\n\n        for (GraphListener<V, E> l : graphListeners) {\n            l.vertexRemoved(e);\n        }\n    }\n\n    private static <L extends EventListener> void addToListenerList(\n        List<L> list,\n        L l)\n    {\n        if (!list.contains(l)) {\n            list.add(l);\n        }\n    }\n\n    private GraphEdgeChangeEvent<V, E> createGraphEdgeChangeEvent(\n        int eventType,\n        E edge,\n        V source,\n        V target)\n    {\n        if (reuseEvents) {\n            reuseableEdgeEvent.setType(eventType);\n            reuseableEdgeEvent.setEdge(edge);\n            reuseableEdgeEvent.setEdgeSource(source);\n            reuseableEdgeEvent.setEdgeTarget(target);\n\n            return reuseableEdgeEvent;\n        } else {\n            return new GraphEdgeChangeEvent<V, E>(\n                this,\n                eventType,\n                edge,\n                source,\n                target);\n        }\n    }\n\n    private GraphVertexChangeEvent<V> createGraphVertexChangeEvent(\n        int eventType,\n        V vertex)\n    {\n        if (reuseEvents) {\n            reuseableVertexEvent.setType(eventType);\n            reuseableVertexEvent.setVertex(vertex);\n\n            return reuseableVertexEvent;\n        } else {\n            return new GraphVertexChangeEvent<V>(this, eventType, vertex);\n        }\n    }\n\n    /**\n     * A reuseable edge event.\n     *\n     * @author Barak Naveh\n     * @since Aug 10, 2003\n     */\n    private static class FlyweightEdgeEvent<VV, EE>\n        extends GraphEdgeChangeEvent<VV, EE>\n    {\n        private static final long serialVersionUID = 3907207152526636089L;\n\n        /**\n         * @see GraphEdgeChangeEvent#GraphEdgeChangeEvent(Object, int, Edge)\n         */\n        public FlyweightEdgeEvent(Object eventSource, int type, EE e)\n        {\n            super(eventSource, type, e);\n        }\n\n        /**\n         * Sets the edge of this event.\n         *\n         * @param e the edge to be set.\n         */\n        protected void setEdge(EE e)\n        {\n            this.edge = e;\n        }\n\n        protected void setEdgeSource(VV v)\n        {\n            this.edgeSource = v;\n        }\n\n        protected void setEdgeTarget(VV v)\n        {\n            this.edgeTarget = v;\n        }\n\n        /**\n         * Set the event type of this event.\n         *\n         * @param type the type to be set.\n         */\n        protected void setType(int type)\n        {\n            this.type = type;\n        }\n    }\n\n    /**\n     * A reuseable vertex event.\n     *\n     * @author Barak Naveh\n     * @since Aug 10, 2003\n     */\n    private static class FlyweightVertexEvent<VV>\n        extends GraphVertexChangeEvent<VV>\n    {\n        private static final long serialVersionUID = 3257848787857585716L;\n\n        /**\n         * @see GraphVertexChangeEvent#GraphVertexChangeEvent(Object, int,\n         * Object)\n         */\n        public FlyweightVertexEvent(Object eventSource, int type, VV vertex)\n        {\n            super(eventSource, type, vertex);\n        }\n\n        /**\n         * Set the event type of this event.\n         *\n         * @param type type to be set.\n         */\n        protected void setType(int type)\n        {\n            this.type = type;\n        }\n\n        /**\n         * Sets the vertex of this event.\n         *\n         * @param vertex the vertex to be set.\n         */\n        protected void setVertex(VV vertex)\n        {\n            this.vertex = vertex;\n        }\n    }\n}\n\n// End DefaultListenableGraph.java\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "PartiteRandomGraphGenerator", "org.jgrapht.experimental" ], [ "RandomGraphHelper", "org.jgrapht.experimental" ], [ "GraphReader", "org.jgrapht.experimental" ], [ "DirectedAcyclicGraph", "org.jgrapht.experimental.dag" ], [ "GraphSquare", "org.jgrapht.experimental" ], [ "UniformRandomGraphGenerator", "org.jgrapht.experimental" ], [ "GraphTests", "org.jgrapht.experimental" ], [ "ApproximationAlgorithm", "org.jgrapht.experimental.alg" ], [ "BrownBacktrackColoring", "org.jgrapht.experimental.alg.color" ], [ "GreedyColoring", "org.jgrapht.experimental.alg.color" ], [ "IntArrayGraphAlgorithm", "org.jgrapht.experimental.alg" ], [ "ExactAlgorithm", "org.jgrapht.experimental.alg" ], [ "ListenableGraph", "org.jgrapht" ], [ "ModifiableInteger", "org.jgrapht.util" ], [ "FibonacciHeapNode", "org.jgrapht.util" ], [ "WeightCombiner", "org.jgrapht.util" ], [ "FibonacciHeap", "org.jgrapht.util" ], [ "TypeUtil", "org.jgrapht.util" ], [ "ArrayUnenforcedSet", "org.jgrapht.util" ], [ "VertexPair", "org.jgrapht.util" ], [ "MathUtil", "org.jgrapht.util" ], [ "PrefetchIterator", "org.jgrapht.util" ], [ "VertexFactory", "org.jgrapht" ], [ "Graph", "org.jgrapht" ], [ "GraphPath", "org.jgrapht" ], [ "UndirectedGraphUnion", "org.jgrapht.graph" ], [ "SimpleGraph", "org.jgrapht.graph" ], [ "MixedGraphUnion", "org.jgrapht.graph" ], [ "DefaultGraphMapping", "org.jgrapht.graph" ], [ "WeightedPseudograph", "org.jgrapht.graph" ], [ "UndirectedMaskSubgraph", "org.jgrapht.graph" ], [ "MaskEdgeSet", "org.jgrapht.graph" ], [ "Pseudograph", "org.jgrapht.graph" ], [ "MaskFunctor", "org.jgrapht.graph" ], [ "GraphUnion", "org.jgrapht.graph" ], [ "DirectedMaskSubgraph", "org.jgrapht.graph" ], [ "DirectedMultigraph", "org.jgrapht.graph" ], [ "AbstractBaseGraph", "org.jgrapht.graph" ], [ "DirectedWeightedPseudograph", "org.jgrapht.graph" ], [ "Multigraph", "org.jgrapht.graph" ], [ "DefaultDirectedGraph", "org.jgrapht.graph" ], [ "DefaultWeightedEdge", "org.jgrapht.graph" ], [ "ListenableDirectedWeightedGraph", "org.jgrapht.graph" ], [ "DirectedGraphUnion", "org.jgrapht.graph" ], [ "AsUnweightedGraph", "org.jgrapht.graph" ], [ "EdgeSetFactory", "org.jgrapht.graph" ], [ "GraphDelegator", "org.jgrapht.graph" ], [ "DefaultListenableGraph", "org.jgrapht.graph" ], [ "AsUndirectedGraph", "org.jgrapht.graph" ], [ "ClassBasedVertexFactory", "org.jgrapht.graph" ], [ "DefaultEdge", "org.jgrapht.graph" ], [ "MaskVertexSet", "org.jgrapht.graph" ], [ "ListenableUndirectedGraph", "org.jgrapht.graph" ], [ "DirectedWeightedSubgraph", "org.jgrapht.graph" ], [ "ListenableUndirectedWeightedGraph", "org.jgrapht.graph" ], [ "AsUnweightedDirectedGraph", "org.jgrapht.graph" ], [ "DefaultDirectedWeightedGraph", "org.jgrapht.graph" ], [ "IntrusiveEdge", "org.jgrapht.graph" ], [ "UnmodifiableGraph", "org.jgrapht.graph" ], [ "GraphPathImpl", "org.jgrapht.graph" ], [ "Subgraph", "org.jgrapht.graph" ], [ "UndirectedWeightedSubgraph", "org.jgrapht.graph" ], [ "DirectedPseudograph", "org.jgrapht.graph" ], [ "AbstractGraph", "org.jgrapht.graph" ], [ "MaskSubgraph", "org.jgrapht.graph" ], [ "ClassBasedEdgeFactory", "org.jgrapht.graph" ], [ "SimpleWeightedGraph", "org.jgrapht.graph" ], [ "AsWeightedDirectedGraph", "org.jgrapht.graph" ], [ "SimpleDirectedWeightedGraph", "org.jgrapht.graph" ], [ "UnmodifiableUndirectedGraph", "org.jgrapht.graph" ], [ "UndirectedSubgraph", "org.jgrapht.graph" ], [ "WeightedMultigraph", "org.jgrapht.graph" ], [ "EdgeReversedGraph", "org.jgrapht.graph" ], [ "AsWeightedGraph", "org.jgrapht.graph" ], [ "DirectedGraphBuilder", "org.jgrapht.graph.builder" ], [ "UndirectedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "UndirectedGraphBuilder", "org.jgrapht.graph.builder" ], [ "UndirectedWeightedGraphBuilder", "org.jgrapht.graph.builder" ], [ "UndirectedWeightedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "DirectedWeightedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "AbstractGraphBuilder", "org.jgrapht.graph.builder" ], [ "DirectedWeightedGraphBuilder", "org.jgrapht.graph.builder" ], [ "DirectedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "ListenableDirectedGraph", "org.jgrapht.graph" ], [ "UnmodifiableDirectedGraph", "org.jgrapht.graph" ], [ "SimpleGraphPath", "org.jgrapht.graph" ], [ "ParanoidGraph", "org.jgrapht.graph" ], [ "DirectedWeightedMultigraph", "org.jgrapht.graph" ], [ "DirectedSubgraph", "org.jgrapht.graph" ], [ "SimpleDirectedGraph", "org.jgrapht.graph" ], [ "GraphHelper", "org.jgrapht" ], [ "Graphs", "org.jgrapht" ], [ "DirectedGraph", "org.jgrapht" ], [ "WeightedGraph", "org.jgrapht" ], [ "HyperCubeGraphGenerator", "org.jgrapht.generate" ], [ "RingGraphGenerator", "org.jgrapht.generate" ], [ "SimpleWeightedGraphMatrixGenerator", "org.jgrapht.generate" ], [ "WeightedGraphGenerator", "org.jgrapht.generate" ], [ "WheelGraphGenerator", "org.jgrapht.generate" ], [ "GridGraphGenerator", "org.jgrapht.generate" ], [ "ScaleFreeGraphGenerator", "org.jgrapht.generate" ], [ "SimpleWeightedBipartiteGraphMatrixGenerator", "org.jgrapht.generate" ], [ "LinearGraphGenerator", "org.jgrapht.generate" ], [ "CompleteGraphGenerator", "org.jgrapht.generate" ], [ "RandomGraphGenerator", "org.jgrapht.generate" ], [ "WeightedGraphGeneratorAdapter", "org.jgrapht.generate" ], [ "EmptyGraphGenerator", "org.jgrapht.generate" ], [ "CompleteBipartiteGraphGenerator", "org.jgrapht.generate" ], [ "GraphGenerator", "org.jgrapht.generate" ], [ "StarGraphGenerator", "org.jgrapht.generate" ], [ "UndirectedGraph", "org.jgrapht" ], [ "TopologicalOrderIterator", "org.jgrapht.traverse" ], [ "CrossComponentIterator", "org.jgrapht.traverse" ], [ "AbstractGraphIterator", "org.jgrapht.traverse" ], [ "ClosestFirstIterator", "org.jgrapht.traverse" ], [ "BreadthFirstIterator", "org.jgrapht.traverse" ], [ "DepthFirstIterator", "org.jgrapht.traverse" ], [ "GraphIterator", "org.jgrapht.traverse" ], [ "EdgeFactory", "org.jgrapht" ], [ "GraphMapping", "org.jgrapht" ], [ "VertexSetListener", "org.jgrapht.event" ], [ "EdgeTraversalEvent", "org.jgrapht.event" ], [ "TraversalListener", "org.jgrapht.event" ], [ "GraphEdgeChangeEvent", "org.jgrapht.event" ], [ "VertexTraversalEvent", "org.jgrapht.event" ], [ "GraphChangeEvent", "org.jgrapht.event" ], [ "GraphListener", "org.jgrapht.event" ], [ "TraversalListenerAdapter", "org.jgrapht.event" ], [ "ConnectedComponentTraversalEvent", "org.jgrapht.event" ], [ "GraphVertexChangeEvent", "org.jgrapht.event" ], [ "TarjanLowestCommonAncestor", "org.jgrapht.alg" ], [ "PrimMinimumSpanningTree", "org.jgrapht.alg" ], [ "BlockCutpointGraph", "org.jgrapht.alg" ], [ "AllDirectedPaths", "org.jgrapht.alg" ], [ "KShortestPathsIterator", "org.jgrapht.alg" ], [ "KruskalMinimumSpanningTree", "org.jgrapht.alg" ], [ "StrongConnectivityInspector", "org.jgrapht.alg" ], [ "VF2State", "org.jgrapht.alg.isomorphism" ], [ "VF2GraphIsomorphismState", "org.jgrapht.alg.isomorphism" ], [ "VF2AbstractIsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "VF2SubgraphIsomorphismState", "org.jgrapht.alg.isomorphism" ], [ "IsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "VF2SubgraphIsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "GraphOrdering", "org.jgrapht.alg.isomorphism" ], [ "VF2GraphMappingIterator", "org.jgrapht.alg.isomorphism" ], [ "IsomorphicGraphMapping", "org.jgrapht.alg.isomorphism" ], [ "VF2GraphIsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "VF2SubgraphMappingIterator", "org.jgrapht.alg.isomorphism" ], [ "VF2MappingIterator", "org.jgrapht.alg.isomorphism" ], [ "BronKerboschCliqueFinder", "org.jgrapht.alg" ], [ "ChromaticNumber", "org.jgrapht.alg" ], [ "KosarajuStrongConnectivityInspector", "org.jgrapht.alg" ], [ "BellmanFordShortestPath", "org.jgrapht.alg" ], [ "DijkstraShortestPath", "org.jgrapht.alg" ], [ "RankingPathElement", "org.jgrapht.alg" ], [ "AStarShortestPath", "org.jgrapht.alg" ], [ "EdmondsKarpMaximumFlow", "org.jgrapht.alg" ], [ "BellmanFordPathElement", "org.jgrapht.alg" ], [ "FloydWarshallShortestPaths", "org.jgrapht.alg" ], [ "UnionFind", "org.jgrapht.alg.util" ], [ "AlwaysEqualComparator", "org.jgrapht.alg.util" ], [ "Extension", "org.jgrapht.alg.util" ], [ "VertexDegreeComparator", "org.jgrapht.alg.util" ], [ "Pair", "org.jgrapht.alg.util" ], [ "GabowStrongConnectivityInspector", "org.jgrapht.alg" ], [ "HawickJamesSimpleCycles", "org.jgrapht.alg.cycle" ], [ "DirectedSimpleCycles", "org.jgrapht.alg.cycle" ], [ "JohnsonSimpleCycles", "org.jgrapht.alg.cycle" ], [ "TiernanSimpleCycles", "org.jgrapht.alg.cycle" ], [ "UndirectedCycleBase", "org.jgrapht.alg.cycle" ], [ "PatonCycleBase", "org.jgrapht.alg.cycle" ], [ "TarjanSimpleCycles", "org.jgrapht.alg.cycle" ], [ "SzwarcfiterLauerSimpleCycles", "org.jgrapht.alg.cycle" ], [ "BiconnectivityInspector", "org.jgrapht.alg" ], [ "ConnectivityInspector", "org.jgrapht.alg" ], [ "MinSourceSinkCut", "org.jgrapht.alg" ], [ "RankingPathElementList", "org.jgrapht.alg" ], [ "EdmondsBlossomShrinking", "org.jgrapht.alg" ], [ "TransitiveClosure", "org.jgrapht.alg" ], [ "HopcroftKarpBipartiteMatching", "org.jgrapht.alg" ], [ "StoerWagnerMinimumCut", "org.jgrapht.alg" ], [ "AbstractPathElementList", "org.jgrapht.alg" ], [ "KuhnMunkresMinimalWeightBipartitePerfectMatching", "org.jgrapht.alg" ], [ "TransitiveReduction", "org.jgrapht.alg" ], [ "EulerianCircuit", "org.jgrapht.alg" ], [ "DirectedNeighborIndex", "org.jgrapht.alg" ], [ "NaiveLcaFinder", "org.jgrapht.alg" ], [ "MaximumWeightBipartiteMatching", "org.jgrapht.alg" ], [ "HamiltonianCycle", "org.jgrapht.alg" ], [ "KShortestPaths", "org.jgrapht.alg" ], [ "NeighborIndex", "org.jgrapht.alg" ], [ "VertexCovers", "org.jgrapht.alg" ], [ "CycleDetector", "org.jgrapht.alg" ], [ "AStarAdmissibleHeuristic", "org.jgrapht.alg.interfaces" ], [ "MinimumSpanningTree", "org.jgrapht.alg.interfaces" ], [ "WeightedMatchingAlgorithm", "org.jgrapht.alg.interfaces" ], [ "StrongConnectivityAlgorithm", "org.jgrapht.alg.interfaces" ], [ "MaximumFlowAlgorithm", "org.jgrapht.alg.interfaces" ], [ "MatchingAlgorithm", "org.jgrapht.alg.interfaces" ], [ "CliqueMinimalSeparatorDecomposition", "org.jgrapht.alg" ], [ "BellmanFordIterator", "org.jgrapht.alg" ], [ "AbstractPathElement", "org.jgrapht.alg" ], [ "EdmondsKarpMaximumFlow", "org.jgrapht.alg.flow" ], [ "PushRelabelMaximumFlow", "org.jgrapht.alg.flow" ], [ "MaximumFlowAlgorithmBase", "org.jgrapht.alg.flow" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "addVertices", "org.jgrapht.experimental", "RandomGraphHelper", "public static Object[] addVertices(Graph target, VertexFactory vertexFactory, int numVertices)" ], [ "isEmpty", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isEmpty(Graph<V, E> g)" ], [ "isComplete", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isComplete(Graph<V, E> g)" ], [ "isConnected", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isConnected(Graph<V, E> g)" ], [ "isTree", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isTree(Graph<V, E> g)" ], [ "isBipartite", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isBipartite(Graph<V, E> g)" ], [ "union", "org.jgrapht.util", "FibonacciHeap", "public static <T> FibonacciHeap<T> union(FibonacciHeap<T> h1, FibonacciHeap<T> h2)" ], [ "uncheckedCast", "org.jgrapht.util", "TypeUtil", "public static <T> T uncheckedCast(Object o, TypeUtil<T> typeDecl)" ], [ "factorial", "org.jgrapht.util", "MathUtil", "public static long factorial(int N)" ], [ "builder", "org.jgrapht.graph", "SimpleGraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends SimpleGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleGraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends SimpleGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "WeightedPseudograph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "WeightedPseudograph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "Pseudograph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Pseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "Pseudograph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Pseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedMultigraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedMultigraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedPseudograph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedPseudograph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "Multigraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Multigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "Multigraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Multigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DefaultDirectedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DefaultDirectedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DefaultDirectedWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DefaultDirectedWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedPseudograph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedPseudograph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "SimpleWeightedGraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends SimpleWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleWeightedGraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends SimpleWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends SimpleDirectedWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends SimpleDirectedWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "WeightedMultigraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "WeightedMultigraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedMultigraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedMultigraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends SimpleDirectedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends SimpleDirectedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "addEdge", "org.jgrapht", "Graphs", "public static <V, E> E addEdge(Graph<V, E> g, V sourceVertex, V targetVertex, double weight)" ], [ "addEdgeWithVertices", "org.jgrapht", "Graphs", "public static <V, E> E addEdgeWithVertices(Graph<V, E> g, V sourceVertex, V targetVertex)" ], [ "addEdgeWithVertices", "org.jgrapht", "Graphs", "public static <V, E> boolean addEdgeWithVertices(Graph<V, E> targetGraph, Graph<V, E> sourceGraph, E edge)" ], [ "addEdgeWithVertices", "org.jgrapht", "Graphs", "public static <V, E> E addEdgeWithVertices(Graph<V, E> g, V sourceVertex, V targetVertex, double weight)" ], [ "addGraph", "org.jgrapht", "Graphs", "public static <V, E> boolean addGraph(Graph<? super V, ? super E> destination, Graph<V, E> source)" ], [ "addAllEdges", "org.jgrapht", "Graphs", "public static <V, E> boolean addAllEdges(Graph<? super V, ? super E> destination, Graph<V, E> source, Collection<? extends E> edges)" ], [ "addAllVertices", "org.jgrapht", "Graphs", "public static <V, E> boolean addAllVertices(Graph<? super V, ? super E> destination, Collection<? extends V> vertices)" ], [ "neighborListOf", "org.jgrapht", "Graphs", "public static <V, E> List<V> neighborListOf(Graph<V, E> g, V vertex)" ], [ "predecessorListOf", "org.jgrapht", "Graphs", "public static <V, E> List<V> predecessorListOf(DirectedGraph<V, E> g, V vertex)" ], [ "successorListOf", "org.jgrapht", "Graphs", "public static <V, E> List<V> successorListOf(DirectedGraph<V, E> g, V vertex)" ], [ "undirectedGraph", "org.jgrapht", "Graphs", "public static <V, E> UndirectedGraph<V, E> undirectedGraph(Graph<V, E> g)" ], [ "testIncidence", "org.jgrapht", "Graphs", "public static <V, E> boolean testIncidence(Graph<V, E> g, E e, V v)" ], [ "getOppositeVertex", "org.jgrapht", "Graphs", "public static <V, E> V getOppositeVertex(Graph<V, E> g, E e, V v)" ], [ "getPathVertexList", "org.jgrapht", "Graphs", "public static <V, E> List<V> getPathVertexList(GraphPath<V, E> path)" ], [ "range", "org.jgrapht.generate", "SimpleWeightedGraphMatrixGenerator", "public static int[] range(final int from, final int to)" ], [ "createGraphSpecifics", "org.jgrapht.traverse", "CrossComponentIterator", "static <V, E> Specifics<V, E> createGraphSpecifics(Graph<V, E> g)" ], [ "findGreedyChromaticNumber", "org.jgrapht.alg", "ChromaticNumber", "public static <V, E> int findGreedyChromaticNumber(UndirectedGraph<V, E> g)" ], [ "findGreedyColoredGroups", "org.jgrapht.alg", "ChromaticNumber", "public static <V, E> Map<Integer, Set<V>> findGreedyColoredGroups(UndirectedGraph<V, E> g)" ], [ "findPathBetween", "org.jgrapht.alg", "BellmanFordShortestPath", "public static <V, E> List<E> findPathBetween(Graph<V, E> graph, V startVertex, V endVertex)" ], [ "findPathBetween", "org.jgrapht.alg", "DijkstraShortestPath", "public static <V, E> List<E> findPathBetween(Graph<V, E> graph, V startVertex, V endVertex)" ], [ "of", "org.jgrapht.alg.util", "Pair", "public static <A, B> Pair<A, B> of(A a, B b)" ], [ "isEulerian", "org.jgrapht.alg", "EulerianCircuit", "public static <V, E> boolean isEulerian(UndirectedGraph<V, E> g)" ], [ "getEulerianCircuitVertices", "org.jgrapht.alg", "EulerianCircuit", "public static <V, E> List<V> getEulerianCircuitVertices(UndirectedGraph<V, E> g)" ], [ "getApproximateOptimalForCompleteGraph", "org.jgrapht.alg", "HamiltonianCycle", "public static <V, E> List<V> getApproximateOptimalForCompleteGraph(SimpleWeightedGraph<V, E> g)" ], [ "find2ApproximationCover", "org.jgrapht.alg", "VertexCovers", "public static <V, E> Set<V> find2ApproximationCover(Graph<V, E> g)" ], [ "findGreedyCover", "org.jgrapht.alg", "VertexCovers", "public static <V, E> Set<V> findGreedyCover(UndirectedGraph<V, E> g)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "BEST_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int BEST_ORDER = 0;" ], [ "NATURAL_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int NATURAL_ORDER = 1;" ], [ "SMALLEST_DEGREE_LAST_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int SMALLEST_DEGREE_LAST_ORDER = 2;" ], [ "LARGEST_SATURATION_FIRST_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int LARGEST_SATURATION_FIRST_ORDER = 3;" ], [ "DEFAULT_EDGE_WEIGHT", "org.jgrapht", "WeightedGraph", "public static double DEFAULT_EDGE_WEIGHT = 1.0;" ], [ "HUB_VERTEX", "org.jgrapht.generate", "WheelGraphGenerator", "public static final String HUB_VERTEX = \"Hub Vertex\";" ], [ "CORNER_VERTEX", "org.jgrapht.generate", "GridGraphGenerator", "public static final String CORNER_VERTEX = \"Corner Vertex\";" ], [ "START_VERTEX", "org.jgrapht.generate", "LinearGraphGenerator", "public static final String START_VERTEX = \"Start Vertex\";" ], [ "END_VERTEX", "org.jgrapht.generate", "LinearGraphGenerator", "public static final String END_VERTEX = \"End Vertex\";" ], [ "CENTER_VERTEX", "org.jgrapht.generate", "StarGraphGenerator", "public static final String CENTER_VERTEX = \"Center Vertex\";" ], [ "SENTINEL", "org.jgrapht.traverse", "DepthFirstIterator", "public static final Object SENTINEL = new Object();" ], [ "BEFORE_EDGE_ADDED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int BEFORE_EDGE_ADDED = 21;" ], [ "BEFORE_EDGE_REMOVED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int BEFORE_EDGE_REMOVED = 22;" ], [ "EDGE_ADDED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int EDGE_ADDED = 23;" ], [ "EDGE_REMOVED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int EDGE_REMOVED = 24;" ], [ "CONNECTED_COMPONENT_STARTED", "org.jgrapht.event", "ConnectedComponentTraversalEvent", "public static final int CONNECTED_COMPONENT_STARTED = 31;" ], [ "CONNECTED_COMPONENT_FINISHED", "org.jgrapht.event", "ConnectedComponentTraversalEvent", "public static final int CONNECTED_COMPONENT_FINISHED = 32;" ], [ "BEFORE_VERTEX_ADDED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int BEFORE_VERTEX_ADDED = 11;" ], [ "BEFORE_VERTEX_REMOVED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int BEFORE_VERTEX_REMOVED = 12;" ], [ "VERTEX_ADDED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int VERTEX_ADDED = 13;" ], [ "VERTEX_REMOVED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int VERTEX_REMOVED = 14;" ], [ "NULL_NODE", "org.jgrapht.alg.isomorphism", "VF2State", "public static final int NULL_NODE = -1;" ], [ "DEBUG", "org.jgrapht.alg.isomorphism", "VF2State", "protected static final boolean DEBUG = false;" ], [ "DEFAULT_EPSILON", "org.jgrapht.alg", "EdmondsKarpMaximumFlow", "public static final double DEFAULT_EPSILON = 0.000000001;" ], [ "INSTANCE", "org.jgrapht.alg", "TransitiveClosure", "public static final TransitiveClosure INSTANCE = new TransitiveClosure();" ], [ "INSTANCE", "org.jgrapht.alg", "TransitiveReduction", "public static final TransitiveReduction INSTANCE = new TransitiveReduction();" ], [ "NEGATIVE_UNDIRECTED_EDGE", "org.jgrapht.alg", "BellmanFordIterator", "protected final static String NEGATIVE_UNDIRECTED_EDGE = \"Negative\" + \"edge-weights are not allowed in an unidrected graph!\";" ], [ "DEFAULT_EPSILON", "org.jgrapht.alg.flow", "MaximumFlowAlgorithmBase", "public static final double DEFAULT_EPSILON = 1e-9;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "g", "org.jgrapht.Graph", "Graph<V, E>" ], [ "reuseEvents", "", "boolean" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getAllEdges", "org.jgrapht.graph", "GraphDelegator", "public Set<E> getAllEdges(V arg0, V arg1)" ], [ "getEdgeTarget", "org.jgrapht.graph", "GraphDelegator", "public V getEdgeTarget(E arg0)" ], [ "containsEdge", "org.jgrapht.graph", "GraphDelegator", "public boolean containsEdge(E arg0)" ], [ "containsVertex", "org.jgrapht.graph", "GraphDelegator", "public boolean containsVertex(V arg0)" ], [ "removeAllEdges", "org.jgrapht.graph", "AbstractGraph", "protected boolean removeAllEdges(E[] arg0)" ], [ "removeEdge", "org.jgrapht.graph", "DefaultListenableGraph", "public boolean removeEdge(E e)" ], [ "vertexSet", "org.jgrapht.graph", "GraphDelegator", "public Set<V> vertexSet()" ], [ "removeAllVertices", "org.jgrapht.graph", "AbstractGraph", "public boolean removeAllVertices(Collection<? extends V> arg0)" ], [ "removeVertex", "org.jgrapht.graph", "DefaultListenableGraph", "public boolean removeVertex(V v)" ], [ "addVertex", "org.jgrapht.graph", "DefaultListenableGraph", "public boolean addVertex(V v)" ], [ "assertVertexExist", "org.jgrapht.graph", "AbstractGraph", "protected boolean assertVertexExist(V arg0)" ], [ "removeAllEdges", "org.jgrapht.graph", "AbstractGraph", "public Set<E> removeAllEdges(V arg0, V arg1)" ], [ "getEdgeSource", "org.jgrapht.graph", "GraphDelegator", "public V getEdgeSource(E arg0)" ], [ "getEdgeFactory", "org.jgrapht.graph", "GraphDelegator", "public EdgeFactory<V, E> getEdgeFactory()" ], [ "edgeSet", "org.jgrapht.graph", "GraphDelegator", "public Set<E> edgeSet()" ], [ "toString", "org.jgrapht.graph", "GraphDelegator", "public String toString()" ], [ "clone", "org.jgrapht.graph", "DefaultListenableGraph", "public Object clone()" ], [ "removeAllEdges", "org.jgrapht.graph", "AbstractGraph", "public boolean removeAllEdges(Collection<? extends E> arg0)" ], [ "equals", "org.jgrapht.graph", "AbstractGraph", "public boolean equals(Object arg0)" ], [ "containsEdge", "org.jgrapht.graph", "AbstractGraph", "public boolean containsEdge(V arg0, V arg1)" ], [ "getEdge", "org.jgrapht.graph", "GraphDelegator", "public E getEdge(V arg0, V arg1)" ], [ "toStringFromSets", "org.jgrapht.graph", "AbstractGraph", "protected String toStringFromSets(Collection<? extends V> arg0, Collection<? extends E> arg1, boolean arg2)" ], [ "incomingEdgesOf", "org.jgrapht.graph", "GraphDelegator", "public Set<E> incomingEdgesOf(V arg0)" ], [ "degreeOf", "org.jgrapht.graph", "GraphDelegator", "public int degreeOf(V arg0)" ], [ "getEdgeWeight", "org.jgrapht.graph", "GraphDelegator", "public double getEdgeWeight(E arg0)" ], [ "removeEdge", "org.jgrapht.graph", "DefaultListenableGraph", "public E removeEdge(V sourceVertex, V targetVertex)" ], [ "addEdge", "org.jgrapht.graph", "DefaultListenableGraph", "public E addEdge(V sourceVertex, V targetVertex)" ], [ "isReuseEvents", "org.jgrapht.graph", "DefaultListenableGraph", "public boolean isReuseEvents()" ], [ "outgoingEdgesOf", "org.jgrapht.graph", "GraphDelegator", "public Set<E> outgoingEdgesOf(V arg0)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "inDegreeOf", "org.jgrapht.graph", "GraphDelegator", "public int inDegreeOf(V arg0)" ], [ "addEdge", "org.jgrapht.graph", "DefaultListenableGraph", "public boolean addEdge(V sourceVertex, V targetVertex, E e)" ], [ "outDegreeOf", "org.jgrapht.graph", "GraphDelegator", "public int outDegreeOf(V arg0)" ], [ "edgesOf", "org.jgrapht.graph", "GraphDelegator", "public Set<E> edgesOf(V arg0)" ], [ "hashCode", "org.jgrapht.graph", "AbstractGraph", "public int hashCode()" ], [ "getEdge", "org.jgrapht", "Graph", "public abstract E getEdge(V arg0, V arg1)" ], [ "removeEdge", "org.jgrapht", "Graph", "public abstract E removeEdge(V arg0, V arg1)" ], [ "removeAllEdges", "org.jgrapht", "Graph", "public abstract boolean removeAllEdges(Collection<? extends E> arg0)" ], [ "removeAllEdges", "org.jgrapht", "Graph", "public abstract Set<E> removeAllEdges(V arg0, V arg1)" ], [ "edgesOf", "org.jgrapht", "Graph", "public abstract Set<E> edgesOf(V arg0)" ], [ "containsEdge", "org.jgrapht", "Graph", "public abstract boolean containsEdge(V arg0, V arg1)" ], [ "getEdgeTarget", "org.jgrapht", "Graph", "public abstract V getEdgeTarget(E arg0)" ], [ "containsEdge", "org.jgrapht", "Graph", "public abstract boolean containsEdge(E arg0)" ], [ "getEdgeWeight", "org.jgrapht", "Graph", "public abstract double getEdgeWeight(E arg0)" ], [ "containsVertex", "org.jgrapht", "Graph", "public abstract boolean containsVertex(V arg0)" ], [ "addVertex", "org.jgrapht", "Graph", "public abstract boolean addVertex(V arg0)" ], [ "getEdgeSource", "org.jgrapht", "Graph", "public abstract V getEdgeSource(E arg0)" ], [ "addEdge", "org.jgrapht", "Graph", "public abstract E addEdge(V arg0, V arg1)" ], [ "addEdge", "org.jgrapht", "Graph", "public abstract boolean addEdge(V arg0, V arg1, E arg2)" ], [ "removeEdge", "org.jgrapht", "Graph", "public abstract boolean removeEdge(E arg0)" ], [ "getAllEdges", "org.jgrapht", "Graph", "public abstract Set<E> getAllEdges(V arg0, V arg1)" ], [ "getEdgeFactory", "org.jgrapht", "Graph", "public abstract EdgeFactory<V, E> getEdgeFactory()" ], [ "removeAllVertices", "org.jgrapht", "Graph", "public abstract boolean removeAllVertices(Collection<? extends V> arg0)" ], [ "vertexSet", "org.jgrapht", "Graph", "public abstract Set<V> vertexSet()" ], [ "edgeSet", "org.jgrapht", "Graph", "public abstract Set<E> edgeSet()" ], [ "removeVertex", "org.jgrapht", "Graph", "public abstract boolean removeVertex(V arg0)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 25982,
  "oracle" : "v == null;",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "jgrapht-core-0.9.2",
  "packageName" : "org.jgrapht.graph",
  "className" : "Subgraph",
  "javadocTag" : "@throws NullPointerException",
  "methodJavadoc" : "    /**\n     * Adds the specified vertex to this subgraph.\n     *\n     * @param v the vertex to be added.\n     *\n     * @return <code>true</code> if the vertex was added, otherwise <code>\n     * false</code>.\n     *\n     * @throws NullPointerException\n     * @throws IllegalArgumentException\n     *\n     * @see Subgraph\n     * @see Graph#addVertex(Object)\n     */",
  "methodSourceCode" : "public boolean addVertex(V v){\n    if (v == null) {\n        throw new NullPointerException();\n    }\n    if (!base.containsVertex(v)) {\n        throw new IllegalArgumentException(NO_SUCH_VERTEX_IN_BASE);\n    }\n    if (containsVertex(v)) {\n        return false;\n    } else {\n        vertexSet.add(v);\n        return true;\n    }\n}",
  "classJavadoc" : "/**\n * A subgraph is a graph that has a subset of vertices and a subset of edges\n * with respect to some base graph. More formally, a subgraph G(V,E) that is\n * based on a base graph Gb(Vb,Eb) satisfies the following <b><i>subgraph\n * property</i></b>: V is a subset of Vb and E is a subset of Eb. Other than\n * this property, a subgraph is a graph with any respect and fully complies with\n * the <code>Graph</code> interface.\n *\n * <p>If the base graph is a {@link org.jgrapht.ListenableGraph}, the subgraph\n * listens on the base graph and guarantees the subgraph property. If an edge or\n * a vertex is removed from the base graph, it is automatically removed from the\n * subgraph. Subgraph listeners are informed on such removal only if it results\n * in a cascaded removal from the subgraph. If the subgraph has been created as\n * an induced subgraph it also keeps track of edges being added to its vertices.\n * If vertices are added to the base graph, the subgraph remains unaffected.</p>\n *\n * <p>If the base graph is <i>not</i> a ListenableGraph, then the subgraph\n * property cannot be guaranteed. If edges or vertices are removed from the base\n * graph, they are <i>not</i> removed from the subgraph.</p>\n *\n * <p>Modifications to Subgraph are allowed as long as the subgraph property is\n * maintained. Addition of vertices or edges are allowed as long as they also\n * exist in the base graph. Removal of vertices or edges is always allowed. The\n * base graph is <i>never</i> affected by any modification made to the\n * subgraph.</p>\n *\n * <p>A subgraph may provide a \"live-window\" on a base graph, so that changes\n * made to its vertices or edges are immediately reflected in the base graph,\n * and vice versa. For that to happen, vertices and edges added to the subgraph\n * must be <i>identical</i> (that is, reference-equal and not only value-equal)\n * to their respective ones in the base graph. Previous versions of this class\n * enforced such identity, at a severe performance cost. Currently it is no\n * longer enforced. If you want to achieve a \"live-window\"functionality, your\n * safest tactics would be to NOT override the <code>equals()</code> methods of\n * your vertices and edges. If you use a class that has already overridden the\n * <code>equals()</code> method, such as <code>String</code>, than you can use a\n * wrapper around it, or else use it directly but exercise a great care to avoid\n * having different-but-equal instances in the subgraph and the base graph.</p>\n *\n * <p>This graph implementation guarantees deterministic vertex and edge set\n * ordering (via {@link LinkedHashSet}).</p>\n *\n * @author Barak Naveh\n * @see Graph\n * @see Set\n * @since Jul 18, 2003\n */",
  "classSourceCode" : "/* ==========================================\n * JGraphT : a free Java graph-theory library\n * ==========================================\n *\n * Project Info:  http://jgrapht.sourceforge.net/\n * Project Creator:  Barak Naveh (http://sourceforge.net/users/barak_naveh)\n *\n * (C) Copyright 2003-2008, by Barak Naveh and Contributors.\n *\n * This program and the accompanying materials are dual-licensed under\n * either\n *\n * (a) the terms of the GNU Lesser General Public License version 2.1\n * as published by the Free Software Foundation, or (at your option) any\n * later version.\n *\n * or (per the licensee's choosing)\n *\n * (b) the terms of the Eclipse Public License v1.0 as published by\n * the Eclipse Foundation.\n */\n/* -------------\n * Subgraph.java\n * -------------\n * (C) Copyright 2003-2008, by Barak Naveh and Contributors.\n *\n * Original Author:  Barak Naveh\n * Contributor(s):   Christian Hammer\n *\n * $Id$\n *\n * Changes\n * -------\n * 24-Jul-2003 : Initial revision (BN);\n * 26-Jul-2003 : Accurate constructors to avoid casting problems (BN);\n * 10-Aug-2003 : Adaptation to new event model (BN);\n * 23-Oct-2003 : Allowed non-listenable graph as base (BN);\n * 07-Feb-2004 : Enabled serialization (BN);\n * 11-Mar-2004 : Made generic (CH);\n * 15-Mar-2004 : Integrity is now checked using Maps (CH);\n * 20-Mar-2004 : Cancelled verification of element identity to base graph (BN);\n * 21-Sep-2004 : Added induced subgraph (who?)\n * 07-May-2006 : Changed from List<Edge> to Set<Edge> (JVS);\n * 28-May-2006 : Moved connectivity info from edge to graph (JVS);\n *\n */\npackage org.jgrapht.graph;\n\nimport java.io.*;\n\nimport java.util.*;\n\nimport org.jgrapht.*;\nimport org.jgrapht.event.*;\nimport org.jgrapht.util.*;\n\n\n/**\n * A subgraph is a graph that has a subset of vertices and a subset of edges\n * with respect to some base graph. More formally, a subgraph G(V,E) that is\n * based on a base graph Gb(Vb,Eb) satisfies the following <b><i>subgraph\n * property</i></b>: V is a subset of Vb and E is a subset of Eb. Other than\n * this property, a subgraph is a graph with any respect and fully complies with\n * the <code>Graph</code> interface.\n *\n * <p>If the base graph is a {@link org.jgrapht.ListenableGraph}, the subgraph\n * listens on the base graph and guarantees the subgraph property. If an edge or\n * a vertex is removed from the base graph, it is automatically removed from the\n * subgraph. Subgraph listeners are informed on such removal only if it results\n * in a cascaded removal from the subgraph. If the subgraph has been created as\n * an induced subgraph it also keeps track of edges being added to its vertices.\n * If vertices are added to the base graph, the subgraph remains unaffected.</p>\n *\n * <p>If the base graph is <i>not</i> a ListenableGraph, then the subgraph\n * property cannot be guaranteed. If edges or vertices are removed from the base\n * graph, they are <i>not</i> removed from the subgraph.</p>\n *\n * <p>Modifications to Subgraph are allowed as long as the subgraph property is\n * maintained. Addition of vertices or edges are allowed as long as they also\n * exist in the base graph. Removal of vertices or edges is always allowed. The\n * base graph is <i>never</i> affected by any modification made to the\n * subgraph.</p>\n *\n * <p>A subgraph may provide a \"live-window\" on a base graph, so that changes\n * made to its vertices or edges are immediately reflected in the base graph,\n * and vice versa. For that to happen, vertices and edges added to the subgraph\n * must be <i>identical</i> (that is, reference-equal and not only value-equal)\n * to their respective ones in the base graph. Previous versions of this class\n * enforced such identity, at a severe performance cost. Currently it is no\n * longer enforced. If you want to achieve a \"live-window\"functionality, your\n * safest tactics would be to NOT override the <code>equals()</code> methods of\n * your vertices and edges. If you use a class that has already overridden the\n * <code>equals()</code> method, such as <code>String</code>, than you can use a\n * wrapper around it, or else use it directly but exercise a great care to avoid\n * having different-but-equal instances in the subgraph and the base graph.</p>\n *\n * <p>This graph implementation guarantees deterministic vertex and edge set\n * ordering (via {@link LinkedHashSet}).</p>\n *\n * @author Barak Naveh\n * @see Graph\n * @see Set\n * @since Jul 18, 2003\n */\npublic class Subgraph<V, E, G extends Graph<V, E>>\n    extends AbstractGraph<V, E>\n    implements Serializable\n{\n    private static final long serialVersionUID = 3208313055169665387L;\n    private static final String NO_SUCH_EDGE_IN_BASE =\n        \"no such edge in base graph\";\n    private static final String NO_SUCH_VERTEX_IN_BASE =\n        \"no such vertex in base graph\";\n\n    //\n    Set<E> edgeSet = new LinkedHashSet<E>(); // friendly to improve performance\n    Set<V> vertexSet = new LinkedHashSet<V>(); // friendly to improve\n\n    // performance\n\n    //\n    private transient Set<E> unmodifiableEdgeSet = null;\n    private transient Set<V> unmodifiableVertexSet = null;\n    private G base;\n    private boolean isInduced = false;\n\n    /**\n     * Creates a new Subgraph.\n     *\n     * @param base the base (backing) graph on which the subgraph will be based.\n     * @param vertexSubset vertices to include in the subgraph. If <code>\n     * null</code> then all vertices are included.\n     * @param edgeSubset edges to in include in the subgraph. If <code>\n     * null</code> then all the edges whose vertices found in the graph are\n     * included.\n     */\n    public Subgraph(G base, Set<V> vertexSubset, Set<E> edgeSubset)\n    {\n        super();\n\n        this.base = base;\n\n        if (edgeSubset == null) {\n            isInduced = true;\n        }\n\n        if (base instanceof ListenableGraph<?, ?>) {\n            ((ListenableGraph<V, E>) base).addGraphListener(\n                new BaseGraphListener());\n        }\n\n        addVerticesUsingFilter(base.vertexSet(), vertexSubset);\n        addEdgesUsingFilter(base.edgeSet(), edgeSubset);\n    }\n\n    /**\n     * Creates a new induced Subgraph. The subgraph will keep track of edges\n     * being added to its vertex subset as well as deletion of edges and\n     * vertices. If base it not listenable, this is identical to the call\n     * Subgraph(base, vertexSubset, null) .\n     *\n     * @param base the base (backing) graph on which the subgraph will be based.\n     * @param vertexSubset vertices to include in the subgraph. If <code>\n     * null</code> then all vertices are included.\n     */\n    public Subgraph(G base, Set<V> vertexSubset)\n    {\n        this(base, vertexSubset, null);\n    }\n\n    /**\n     * @see Graph#getAllEdges(Object, Object)\n     */\n    @Override public Set<E> getAllEdges(V sourceVertex, V targetVertex)\n    {\n        Set<E> edges = null;\n\n        if (containsVertex(sourceVertex) && containsVertex(targetVertex)) {\n            edges = new ArrayUnenforcedSet<E>();\n\n            Set<E> baseEdges = base.getAllEdges(sourceVertex, targetVertex);\n\n            for (Iterator<E> iter = baseEdges.iterator(); iter.hasNext();) {\n                E e = iter.next();\n\n                if (edgeSet.contains(e)) { // add if subgraph also contains\n                                           // it\n                    edges.add(e);\n                }\n            }\n        }\n\n        return edges;\n    }\n\n    /**\n     * @see Graph#getEdge(Object, Object)\n     */\n    @Override public E getEdge(V sourceVertex, V targetVertex)\n    {\n        Set<E> edges = getAllEdges(sourceVertex, targetVertex);\n\n        if ((edges == null) || edges.isEmpty()) {\n            return null;\n        } else {\n            return edges.iterator().next();\n        }\n    }\n\n    /**\n     * @see Graph#getEdgeFactory()\n     */\n    @Override public EdgeFactory<V, E> getEdgeFactory()\n    {\n        return base.getEdgeFactory();\n    }\n\n    /**\n     * @see Graph#addEdge(Object, Object)\n     */\n    @Override public E addEdge(V sourceVertex, V targetVertex)\n    {\n        assertVertexExist(sourceVertex);\n        assertVertexExist(targetVertex);\n\n        if (!base.containsEdge(sourceVertex, targetVertex)) {\n            throw new IllegalArgumentException(NO_SUCH_EDGE_IN_BASE);\n        }\n\n        Set<E> edges = base.getAllEdges(sourceVertex, targetVertex);\n\n        for (Iterator<E> iter = edges.iterator(); iter.hasNext();) {\n            E e = iter.next();\n\n            if (!containsEdge(e)) {\n                edgeSet.add(e);\n\n                return e;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * @see Graph#addEdge(Object, Object, Object)\n     */\n    @Override public boolean addEdge(V sourceVertex, V targetVertex, E e)\n    {\n        if (e == null) {\n            throw new NullPointerException();\n        }\n\n        if (!base.containsEdge(e)) {\n            throw new IllegalArgumentException(NO_SUCH_EDGE_IN_BASE);\n        }\n\n        assertVertexExist(sourceVertex);\n        assertVertexExist(targetVertex);\n\n        assert (base.getEdgeSource(e) == sourceVertex);\n        assert (base.getEdgeTarget(e) == targetVertex);\n\n        if (containsEdge(e)) {\n            return false;\n        } else {\n            edgeSet.add(e);\n\n            return true;\n        }\n    }\n\n    /**\n     * Adds the specified vertex to this subgraph.\n     *\n     * @param v the vertex to be added.\n     *\n     * @return <code>true</code> if the vertex was added, otherwise <code>\n     * false</code>.\n     *\n     * @throws NullPointerException\n     * @throws IllegalArgumentException\n     *\n     * @see Subgraph\n     * @see Graph#addVertex(Object)\n     */\n    @Override public boolean addVertex(V v)\n    {\n        if (v == null) {\n            throw new NullPointerException();\n        }\n\n        if (!base.containsVertex(v)) {\n            throw new IllegalArgumentException(NO_SUCH_VERTEX_IN_BASE);\n        }\n\n        if (containsVertex(v)) {\n            return false;\n        } else {\n            vertexSet.add(v);\n\n            return true;\n        }\n    }\n\n    /**\n     * @see Graph#containsEdge(Object)\n     */\n    @Override public boolean containsEdge(E e)\n    {\n        return edgeSet.contains(e);\n    }\n\n    /**\n     * @see Graph#containsVertex(Object)\n     */\n    @Override public boolean containsVertex(V v)\n    {\n        return vertexSet.contains(v);\n    }\n\n    /**\n     * @see Graph#edgeSet()\n     */\n    @Override public Set<E> edgeSet()\n    {\n        if (unmodifiableEdgeSet == null) {\n            unmodifiableEdgeSet = Collections.unmodifiableSet(edgeSet);\n        }\n\n        return unmodifiableEdgeSet;\n    }\n\n    /**\n     * @see Graph#edgesOf(Object)\n     */\n    @Override public Set<E> edgesOf(V vertex)\n    {\n        assertVertexExist(vertex);\n\n        Set<E> edges = new ArrayUnenforcedSet<E>();\n        Set<E> baseEdges = base.edgesOf(vertex);\n\n        for (E e : baseEdges) {\n            if (containsEdge(e)) {\n                edges.add(e);\n            }\n        }\n\n        return edges;\n    }\n\n    /**\n     * @see Graph#removeEdge(Object)\n     */\n    @Override public boolean removeEdge(E e)\n    {\n        return edgeSet.remove(e);\n    }\n\n    /**\n     * @see Graph#removeEdge(Object, Object)\n     */\n    @Override public E removeEdge(V sourceVertex, V targetVertex)\n    {\n        E e = getEdge(sourceVertex, targetVertex);\n\n        return edgeSet.remove(e) ? e : null;\n    }\n\n    /**\n     * @see Graph#removeVertex(Object)\n     */\n    @Override public boolean removeVertex(V v)\n    {\n        // If the base graph does NOT contain v it means we are here in\n        // response to removal of v from the base. In such case we don't need\n        // to remove all the edges of v as they were already removed.\n        if (containsVertex(v) && base.containsVertex(v)) {\n            removeAllEdges(edgesOf(v));\n        }\n\n        return vertexSet.remove(v);\n    }\n\n    /**\n     * @see Graph#vertexSet()\n     */\n    @Override public Set<V> vertexSet()\n    {\n        if (unmodifiableVertexSet == null) {\n            unmodifiableVertexSet = Collections.unmodifiableSet(vertexSet);\n        }\n\n        return unmodifiableVertexSet;\n    }\n\n    /**\n     * @see Graph#getEdgeSource(Object)\n     */\n    @Override public V getEdgeSource(E e)\n    {\n        return base.getEdgeSource(e);\n    }\n\n    /**\n     * @see Graph#getEdgeTarget(Object)\n     */\n    @Override public V getEdgeTarget(E e)\n    {\n        return base.getEdgeTarget(e);\n    }\n\n    private void addEdgesUsingFilter(Set<E> edgeSet, Set<E> filter)\n    {\n        E e;\n        boolean containsVertices;\n        boolean edgeIncluded;\n\n        for (Iterator<E> iter = edgeSet.iterator(); iter.hasNext();) {\n            e = iter.next();\n\n            V sourceVertex = base.getEdgeSource(e);\n            V targetVertex = base.getEdgeTarget(e);\n            containsVertices =\n                containsVertex(sourceVertex)\n                && containsVertex(targetVertex);\n\n            // note the use of short circuit evaluation\n            edgeIncluded = (filter == null) || filter.contains(e);\n\n            if (containsVertices && edgeIncluded) {\n                addEdge(sourceVertex, targetVertex, e);\n            }\n        }\n    }\n\n    private void addVerticesUsingFilter(Set<V> vertexSet, Set<V> filter)\n    {\n        V v;\n\n        for (Iterator<V> iter = vertexSet.iterator(); iter.hasNext();) {\n            v = iter.next();\n\n            // note the use of short circuit evaluation\n            if ((filter == null) || filter.contains(v)) {\n                addVertex(v);\n            }\n        }\n    }\n\n    public G getBase()\n    {\n        return base;\n    }\n\n    /**\n     * @see Graph#getEdgeWeight(Object)\n     */\n    @Override public double getEdgeWeight(E e)\n    {\n        return base.getEdgeWeight(e);\n    }\n\n    /**\n     * @see WeightedGraph#setEdgeWeight(Object, double)\n     */\n    public void setEdgeWeight(E e, double weight)\n    {\n        ((WeightedGraph<V, E>) base).setEdgeWeight(e, weight);\n    }\n\n    /**\n     * An internal listener on the base graph.\n     *\n     * @author Barak Naveh\n     * @since Jul 20, 2003\n     */\n    private class BaseGraphListener\n        implements GraphListener<V, E>,\n            Serializable\n    {\n        private static final long serialVersionUID = 4343535244243546391L;\n\n        /**\n         * @see GraphListener#edgeAdded(GraphEdgeChangeEvent)\n         */\n        @Override public void edgeAdded(GraphEdgeChangeEvent<V, E> e)\n        {\n            if (isInduced) {\n                E edge = e.getEdge();\n                V source = e.getEdgeSource();\n                V target = e.getEdgeTarget();\n                if (containsVertex(source) && containsVertex(target)) {\n                    addEdge(\n                        source,\n                        target,\n                        edge);\n                }\n            }\n        }\n\n        /**\n         * @see GraphListener#edgeRemoved(GraphEdgeChangeEvent)\n         */\n        @Override public void edgeRemoved(GraphEdgeChangeEvent<V, E> e)\n        {\n            E edge = e.getEdge();\n\n            removeEdge(edge);\n        }\n\n        /**\n         * @see VertexSetListener#vertexAdded(GraphVertexChangeEvent)\n         */\n        @Override public void vertexAdded(GraphVertexChangeEvent<V> e)\n        {\n            // we don't care\n        }\n\n        /**\n         * @see VertexSetListener#vertexRemoved(GraphVertexChangeEvent)\n         */\n        @Override public void vertexRemoved(GraphVertexChangeEvent<V> e)\n        {\n            V vertex = e.getVertex();\n\n            removeVertex(vertex);\n        }\n    }\n}\n\n// End Subgraph.java\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "PartiteRandomGraphGenerator", "org.jgrapht.experimental" ], [ "RandomGraphHelper", "org.jgrapht.experimental" ], [ "GraphReader", "org.jgrapht.experimental" ], [ "DirectedAcyclicGraph", "org.jgrapht.experimental.dag" ], [ "GraphSquare", "org.jgrapht.experimental" ], [ "UniformRandomGraphGenerator", "org.jgrapht.experimental" ], [ "GraphTests", "org.jgrapht.experimental" ], [ "ApproximationAlgorithm", "org.jgrapht.experimental.alg" ], [ "BrownBacktrackColoring", "org.jgrapht.experimental.alg.color" ], [ "GreedyColoring", "org.jgrapht.experimental.alg.color" ], [ "IntArrayGraphAlgorithm", "org.jgrapht.experimental.alg" ], [ "ExactAlgorithm", "org.jgrapht.experimental.alg" ], [ "ListenableGraph", "org.jgrapht" ], [ "ModifiableInteger", "org.jgrapht.util" ], [ "FibonacciHeapNode", "org.jgrapht.util" ], [ "WeightCombiner", "org.jgrapht.util" ], [ "FibonacciHeap", "org.jgrapht.util" ], [ "TypeUtil", "org.jgrapht.util" ], [ "ArrayUnenforcedSet", "org.jgrapht.util" ], [ "VertexPair", "org.jgrapht.util" ], [ "MathUtil", "org.jgrapht.util" ], [ "PrefetchIterator", "org.jgrapht.util" ], [ "VertexFactory", "org.jgrapht" ], [ "Graph", "org.jgrapht" ], [ "GraphPath", "org.jgrapht" ], [ "UndirectedGraphUnion", "org.jgrapht.graph" ], [ "SimpleGraph", "org.jgrapht.graph" ], [ "MixedGraphUnion", "org.jgrapht.graph" ], [ "DefaultGraphMapping", "org.jgrapht.graph" ], [ "WeightedPseudograph", "org.jgrapht.graph" ], [ "UndirectedMaskSubgraph", "org.jgrapht.graph" ], [ "MaskEdgeSet", "org.jgrapht.graph" ], [ "Pseudograph", "org.jgrapht.graph" ], [ "MaskFunctor", "org.jgrapht.graph" ], [ "GraphUnion", "org.jgrapht.graph" ], [ "DirectedMaskSubgraph", "org.jgrapht.graph" ], [ "DirectedMultigraph", "org.jgrapht.graph" ], [ "AbstractBaseGraph", "org.jgrapht.graph" ], [ "DirectedWeightedPseudograph", "org.jgrapht.graph" ], [ "Multigraph", "org.jgrapht.graph" ], [ "DefaultDirectedGraph", "org.jgrapht.graph" ], [ "DefaultWeightedEdge", "org.jgrapht.graph" ], [ "ListenableDirectedWeightedGraph", "org.jgrapht.graph" ], [ "DirectedGraphUnion", "org.jgrapht.graph" ], [ "AsUnweightedGraph", "org.jgrapht.graph" ], [ "EdgeSetFactory", "org.jgrapht.graph" ], [ "GraphDelegator", "org.jgrapht.graph" ], [ "DefaultListenableGraph", "org.jgrapht.graph" ], [ "AsUndirectedGraph", "org.jgrapht.graph" ], [ "ClassBasedVertexFactory", "org.jgrapht.graph" ], [ "DefaultEdge", "org.jgrapht.graph" ], [ "MaskVertexSet", "org.jgrapht.graph" ], [ "ListenableUndirectedGraph", "org.jgrapht.graph" ], [ "DirectedWeightedSubgraph", "org.jgrapht.graph" ], [ "ListenableUndirectedWeightedGraph", "org.jgrapht.graph" ], [ "AsUnweightedDirectedGraph", "org.jgrapht.graph" ], [ "DefaultDirectedWeightedGraph", "org.jgrapht.graph" ], [ "IntrusiveEdge", "org.jgrapht.graph" ], [ "UnmodifiableGraph", "org.jgrapht.graph" ], [ "GraphPathImpl", "org.jgrapht.graph" ], [ "Subgraph", "org.jgrapht.graph" ], [ "UndirectedWeightedSubgraph", "org.jgrapht.graph" ], [ "DirectedPseudograph", "org.jgrapht.graph" ], [ "AbstractGraph", "org.jgrapht.graph" ], [ "MaskSubgraph", "org.jgrapht.graph" ], [ "ClassBasedEdgeFactory", "org.jgrapht.graph" ], [ "SimpleWeightedGraph", "org.jgrapht.graph" ], [ "AsWeightedDirectedGraph", "org.jgrapht.graph" ], [ "SimpleDirectedWeightedGraph", "org.jgrapht.graph" ], [ "UnmodifiableUndirectedGraph", "org.jgrapht.graph" ], [ "UndirectedSubgraph", "org.jgrapht.graph" ], [ "WeightedMultigraph", "org.jgrapht.graph" ], [ "EdgeReversedGraph", "org.jgrapht.graph" ], [ "AsWeightedGraph", "org.jgrapht.graph" ], [ "DirectedGraphBuilder", "org.jgrapht.graph.builder" ], [ "UndirectedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "UndirectedGraphBuilder", "org.jgrapht.graph.builder" ], [ "UndirectedWeightedGraphBuilder", "org.jgrapht.graph.builder" ], [ "UndirectedWeightedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "DirectedWeightedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "AbstractGraphBuilder", "org.jgrapht.graph.builder" ], [ "DirectedWeightedGraphBuilder", "org.jgrapht.graph.builder" ], [ "DirectedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "ListenableDirectedGraph", "org.jgrapht.graph" ], [ "UnmodifiableDirectedGraph", "org.jgrapht.graph" ], [ "SimpleGraphPath", "org.jgrapht.graph" ], [ "ParanoidGraph", "org.jgrapht.graph" ], [ "DirectedWeightedMultigraph", "org.jgrapht.graph" ], [ "DirectedSubgraph", "org.jgrapht.graph" ], [ "SimpleDirectedGraph", "org.jgrapht.graph" ], [ "GraphHelper", "org.jgrapht" ], [ "Graphs", "org.jgrapht" ], [ "DirectedGraph", "org.jgrapht" ], [ "WeightedGraph", "org.jgrapht" ], [ "HyperCubeGraphGenerator", "org.jgrapht.generate" ], [ "RingGraphGenerator", "org.jgrapht.generate" ], [ "SimpleWeightedGraphMatrixGenerator", "org.jgrapht.generate" ], [ "WeightedGraphGenerator", "org.jgrapht.generate" ], [ "WheelGraphGenerator", "org.jgrapht.generate" ], [ "GridGraphGenerator", "org.jgrapht.generate" ], [ "ScaleFreeGraphGenerator", "org.jgrapht.generate" ], [ "SimpleWeightedBipartiteGraphMatrixGenerator", "org.jgrapht.generate" ], [ "LinearGraphGenerator", "org.jgrapht.generate" ], [ "CompleteGraphGenerator", "org.jgrapht.generate" ], [ "RandomGraphGenerator", "org.jgrapht.generate" ], [ "WeightedGraphGeneratorAdapter", "org.jgrapht.generate" ], [ "EmptyGraphGenerator", "org.jgrapht.generate" ], [ "CompleteBipartiteGraphGenerator", "org.jgrapht.generate" ], [ "GraphGenerator", "org.jgrapht.generate" ], [ "StarGraphGenerator", "org.jgrapht.generate" ], [ "UndirectedGraph", "org.jgrapht" ], [ "TopologicalOrderIterator", "org.jgrapht.traverse" ], [ "CrossComponentIterator", "org.jgrapht.traverse" ], [ "AbstractGraphIterator", "org.jgrapht.traverse" ], [ "ClosestFirstIterator", "org.jgrapht.traverse" ], [ "BreadthFirstIterator", "org.jgrapht.traverse" ], [ "DepthFirstIterator", "org.jgrapht.traverse" ], [ "GraphIterator", "org.jgrapht.traverse" ], [ "EdgeFactory", "org.jgrapht" ], [ "GraphMapping", "org.jgrapht" ], [ "VertexSetListener", "org.jgrapht.event" ], [ "EdgeTraversalEvent", "org.jgrapht.event" ], [ "TraversalListener", "org.jgrapht.event" ], [ "GraphEdgeChangeEvent", "org.jgrapht.event" ], [ "VertexTraversalEvent", "org.jgrapht.event" ], [ "GraphChangeEvent", "org.jgrapht.event" ], [ "GraphListener", "org.jgrapht.event" ], [ "TraversalListenerAdapter", "org.jgrapht.event" ], [ "ConnectedComponentTraversalEvent", "org.jgrapht.event" ], [ "GraphVertexChangeEvent", "org.jgrapht.event" ], [ "TarjanLowestCommonAncestor", "org.jgrapht.alg" ], [ "PrimMinimumSpanningTree", "org.jgrapht.alg" ], [ "BlockCutpointGraph", "org.jgrapht.alg" ], [ "AllDirectedPaths", "org.jgrapht.alg" ], [ "KShortestPathsIterator", "org.jgrapht.alg" ], [ "KruskalMinimumSpanningTree", "org.jgrapht.alg" ], [ "StrongConnectivityInspector", "org.jgrapht.alg" ], [ "VF2State", "org.jgrapht.alg.isomorphism" ], [ "VF2GraphIsomorphismState", "org.jgrapht.alg.isomorphism" ], [ "VF2AbstractIsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "VF2SubgraphIsomorphismState", "org.jgrapht.alg.isomorphism" ], [ "IsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "VF2SubgraphIsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "GraphOrdering", "org.jgrapht.alg.isomorphism" ], [ "VF2GraphMappingIterator", "org.jgrapht.alg.isomorphism" ], [ "IsomorphicGraphMapping", "org.jgrapht.alg.isomorphism" ], [ "VF2GraphIsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "VF2SubgraphMappingIterator", "org.jgrapht.alg.isomorphism" ], [ "VF2MappingIterator", "org.jgrapht.alg.isomorphism" ], [ "BronKerboschCliqueFinder", "org.jgrapht.alg" ], [ "ChromaticNumber", "org.jgrapht.alg" ], [ "KosarajuStrongConnectivityInspector", "org.jgrapht.alg" ], [ "BellmanFordShortestPath", "org.jgrapht.alg" ], [ "DijkstraShortestPath", "org.jgrapht.alg" ], [ "RankingPathElement", "org.jgrapht.alg" ], [ "AStarShortestPath", "org.jgrapht.alg" ], [ "EdmondsKarpMaximumFlow", "org.jgrapht.alg" ], [ "BellmanFordPathElement", "org.jgrapht.alg" ], [ "FloydWarshallShortestPaths", "org.jgrapht.alg" ], [ "UnionFind", "org.jgrapht.alg.util" ], [ "AlwaysEqualComparator", "org.jgrapht.alg.util" ], [ "Extension", "org.jgrapht.alg.util" ], [ "VertexDegreeComparator", "org.jgrapht.alg.util" ], [ "Pair", "org.jgrapht.alg.util" ], [ "GabowStrongConnectivityInspector", "org.jgrapht.alg" ], [ "HawickJamesSimpleCycles", "org.jgrapht.alg.cycle" ], [ "DirectedSimpleCycles", "org.jgrapht.alg.cycle" ], [ "JohnsonSimpleCycles", "org.jgrapht.alg.cycle" ], [ "TiernanSimpleCycles", "org.jgrapht.alg.cycle" ], [ "UndirectedCycleBase", "org.jgrapht.alg.cycle" ], [ "PatonCycleBase", "org.jgrapht.alg.cycle" ], [ "TarjanSimpleCycles", "org.jgrapht.alg.cycle" ], [ "SzwarcfiterLauerSimpleCycles", "org.jgrapht.alg.cycle" ], [ "BiconnectivityInspector", "org.jgrapht.alg" ], [ "ConnectivityInspector", "org.jgrapht.alg" ], [ "MinSourceSinkCut", "org.jgrapht.alg" ], [ "RankingPathElementList", "org.jgrapht.alg" ], [ "EdmondsBlossomShrinking", "org.jgrapht.alg" ], [ "TransitiveClosure", "org.jgrapht.alg" ], [ "HopcroftKarpBipartiteMatching", "org.jgrapht.alg" ], [ "StoerWagnerMinimumCut", "org.jgrapht.alg" ], [ "AbstractPathElementList", "org.jgrapht.alg" ], [ "KuhnMunkresMinimalWeightBipartitePerfectMatching", "org.jgrapht.alg" ], [ "TransitiveReduction", "org.jgrapht.alg" ], [ "EulerianCircuit", "org.jgrapht.alg" ], [ "DirectedNeighborIndex", "org.jgrapht.alg" ], [ "NaiveLcaFinder", "org.jgrapht.alg" ], [ "MaximumWeightBipartiteMatching", "org.jgrapht.alg" ], [ "HamiltonianCycle", "org.jgrapht.alg" ], [ "KShortestPaths", "org.jgrapht.alg" ], [ "NeighborIndex", "org.jgrapht.alg" ], [ "VertexCovers", "org.jgrapht.alg" ], [ "CycleDetector", "org.jgrapht.alg" ], [ "AStarAdmissibleHeuristic", "org.jgrapht.alg.interfaces" ], [ "MinimumSpanningTree", "org.jgrapht.alg.interfaces" ], [ "WeightedMatchingAlgorithm", "org.jgrapht.alg.interfaces" ], [ "StrongConnectivityAlgorithm", "org.jgrapht.alg.interfaces" ], [ "MaximumFlowAlgorithm", "org.jgrapht.alg.interfaces" ], [ "MatchingAlgorithm", "org.jgrapht.alg.interfaces" ], [ "CliqueMinimalSeparatorDecomposition", "org.jgrapht.alg" ], [ "BellmanFordIterator", "org.jgrapht.alg" ], [ "AbstractPathElement", "org.jgrapht.alg" ], [ "EdmondsKarpMaximumFlow", "org.jgrapht.alg.flow" ], [ "PushRelabelMaximumFlow", "org.jgrapht.alg.flow" ], [ "MaximumFlowAlgorithmBase", "org.jgrapht.alg.flow" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "addVertices", "org.jgrapht.experimental", "RandomGraphHelper", "public static Object[] addVertices(Graph target, VertexFactory vertexFactory, int numVertices)" ], [ "isEmpty", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isEmpty(Graph<V, E> g)" ], [ "isComplete", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isComplete(Graph<V, E> g)" ], [ "isConnected", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isConnected(Graph<V, E> g)" ], [ "isTree", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isTree(Graph<V, E> g)" ], [ "isBipartite", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isBipartite(Graph<V, E> g)" ], [ "union", "org.jgrapht.util", "FibonacciHeap", "public static <T> FibonacciHeap<T> union(FibonacciHeap<T> h1, FibonacciHeap<T> h2)" ], [ "uncheckedCast", "org.jgrapht.util", "TypeUtil", "public static <T> T uncheckedCast(Object o, TypeUtil<T> typeDecl)" ], [ "factorial", "org.jgrapht.util", "MathUtil", "public static long factorial(int N)" ], [ "builder", "org.jgrapht.graph", "SimpleGraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends SimpleGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleGraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends SimpleGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "WeightedPseudograph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "WeightedPseudograph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "Pseudograph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Pseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "Pseudograph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Pseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedMultigraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedMultigraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedPseudograph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedPseudograph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "Multigraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Multigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "Multigraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Multigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DefaultDirectedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DefaultDirectedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DefaultDirectedWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DefaultDirectedWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedPseudograph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedPseudograph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "SimpleWeightedGraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends SimpleWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleWeightedGraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends SimpleWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends SimpleDirectedWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends SimpleDirectedWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "WeightedMultigraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "WeightedMultigraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedMultigraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedMultigraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends SimpleDirectedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends SimpleDirectedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "addEdge", "org.jgrapht", "Graphs", "public static <V, E> E addEdge(Graph<V, E> g, V sourceVertex, V targetVertex, double weight)" ], [ "addEdgeWithVertices", "org.jgrapht", "Graphs", "public static <V, E> E addEdgeWithVertices(Graph<V, E> g, V sourceVertex, V targetVertex)" ], [ "addEdgeWithVertices", "org.jgrapht", "Graphs", "public static <V, E> boolean addEdgeWithVertices(Graph<V, E> targetGraph, Graph<V, E> sourceGraph, E edge)" ], [ "addEdgeWithVertices", "org.jgrapht", "Graphs", "public static <V, E> E addEdgeWithVertices(Graph<V, E> g, V sourceVertex, V targetVertex, double weight)" ], [ "addGraph", "org.jgrapht", "Graphs", "public static <V, E> boolean addGraph(Graph<? super V, ? super E> destination, Graph<V, E> source)" ], [ "addAllEdges", "org.jgrapht", "Graphs", "public static <V, E> boolean addAllEdges(Graph<? super V, ? super E> destination, Graph<V, E> source, Collection<? extends E> edges)" ], [ "addAllVertices", "org.jgrapht", "Graphs", "public static <V, E> boolean addAllVertices(Graph<? super V, ? super E> destination, Collection<? extends V> vertices)" ], [ "neighborListOf", "org.jgrapht", "Graphs", "public static <V, E> List<V> neighborListOf(Graph<V, E> g, V vertex)" ], [ "predecessorListOf", "org.jgrapht", "Graphs", "public static <V, E> List<V> predecessorListOf(DirectedGraph<V, E> g, V vertex)" ], [ "successorListOf", "org.jgrapht", "Graphs", "public static <V, E> List<V> successorListOf(DirectedGraph<V, E> g, V vertex)" ], [ "undirectedGraph", "org.jgrapht", "Graphs", "public static <V, E> UndirectedGraph<V, E> undirectedGraph(Graph<V, E> g)" ], [ "testIncidence", "org.jgrapht", "Graphs", "public static <V, E> boolean testIncidence(Graph<V, E> g, E e, V v)" ], [ "getOppositeVertex", "org.jgrapht", "Graphs", "public static <V, E> V getOppositeVertex(Graph<V, E> g, E e, V v)" ], [ "getPathVertexList", "org.jgrapht", "Graphs", "public static <V, E> List<V> getPathVertexList(GraphPath<V, E> path)" ], [ "range", "org.jgrapht.generate", "SimpleWeightedGraphMatrixGenerator", "public static int[] range(final int from, final int to)" ], [ "createGraphSpecifics", "org.jgrapht.traverse", "CrossComponentIterator", "static <V, E> Specifics<V, E> createGraphSpecifics(Graph<V, E> g)" ], [ "findGreedyChromaticNumber", "org.jgrapht.alg", "ChromaticNumber", "public static <V, E> int findGreedyChromaticNumber(UndirectedGraph<V, E> g)" ], [ "findGreedyColoredGroups", "org.jgrapht.alg", "ChromaticNumber", "public static <V, E> Map<Integer, Set<V>> findGreedyColoredGroups(UndirectedGraph<V, E> g)" ], [ "findPathBetween", "org.jgrapht.alg", "BellmanFordShortestPath", "public static <V, E> List<E> findPathBetween(Graph<V, E> graph, V startVertex, V endVertex)" ], [ "findPathBetween", "org.jgrapht.alg", "DijkstraShortestPath", "public static <V, E> List<E> findPathBetween(Graph<V, E> graph, V startVertex, V endVertex)" ], [ "of", "org.jgrapht.alg.util", "Pair", "public static <A, B> Pair<A, B> of(A a, B b)" ], [ "isEulerian", "org.jgrapht.alg", "EulerianCircuit", "public static <V, E> boolean isEulerian(UndirectedGraph<V, E> g)" ], [ "getEulerianCircuitVertices", "org.jgrapht.alg", "EulerianCircuit", "public static <V, E> List<V> getEulerianCircuitVertices(UndirectedGraph<V, E> g)" ], [ "getApproximateOptimalForCompleteGraph", "org.jgrapht.alg", "HamiltonianCycle", "public static <V, E> List<V> getApproximateOptimalForCompleteGraph(SimpleWeightedGraph<V, E> g)" ], [ "find2ApproximationCover", "org.jgrapht.alg", "VertexCovers", "public static <V, E> Set<V> find2ApproximationCover(Graph<V, E> g)" ], [ "findGreedyCover", "org.jgrapht.alg", "VertexCovers", "public static <V, E> Set<V> findGreedyCover(UndirectedGraph<V, E> g)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "BEST_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int BEST_ORDER = 0;" ], [ "NATURAL_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int NATURAL_ORDER = 1;" ], [ "SMALLEST_DEGREE_LAST_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int SMALLEST_DEGREE_LAST_ORDER = 2;" ], [ "LARGEST_SATURATION_FIRST_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int LARGEST_SATURATION_FIRST_ORDER = 3;" ], [ "DEFAULT_EDGE_WEIGHT", "org.jgrapht", "WeightedGraph", "public static double DEFAULT_EDGE_WEIGHT = 1.0;" ], [ "HUB_VERTEX", "org.jgrapht.generate", "WheelGraphGenerator", "public static final String HUB_VERTEX = \"Hub Vertex\";" ], [ "CORNER_VERTEX", "org.jgrapht.generate", "GridGraphGenerator", "public static final String CORNER_VERTEX = \"Corner Vertex\";" ], [ "START_VERTEX", "org.jgrapht.generate", "LinearGraphGenerator", "public static final String START_VERTEX = \"Start Vertex\";" ], [ "END_VERTEX", "org.jgrapht.generate", "LinearGraphGenerator", "public static final String END_VERTEX = \"End Vertex\";" ], [ "CENTER_VERTEX", "org.jgrapht.generate", "StarGraphGenerator", "public static final String CENTER_VERTEX = \"Center Vertex\";" ], [ "SENTINEL", "org.jgrapht.traverse", "DepthFirstIterator", "public static final Object SENTINEL = new Object();" ], [ "BEFORE_EDGE_ADDED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int BEFORE_EDGE_ADDED = 21;" ], [ "BEFORE_EDGE_REMOVED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int BEFORE_EDGE_REMOVED = 22;" ], [ "EDGE_ADDED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int EDGE_ADDED = 23;" ], [ "EDGE_REMOVED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int EDGE_REMOVED = 24;" ], [ "CONNECTED_COMPONENT_STARTED", "org.jgrapht.event", "ConnectedComponentTraversalEvent", "public static final int CONNECTED_COMPONENT_STARTED = 31;" ], [ "CONNECTED_COMPONENT_FINISHED", "org.jgrapht.event", "ConnectedComponentTraversalEvent", "public static final int CONNECTED_COMPONENT_FINISHED = 32;" ], [ "BEFORE_VERTEX_ADDED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int BEFORE_VERTEX_ADDED = 11;" ], [ "BEFORE_VERTEX_REMOVED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int BEFORE_VERTEX_REMOVED = 12;" ], [ "VERTEX_ADDED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int VERTEX_ADDED = 13;" ], [ "VERTEX_REMOVED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int VERTEX_REMOVED = 14;" ], [ "NULL_NODE", "org.jgrapht.alg.isomorphism", "VF2State", "public static final int NULL_NODE = -1;" ], [ "DEBUG", "org.jgrapht.alg.isomorphism", "VF2State", "protected static final boolean DEBUG = false;" ], [ "DEFAULT_EPSILON", "org.jgrapht.alg", "EdmondsKarpMaximumFlow", "public static final double DEFAULT_EPSILON = 0.000000001;" ], [ "INSTANCE", "org.jgrapht.alg", "TransitiveClosure", "public static final TransitiveClosure INSTANCE = new TransitiveClosure();" ], [ "INSTANCE", "org.jgrapht.alg", "TransitiveReduction", "public static final TransitiveReduction INSTANCE = new TransitiveReduction();" ], [ "NEGATIVE_UNDIRECTED_EDGE", "org.jgrapht.alg", "BellmanFordIterator", "protected final static String NEGATIVE_UNDIRECTED_EDGE = \"Negative\" + \"edge-weights are not allowed in an unidrected graph!\";" ], [ "DEFAULT_EPSILON", "org.jgrapht.alg.flow", "MaximumFlowAlgorithmBase", "public static final double DEFAULT_EPSILON = 1e-9;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "v", "", "V" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "removeEdge", "org.jgrapht.graph", "Subgraph", "public E removeEdge(V sourceVertex, V targetVertex)" ], [ "removeAllEdges", "org.jgrapht.graph", "AbstractGraph", "public boolean removeAllEdges(Collection<? extends E> arg0)" ], [ "getEdge", "org.jgrapht.graph", "Subgraph", "public E getEdge(V sourceVertex, V targetVertex)" ], [ "getAllEdges", "org.jgrapht.graph", "Subgraph", "public Set<E> getAllEdges(V sourceVertex, V targetVertex)" ], [ "vertexSet", "org.jgrapht.graph", "Subgraph", "public Set<V> vertexSet()" ], [ "containsEdge", "org.jgrapht.graph", "AbstractGraph", "public boolean containsEdge(V arg0, V arg1)" ], [ "getBase", "org.jgrapht.graph", "Subgraph", "public G getBase()" ], [ "removeAllEdges", "org.jgrapht.graph", "AbstractGraph", "public Set<E> removeAllEdges(V arg0, V arg1)" ], [ "removeVertex", "org.jgrapht.graph", "Subgraph", "public boolean removeVertex(V v)" ], [ "removeAllEdges", "org.jgrapht.graph", "AbstractGraph", "protected boolean removeAllEdges(E[] arg0)" ], [ "getEdgeWeight", "org.jgrapht.graph", "Subgraph", "public double getEdgeWeight(E e)" ], [ "assertVertexExist", "org.jgrapht.graph", "AbstractGraph", "protected boolean assertVertexExist(V arg0)" ], [ "toStringFromSets", "org.jgrapht.graph", "AbstractGraph", "protected String toStringFromSets(Collection<? extends V> arg0, Collection<? extends E> arg1, boolean arg2)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "edgesOf", "org.jgrapht.graph", "Subgraph", "public Set<E> edgesOf(V vertex)" ], [ "removeEdge", "org.jgrapht.graph", "Subgraph", "public boolean removeEdge(E e)" ], [ "hashCode", "org.jgrapht.graph", "AbstractGraph", "public int hashCode()" ], [ "equals", "org.jgrapht.graph", "AbstractGraph", "public boolean equals(Object arg0)" ], [ "containsEdge", "org.jgrapht.graph", "Subgraph", "public boolean containsEdge(E e)" ], [ "getEdgeSource", "org.jgrapht.graph", "Subgraph", "public V getEdgeSource(E e)" ], [ "edgeSet", "org.jgrapht.graph", "Subgraph", "public Set<E> edgeSet()" ], [ "containsVertex", "org.jgrapht.graph", "Subgraph", "public boolean containsVertex(V v)" ], [ "removeAllVertices", "org.jgrapht.graph", "AbstractGraph", "public boolean removeAllVertices(Collection<? extends V> arg0)" ], [ "toString", "org.jgrapht.graph", "AbstractGraph", "public String toString()" ], [ "addVertex", "org.jgrapht.graph", "Subgraph", "public boolean addVertex(V v)" ], [ "getEdgeFactory", "org.jgrapht.graph", "Subgraph", "public EdgeFactory<V, E> getEdgeFactory()" ], [ "addEdge", "org.jgrapht.graph", "Subgraph", "public E addEdge(V sourceVertex, V targetVertex)" ], [ "addEdge", "org.jgrapht.graph", "Subgraph", "public boolean addEdge(V sourceVertex, V targetVertex, E e)" ], [ "getEdgeTarget", "org.jgrapht.graph", "Subgraph", "public V getEdgeTarget(E e)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "edgeSet", "org.jgrapht.graph", "Subgraph", "Set<E> edgeSet = new LinkedHashSet<E>();" ], [ "vertexSet", "org.jgrapht.graph", "Subgraph", "Set<V> vertexSet = new LinkedHashSet<V>();" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 25983,
  "oracle" : "this.getBase().containsVertex(v) == false;",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "jgrapht-core-0.9.2",
  "packageName" : "org.jgrapht.graph",
  "className" : "Subgraph",
  "javadocTag" : "@throws IllegalArgumentException",
  "methodJavadoc" : "    /**\n     * Adds the specified vertex to this subgraph.\n     *\n     * @param v the vertex to be added.\n     *\n     * @return <code>true</code> if the vertex was added, otherwise <code>\n     * false</code>.\n     *\n     * @throws NullPointerException\n     * @throws IllegalArgumentException\n     *\n     * @see Subgraph\n     * @see Graph#addVertex(Object)\n     */",
  "methodSourceCode" : "public boolean addVertex(V v){\n    if (v == null) {\n        throw new NullPointerException();\n    }\n    if (!base.containsVertex(v)) {\n        throw new IllegalArgumentException(NO_SUCH_VERTEX_IN_BASE);\n    }\n    if (containsVertex(v)) {\n        return false;\n    } else {\n        vertexSet.add(v);\n        return true;\n    }\n}",
  "classJavadoc" : "/**\n * A subgraph is a graph that has a subset of vertices and a subset of edges\n * with respect to some base graph. More formally, a subgraph G(V,E) that is\n * based on a base graph Gb(Vb,Eb) satisfies the following <b><i>subgraph\n * property</i></b>: V is a subset of Vb and E is a subset of Eb. Other than\n * this property, a subgraph is a graph with any respect and fully complies with\n * the <code>Graph</code> interface.\n *\n * <p>If the base graph is a {@link org.jgrapht.ListenableGraph}, the subgraph\n * listens on the base graph and guarantees the subgraph property. If an edge or\n * a vertex is removed from the base graph, it is automatically removed from the\n * subgraph. Subgraph listeners are informed on such removal only if it results\n * in a cascaded removal from the subgraph. If the subgraph has been created as\n * an induced subgraph it also keeps track of edges being added to its vertices.\n * If vertices are added to the base graph, the subgraph remains unaffected.</p>\n *\n * <p>If the base graph is <i>not</i> a ListenableGraph, then the subgraph\n * property cannot be guaranteed. If edges or vertices are removed from the base\n * graph, they are <i>not</i> removed from the subgraph.</p>\n *\n * <p>Modifications to Subgraph are allowed as long as the subgraph property is\n * maintained. Addition of vertices or edges are allowed as long as they also\n * exist in the base graph. Removal of vertices or edges is always allowed. The\n * base graph is <i>never</i> affected by any modification made to the\n * subgraph.</p>\n *\n * <p>A subgraph may provide a \"live-window\" on a base graph, so that changes\n * made to its vertices or edges are immediately reflected in the base graph,\n * and vice versa. For that to happen, vertices and edges added to the subgraph\n * must be <i>identical</i> (that is, reference-equal and not only value-equal)\n * to their respective ones in the base graph. Previous versions of this class\n * enforced such identity, at a severe performance cost. Currently it is no\n * longer enforced. If you want to achieve a \"live-window\"functionality, your\n * safest tactics would be to NOT override the <code>equals()</code> methods of\n * your vertices and edges. If you use a class that has already overridden the\n * <code>equals()</code> method, such as <code>String</code>, than you can use a\n * wrapper around it, or else use it directly but exercise a great care to avoid\n * having different-but-equal instances in the subgraph and the base graph.</p>\n *\n * <p>This graph implementation guarantees deterministic vertex and edge set\n * ordering (via {@link LinkedHashSet}).</p>\n *\n * @author Barak Naveh\n * @see Graph\n * @see Set\n * @since Jul 18, 2003\n */",
  "classSourceCode" : "/* ==========================================\n * JGraphT : a free Java graph-theory library\n * ==========================================\n *\n * Project Info:  http://jgrapht.sourceforge.net/\n * Project Creator:  Barak Naveh (http://sourceforge.net/users/barak_naveh)\n *\n * (C) Copyright 2003-2008, by Barak Naveh and Contributors.\n *\n * This program and the accompanying materials are dual-licensed under\n * either\n *\n * (a) the terms of the GNU Lesser General Public License version 2.1\n * as published by the Free Software Foundation, or (at your option) any\n * later version.\n *\n * or (per the licensee's choosing)\n *\n * (b) the terms of the Eclipse Public License v1.0 as published by\n * the Eclipse Foundation.\n */\n/* -------------\n * Subgraph.java\n * -------------\n * (C) Copyright 2003-2008, by Barak Naveh and Contributors.\n *\n * Original Author:  Barak Naveh\n * Contributor(s):   Christian Hammer\n *\n * $Id$\n *\n * Changes\n * -------\n * 24-Jul-2003 : Initial revision (BN);\n * 26-Jul-2003 : Accurate constructors to avoid casting problems (BN);\n * 10-Aug-2003 : Adaptation to new event model (BN);\n * 23-Oct-2003 : Allowed non-listenable graph as base (BN);\n * 07-Feb-2004 : Enabled serialization (BN);\n * 11-Mar-2004 : Made generic (CH);\n * 15-Mar-2004 : Integrity is now checked using Maps (CH);\n * 20-Mar-2004 : Cancelled verification of element identity to base graph (BN);\n * 21-Sep-2004 : Added induced subgraph (who?)\n * 07-May-2006 : Changed from List<Edge> to Set<Edge> (JVS);\n * 28-May-2006 : Moved connectivity info from edge to graph (JVS);\n *\n */\npackage org.jgrapht.graph;\n\nimport java.io.*;\n\nimport java.util.*;\n\nimport org.jgrapht.*;\nimport org.jgrapht.event.*;\nimport org.jgrapht.util.*;\n\n\n/**\n * A subgraph is a graph that has a subset of vertices and a subset of edges\n * with respect to some base graph. More formally, a subgraph G(V,E) that is\n * based on a base graph Gb(Vb,Eb) satisfies the following <b><i>subgraph\n * property</i></b>: V is a subset of Vb and E is a subset of Eb. Other than\n * this property, a subgraph is a graph with any respect and fully complies with\n * the <code>Graph</code> interface.\n *\n * <p>If the base graph is a {@link org.jgrapht.ListenableGraph}, the subgraph\n * listens on the base graph and guarantees the subgraph property. If an edge or\n * a vertex is removed from the base graph, it is automatically removed from the\n * subgraph. Subgraph listeners are informed on such removal only if it results\n * in a cascaded removal from the subgraph. If the subgraph has been created as\n * an induced subgraph it also keeps track of edges being added to its vertices.\n * If vertices are added to the base graph, the subgraph remains unaffected.</p>\n *\n * <p>If the base graph is <i>not</i> a ListenableGraph, then the subgraph\n * property cannot be guaranteed. If edges or vertices are removed from the base\n * graph, they are <i>not</i> removed from the subgraph.</p>\n *\n * <p>Modifications to Subgraph are allowed as long as the subgraph property is\n * maintained. Addition of vertices or edges are allowed as long as they also\n * exist in the base graph. Removal of vertices or edges is always allowed. The\n * base graph is <i>never</i> affected by any modification made to the\n * subgraph.</p>\n *\n * <p>A subgraph may provide a \"live-window\" on a base graph, so that changes\n * made to its vertices or edges are immediately reflected in the base graph,\n * and vice versa. For that to happen, vertices and edges added to the subgraph\n * must be <i>identical</i> (that is, reference-equal and not only value-equal)\n * to their respective ones in the base graph. Previous versions of this class\n * enforced such identity, at a severe performance cost. Currently it is no\n * longer enforced. If you want to achieve a \"live-window\"functionality, your\n * safest tactics would be to NOT override the <code>equals()</code> methods of\n * your vertices and edges. If you use a class that has already overridden the\n * <code>equals()</code> method, such as <code>String</code>, than you can use a\n * wrapper around it, or else use it directly but exercise a great care to avoid\n * having different-but-equal instances in the subgraph and the base graph.</p>\n *\n * <p>This graph implementation guarantees deterministic vertex and edge set\n * ordering (via {@link LinkedHashSet}).</p>\n *\n * @author Barak Naveh\n * @see Graph\n * @see Set\n * @since Jul 18, 2003\n */\npublic class Subgraph<V, E, G extends Graph<V, E>>\n    extends AbstractGraph<V, E>\n    implements Serializable\n{\n    private static final long serialVersionUID = 3208313055169665387L;\n    private static final String NO_SUCH_EDGE_IN_BASE =\n        \"no such edge in base graph\";\n    private static final String NO_SUCH_VERTEX_IN_BASE =\n        \"no such vertex in base graph\";\n\n    //\n    Set<E> edgeSet = new LinkedHashSet<E>(); // friendly to improve performance\n    Set<V> vertexSet = new LinkedHashSet<V>(); // friendly to improve\n\n    // performance\n\n    //\n    private transient Set<E> unmodifiableEdgeSet = null;\n    private transient Set<V> unmodifiableVertexSet = null;\n    private G base;\n    private boolean isInduced = false;\n\n    /**\n     * Creates a new Subgraph.\n     *\n     * @param base the base (backing) graph on which the subgraph will be based.\n     * @param vertexSubset vertices to include in the subgraph. If <code>\n     * null</code> then all vertices are included.\n     * @param edgeSubset edges to in include in the subgraph. If <code>\n     * null</code> then all the edges whose vertices found in the graph are\n     * included.\n     */\n    public Subgraph(G base, Set<V> vertexSubset, Set<E> edgeSubset)\n    {\n        super();\n\n        this.base = base;\n\n        if (edgeSubset == null) {\n            isInduced = true;\n        }\n\n        if (base instanceof ListenableGraph<?, ?>) {\n            ((ListenableGraph<V, E>) base).addGraphListener(\n                new BaseGraphListener());\n        }\n\n        addVerticesUsingFilter(base.vertexSet(), vertexSubset);\n        addEdgesUsingFilter(base.edgeSet(), edgeSubset);\n    }\n\n    /**\n     * Creates a new induced Subgraph. The subgraph will keep track of edges\n     * being added to its vertex subset as well as deletion of edges and\n     * vertices. If base it not listenable, this is identical to the call\n     * Subgraph(base, vertexSubset, null) .\n     *\n     * @param base the base (backing) graph on which the subgraph will be based.\n     * @param vertexSubset vertices to include in the subgraph. If <code>\n     * null</code> then all vertices are included.\n     */\n    public Subgraph(G base, Set<V> vertexSubset)\n    {\n        this(base, vertexSubset, null);\n    }\n\n    /**\n     * @see Graph#getAllEdges(Object, Object)\n     */\n    @Override public Set<E> getAllEdges(V sourceVertex, V targetVertex)\n    {\n        Set<E> edges = null;\n\n        if (containsVertex(sourceVertex) && containsVertex(targetVertex)) {\n            edges = new ArrayUnenforcedSet<E>();\n\n            Set<E> baseEdges = base.getAllEdges(sourceVertex, targetVertex);\n\n            for (Iterator<E> iter = baseEdges.iterator(); iter.hasNext();) {\n                E e = iter.next();\n\n                if (edgeSet.contains(e)) { // add if subgraph also contains\n                                           // it\n                    edges.add(e);\n                }\n            }\n        }\n\n        return edges;\n    }\n\n    /**\n     * @see Graph#getEdge(Object, Object)\n     */\n    @Override public E getEdge(V sourceVertex, V targetVertex)\n    {\n        Set<E> edges = getAllEdges(sourceVertex, targetVertex);\n\n        if ((edges == null) || edges.isEmpty()) {\n            return null;\n        } else {\n            return edges.iterator().next();\n        }\n    }\n\n    /**\n     * @see Graph#getEdgeFactory()\n     */\n    @Override public EdgeFactory<V, E> getEdgeFactory()\n    {\n        return base.getEdgeFactory();\n    }\n\n    /**\n     * @see Graph#addEdge(Object, Object)\n     */\n    @Override public E addEdge(V sourceVertex, V targetVertex)\n    {\n        assertVertexExist(sourceVertex);\n        assertVertexExist(targetVertex);\n\n        if (!base.containsEdge(sourceVertex, targetVertex)) {\n            throw new IllegalArgumentException(NO_SUCH_EDGE_IN_BASE);\n        }\n\n        Set<E> edges = base.getAllEdges(sourceVertex, targetVertex);\n\n        for (Iterator<E> iter = edges.iterator(); iter.hasNext();) {\n            E e = iter.next();\n\n            if (!containsEdge(e)) {\n                edgeSet.add(e);\n\n                return e;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * @see Graph#addEdge(Object, Object, Object)\n     */\n    @Override public boolean addEdge(V sourceVertex, V targetVertex, E e)\n    {\n        if (e == null) {\n            throw new NullPointerException();\n        }\n\n        if (!base.containsEdge(e)) {\n            throw new IllegalArgumentException(NO_SUCH_EDGE_IN_BASE);\n        }\n\n        assertVertexExist(sourceVertex);\n        assertVertexExist(targetVertex);\n\n        assert (base.getEdgeSource(e) == sourceVertex);\n        assert (base.getEdgeTarget(e) == targetVertex);\n\n        if (containsEdge(e)) {\n            return false;\n        } else {\n            edgeSet.add(e);\n\n            return true;\n        }\n    }\n\n    /**\n     * Adds the specified vertex to this subgraph.\n     *\n     * @param v the vertex to be added.\n     *\n     * @return <code>true</code> if the vertex was added, otherwise <code>\n     * false</code>.\n     *\n     * @throws NullPointerException\n     * @throws IllegalArgumentException\n     *\n     * @see Subgraph\n     * @see Graph#addVertex(Object)\n     */\n    @Override public boolean addVertex(V v)\n    {\n        if (v == null) {\n            throw new NullPointerException();\n        }\n\n        if (!base.containsVertex(v)) {\n            throw new IllegalArgumentException(NO_SUCH_VERTEX_IN_BASE);\n        }\n\n        if (containsVertex(v)) {\n            return false;\n        } else {\n            vertexSet.add(v);\n\n            return true;\n        }\n    }\n\n    /**\n     * @see Graph#containsEdge(Object)\n     */\n    @Override public boolean containsEdge(E e)\n    {\n        return edgeSet.contains(e);\n    }\n\n    /**\n     * @see Graph#containsVertex(Object)\n     */\n    @Override public boolean containsVertex(V v)\n    {\n        return vertexSet.contains(v);\n    }\n\n    /**\n     * @see Graph#edgeSet()\n     */\n    @Override public Set<E> edgeSet()\n    {\n        if (unmodifiableEdgeSet == null) {\n            unmodifiableEdgeSet = Collections.unmodifiableSet(edgeSet);\n        }\n\n        return unmodifiableEdgeSet;\n    }\n\n    /**\n     * @see Graph#edgesOf(Object)\n     */\n    @Override public Set<E> edgesOf(V vertex)\n    {\n        assertVertexExist(vertex);\n\n        Set<E> edges = new ArrayUnenforcedSet<E>();\n        Set<E> baseEdges = base.edgesOf(vertex);\n\n        for (E e : baseEdges) {\n            if (containsEdge(e)) {\n                edges.add(e);\n            }\n        }\n\n        return edges;\n    }\n\n    /**\n     * @see Graph#removeEdge(Object)\n     */\n    @Override public boolean removeEdge(E e)\n    {\n        return edgeSet.remove(e);\n    }\n\n    /**\n     * @see Graph#removeEdge(Object, Object)\n     */\n    @Override public E removeEdge(V sourceVertex, V targetVertex)\n    {\n        E e = getEdge(sourceVertex, targetVertex);\n\n        return edgeSet.remove(e) ? e : null;\n    }\n\n    /**\n     * @see Graph#removeVertex(Object)\n     */\n    @Override public boolean removeVertex(V v)\n    {\n        // If the base graph does NOT contain v it means we are here in\n        // response to removal of v from the base. In such case we don't need\n        // to remove all the edges of v as they were already removed.\n        if (containsVertex(v) && base.containsVertex(v)) {\n            removeAllEdges(edgesOf(v));\n        }\n\n        return vertexSet.remove(v);\n    }\n\n    /**\n     * @see Graph#vertexSet()\n     */\n    @Override public Set<V> vertexSet()\n    {\n        if (unmodifiableVertexSet == null) {\n            unmodifiableVertexSet = Collections.unmodifiableSet(vertexSet);\n        }\n\n        return unmodifiableVertexSet;\n    }\n\n    /**\n     * @see Graph#getEdgeSource(Object)\n     */\n    @Override public V getEdgeSource(E e)\n    {\n        return base.getEdgeSource(e);\n    }\n\n    /**\n     * @see Graph#getEdgeTarget(Object)\n     */\n    @Override public V getEdgeTarget(E e)\n    {\n        return base.getEdgeTarget(e);\n    }\n\n    private void addEdgesUsingFilter(Set<E> edgeSet, Set<E> filter)\n    {\n        E e;\n        boolean containsVertices;\n        boolean edgeIncluded;\n\n        for (Iterator<E> iter = edgeSet.iterator(); iter.hasNext();) {\n            e = iter.next();\n\n            V sourceVertex = base.getEdgeSource(e);\n            V targetVertex = base.getEdgeTarget(e);\n            containsVertices =\n                containsVertex(sourceVertex)\n                && containsVertex(targetVertex);\n\n            // note the use of short circuit evaluation\n            edgeIncluded = (filter == null) || filter.contains(e);\n\n            if (containsVertices && edgeIncluded) {\n                addEdge(sourceVertex, targetVertex, e);\n            }\n        }\n    }\n\n    private void addVerticesUsingFilter(Set<V> vertexSet, Set<V> filter)\n    {\n        V v;\n\n        for (Iterator<V> iter = vertexSet.iterator(); iter.hasNext();) {\n            v = iter.next();\n\n            // note the use of short circuit evaluation\n            if ((filter == null) || filter.contains(v)) {\n                addVertex(v);\n            }\n        }\n    }\n\n    public G getBase()\n    {\n        return base;\n    }\n\n    /**\n     * @see Graph#getEdgeWeight(Object)\n     */\n    @Override public double getEdgeWeight(E e)\n    {\n        return base.getEdgeWeight(e);\n    }\n\n    /**\n     * @see WeightedGraph#setEdgeWeight(Object, double)\n     */\n    public void setEdgeWeight(E e, double weight)\n    {\n        ((WeightedGraph<V, E>) base).setEdgeWeight(e, weight);\n    }\n\n    /**\n     * An internal listener on the base graph.\n     *\n     * @author Barak Naveh\n     * @since Jul 20, 2003\n     */\n    private class BaseGraphListener\n        implements GraphListener<V, E>,\n            Serializable\n    {\n        private static final long serialVersionUID = 4343535244243546391L;\n\n        /**\n         * @see GraphListener#edgeAdded(GraphEdgeChangeEvent)\n         */\n        @Override public void edgeAdded(GraphEdgeChangeEvent<V, E> e)\n        {\n            if (isInduced) {\n                E edge = e.getEdge();\n                V source = e.getEdgeSource();\n                V target = e.getEdgeTarget();\n                if (containsVertex(source) && containsVertex(target)) {\n                    addEdge(\n                        source,\n                        target,\n                        edge);\n                }\n            }\n        }\n\n        /**\n         * @see GraphListener#edgeRemoved(GraphEdgeChangeEvent)\n         */\n        @Override public void edgeRemoved(GraphEdgeChangeEvent<V, E> e)\n        {\n            E edge = e.getEdge();\n\n            removeEdge(edge);\n        }\n\n        /**\n         * @see VertexSetListener#vertexAdded(GraphVertexChangeEvent)\n         */\n        @Override public void vertexAdded(GraphVertexChangeEvent<V> e)\n        {\n            // we don't care\n        }\n\n        /**\n         * @see VertexSetListener#vertexRemoved(GraphVertexChangeEvent)\n         */\n        @Override public void vertexRemoved(GraphVertexChangeEvent<V> e)\n        {\n            V vertex = e.getVertex();\n\n            removeVertex(vertex);\n        }\n    }\n}\n\n// End Subgraph.java\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "PartiteRandomGraphGenerator", "org.jgrapht.experimental" ], [ "RandomGraphHelper", "org.jgrapht.experimental" ], [ "GraphReader", "org.jgrapht.experimental" ], [ "DirectedAcyclicGraph", "org.jgrapht.experimental.dag" ], [ "GraphSquare", "org.jgrapht.experimental" ], [ "UniformRandomGraphGenerator", "org.jgrapht.experimental" ], [ "GraphTests", "org.jgrapht.experimental" ], [ "ApproximationAlgorithm", "org.jgrapht.experimental.alg" ], [ "BrownBacktrackColoring", "org.jgrapht.experimental.alg.color" ], [ "GreedyColoring", "org.jgrapht.experimental.alg.color" ], [ "IntArrayGraphAlgorithm", "org.jgrapht.experimental.alg" ], [ "ExactAlgorithm", "org.jgrapht.experimental.alg" ], [ "ListenableGraph", "org.jgrapht" ], [ "ModifiableInteger", "org.jgrapht.util" ], [ "FibonacciHeapNode", "org.jgrapht.util" ], [ "WeightCombiner", "org.jgrapht.util" ], [ "FibonacciHeap", "org.jgrapht.util" ], [ "TypeUtil", "org.jgrapht.util" ], [ "ArrayUnenforcedSet", "org.jgrapht.util" ], [ "VertexPair", "org.jgrapht.util" ], [ "MathUtil", "org.jgrapht.util" ], [ "PrefetchIterator", "org.jgrapht.util" ], [ "VertexFactory", "org.jgrapht" ], [ "Graph", "org.jgrapht" ], [ "GraphPath", "org.jgrapht" ], [ "UndirectedGraphUnion", "org.jgrapht.graph" ], [ "SimpleGraph", "org.jgrapht.graph" ], [ "MixedGraphUnion", "org.jgrapht.graph" ], [ "DefaultGraphMapping", "org.jgrapht.graph" ], [ "WeightedPseudograph", "org.jgrapht.graph" ], [ "UndirectedMaskSubgraph", "org.jgrapht.graph" ], [ "MaskEdgeSet", "org.jgrapht.graph" ], [ "Pseudograph", "org.jgrapht.graph" ], [ "MaskFunctor", "org.jgrapht.graph" ], [ "GraphUnion", "org.jgrapht.graph" ], [ "DirectedMaskSubgraph", "org.jgrapht.graph" ], [ "DirectedMultigraph", "org.jgrapht.graph" ], [ "AbstractBaseGraph", "org.jgrapht.graph" ], [ "DirectedWeightedPseudograph", "org.jgrapht.graph" ], [ "Multigraph", "org.jgrapht.graph" ], [ "DefaultDirectedGraph", "org.jgrapht.graph" ], [ "DefaultWeightedEdge", "org.jgrapht.graph" ], [ "ListenableDirectedWeightedGraph", "org.jgrapht.graph" ], [ "DirectedGraphUnion", "org.jgrapht.graph" ], [ "AsUnweightedGraph", "org.jgrapht.graph" ], [ "EdgeSetFactory", "org.jgrapht.graph" ], [ "GraphDelegator", "org.jgrapht.graph" ], [ "DefaultListenableGraph", "org.jgrapht.graph" ], [ "AsUndirectedGraph", "org.jgrapht.graph" ], [ "ClassBasedVertexFactory", "org.jgrapht.graph" ], [ "DefaultEdge", "org.jgrapht.graph" ], [ "MaskVertexSet", "org.jgrapht.graph" ], [ "ListenableUndirectedGraph", "org.jgrapht.graph" ], [ "DirectedWeightedSubgraph", "org.jgrapht.graph" ], [ "ListenableUndirectedWeightedGraph", "org.jgrapht.graph" ], [ "AsUnweightedDirectedGraph", "org.jgrapht.graph" ], [ "DefaultDirectedWeightedGraph", "org.jgrapht.graph" ], [ "IntrusiveEdge", "org.jgrapht.graph" ], [ "UnmodifiableGraph", "org.jgrapht.graph" ], [ "GraphPathImpl", "org.jgrapht.graph" ], [ "Subgraph", "org.jgrapht.graph" ], [ "UndirectedWeightedSubgraph", "org.jgrapht.graph" ], [ "DirectedPseudograph", "org.jgrapht.graph" ], [ "AbstractGraph", "org.jgrapht.graph" ], [ "MaskSubgraph", "org.jgrapht.graph" ], [ "ClassBasedEdgeFactory", "org.jgrapht.graph" ], [ "SimpleWeightedGraph", "org.jgrapht.graph" ], [ "AsWeightedDirectedGraph", "org.jgrapht.graph" ], [ "SimpleDirectedWeightedGraph", "org.jgrapht.graph" ], [ "UnmodifiableUndirectedGraph", "org.jgrapht.graph" ], [ "UndirectedSubgraph", "org.jgrapht.graph" ], [ "WeightedMultigraph", "org.jgrapht.graph" ], [ "EdgeReversedGraph", "org.jgrapht.graph" ], [ "AsWeightedGraph", "org.jgrapht.graph" ], [ "DirectedGraphBuilder", "org.jgrapht.graph.builder" ], [ "UndirectedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "UndirectedGraphBuilder", "org.jgrapht.graph.builder" ], [ "UndirectedWeightedGraphBuilder", "org.jgrapht.graph.builder" ], [ "UndirectedWeightedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "DirectedWeightedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "AbstractGraphBuilder", "org.jgrapht.graph.builder" ], [ "DirectedWeightedGraphBuilder", "org.jgrapht.graph.builder" ], [ "DirectedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "ListenableDirectedGraph", "org.jgrapht.graph" ], [ "UnmodifiableDirectedGraph", "org.jgrapht.graph" ], [ "SimpleGraphPath", "org.jgrapht.graph" ], [ "ParanoidGraph", "org.jgrapht.graph" ], [ "DirectedWeightedMultigraph", "org.jgrapht.graph" ], [ "DirectedSubgraph", "org.jgrapht.graph" ], [ "SimpleDirectedGraph", "org.jgrapht.graph" ], [ "GraphHelper", "org.jgrapht" ], [ "Graphs", "org.jgrapht" ], [ "DirectedGraph", "org.jgrapht" ], [ "WeightedGraph", "org.jgrapht" ], [ "HyperCubeGraphGenerator", "org.jgrapht.generate" ], [ "RingGraphGenerator", "org.jgrapht.generate" ], [ "SimpleWeightedGraphMatrixGenerator", "org.jgrapht.generate" ], [ "WeightedGraphGenerator", "org.jgrapht.generate" ], [ "WheelGraphGenerator", "org.jgrapht.generate" ], [ "GridGraphGenerator", "org.jgrapht.generate" ], [ "ScaleFreeGraphGenerator", "org.jgrapht.generate" ], [ "SimpleWeightedBipartiteGraphMatrixGenerator", "org.jgrapht.generate" ], [ "LinearGraphGenerator", "org.jgrapht.generate" ], [ "CompleteGraphGenerator", "org.jgrapht.generate" ], [ "RandomGraphGenerator", "org.jgrapht.generate" ], [ "WeightedGraphGeneratorAdapter", "org.jgrapht.generate" ], [ "EmptyGraphGenerator", "org.jgrapht.generate" ], [ "CompleteBipartiteGraphGenerator", "org.jgrapht.generate" ], [ "GraphGenerator", "org.jgrapht.generate" ], [ "StarGraphGenerator", "org.jgrapht.generate" ], [ "UndirectedGraph", "org.jgrapht" ], [ "TopologicalOrderIterator", "org.jgrapht.traverse" ], [ "CrossComponentIterator", "org.jgrapht.traverse" ], [ "AbstractGraphIterator", "org.jgrapht.traverse" ], [ "ClosestFirstIterator", "org.jgrapht.traverse" ], [ "BreadthFirstIterator", "org.jgrapht.traverse" ], [ "DepthFirstIterator", "org.jgrapht.traverse" ], [ "GraphIterator", "org.jgrapht.traverse" ], [ "EdgeFactory", "org.jgrapht" ], [ "GraphMapping", "org.jgrapht" ], [ "VertexSetListener", "org.jgrapht.event" ], [ "EdgeTraversalEvent", "org.jgrapht.event" ], [ "TraversalListener", "org.jgrapht.event" ], [ "GraphEdgeChangeEvent", "org.jgrapht.event" ], [ "VertexTraversalEvent", "org.jgrapht.event" ], [ "GraphChangeEvent", "org.jgrapht.event" ], [ "GraphListener", "org.jgrapht.event" ], [ "TraversalListenerAdapter", "org.jgrapht.event" ], [ "ConnectedComponentTraversalEvent", "org.jgrapht.event" ], [ "GraphVertexChangeEvent", "org.jgrapht.event" ], [ "TarjanLowestCommonAncestor", "org.jgrapht.alg" ], [ "PrimMinimumSpanningTree", "org.jgrapht.alg" ], [ "BlockCutpointGraph", "org.jgrapht.alg" ], [ "AllDirectedPaths", "org.jgrapht.alg" ], [ "KShortestPathsIterator", "org.jgrapht.alg" ], [ "KruskalMinimumSpanningTree", "org.jgrapht.alg" ], [ "StrongConnectivityInspector", "org.jgrapht.alg" ], [ "VF2State", "org.jgrapht.alg.isomorphism" ], [ "VF2GraphIsomorphismState", "org.jgrapht.alg.isomorphism" ], [ "VF2AbstractIsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "VF2SubgraphIsomorphismState", "org.jgrapht.alg.isomorphism" ], [ "IsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "VF2SubgraphIsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "GraphOrdering", "org.jgrapht.alg.isomorphism" ], [ "VF2GraphMappingIterator", "org.jgrapht.alg.isomorphism" ], [ "IsomorphicGraphMapping", "org.jgrapht.alg.isomorphism" ], [ "VF2GraphIsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "VF2SubgraphMappingIterator", "org.jgrapht.alg.isomorphism" ], [ "VF2MappingIterator", "org.jgrapht.alg.isomorphism" ], [ "BronKerboschCliqueFinder", "org.jgrapht.alg" ], [ "ChromaticNumber", "org.jgrapht.alg" ], [ "KosarajuStrongConnectivityInspector", "org.jgrapht.alg" ], [ "BellmanFordShortestPath", "org.jgrapht.alg" ], [ "DijkstraShortestPath", "org.jgrapht.alg" ], [ "RankingPathElement", "org.jgrapht.alg" ], [ "AStarShortestPath", "org.jgrapht.alg" ], [ "EdmondsKarpMaximumFlow", "org.jgrapht.alg" ], [ "BellmanFordPathElement", "org.jgrapht.alg" ], [ "FloydWarshallShortestPaths", "org.jgrapht.alg" ], [ "UnionFind", "org.jgrapht.alg.util" ], [ "AlwaysEqualComparator", "org.jgrapht.alg.util" ], [ "Extension", "org.jgrapht.alg.util" ], [ "VertexDegreeComparator", "org.jgrapht.alg.util" ], [ "Pair", "org.jgrapht.alg.util" ], [ "GabowStrongConnectivityInspector", "org.jgrapht.alg" ], [ "HawickJamesSimpleCycles", "org.jgrapht.alg.cycle" ], [ "DirectedSimpleCycles", "org.jgrapht.alg.cycle" ], [ "JohnsonSimpleCycles", "org.jgrapht.alg.cycle" ], [ "TiernanSimpleCycles", "org.jgrapht.alg.cycle" ], [ "UndirectedCycleBase", "org.jgrapht.alg.cycle" ], [ "PatonCycleBase", "org.jgrapht.alg.cycle" ], [ "TarjanSimpleCycles", "org.jgrapht.alg.cycle" ], [ "SzwarcfiterLauerSimpleCycles", "org.jgrapht.alg.cycle" ], [ "BiconnectivityInspector", "org.jgrapht.alg" ], [ "ConnectivityInspector", "org.jgrapht.alg" ], [ "MinSourceSinkCut", "org.jgrapht.alg" ], [ "RankingPathElementList", "org.jgrapht.alg" ], [ "EdmondsBlossomShrinking", "org.jgrapht.alg" ], [ "TransitiveClosure", "org.jgrapht.alg" ], [ "HopcroftKarpBipartiteMatching", "org.jgrapht.alg" ], [ "StoerWagnerMinimumCut", "org.jgrapht.alg" ], [ "AbstractPathElementList", "org.jgrapht.alg" ], [ "KuhnMunkresMinimalWeightBipartitePerfectMatching", "org.jgrapht.alg" ], [ "TransitiveReduction", "org.jgrapht.alg" ], [ "EulerianCircuit", "org.jgrapht.alg" ], [ "DirectedNeighborIndex", "org.jgrapht.alg" ], [ "NaiveLcaFinder", "org.jgrapht.alg" ], [ "MaximumWeightBipartiteMatching", "org.jgrapht.alg" ], [ "HamiltonianCycle", "org.jgrapht.alg" ], [ "KShortestPaths", "org.jgrapht.alg" ], [ "NeighborIndex", "org.jgrapht.alg" ], [ "VertexCovers", "org.jgrapht.alg" ], [ "CycleDetector", "org.jgrapht.alg" ], [ "AStarAdmissibleHeuristic", "org.jgrapht.alg.interfaces" ], [ "MinimumSpanningTree", "org.jgrapht.alg.interfaces" ], [ "WeightedMatchingAlgorithm", "org.jgrapht.alg.interfaces" ], [ "StrongConnectivityAlgorithm", "org.jgrapht.alg.interfaces" ], [ "MaximumFlowAlgorithm", "org.jgrapht.alg.interfaces" ], [ "MatchingAlgorithm", "org.jgrapht.alg.interfaces" ], [ "CliqueMinimalSeparatorDecomposition", "org.jgrapht.alg" ], [ "BellmanFordIterator", "org.jgrapht.alg" ], [ "AbstractPathElement", "org.jgrapht.alg" ], [ "EdmondsKarpMaximumFlow", "org.jgrapht.alg.flow" ], [ "PushRelabelMaximumFlow", "org.jgrapht.alg.flow" ], [ "MaximumFlowAlgorithmBase", "org.jgrapht.alg.flow" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "addVertices", "org.jgrapht.experimental", "RandomGraphHelper", "public static Object[] addVertices(Graph target, VertexFactory vertexFactory, int numVertices)" ], [ "isEmpty", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isEmpty(Graph<V, E> g)" ], [ "isComplete", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isComplete(Graph<V, E> g)" ], [ "isConnected", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isConnected(Graph<V, E> g)" ], [ "isTree", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isTree(Graph<V, E> g)" ], [ "isBipartite", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isBipartite(Graph<V, E> g)" ], [ "union", "org.jgrapht.util", "FibonacciHeap", "public static <T> FibonacciHeap<T> union(FibonacciHeap<T> h1, FibonacciHeap<T> h2)" ], [ "uncheckedCast", "org.jgrapht.util", "TypeUtil", "public static <T> T uncheckedCast(Object o, TypeUtil<T> typeDecl)" ], [ "factorial", "org.jgrapht.util", "MathUtil", "public static long factorial(int N)" ], [ "builder", "org.jgrapht.graph", "SimpleGraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends SimpleGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleGraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends SimpleGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "WeightedPseudograph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "WeightedPseudograph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "Pseudograph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Pseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "Pseudograph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Pseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedMultigraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedMultigraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedPseudograph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedPseudograph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "Multigraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Multigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "Multigraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Multigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DefaultDirectedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DefaultDirectedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DefaultDirectedWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DefaultDirectedWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedPseudograph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedPseudograph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "SimpleWeightedGraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends SimpleWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleWeightedGraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends SimpleWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends SimpleDirectedWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends SimpleDirectedWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "WeightedMultigraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "WeightedMultigraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedMultigraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedMultigraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends SimpleDirectedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends SimpleDirectedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "addEdge", "org.jgrapht", "Graphs", "public static <V, E> E addEdge(Graph<V, E> g, V sourceVertex, V targetVertex, double weight)" ], [ "addEdgeWithVertices", "org.jgrapht", "Graphs", "public static <V, E> E addEdgeWithVertices(Graph<V, E> g, V sourceVertex, V targetVertex)" ], [ "addEdgeWithVertices", "org.jgrapht", "Graphs", "public static <V, E> boolean addEdgeWithVertices(Graph<V, E> targetGraph, Graph<V, E> sourceGraph, E edge)" ], [ "addEdgeWithVertices", "org.jgrapht", "Graphs", "public static <V, E> E addEdgeWithVertices(Graph<V, E> g, V sourceVertex, V targetVertex, double weight)" ], [ "addGraph", "org.jgrapht", "Graphs", "public static <V, E> boolean addGraph(Graph<? super V, ? super E> destination, Graph<V, E> source)" ], [ "addAllEdges", "org.jgrapht", "Graphs", "public static <V, E> boolean addAllEdges(Graph<? super V, ? super E> destination, Graph<V, E> source, Collection<? extends E> edges)" ], [ "addAllVertices", "org.jgrapht", "Graphs", "public static <V, E> boolean addAllVertices(Graph<? super V, ? super E> destination, Collection<? extends V> vertices)" ], [ "neighborListOf", "org.jgrapht", "Graphs", "public static <V, E> List<V> neighborListOf(Graph<V, E> g, V vertex)" ], [ "predecessorListOf", "org.jgrapht", "Graphs", "public static <V, E> List<V> predecessorListOf(DirectedGraph<V, E> g, V vertex)" ], [ "successorListOf", "org.jgrapht", "Graphs", "public static <V, E> List<V> successorListOf(DirectedGraph<V, E> g, V vertex)" ], [ "undirectedGraph", "org.jgrapht", "Graphs", "public static <V, E> UndirectedGraph<V, E> undirectedGraph(Graph<V, E> g)" ], [ "testIncidence", "org.jgrapht", "Graphs", "public static <V, E> boolean testIncidence(Graph<V, E> g, E e, V v)" ], [ "getOppositeVertex", "org.jgrapht", "Graphs", "public static <V, E> V getOppositeVertex(Graph<V, E> g, E e, V v)" ], [ "getPathVertexList", "org.jgrapht", "Graphs", "public static <V, E> List<V> getPathVertexList(GraphPath<V, E> path)" ], [ "range", "org.jgrapht.generate", "SimpleWeightedGraphMatrixGenerator", "public static int[] range(final int from, final int to)" ], [ "createGraphSpecifics", "org.jgrapht.traverse", "CrossComponentIterator", "static <V, E> Specifics<V, E> createGraphSpecifics(Graph<V, E> g)" ], [ "findGreedyChromaticNumber", "org.jgrapht.alg", "ChromaticNumber", "public static <V, E> int findGreedyChromaticNumber(UndirectedGraph<V, E> g)" ], [ "findGreedyColoredGroups", "org.jgrapht.alg", "ChromaticNumber", "public static <V, E> Map<Integer, Set<V>> findGreedyColoredGroups(UndirectedGraph<V, E> g)" ], [ "findPathBetween", "org.jgrapht.alg", "BellmanFordShortestPath", "public static <V, E> List<E> findPathBetween(Graph<V, E> graph, V startVertex, V endVertex)" ], [ "findPathBetween", "org.jgrapht.alg", "DijkstraShortestPath", "public static <V, E> List<E> findPathBetween(Graph<V, E> graph, V startVertex, V endVertex)" ], [ "of", "org.jgrapht.alg.util", "Pair", "public static <A, B> Pair<A, B> of(A a, B b)" ], [ "isEulerian", "org.jgrapht.alg", "EulerianCircuit", "public static <V, E> boolean isEulerian(UndirectedGraph<V, E> g)" ], [ "getEulerianCircuitVertices", "org.jgrapht.alg", "EulerianCircuit", "public static <V, E> List<V> getEulerianCircuitVertices(UndirectedGraph<V, E> g)" ], [ "getApproximateOptimalForCompleteGraph", "org.jgrapht.alg", "HamiltonianCycle", "public static <V, E> List<V> getApproximateOptimalForCompleteGraph(SimpleWeightedGraph<V, E> g)" ], [ "find2ApproximationCover", "org.jgrapht.alg", "VertexCovers", "public static <V, E> Set<V> find2ApproximationCover(Graph<V, E> g)" ], [ "findGreedyCover", "org.jgrapht.alg", "VertexCovers", "public static <V, E> Set<V> findGreedyCover(UndirectedGraph<V, E> g)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "BEST_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int BEST_ORDER = 0;" ], [ "NATURAL_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int NATURAL_ORDER = 1;" ], [ "SMALLEST_DEGREE_LAST_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int SMALLEST_DEGREE_LAST_ORDER = 2;" ], [ "LARGEST_SATURATION_FIRST_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int LARGEST_SATURATION_FIRST_ORDER = 3;" ], [ "DEFAULT_EDGE_WEIGHT", "org.jgrapht", "WeightedGraph", "public static double DEFAULT_EDGE_WEIGHT = 1.0;" ], [ "HUB_VERTEX", "org.jgrapht.generate", "WheelGraphGenerator", "public static final String HUB_VERTEX = \"Hub Vertex\";" ], [ "CORNER_VERTEX", "org.jgrapht.generate", "GridGraphGenerator", "public static final String CORNER_VERTEX = \"Corner Vertex\";" ], [ "START_VERTEX", "org.jgrapht.generate", "LinearGraphGenerator", "public static final String START_VERTEX = \"Start Vertex\";" ], [ "END_VERTEX", "org.jgrapht.generate", "LinearGraphGenerator", "public static final String END_VERTEX = \"End Vertex\";" ], [ "CENTER_VERTEX", "org.jgrapht.generate", "StarGraphGenerator", "public static final String CENTER_VERTEX = \"Center Vertex\";" ], [ "SENTINEL", "org.jgrapht.traverse", "DepthFirstIterator", "public static final Object SENTINEL = new Object();" ], [ "BEFORE_EDGE_ADDED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int BEFORE_EDGE_ADDED = 21;" ], [ "BEFORE_EDGE_REMOVED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int BEFORE_EDGE_REMOVED = 22;" ], [ "EDGE_ADDED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int EDGE_ADDED = 23;" ], [ "EDGE_REMOVED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int EDGE_REMOVED = 24;" ], [ "CONNECTED_COMPONENT_STARTED", "org.jgrapht.event", "ConnectedComponentTraversalEvent", "public static final int CONNECTED_COMPONENT_STARTED = 31;" ], [ "CONNECTED_COMPONENT_FINISHED", "org.jgrapht.event", "ConnectedComponentTraversalEvent", "public static final int CONNECTED_COMPONENT_FINISHED = 32;" ], [ "BEFORE_VERTEX_ADDED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int BEFORE_VERTEX_ADDED = 11;" ], [ "BEFORE_VERTEX_REMOVED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int BEFORE_VERTEX_REMOVED = 12;" ], [ "VERTEX_ADDED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int VERTEX_ADDED = 13;" ], [ "VERTEX_REMOVED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int VERTEX_REMOVED = 14;" ], [ "NULL_NODE", "org.jgrapht.alg.isomorphism", "VF2State", "public static final int NULL_NODE = -1;" ], [ "DEBUG", "org.jgrapht.alg.isomorphism", "VF2State", "protected static final boolean DEBUG = false;" ], [ "DEFAULT_EPSILON", "org.jgrapht.alg", "EdmondsKarpMaximumFlow", "public static final double DEFAULT_EPSILON = 0.000000001;" ], [ "INSTANCE", "org.jgrapht.alg", "TransitiveClosure", "public static final TransitiveClosure INSTANCE = new TransitiveClosure();" ], [ "INSTANCE", "org.jgrapht.alg", "TransitiveReduction", "public static final TransitiveReduction INSTANCE = new TransitiveReduction();" ], [ "NEGATIVE_UNDIRECTED_EDGE", "org.jgrapht.alg", "BellmanFordIterator", "protected final static String NEGATIVE_UNDIRECTED_EDGE = \"Negative\" + \"edge-weights are not allowed in an unidrected graph!\";" ], [ "DEFAULT_EPSILON", "org.jgrapht.alg.flow", "MaximumFlowAlgorithmBase", "public static final double DEFAULT_EPSILON = 1e-9;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "v", "", "V" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getEdgeFactory", "org.jgrapht.graph", "Subgraph", "public EdgeFactory<V, E> getEdgeFactory()" ], [ "equals", "org.jgrapht.graph", "AbstractGraph", "public boolean equals(Object arg0)" ], [ "containsEdge", "org.jgrapht.graph", "Subgraph", "public boolean containsEdge(E e)" ], [ "edgeSet", "org.jgrapht.graph", "Subgraph", "public Set<E> edgeSet()" ], [ "removeEdge", "org.jgrapht.graph", "Subgraph", "public E removeEdge(V sourceVertex, V targetVertex)" ], [ "addEdge", "org.jgrapht.graph", "Subgraph", "public E addEdge(V sourceVertex, V targetVertex)" ], [ "edgesOf", "org.jgrapht.graph", "Subgraph", "public Set<E> edgesOf(V vertex)" ], [ "containsVertex", "org.jgrapht.graph", "Subgraph", "public boolean containsVertex(V v)" ], [ "containsEdge", "org.jgrapht.graph", "AbstractGraph", "public boolean containsEdge(V arg0, V arg1)" ], [ "toString", "org.jgrapht.graph", "AbstractGraph", "public String toString()" ], [ "removeAllEdges", "org.jgrapht.graph", "AbstractGraph", "public boolean removeAllEdges(Collection<? extends E> arg0)" ], [ "assertVertexExist", "org.jgrapht.graph", "AbstractGraph", "protected boolean assertVertexExist(V arg0)" ], [ "getEdgeWeight", "org.jgrapht.graph", "Subgraph", "public double getEdgeWeight(E e)" ], [ "getEdgeSource", "org.jgrapht.graph", "Subgraph", "public V getEdgeSource(E e)" ], [ "removeAllEdges", "org.jgrapht.graph", "AbstractGraph", "protected boolean removeAllEdges(E[] arg0)" ], [ "getEdge", "org.jgrapht.graph", "Subgraph", "public E getEdge(V sourceVertex, V targetVertex)" ], [ "hashCode", "org.jgrapht.graph", "AbstractGraph", "public int hashCode()" ], [ "toStringFromSets", "org.jgrapht.graph", "AbstractGraph", "protected String toStringFromSets(Collection<? extends V> arg0, Collection<? extends E> arg1, boolean arg2)" ], [ "addEdge", "org.jgrapht.graph", "Subgraph", "public boolean addEdge(V sourceVertex, V targetVertex, E e)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "removeAllEdges", "org.jgrapht.graph", "AbstractGraph", "public Set<E> removeAllEdges(V arg0, V arg1)" ], [ "addVertex", "org.jgrapht.graph", "Subgraph", "public boolean addVertex(V v)" ], [ "getAllEdges", "org.jgrapht.graph", "Subgraph", "public Set<E> getAllEdges(V sourceVertex, V targetVertex)" ], [ "getBase", "org.jgrapht.graph", "Subgraph", "public G getBase()" ], [ "removeAllVertices", "org.jgrapht.graph", "AbstractGraph", "public boolean removeAllVertices(Collection<? extends V> arg0)" ], [ "vertexSet", "org.jgrapht.graph", "Subgraph", "public Set<V> vertexSet()" ], [ "removeEdge", "org.jgrapht.graph", "Subgraph", "public boolean removeEdge(E e)" ], [ "getEdgeTarget", "org.jgrapht.graph", "Subgraph", "public V getEdgeTarget(E e)" ], [ "removeVertex", "org.jgrapht.graph", "Subgraph", "public boolean removeVertex(V v)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "edgeSet", "org.jgrapht.graph", "Subgraph", "Set<E> edgeSet = new LinkedHashSet<E>();" ], [ "vertexSet", "org.jgrapht.graph", "Subgraph", "Set<V> vertexSet = new LinkedHashSet<V>();" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 26010,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "jgrapht-core-0.9.2",
  "packageName" : "org.jgrapht.graph",
  "className" : "SimpleDirectedWeightedGraph",
  "javadocTag" : "@param ef the edge factory of the new graph.",
  "methodJavadoc" : "    /**\n     * Creates a new simple directed weighted graph with the specified edge\n     * factory.\n     *\n     * @param ef the edge factory of the new graph.\n     */",
  "methodSourceCode" : "public SimpleDirectedWeightedGraph(EdgeFactory<V, E> ef){\n    super(ef);\n}",
  "classJavadoc" : "/**\n * A simple directed weighted graph. A simple directed weighted graph is a\n * simple directed graph for which edges are assigned weights.\n */",
  "classSourceCode" : "/* ==========================================\n * JGraphT : a free Java graph-theory library\n * ==========================================\n *\n * Project Info:  http://jgrapht.sourceforge.net/\n * Project Creator:  Barak Naveh (http://sourceforge.net/users/barak_naveh)\n *\n * (C) Copyright 2003-2008, by Barak Naveh and Contributors.\n *\n * This program and the accompanying materials are dual-licensed under\n * either\n *\n * (a) the terms of the GNU Lesser General Public License version 2.1\n * as published by the Free Software Foundation, or (at your option) any\n * later version.\n *\n * or (per the licensee's choosing)\n *\n * (b) the terms of the Eclipse Public License v1.0 as published by\n * the Eclipse Foundation.\n */\n/* --------------------------------\n * SimpleDirectedWeightedGraph.java\n * --------------------------------\n * (C) Copyright 2003-2008, by Barak Naveh and Contributors.\n *\n * Original Author:  Barak Naveh\n * Contributor(s):   Christian Hammer\n *\n * $Id$\n *\n * Changes\n * -------\n * 05-Aug-2003 : Initial revision (BN);\n * 06-Aug-2005 : Made generic (CH);\n * 28-May-2006 : Moved connectivity info from edge to graph (JVS);\n *\n */\npackage org.jgrapht.graph;\n\nimport org.jgrapht.*;\nimport org.jgrapht.graph.builder.*;\n\n\n/**\n * A simple directed weighted graph. A simple directed weighted graph is a\n * simple directed graph for which edges are assigned weights.\n */\npublic class SimpleDirectedWeightedGraph<V, E>\n    extends SimpleDirectedGraph<V, E>\n    implements WeightedGraph<V, E>\n{\n    private static final long serialVersionUID = 3904960841681220919L;\n\n    /**\n     * Creates a new simple directed weighted graph with the specified edge\n     * factory.\n     *\n     * @param ef the edge factory of the new graph.\n     */\n    public SimpleDirectedWeightedGraph(EdgeFactory<V, E> ef)\n    {\n        super(ef);\n    }\n\n    /**\n     * Creates a new simple directed weighted graph.\n     *\n     * @param edgeClass class on which to base factory for edges\n     */\n    public SimpleDirectedWeightedGraph(Class<? extends E> edgeClass)\n    {\n        this(new ClassBasedEdgeFactory<V, E>(edgeClass));\n    }\n\n    public static <V, E> DirectedWeightedGraphBuilderBase<V,\n        E, ? extends SimpleDirectedWeightedGraph<V, E>, ?> builder(\n        Class<? extends E> edgeClass)\n    {\n        return new DirectedWeightedGraphBuilder<V,\n            E, SimpleDirectedWeightedGraph<V, E>>(\n                new SimpleDirectedWeightedGraph<V, E>(edgeClass));\n    }\n\n    public static <V, E> DirectedWeightedGraphBuilderBase<V,\n        E, ? extends SimpleDirectedWeightedGraph<V, E>, ?> builder(\n        EdgeFactory<V, E> ef)\n    {\n        return new DirectedWeightedGraphBuilder<V,\n            E, SimpleDirectedWeightedGraph<V, E>>(\n                new SimpleDirectedWeightedGraph<V, E>(ef));\n    }\n}\n\n// End SimpleDirectedWeightedGraph.java\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "PartiteRandomGraphGenerator", "org.jgrapht.experimental" ], [ "RandomGraphHelper", "org.jgrapht.experimental" ], [ "GraphReader", "org.jgrapht.experimental" ], [ "DirectedAcyclicGraph", "org.jgrapht.experimental.dag" ], [ "GraphSquare", "org.jgrapht.experimental" ], [ "UniformRandomGraphGenerator", "org.jgrapht.experimental" ], [ "GraphTests", "org.jgrapht.experimental" ], [ "ApproximationAlgorithm", "org.jgrapht.experimental.alg" ], [ "BrownBacktrackColoring", "org.jgrapht.experimental.alg.color" ], [ "GreedyColoring", "org.jgrapht.experimental.alg.color" ], [ "IntArrayGraphAlgorithm", "org.jgrapht.experimental.alg" ], [ "ExactAlgorithm", "org.jgrapht.experimental.alg" ], [ "ListenableGraph", "org.jgrapht" ], [ "ModifiableInteger", "org.jgrapht.util" ], [ "FibonacciHeapNode", "org.jgrapht.util" ], [ "WeightCombiner", "org.jgrapht.util" ], [ "FibonacciHeap", "org.jgrapht.util" ], [ "TypeUtil", "org.jgrapht.util" ], [ "ArrayUnenforcedSet", "org.jgrapht.util" ], [ "VertexPair", "org.jgrapht.util" ], [ "MathUtil", "org.jgrapht.util" ], [ "PrefetchIterator", "org.jgrapht.util" ], [ "VertexFactory", "org.jgrapht" ], [ "Graph", "org.jgrapht" ], [ "GraphPath", "org.jgrapht" ], [ "UndirectedGraphUnion", "org.jgrapht.graph" ], [ "SimpleGraph", "org.jgrapht.graph" ], [ "MixedGraphUnion", "org.jgrapht.graph" ], [ "DefaultGraphMapping", "org.jgrapht.graph" ], [ "WeightedPseudograph", "org.jgrapht.graph" ], [ "UndirectedMaskSubgraph", "org.jgrapht.graph" ], [ "MaskEdgeSet", "org.jgrapht.graph" ], [ "Pseudograph", "org.jgrapht.graph" ], [ "MaskFunctor", "org.jgrapht.graph" ], [ "GraphUnion", "org.jgrapht.graph" ], [ "DirectedMaskSubgraph", "org.jgrapht.graph" ], [ "DirectedMultigraph", "org.jgrapht.graph" ], [ "AbstractBaseGraph", "org.jgrapht.graph" ], [ "DirectedWeightedPseudograph", "org.jgrapht.graph" ], [ "Multigraph", "org.jgrapht.graph" ], [ "DefaultDirectedGraph", "org.jgrapht.graph" ], [ "DefaultWeightedEdge", "org.jgrapht.graph" ], [ "ListenableDirectedWeightedGraph", "org.jgrapht.graph" ], [ "DirectedGraphUnion", "org.jgrapht.graph" ], [ "AsUnweightedGraph", "org.jgrapht.graph" ], [ "EdgeSetFactory", "org.jgrapht.graph" ], [ "GraphDelegator", "org.jgrapht.graph" ], [ "DefaultListenableGraph", "org.jgrapht.graph" ], [ "AsUndirectedGraph", "org.jgrapht.graph" ], [ "ClassBasedVertexFactory", "org.jgrapht.graph" ], [ "DefaultEdge", "org.jgrapht.graph" ], [ "MaskVertexSet", "org.jgrapht.graph" ], [ "ListenableUndirectedGraph", "org.jgrapht.graph" ], [ "DirectedWeightedSubgraph", "org.jgrapht.graph" ], [ "ListenableUndirectedWeightedGraph", "org.jgrapht.graph" ], [ "AsUnweightedDirectedGraph", "org.jgrapht.graph" ], [ "DefaultDirectedWeightedGraph", "org.jgrapht.graph" ], [ "IntrusiveEdge", "org.jgrapht.graph" ], [ "UnmodifiableGraph", "org.jgrapht.graph" ], [ "GraphPathImpl", "org.jgrapht.graph" ], [ "Subgraph", "org.jgrapht.graph" ], [ "UndirectedWeightedSubgraph", "org.jgrapht.graph" ], [ "DirectedPseudograph", "org.jgrapht.graph" ], [ "AbstractGraph", "org.jgrapht.graph" ], [ "MaskSubgraph", "org.jgrapht.graph" ], [ "ClassBasedEdgeFactory", "org.jgrapht.graph" ], [ "SimpleWeightedGraph", "org.jgrapht.graph" ], [ "AsWeightedDirectedGraph", "org.jgrapht.graph" ], [ "SimpleDirectedWeightedGraph", "org.jgrapht.graph" ], [ "UnmodifiableUndirectedGraph", "org.jgrapht.graph" ], [ "UndirectedSubgraph", "org.jgrapht.graph" ], [ "WeightedMultigraph", "org.jgrapht.graph" ], [ "EdgeReversedGraph", "org.jgrapht.graph" ], [ "AsWeightedGraph", "org.jgrapht.graph" ], [ "DirectedGraphBuilder", "org.jgrapht.graph.builder" ], [ "UndirectedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "UndirectedGraphBuilder", "org.jgrapht.graph.builder" ], [ "UndirectedWeightedGraphBuilder", "org.jgrapht.graph.builder" ], [ "UndirectedWeightedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "DirectedWeightedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "AbstractGraphBuilder", "org.jgrapht.graph.builder" ], [ "DirectedWeightedGraphBuilder", "org.jgrapht.graph.builder" ], [ "DirectedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "ListenableDirectedGraph", "org.jgrapht.graph" ], [ "UnmodifiableDirectedGraph", "org.jgrapht.graph" ], [ "SimpleGraphPath", "org.jgrapht.graph" ], [ "ParanoidGraph", "org.jgrapht.graph" ], [ "DirectedWeightedMultigraph", "org.jgrapht.graph" ], [ "DirectedSubgraph", "org.jgrapht.graph" ], [ "SimpleDirectedGraph", "org.jgrapht.graph" ], [ "GraphHelper", "org.jgrapht" ], [ "Graphs", "org.jgrapht" ], [ "DirectedGraph", "org.jgrapht" ], [ "WeightedGraph", "org.jgrapht" ], [ "HyperCubeGraphGenerator", "org.jgrapht.generate" ], [ "RingGraphGenerator", "org.jgrapht.generate" ], [ "SimpleWeightedGraphMatrixGenerator", "org.jgrapht.generate" ], [ "WeightedGraphGenerator", "org.jgrapht.generate" ], [ "WheelGraphGenerator", "org.jgrapht.generate" ], [ "GridGraphGenerator", "org.jgrapht.generate" ], [ "ScaleFreeGraphGenerator", "org.jgrapht.generate" ], [ "SimpleWeightedBipartiteGraphMatrixGenerator", "org.jgrapht.generate" ], [ "LinearGraphGenerator", "org.jgrapht.generate" ], [ "CompleteGraphGenerator", "org.jgrapht.generate" ], [ "RandomGraphGenerator", "org.jgrapht.generate" ], [ "WeightedGraphGeneratorAdapter", "org.jgrapht.generate" ], [ "EmptyGraphGenerator", "org.jgrapht.generate" ], [ "CompleteBipartiteGraphGenerator", "org.jgrapht.generate" ], [ "GraphGenerator", "org.jgrapht.generate" ], [ "StarGraphGenerator", "org.jgrapht.generate" ], [ "UndirectedGraph", "org.jgrapht" ], [ "TopologicalOrderIterator", "org.jgrapht.traverse" ], [ "CrossComponentIterator", "org.jgrapht.traverse" ], [ "AbstractGraphIterator", "org.jgrapht.traverse" ], [ "ClosestFirstIterator", "org.jgrapht.traverse" ], [ "BreadthFirstIterator", "org.jgrapht.traverse" ], [ "DepthFirstIterator", "org.jgrapht.traverse" ], [ "GraphIterator", "org.jgrapht.traverse" ], [ "EdgeFactory", "org.jgrapht" ], [ "GraphMapping", "org.jgrapht" ], [ "VertexSetListener", "org.jgrapht.event" ], [ "EdgeTraversalEvent", "org.jgrapht.event" ], [ "TraversalListener", "org.jgrapht.event" ], [ "GraphEdgeChangeEvent", "org.jgrapht.event" ], [ "VertexTraversalEvent", "org.jgrapht.event" ], [ "GraphChangeEvent", "org.jgrapht.event" ], [ "GraphListener", "org.jgrapht.event" ], [ "TraversalListenerAdapter", "org.jgrapht.event" ], [ "ConnectedComponentTraversalEvent", "org.jgrapht.event" ], [ "GraphVertexChangeEvent", "org.jgrapht.event" ], [ "TarjanLowestCommonAncestor", "org.jgrapht.alg" ], [ "PrimMinimumSpanningTree", "org.jgrapht.alg" ], [ "BlockCutpointGraph", "org.jgrapht.alg" ], [ "AllDirectedPaths", "org.jgrapht.alg" ], [ "KShortestPathsIterator", "org.jgrapht.alg" ], [ "KruskalMinimumSpanningTree", "org.jgrapht.alg" ], [ "StrongConnectivityInspector", "org.jgrapht.alg" ], [ "VF2State", "org.jgrapht.alg.isomorphism" ], [ "VF2GraphIsomorphismState", "org.jgrapht.alg.isomorphism" ], [ "VF2AbstractIsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "VF2SubgraphIsomorphismState", "org.jgrapht.alg.isomorphism" ], [ "IsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "VF2SubgraphIsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "GraphOrdering", "org.jgrapht.alg.isomorphism" ], [ "VF2GraphMappingIterator", "org.jgrapht.alg.isomorphism" ], [ "IsomorphicGraphMapping", "org.jgrapht.alg.isomorphism" ], [ "VF2GraphIsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "VF2SubgraphMappingIterator", "org.jgrapht.alg.isomorphism" ], [ "VF2MappingIterator", "org.jgrapht.alg.isomorphism" ], [ "BronKerboschCliqueFinder", "org.jgrapht.alg" ], [ "ChromaticNumber", "org.jgrapht.alg" ], [ "KosarajuStrongConnectivityInspector", "org.jgrapht.alg" ], [ "BellmanFordShortestPath", "org.jgrapht.alg" ], [ "DijkstraShortestPath", "org.jgrapht.alg" ], [ "RankingPathElement", "org.jgrapht.alg" ], [ "AStarShortestPath", "org.jgrapht.alg" ], [ "EdmondsKarpMaximumFlow", "org.jgrapht.alg" ], [ "BellmanFordPathElement", "org.jgrapht.alg" ], [ "FloydWarshallShortestPaths", "org.jgrapht.alg" ], [ "UnionFind", "org.jgrapht.alg.util" ], [ "AlwaysEqualComparator", "org.jgrapht.alg.util" ], [ "Extension", "org.jgrapht.alg.util" ], [ "VertexDegreeComparator", "org.jgrapht.alg.util" ], [ "Pair", "org.jgrapht.alg.util" ], [ "GabowStrongConnectivityInspector", "org.jgrapht.alg" ], [ "HawickJamesSimpleCycles", "org.jgrapht.alg.cycle" ], [ "DirectedSimpleCycles", "org.jgrapht.alg.cycle" ], [ "JohnsonSimpleCycles", "org.jgrapht.alg.cycle" ], [ "TiernanSimpleCycles", "org.jgrapht.alg.cycle" ], [ "UndirectedCycleBase", "org.jgrapht.alg.cycle" ], [ "PatonCycleBase", "org.jgrapht.alg.cycle" ], [ "TarjanSimpleCycles", "org.jgrapht.alg.cycle" ], [ "SzwarcfiterLauerSimpleCycles", "org.jgrapht.alg.cycle" ], [ "BiconnectivityInspector", "org.jgrapht.alg" ], [ "ConnectivityInspector", "org.jgrapht.alg" ], [ "MinSourceSinkCut", "org.jgrapht.alg" ], [ "RankingPathElementList", "org.jgrapht.alg" ], [ "EdmondsBlossomShrinking", "org.jgrapht.alg" ], [ "TransitiveClosure", "org.jgrapht.alg" ], [ "HopcroftKarpBipartiteMatching", "org.jgrapht.alg" ], [ "StoerWagnerMinimumCut", "org.jgrapht.alg" ], [ "AbstractPathElementList", "org.jgrapht.alg" ], [ "KuhnMunkresMinimalWeightBipartitePerfectMatching", "org.jgrapht.alg" ], [ "TransitiveReduction", "org.jgrapht.alg" ], [ "EulerianCircuit", "org.jgrapht.alg" ], [ "DirectedNeighborIndex", "org.jgrapht.alg" ], [ "NaiveLcaFinder", "org.jgrapht.alg" ], [ "MaximumWeightBipartiteMatching", "org.jgrapht.alg" ], [ "HamiltonianCycle", "org.jgrapht.alg" ], [ "KShortestPaths", "org.jgrapht.alg" ], [ "NeighborIndex", "org.jgrapht.alg" ], [ "VertexCovers", "org.jgrapht.alg" ], [ "CycleDetector", "org.jgrapht.alg" ], [ "AStarAdmissibleHeuristic", "org.jgrapht.alg.interfaces" ], [ "MinimumSpanningTree", "org.jgrapht.alg.interfaces" ], [ "WeightedMatchingAlgorithm", "org.jgrapht.alg.interfaces" ], [ "StrongConnectivityAlgorithm", "org.jgrapht.alg.interfaces" ], [ "MaximumFlowAlgorithm", "org.jgrapht.alg.interfaces" ], [ "MatchingAlgorithm", "org.jgrapht.alg.interfaces" ], [ "CliqueMinimalSeparatorDecomposition", "org.jgrapht.alg" ], [ "BellmanFordIterator", "org.jgrapht.alg" ], [ "AbstractPathElement", "org.jgrapht.alg" ], [ "EdmondsKarpMaximumFlow", "org.jgrapht.alg.flow" ], [ "PushRelabelMaximumFlow", "org.jgrapht.alg.flow" ], [ "MaximumFlowAlgorithmBase", "org.jgrapht.alg.flow" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "addVertices", "org.jgrapht.experimental", "RandomGraphHelper", "public static Object[] addVertices(Graph target, VertexFactory vertexFactory, int numVertices)" ], [ "isEmpty", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isEmpty(Graph<V, E> g)" ], [ "isComplete", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isComplete(Graph<V, E> g)" ], [ "isConnected", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isConnected(Graph<V, E> g)" ], [ "isTree", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isTree(Graph<V, E> g)" ], [ "isBipartite", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isBipartite(Graph<V, E> g)" ], [ "union", "org.jgrapht.util", "FibonacciHeap", "public static <T> FibonacciHeap<T> union(FibonacciHeap<T> h1, FibonacciHeap<T> h2)" ], [ "uncheckedCast", "org.jgrapht.util", "TypeUtil", "public static <T> T uncheckedCast(Object o, TypeUtil<T> typeDecl)" ], [ "factorial", "org.jgrapht.util", "MathUtil", "public static long factorial(int N)" ], [ "builder", "org.jgrapht.graph", "SimpleGraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends SimpleGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleGraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends SimpleGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "WeightedPseudograph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "WeightedPseudograph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "Pseudograph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Pseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "Pseudograph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Pseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedMultigraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedMultigraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedPseudograph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedPseudograph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "Multigraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Multigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "Multigraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Multigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DefaultDirectedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DefaultDirectedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DefaultDirectedWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DefaultDirectedWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedPseudograph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedPseudograph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "SimpleWeightedGraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends SimpleWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleWeightedGraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends SimpleWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends SimpleDirectedWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends SimpleDirectedWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "WeightedMultigraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "WeightedMultigraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedMultigraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedMultigraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends SimpleDirectedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends SimpleDirectedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "addEdge", "org.jgrapht", "Graphs", "public static <V, E> E addEdge(Graph<V, E> g, V sourceVertex, V targetVertex, double weight)" ], [ "addEdgeWithVertices", "org.jgrapht", "Graphs", "public static <V, E> E addEdgeWithVertices(Graph<V, E> g, V sourceVertex, V targetVertex)" ], [ "addEdgeWithVertices", "org.jgrapht", "Graphs", "public static <V, E> boolean addEdgeWithVertices(Graph<V, E> targetGraph, Graph<V, E> sourceGraph, E edge)" ], [ "addEdgeWithVertices", "org.jgrapht", "Graphs", "public static <V, E> E addEdgeWithVertices(Graph<V, E> g, V sourceVertex, V targetVertex, double weight)" ], [ "addGraph", "org.jgrapht", "Graphs", "public static <V, E> boolean addGraph(Graph<? super V, ? super E> destination, Graph<V, E> source)" ], [ "addAllEdges", "org.jgrapht", "Graphs", "public static <V, E> boolean addAllEdges(Graph<? super V, ? super E> destination, Graph<V, E> source, Collection<? extends E> edges)" ], [ "addAllVertices", "org.jgrapht", "Graphs", "public static <V, E> boolean addAllVertices(Graph<? super V, ? super E> destination, Collection<? extends V> vertices)" ], [ "neighborListOf", "org.jgrapht", "Graphs", "public static <V, E> List<V> neighborListOf(Graph<V, E> g, V vertex)" ], [ "predecessorListOf", "org.jgrapht", "Graphs", "public static <V, E> List<V> predecessorListOf(DirectedGraph<V, E> g, V vertex)" ], [ "successorListOf", "org.jgrapht", "Graphs", "public static <V, E> List<V> successorListOf(DirectedGraph<V, E> g, V vertex)" ], [ "undirectedGraph", "org.jgrapht", "Graphs", "public static <V, E> UndirectedGraph<V, E> undirectedGraph(Graph<V, E> g)" ], [ "testIncidence", "org.jgrapht", "Graphs", "public static <V, E> boolean testIncidence(Graph<V, E> g, E e, V v)" ], [ "getOppositeVertex", "org.jgrapht", "Graphs", "public static <V, E> V getOppositeVertex(Graph<V, E> g, E e, V v)" ], [ "getPathVertexList", "org.jgrapht", "Graphs", "public static <V, E> List<V> getPathVertexList(GraphPath<V, E> path)" ], [ "range", "org.jgrapht.generate", "SimpleWeightedGraphMatrixGenerator", "public static int[] range(final int from, final int to)" ], [ "createGraphSpecifics", "org.jgrapht.traverse", "CrossComponentIterator", "static <V, E> Specifics<V, E> createGraphSpecifics(Graph<V, E> g)" ], [ "findGreedyChromaticNumber", "org.jgrapht.alg", "ChromaticNumber", "public static <V, E> int findGreedyChromaticNumber(UndirectedGraph<V, E> g)" ], [ "findGreedyColoredGroups", "org.jgrapht.alg", "ChromaticNumber", "public static <V, E> Map<Integer, Set<V>> findGreedyColoredGroups(UndirectedGraph<V, E> g)" ], [ "findPathBetween", "org.jgrapht.alg", "BellmanFordShortestPath", "public static <V, E> List<E> findPathBetween(Graph<V, E> graph, V startVertex, V endVertex)" ], [ "findPathBetween", "org.jgrapht.alg", "DijkstraShortestPath", "public static <V, E> List<E> findPathBetween(Graph<V, E> graph, V startVertex, V endVertex)" ], [ "of", "org.jgrapht.alg.util", "Pair", "public static <A, B> Pair<A, B> of(A a, B b)" ], [ "isEulerian", "org.jgrapht.alg", "EulerianCircuit", "public static <V, E> boolean isEulerian(UndirectedGraph<V, E> g)" ], [ "getEulerianCircuitVertices", "org.jgrapht.alg", "EulerianCircuit", "public static <V, E> List<V> getEulerianCircuitVertices(UndirectedGraph<V, E> g)" ], [ "getApproximateOptimalForCompleteGraph", "org.jgrapht.alg", "HamiltonianCycle", "public static <V, E> List<V> getApproximateOptimalForCompleteGraph(SimpleWeightedGraph<V, E> g)" ], [ "find2ApproximationCover", "org.jgrapht.alg", "VertexCovers", "public static <V, E> Set<V> find2ApproximationCover(Graph<V, E> g)" ], [ "findGreedyCover", "org.jgrapht.alg", "VertexCovers", "public static <V, E> Set<V> findGreedyCover(UndirectedGraph<V, E> g)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "BEST_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int BEST_ORDER = 0;" ], [ "NATURAL_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int NATURAL_ORDER = 1;" ], [ "SMALLEST_DEGREE_LAST_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int SMALLEST_DEGREE_LAST_ORDER = 2;" ], [ "LARGEST_SATURATION_FIRST_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int LARGEST_SATURATION_FIRST_ORDER = 3;" ], [ "DEFAULT_EDGE_WEIGHT", "org.jgrapht", "WeightedGraph", "public static double DEFAULT_EDGE_WEIGHT = 1.0;" ], [ "HUB_VERTEX", "org.jgrapht.generate", "WheelGraphGenerator", "public static final String HUB_VERTEX = \"Hub Vertex\";" ], [ "CORNER_VERTEX", "org.jgrapht.generate", "GridGraphGenerator", "public static final String CORNER_VERTEX = \"Corner Vertex\";" ], [ "START_VERTEX", "org.jgrapht.generate", "LinearGraphGenerator", "public static final String START_VERTEX = \"Start Vertex\";" ], [ "END_VERTEX", "org.jgrapht.generate", "LinearGraphGenerator", "public static final String END_VERTEX = \"End Vertex\";" ], [ "CENTER_VERTEX", "org.jgrapht.generate", "StarGraphGenerator", "public static final String CENTER_VERTEX = \"Center Vertex\";" ], [ "SENTINEL", "org.jgrapht.traverse", "DepthFirstIterator", "public static final Object SENTINEL = new Object();" ], [ "BEFORE_EDGE_ADDED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int BEFORE_EDGE_ADDED = 21;" ], [ "BEFORE_EDGE_REMOVED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int BEFORE_EDGE_REMOVED = 22;" ], [ "EDGE_ADDED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int EDGE_ADDED = 23;" ], [ "EDGE_REMOVED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int EDGE_REMOVED = 24;" ], [ "CONNECTED_COMPONENT_STARTED", "org.jgrapht.event", "ConnectedComponentTraversalEvent", "public static final int CONNECTED_COMPONENT_STARTED = 31;" ], [ "CONNECTED_COMPONENT_FINISHED", "org.jgrapht.event", "ConnectedComponentTraversalEvent", "public static final int CONNECTED_COMPONENT_FINISHED = 32;" ], [ "BEFORE_VERTEX_ADDED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int BEFORE_VERTEX_ADDED = 11;" ], [ "BEFORE_VERTEX_REMOVED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int BEFORE_VERTEX_REMOVED = 12;" ], [ "VERTEX_ADDED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int VERTEX_ADDED = 13;" ], [ "VERTEX_REMOVED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int VERTEX_REMOVED = 14;" ], [ "NULL_NODE", "org.jgrapht.alg.isomorphism", "VF2State", "public static final int NULL_NODE = -1;" ], [ "DEBUG", "org.jgrapht.alg.isomorphism", "VF2State", "protected static final boolean DEBUG = false;" ], [ "DEFAULT_EPSILON", "org.jgrapht.alg", "EdmondsKarpMaximumFlow", "public static final double DEFAULT_EPSILON = 0.000000001;" ], [ "INSTANCE", "org.jgrapht.alg", "TransitiveClosure", "public static final TransitiveClosure INSTANCE = new TransitiveClosure();" ], [ "INSTANCE", "org.jgrapht.alg", "TransitiveReduction", "public static final TransitiveReduction INSTANCE = new TransitiveReduction();" ], [ "NEGATIVE_UNDIRECTED_EDGE", "org.jgrapht.alg", "BellmanFordIterator", "protected final static String NEGATIVE_UNDIRECTED_EDGE = \"Negative\" + \"edge-weights are not allowed in an unidrected graph!\";" ], [ "DEFAULT_EPSILON", "org.jgrapht.alg.flow", "MaximumFlowAlgorithmBase", "public static final double DEFAULT_EPSILON = 1e-9;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "ef", "org.jgrapht.EdgeFactory", "EdgeFactory<V, E>" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "edgesOf", "org.jgrapht.graph", "AbstractBaseGraph", "public Set<E> edgesOf(V arg0)" ], [ "getEdgeWeight", "org.jgrapht.graph", "AbstractBaseGraph", "public double getEdgeWeight(E arg0)" ], [ "incomingEdgesOf", "org.jgrapht.graph", "AbstractBaseGraph", "public Set<E> incomingEdgesOf(V arg0)" ], [ "hashCode", "org.jgrapht.graph", "AbstractGraph", "public int hashCode()" ], [ "isAllowingLoops", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean isAllowingLoops()" ], [ "getAllEdges", "org.jgrapht.graph", "AbstractBaseGraph", "public Set<E> getAllEdges(V arg0, V arg1)" ], [ "clone", "org.jgrapht.graph", "AbstractBaseGraph", "public Object clone()" ], [ "removeVertex", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean removeVertex(V arg0)" ], [ "getEdgeTarget", "org.jgrapht.graph", "AbstractBaseGraph", "public V getEdgeTarget(E arg0)" ], [ "edgeSet", "org.jgrapht.graph", "AbstractBaseGraph", "public Set<E> edgeSet()" ], [ "outDegreeOf", "org.jgrapht.graph", "AbstractBaseGraph", "public int outDegreeOf(V arg0)" ], [ "assertVertexExist", "org.jgrapht.graph", "AbstractGraph", "protected boolean assertVertexExist(V arg0)" ], [ "equals", "org.jgrapht.graph", "AbstractGraph", "public boolean equals(Object arg0)" ], [ "removeAllEdges", "org.jgrapht.graph", "AbstractGraph", "public Set<E> removeAllEdges(V arg0, V arg1)" ], [ "removeAllEdges", "org.jgrapht.graph", "AbstractGraph", "public boolean removeAllEdges(Collection<? extends E> arg0)" ], [ "removeEdge", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean removeEdge(E arg0)" ], [ "toStringFromSets", "org.jgrapht.graph", "AbstractGraph", "protected String toStringFromSets(Collection<? extends V> arg0, Collection<? extends E> arg1, boolean arg2)" ], [ "degreeOf", "org.jgrapht.graph", "AbstractBaseGraph", "public int degreeOf(V arg0)" ], [ "containsEdge", "org.jgrapht.graph", "AbstractGraph", "public boolean containsEdge(V arg0, V arg1)" ], [ "getEdgeFactory", "org.jgrapht.graph", "AbstractBaseGraph", "public EdgeFactory<V, E> getEdgeFactory()" ], [ "vertexSet", "org.jgrapht.graph", "AbstractBaseGraph", "public Set<V> vertexSet()" ], [ "inDegreeOf", "org.jgrapht.graph", "AbstractBaseGraph", "public int inDegreeOf(V arg0)" ], [ "containsVertex", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean containsVertex(V arg0)" ], [ "createUndirectedSpecifics", "org.jgrapht.graph", "AbstractBaseGraph", "protected AbstractBaseGraph.UndirectedSpecifics createUndirectedSpecifics()" ], [ "addVertex", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean addVertex(V arg0)" ], [ "toString", "org.jgrapht.graph", "AbstractGraph", "public String toString()" ], [ "getEdge", "org.jgrapht.graph", "AbstractBaseGraph", "public E getEdge(V arg0, V arg1)" ], [ "removeAllEdges", "org.jgrapht.graph", "AbstractGraph", "protected boolean removeAllEdges(E[] arg0)" ], [ "removeAllVertices", "org.jgrapht.graph", "AbstractGraph", "public boolean removeAllVertices(Collection<? extends V> arg0)" ], [ "containsEdge", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean containsEdge(E arg0)" ], [ "isAllowingMultipleEdges", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean isAllowingMultipleEdges()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "createDirectedSpecifics", "org.jgrapht.graph", "AbstractBaseGraph", "protected AbstractBaseGraph.DirectedSpecifics createDirectedSpecifics()" ], [ "getEdgeSource", "org.jgrapht.graph", "AbstractBaseGraph", "public V getEdgeSource(E arg0)" ], [ "removeEdge", "org.jgrapht.graph", "AbstractBaseGraph", "public E removeEdge(V arg0, V arg1)" ], [ "addEdge", "org.jgrapht.graph", "AbstractBaseGraph", "public E addEdge(V arg0, V arg1)" ], [ "addEdge", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean addEdge(V arg0, V arg1, E arg2)" ], [ "outgoingEdgesOf", "org.jgrapht.graph", "AbstractBaseGraph", "public Set<E> outgoingEdgesOf(V arg0)" ], [ "createEdge", "org.jgrapht", "EdgeFactory", "public abstract E createEdge(V arg0, V arg1)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "allowingLoops", "org.jgrapht.graph", "AbstractBaseGraph", "boolean allowingLoops;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 26016,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "jgrapht-core-0.9.2",
  "packageName" : "org.jgrapht.graph",
  "className" : "WeightedMultigraph",
  "javadocTag" : "@param ef the edge factory of the new graph.",
  "methodJavadoc" : "    /**\n     * Creates a new weighted multigraph with the specified edge factory.\n     *\n     * @param ef the edge factory of the new graph.\n     */",
  "methodSourceCode" : "public WeightedMultigraph(EdgeFactory<V, E> ef){\n    super(ef);\n}",
  "classJavadoc" : "/**\n * A weighted multigraph. A weighted multigraph is a non-simple undirected graph\n * in which no loops are permitted, but multiple edges between any two vertices\n * are. The edges of a weighted multigraph have weights. If you're unsure about\n * multigraphs, see: <a href=\"http://mathworld.wolfram.com/Multigraph.html\">\n * http://mathworld.wolfram.com/Multigraph.html</a>.\n */",
  "classSourceCode" : "/* ==========================================\n * JGraphT : a free Java graph-theory library\n * ==========================================\n *\n * Project Info:  http://jgrapht.sourceforge.net/\n * Project Creator:  Barak Naveh (http://sourceforge.net/users/barak_naveh)\n *\n * (C) Copyright 2003-2008, by Barak Naveh and Contributors.\n *\n * This program and the accompanying materials are dual-licensed under\n * either\n *\n * (a) the terms of the GNU Lesser General Public License version 2.1\n * as published by the Free Software Foundation, or (at your option) any\n * later version.\n *\n * or (per the licensee's choosing)\n *\n * (b) the terms of the Eclipse Public License v1.0 as published by\n * the Eclipse Foundation.\n */\n/* -----------------------\n * WeightedMultigraph.java\n * -----------------------\n * (C) Copyright 2003-2008, by Barak Naveh and Contributors.\n *\n * Original Author:  Barak Naveh\n * Contributor(s):   Christian Hammer\n *\n * $Id$\n *\n * Changes\n * -------\n * 05-Aug-2003 : Initial revision (BN);\n * 06-Aug-2005 : Made generic (CH);\n * 28-May-2006 : Moved connectivity info from edge to graph (JVS);\n *\n */\npackage org.jgrapht.graph;\n\nimport org.jgrapht.*;\nimport org.jgrapht.graph.builder.*;\n\n\n/**\n * A weighted multigraph. A weighted multigraph is a non-simple undirected graph\n * in which no loops are permitted, but multiple edges between any two vertices\n * are. The edges of a weighted multigraph have weights. If you're unsure about\n * multigraphs, see: <a href=\"http://mathworld.wolfram.com/Multigraph.html\">\n * http://mathworld.wolfram.com/Multigraph.html</a>.\n */\npublic class WeightedMultigraph<V, E>\n    extends Multigraph<V, E>\n    implements WeightedGraph<V, E>\n{\n    private static final long serialVersionUID = 3544671793370640696L;\n\n    /**\n     * Creates a new weighted multigraph with the specified edge factory.\n     *\n     * @param ef the edge factory of the new graph.\n     */\n    public WeightedMultigraph(EdgeFactory<V, E> ef)\n    {\n        super(ef);\n    }\n\n    /**\n     * Creates a new weighted multigraph.\n     *\n     * @param edgeClass class on which to base factory for edges\n     */\n    public WeightedMultigraph(Class<? extends E> edgeClass)\n    {\n        this(new ClassBasedEdgeFactory<V, E>(edgeClass));\n    }\n\n    public static <V, E> UndirectedWeightedGraphBuilderBase<V,\n        E, ? extends WeightedMultigraph<V, E>, ?> builder(\n        Class<? extends E> edgeClass)\n    {\n        return new UndirectedWeightedGraphBuilder<V,\n            E, WeightedMultigraph<V, E>>(\n                new WeightedMultigraph<V, E>(edgeClass));\n    }\n\n    public static <V, E> UndirectedWeightedGraphBuilderBase<V,\n        E, ? extends WeightedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)\n    {\n        return new UndirectedWeightedGraphBuilder<V,\n            E, WeightedMultigraph<V, E>>(\n                new WeightedMultigraph<V, E>(ef));\n    }\n}\n\n// End WeightedMultigraph.java\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "PartiteRandomGraphGenerator", "org.jgrapht.experimental" ], [ "RandomGraphHelper", "org.jgrapht.experimental" ], [ "GraphReader", "org.jgrapht.experimental" ], [ "DirectedAcyclicGraph", "org.jgrapht.experimental.dag" ], [ "GraphSquare", "org.jgrapht.experimental" ], [ "UniformRandomGraphGenerator", "org.jgrapht.experimental" ], [ "GraphTests", "org.jgrapht.experimental" ], [ "ApproximationAlgorithm", "org.jgrapht.experimental.alg" ], [ "BrownBacktrackColoring", "org.jgrapht.experimental.alg.color" ], [ "GreedyColoring", "org.jgrapht.experimental.alg.color" ], [ "IntArrayGraphAlgorithm", "org.jgrapht.experimental.alg" ], [ "ExactAlgorithm", "org.jgrapht.experimental.alg" ], [ "ListenableGraph", "org.jgrapht" ], [ "ModifiableInteger", "org.jgrapht.util" ], [ "FibonacciHeapNode", "org.jgrapht.util" ], [ "WeightCombiner", "org.jgrapht.util" ], [ "FibonacciHeap", "org.jgrapht.util" ], [ "TypeUtil", "org.jgrapht.util" ], [ "ArrayUnenforcedSet", "org.jgrapht.util" ], [ "VertexPair", "org.jgrapht.util" ], [ "MathUtil", "org.jgrapht.util" ], [ "PrefetchIterator", "org.jgrapht.util" ], [ "VertexFactory", "org.jgrapht" ], [ "Graph", "org.jgrapht" ], [ "GraphPath", "org.jgrapht" ], [ "UndirectedGraphUnion", "org.jgrapht.graph" ], [ "SimpleGraph", "org.jgrapht.graph" ], [ "MixedGraphUnion", "org.jgrapht.graph" ], [ "DefaultGraphMapping", "org.jgrapht.graph" ], [ "WeightedPseudograph", "org.jgrapht.graph" ], [ "UndirectedMaskSubgraph", "org.jgrapht.graph" ], [ "MaskEdgeSet", "org.jgrapht.graph" ], [ "Pseudograph", "org.jgrapht.graph" ], [ "MaskFunctor", "org.jgrapht.graph" ], [ "GraphUnion", "org.jgrapht.graph" ], [ "DirectedMaskSubgraph", "org.jgrapht.graph" ], [ "DirectedMultigraph", "org.jgrapht.graph" ], [ "AbstractBaseGraph", "org.jgrapht.graph" ], [ "DirectedWeightedPseudograph", "org.jgrapht.graph" ], [ "Multigraph", "org.jgrapht.graph" ], [ "DefaultDirectedGraph", "org.jgrapht.graph" ], [ "DefaultWeightedEdge", "org.jgrapht.graph" ], [ "ListenableDirectedWeightedGraph", "org.jgrapht.graph" ], [ "DirectedGraphUnion", "org.jgrapht.graph" ], [ "AsUnweightedGraph", "org.jgrapht.graph" ], [ "EdgeSetFactory", "org.jgrapht.graph" ], [ "GraphDelegator", "org.jgrapht.graph" ], [ "DefaultListenableGraph", "org.jgrapht.graph" ], [ "AsUndirectedGraph", "org.jgrapht.graph" ], [ "ClassBasedVertexFactory", "org.jgrapht.graph" ], [ "DefaultEdge", "org.jgrapht.graph" ], [ "MaskVertexSet", "org.jgrapht.graph" ], [ "ListenableUndirectedGraph", "org.jgrapht.graph" ], [ "DirectedWeightedSubgraph", "org.jgrapht.graph" ], [ "ListenableUndirectedWeightedGraph", "org.jgrapht.graph" ], [ "AsUnweightedDirectedGraph", "org.jgrapht.graph" ], [ "DefaultDirectedWeightedGraph", "org.jgrapht.graph" ], [ "IntrusiveEdge", "org.jgrapht.graph" ], [ "UnmodifiableGraph", "org.jgrapht.graph" ], [ "GraphPathImpl", "org.jgrapht.graph" ], [ "Subgraph", "org.jgrapht.graph" ], [ "UndirectedWeightedSubgraph", "org.jgrapht.graph" ], [ "DirectedPseudograph", "org.jgrapht.graph" ], [ "AbstractGraph", "org.jgrapht.graph" ], [ "MaskSubgraph", "org.jgrapht.graph" ], [ "ClassBasedEdgeFactory", "org.jgrapht.graph" ], [ "SimpleWeightedGraph", "org.jgrapht.graph" ], [ "AsWeightedDirectedGraph", "org.jgrapht.graph" ], [ "SimpleDirectedWeightedGraph", "org.jgrapht.graph" ], [ "UnmodifiableUndirectedGraph", "org.jgrapht.graph" ], [ "UndirectedSubgraph", "org.jgrapht.graph" ], [ "WeightedMultigraph", "org.jgrapht.graph" ], [ "EdgeReversedGraph", "org.jgrapht.graph" ], [ "AsWeightedGraph", "org.jgrapht.graph" ], [ "DirectedGraphBuilder", "org.jgrapht.graph.builder" ], [ "UndirectedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "UndirectedGraphBuilder", "org.jgrapht.graph.builder" ], [ "UndirectedWeightedGraphBuilder", "org.jgrapht.graph.builder" ], [ "UndirectedWeightedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "DirectedWeightedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "AbstractGraphBuilder", "org.jgrapht.graph.builder" ], [ "DirectedWeightedGraphBuilder", "org.jgrapht.graph.builder" ], [ "DirectedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "ListenableDirectedGraph", "org.jgrapht.graph" ], [ "UnmodifiableDirectedGraph", "org.jgrapht.graph" ], [ "SimpleGraphPath", "org.jgrapht.graph" ], [ "ParanoidGraph", "org.jgrapht.graph" ], [ "DirectedWeightedMultigraph", "org.jgrapht.graph" ], [ "DirectedSubgraph", "org.jgrapht.graph" ], [ "SimpleDirectedGraph", "org.jgrapht.graph" ], [ "GraphHelper", "org.jgrapht" ], [ "Graphs", "org.jgrapht" ], [ "DirectedGraph", "org.jgrapht" ], [ "WeightedGraph", "org.jgrapht" ], [ "HyperCubeGraphGenerator", "org.jgrapht.generate" ], [ "RingGraphGenerator", "org.jgrapht.generate" ], [ "SimpleWeightedGraphMatrixGenerator", "org.jgrapht.generate" ], [ "WeightedGraphGenerator", "org.jgrapht.generate" ], [ "WheelGraphGenerator", "org.jgrapht.generate" ], [ "GridGraphGenerator", "org.jgrapht.generate" ], [ "ScaleFreeGraphGenerator", "org.jgrapht.generate" ], [ "SimpleWeightedBipartiteGraphMatrixGenerator", "org.jgrapht.generate" ], [ "LinearGraphGenerator", "org.jgrapht.generate" ], [ "CompleteGraphGenerator", "org.jgrapht.generate" ], [ "RandomGraphGenerator", "org.jgrapht.generate" ], [ "WeightedGraphGeneratorAdapter", "org.jgrapht.generate" ], [ "EmptyGraphGenerator", "org.jgrapht.generate" ], [ "CompleteBipartiteGraphGenerator", "org.jgrapht.generate" ], [ "GraphGenerator", "org.jgrapht.generate" ], [ "StarGraphGenerator", "org.jgrapht.generate" ], [ "UndirectedGraph", "org.jgrapht" ], [ "TopologicalOrderIterator", "org.jgrapht.traverse" ], [ "CrossComponentIterator", "org.jgrapht.traverse" ], [ "AbstractGraphIterator", "org.jgrapht.traverse" ], [ "ClosestFirstIterator", "org.jgrapht.traverse" ], [ "BreadthFirstIterator", "org.jgrapht.traverse" ], [ "DepthFirstIterator", "org.jgrapht.traverse" ], [ "GraphIterator", "org.jgrapht.traverse" ], [ "EdgeFactory", "org.jgrapht" ], [ "GraphMapping", "org.jgrapht" ], [ "VertexSetListener", "org.jgrapht.event" ], [ "EdgeTraversalEvent", "org.jgrapht.event" ], [ "TraversalListener", "org.jgrapht.event" ], [ "GraphEdgeChangeEvent", "org.jgrapht.event" ], [ "VertexTraversalEvent", "org.jgrapht.event" ], [ "GraphChangeEvent", "org.jgrapht.event" ], [ "GraphListener", "org.jgrapht.event" ], [ "TraversalListenerAdapter", "org.jgrapht.event" ], [ "ConnectedComponentTraversalEvent", "org.jgrapht.event" ], [ "GraphVertexChangeEvent", "org.jgrapht.event" ], [ "TarjanLowestCommonAncestor", "org.jgrapht.alg" ], [ "PrimMinimumSpanningTree", "org.jgrapht.alg" ], [ "BlockCutpointGraph", "org.jgrapht.alg" ], [ "AllDirectedPaths", "org.jgrapht.alg" ], [ "KShortestPathsIterator", "org.jgrapht.alg" ], [ "KruskalMinimumSpanningTree", "org.jgrapht.alg" ], [ "StrongConnectivityInspector", "org.jgrapht.alg" ], [ "VF2State", "org.jgrapht.alg.isomorphism" ], [ "VF2GraphIsomorphismState", "org.jgrapht.alg.isomorphism" ], [ "VF2AbstractIsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "VF2SubgraphIsomorphismState", "org.jgrapht.alg.isomorphism" ], [ "IsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "VF2SubgraphIsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "GraphOrdering", "org.jgrapht.alg.isomorphism" ], [ "VF2GraphMappingIterator", "org.jgrapht.alg.isomorphism" ], [ "IsomorphicGraphMapping", "org.jgrapht.alg.isomorphism" ], [ "VF2GraphIsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "VF2SubgraphMappingIterator", "org.jgrapht.alg.isomorphism" ], [ "VF2MappingIterator", "org.jgrapht.alg.isomorphism" ], [ "BronKerboschCliqueFinder", "org.jgrapht.alg" ], [ "ChromaticNumber", "org.jgrapht.alg" ], [ "KosarajuStrongConnectivityInspector", "org.jgrapht.alg" ], [ "BellmanFordShortestPath", "org.jgrapht.alg" ], [ "DijkstraShortestPath", "org.jgrapht.alg" ], [ "RankingPathElement", "org.jgrapht.alg" ], [ "AStarShortestPath", "org.jgrapht.alg" ], [ "EdmondsKarpMaximumFlow", "org.jgrapht.alg" ], [ "BellmanFordPathElement", "org.jgrapht.alg" ], [ "FloydWarshallShortestPaths", "org.jgrapht.alg" ], [ "UnionFind", "org.jgrapht.alg.util" ], [ "AlwaysEqualComparator", "org.jgrapht.alg.util" ], [ "Extension", "org.jgrapht.alg.util" ], [ "VertexDegreeComparator", "org.jgrapht.alg.util" ], [ "Pair", "org.jgrapht.alg.util" ], [ "GabowStrongConnectivityInspector", "org.jgrapht.alg" ], [ "HawickJamesSimpleCycles", "org.jgrapht.alg.cycle" ], [ "DirectedSimpleCycles", "org.jgrapht.alg.cycle" ], [ "JohnsonSimpleCycles", "org.jgrapht.alg.cycle" ], [ "TiernanSimpleCycles", "org.jgrapht.alg.cycle" ], [ "UndirectedCycleBase", "org.jgrapht.alg.cycle" ], [ "PatonCycleBase", "org.jgrapht.alg.cycle" ], [ "TarjanSimpleCycles", "org.jgrapht.alg.cycle" ], [ "SzwarcfiterLauerSimpleCycles", "org.jgrapht.alg.cycle" ], [ "BiconnectivityInspector", "org.jgrapht.alg" ], [ "ConnectivityInspector", "org.jgrapht.alg" ], [ "MinSourceSinkCut", "org.jgrapht.alg" ], [ "RankingPathElementList", "org.jgrapht.alg" ], [ "EdmondsBlossomShrinking", "org.jgrapht.alg" ], [ "TransitiveClosure", "org.jgrapht.alg" ], [ "HopcroftKarpBipartiteMatching", "org.jgrapht.alg" ], [ "StoerWagnerMinimumCut", "org.jgrapht.alg" ], [ "AbstractPathElementList", "org.jgrapht.alg" ], [ "KuhnMunkresMinimalWeightBipartitePerfectMatching", "org.jgrapht.alg" ], [ "TransitiveReduction", "org.jgrapht.alg" ], [ "EulerianCircuit", "org.jgrapht.alg" ], [ "DirectedNeighborIndex", "org.jgrapht.alg" ], [ "NaiveLcaFinder", "org.jgrapht.alg" ], [ "MaximumWeightBipartiteMatching", "org.jgrapht.alg" ], [ "HamiltonianCycle", "org.jgrapht.alg" ], [ "KShortestPaths", "org.jgrapht.alg" ], [ "NeighborIndex", "org.jgrapht.alg" ], [ "VertexCovers", "org.jgrapht.alg" ], [ "CycleDetector", "org.jgrapht.alg" ], [ "AStarAdmissibleHeuristic", "org.jgrapht.alg.interfaces" ], [ "MinimumSpanningTree", "org.jgrapht.alg.interfaces" ], [ "WeightedMatchingAlgorithm", "org.jgrapht.alg.interfaces" ], [ "StrongConnectivityAlgorithm", "org.jgrapht.alg.interfaces" ], [ "MaximumFlowAlgorithm", "org.jgrapht.alg.interfaces" ], [ "MatchingAlgorithm", "org.jgrapht.alg.interfaces" ], [ "CliqueMinimalSeparatorDecomposition", "org.jgrapht.alg" ], [ "BellmanFordIterator", "org.jgrapht.alg" ], [ "AbstractPathElement", "org.jgrapht.alg" ], [ "EdmondsKarpMaximumFlow", "org.jgrapht.alg.flow" ], [ "PushRelabelMaximumFlow", "org.jgrapht.alg.flow" ], [ "MaximumFlowAlgorithmBase", "org.jgrapht.alg.flow" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "addVertices", "org.jgrapht.experimental", "RandomGraphHelper", "public static Object[] addVertices(Graph target, VertexFactory vertexFactory, int numVertices)" ], [ "isEmpty", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isEmpty(Graph<V, E> g)" ], [ "isComplete", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isComplete(Graph<V, E> g)" ], [ "isConnected", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isConnected(Graph<V, E> g)" ], [ "isTree", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isTree(Graph<V, E> g)" ], [ "isBipartite", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isBipartite(Graph<V, E> g)" ], [ "union", "org.jgrapht.util", "FibonacciHeap", "public static <T> FibonacciHeap<T> union(FibonacciHeap<T> h1, FibonacciHeap<T> h2)" ], [ "uncheckedCast", "org.jgrapht.util", "TypeUtil", "public static <T> T uncheckedCast(Object o, TypeUtil<T> typeDecl)" ], [ "factorial", "org.jgrapht.util", "MathUtil", "public static long factorial(int N)" ], [ "builder", "org.jgrapht.graph", "SimpleGraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends SimpleGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleGraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends SimpleGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "WeightedPseudograph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "WeightedPseudograph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "Pseudograph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Pseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "Pseudograph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Pseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedMultigraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedMultigraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedPseudograph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedPseudograph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "Multigraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Multigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "Multigraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Multigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DefaultDirectedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DefaultDirectedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DefaultDirectedWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DefaultDirectedWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedPseudograph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedPseudograph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "SimpleWeightedGraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends SimpleWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleWeightedGraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends SimpleWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends SimpleDirectedWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends SimpleDirectedWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "WeightedMultigraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "WeightedMultigraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedMultigraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedMultigraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends SimpleDirectedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends SimpleDirectedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "addEdge", "org.jgrapht", "Graphs", "public static <V, E> E addEdge(Graph<V, E> g, V sourceVertex, V targetVertex, double weight)" ], [ "addEdgeWithVertices", "org.jgrapht", "Graphs", "public static <V, E> E addEdgeWithVertices(Graph<V, E> g, V sourceVertex, V targetVertex)" ], [ "addEdgeWithVertices", "org.jgrapht", "Graphs", "public static <V, E> boolean addEdgeWithVertices(Graph<V, E> targetGraph, Graph<V, E> sourceGraph, E edge)" ], [ "addEdgeWithVertices", "org.jgrapht", "Graphs", "public static <V, E> E addEdgeWithVertices(Graph<V, E> g, V sourceVertex, V targetVertex, double weight)" ], [ "addGraph", "org.jgrapht", "Graphs", "public static <V, E> boolean addGraph(Graph<? super V, ? super E> destination, Graph<V, E> source)" ], [ "addAllEdges", "org.jgrapht", "Graphs", "public static <V, E> boolean addAllEdges(Graph<? super V, ? super E> destination, Graph<V, E> source, Collection<? extends E> edges)" ], [ "addAllVertices", "org.jgrapht", "Graphs", "public static <V, E> boolean addAllVertices(Graph<? super V, ? super E> destination, Collection<? extends V> vertices)" ], [ "neighborListOf", "org.jgrapht", "Graphs", "public static <V, E> List<V> neighborListOf(Graph<V, E> g, V vertex)" ], [ "predecessorListOf", "org.jgrapht", "Graphs", "public static <V, E> List<V> predecessorListOf(DirectedGraph<V, E> g, V vertex)" ], [ "successorListOf", "org.jgrapht", "Graphs", "public static <V, E> List<V> successorListOf(DirectedGraph<V, E> g, V vertex)" ], [ "undirectedGraph", "org.jgrapht", "Graphs", "public static <V, E> UndirectedGraph<V, E> undirectedGraph(Graph<V, E> g)" ], [ "testIncidence", "org.jgrapht", "Graphs", "public static <V, E> boolean testIncidence(Graph<V, E> g, E e, V v)" ], [ "getOppositeVertex", "org.jgrapht", "Graphs", "public static <V, E> V getOppositeVertex(Graph<V, E> g, E e, V v)" ], [ "getPathVertexList", "org.jgrapht", "Graphs", "public static <V, E> List<V> getPathVertexList(GraphPath<V, E> path)" ], [ "range", "org.jgrapht.generate", "SimpleWeightedGraphMatrixGenerator", "public static int[] range(final int from, final int to)" ], [ "createGraphSpecifics", "org.jgrapht.traverse", "CrossComponentIterator", "static <V, E> Specifics<V, E> createGraphSpecifics(Graph<V, E> g)" ], [ "findGreedyChromaticNumber", "org.jgrapht.alg", "ChromaticNumber", "public static <V, E> int findGreedyChromaticNumber(UndirectedGraph<V, E> g)" ], [ "findGreedyColoredGroups", "org.jgrapht.alg", "ChromaticNumber", "public static <V, E> Map<Integer, Set<V>> findGreedyColoredGroups(UndirectedGraph<V, E> g)" ], [ "findPathBetween", "org.jgrapht.alg", "BellmanFordShortestPath", "public static <V, E> List<E> findPathBetween(Graph<V, E> graph, V startVertex, V endVertex)" ], [ "findPathBetween", "org.jgrapht.alg", "DijkstraShortestPath", "public static <V, E> List<E> findPathBetween(Graph<V, E> graph, V startVertex, V endVertex)" ], [ "of", "org.jgrapht.alg.util", "Pair", "public static <A, B> Pair<A, B> of(A a, B b)" ], [ "isEulerian", "org.jgrapht.alg", "EulerianCircuit", "public static <V, E> boolean isEulerian(UndirectedGraph<V, E> g)" ], [ "getEulerianCircuitVertices", "org.jgrapht.alg", "EulerianCircuit", "public static <V, E> List<V> getEulerianCircuitVertices(UndirectedGraph<V, E> g)" ], [ "getApproximateOptimalForCompleteGraph", "org.jgrapht.alg", "HamiltonianCycle", "public static <V, E> List<V> getApproximateOptimalForCompleteGraph(SimpleWeightedGraph<V, E> g)" ], [ "find2ApproximationCover", "org.jgrapht.alg", "VertexCovers", "public static <V, E> Set<V> find2ApproximationCover(Graph<V, E> g)" ], [ "findGreedyCover", "org.jgrapht.alg", "VertexCovers", "public static <V, E> Set<V> findGreedyCover(UndirectedGraph<V, E> g)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "BEST_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int BEST_ORDER = 0;" ], [ "NATURAL_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int NATURAL_ORDER = 1;" ], [ "SMALLEST_DEGREE_LAST_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int SMALLEST_DEGREE_LAST_ORDER = 2;" ], [ "LARGEST_SATURATION_FIRST_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int LARGEST_SATURATION_FIRST_ORDER = 3;" ], [ "DEFAULT_EDGE_WEIGHT", "org.jgrapht", "WeightedGraph", "public static double DEFAULT_EDGE_WEIGHT = 1.0;" ], [ "HUB_VERTEX", "org.jgrapht.generate", "WheelGraphGenerator", "public static final String HUB_VERTEX = \"Hub Vertex\";" ], [ "CORNER_VERTEX", "org.jgrapht.generate", "GridGraphGenerator", "public static final String CORNER_VERTEX = \"Corner Vertex\";" ], [ "START_VERTEX", "org.jgrapht.generate", "LinearGraphGenerator", "public static final String START_VERTEX = \"Start Vertex\";" ], [ "END_VERTEX", "org.jgrapht.generate", "LinearGraphGenerator", "public static final String END_VERTEX = \"End Vertex\";" ], [ "CENTER_VERTEX", "org.jgrapht.generate", "StarGraphGenerator", "public static final String CENTER_VERTEX = \"Center Vertex\";" ], [ "SENTINEL", "org.jgrapht.traverse", "DepthFirstIterator", "public static final Object SENTINEL = new Object();" ], [ "BEFORE_EDGE_ADDED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int BEFORE_EDGE_ADDED = 21;" ], [ "BEFORE_EDGE_REMOVED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int BEFORE_EDGE_REMOVED = 22;" ], [ "EDGE_ADDED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int EDGE_ADDED = 23;" ], [ "EDGE_REMOVED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int EDGE_REMOVED = 24;" ], [ "CONNECTED_COMPONENT_STARTED", "org.jgrapht.event", "ConnectedComponentTraversalEvent", "public static final int CONNECTED_COMPONENT_STARTED = 31;" ], [ "CONNECTED_COMPONENT_FINISHED", "org.jgrapht.event", "ConnectedComponentTraversalEvent", "public static final int CONNECTED_COMPONENT_FINISHED = 32;" ], [ "BEFORE_VERTEX_ADDED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int BEFORE_VERTEX_ADDED = 11;" ], [ "BEFORE_VERTEX_REMOVED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int BEFORE_VERTEX_REMOVED = 12;" ], [ "VERTEX_ADDED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int VERTEX_ADDED = 13;" ], [ "VERTEX_REMOVED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int VERTEX_REMOVED = 14;" ], [ "NULL_NODE", "org.jgrapht.alg.isomorphism", "VF2State", "public static final int NULL_NODE = -1;" ], [ "DEBUG", "org.jgrapht.alg.isomorphism", "VF2State", "protected static final boolean DEBUG = false;" ], [ "DEFAULT_EPSILON", "org.jgrapht.alg", "EdmondsKarpMaximumFlow", "public static final double DEFAULT_EPSILON = 0.000000001;" ], [ "INSTANCE", "org.jgrapht.alg", "TransitiveClosure", "public static final TransitiveClosure INSTANCE = new TransitiveClosure();" ], [ "INSTANCE", "org.jgrapht.alg", "TransitiveReduction", "public static final TransitiveReduction INSTANCE = new TransitiveReduction();" ], [ "NEGATIVE_UNDIRECTED_EDGE", "org.jgrapht.alg", "BellmanFordIterator", "protected final static String NEGATIVE_UNDIRECTED_EDGE = \"Negative\" + \"edge-weights are not allowed in an unidrected graph!\";" ], [ "DEFAULT_EPSILON", "org.jgrapht.alg.flow", "MaximumFlowAlgorithmBase", "public static final double DEFAULT_EPSILON = 1e-9;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "ef", "org.jgrapht.EdgeFactory", "EdgeFactory<V, E>" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "removeAllEdges", "org.jgrapht.graph", "AbstractGraph", "public Set<E> removeAllEdges(V arg0, V arg1)" ], [ "vertexSet", "org.jgrapht.graph", "AbstractBaseGraph", "public Set<V> vertexSet()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "outDegreeOf", "org.jgrapht.graph", "AbstractBaseGraph", "public int outDegreeOf(V arg0)" ], [ "outgoingEdgesOf", "org.jgrapht.graph", "AbstractBaseGraph", "public Set<E> outgoingEdgesOf(V arg0)" ], [ "removeAllVertices", "org.jgrapht.graph", "AbstractGraph", "public boolean removeAllVertices(Collection<? extends V> arg0)" ], [ "containsVertex", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean containsVertex(V arg0)" ], [ "edgesOf", "org.jgrapht.graph", "AbstractBaseGraph", "public Set<E> edgesOf(V arg0)" ], [ "getEdgeTarget", "org.jgrapht.graph", "AbstractBaseGraph", "public V getEdgeTarget(E arg0)" ], [ "removeVertex", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean removeVertex(V arg0)" ], [ "removeEdge", "org.jgrapht.graph", "AbstractBaseGraph", "public E removeEdge(V arg0, V arg1)" ], [ "addEdge", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean addEdge(V arg0, V arg1, E arg2)" ], [ "toString", "org.jgrapht.graph", "AbstractGraph", "public String toString()" ], [ "getEdgeWeight", "org.jgrapht.graph", "AbstractBaseGraph", "public double getEdgeWeight(E arg0)" ], [ "equals", "org.jgrapht.graph", "AbstractGraph", "public boolean equals(Object arg0)" ], [ "createDirectedSpecifics", "org.jgrapht.graph", "AbstractBaseGraph", "protected AbstractBaseGraph.DirectedSpecifics createDirectedSpecifics()" ], [ "getEdgeSource", "org.jgrapht.graph", "AbstractBaseGraph", "public V getEdgeSource(E arg0)" ], [ "containsEdge", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean containsEdge(E arg0)" ], [ "removeEdge", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean removeEdge(E arg0)" ], [ "removeAllEdges", "org.jgrapht.graph", "AbstractGraph", "public boolean removeAllEdges(Collection<? extends E> arg0)" ], [ "clone", "org.jgrapht.graph", "AbstractBaseGraph", "public Object clone()" ], [ "edgeSet", "org.jgrapht.graph", "AbstractBaseGraph", "public Set<E> edgeSet()" ], [ "isAllowingMultipleEdges", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean isAllowingMultipleEdges()" ], [ "incomingEdgesOf", "org.jgrapht.graph", "AbstractBaseGraph", "public Set<E> incomingEdgesOf(V arg0)" ], [ "containsEdge", "org.jgrapht.graph", "AbstractGraph", "public boolean containsEdge(V arg0, V arg1)" ], [ "assertVertexExist", "org.jgrapht.graph", "AbstractGraph", "protected boolean assertVertexExist(V arg0)" ], [ "getEdgeFactory", "org.jgrapht.graph", "AbstractBaseGraph", "public EdgeFactory<V, E> getEdgeFactory()" ], [ "toStringFromSets", "org.jgrapht.graph", "AbstractGraph", "protected String toStringFromSets(Collection<? extends V> arg0, Collection<? extends E> arg1, boolean arg2)" ], [ "addEdge", "org.jgrapht.graph", "AbstractBaseGraph", "public E addEdge(V arg0, V arg1)" ], [ "getAllEdges", "org.jgrapht.graph", "AbstractBaseGraph", "public Set<E> getAllEdges(V arg0, V arg1)" ], [ "createUndirectedSpecifics", "org.jgrapht.graph", "AbstractBaseGraph", "protected AbstractBaseGraph.UndirectedSpecifics createUndirectedSpecifics()" ], [ "isAllowingLoops", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean isAllowingLoops()" ], [ "removeAllEdges", "org.jgrapht.graph", "AbstractGraph", "protected boolean removeAllEdges(E[] arg0)" ], [ "hashCode", "org.jgrapht.graph", "AbstractGraph", "public int hashCode()" ], [ "degreeOf", "org.jgrapht.graph", "AbstractBaseGraph", "public int degreeOf(V arg0)" ], [ "getEdge", "org.jgrapht.graph", "AbstractBaseGraph", "public E getEdge(V arg0, V arg1)" ], [ "addVertex", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean addVertex(V arg0)" ], [ "inDegreeOf", "org.jgrapht.graph", "AbstractBaseGraph", "public int inDegreeOf(V arg0)" ], [ "createEdge", "org.jgrapht", "EdgeFactory", "public abstract E createEdge(V arg0, V arg1)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "toString", "java.lang", "Object", "public String toString()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "allowingLoops", "org.jgrapht.graph", "AbstractBaseGraph", "boolean allowingLoops;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 26017,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "jgrapht-core-0.9.2",
  "packageName" : "org.jgrapht.graph",
  "className" : "WeightedMultigraph",
  "javadocTag" : "@param edgeClass class on which to base factory for edges",
  "methodJavadoc" : "    /**\n     * Creates a new weighted multigraph.\n     *\n     * @param edgeClass class on which to base factory for edges\n     */",
  "methodSourceCode" : "public WeightedMultigraph(Class<? extends E> edgeClass){\n    this(new ClassBasedEdgeFactory<V, E>(edgeClass));\n}",
  "classJavadoc" : "/**\n * A weighted multigraph. A weighted multigraph is a non-simple undirected graph\n * in which no loops are permitted, but multiple edges between any two vertices\n * are. The edges of a weighted multigraph have weights. If you're unsure about\n * multigraphs, see: <a href=\"http://mathworld.wolfram.com/Multigraph.html\">\n * http://mathworld.wolfram.com/Multigraph.html</a>.\n */",
  "classSourceCode" : "/* ==========================================\n * JGraphT : a free Java graph-theory library\n * ==========================================\n *\n * Project Info:  http://jgrapht.sourceforge.net/\n * Project Creator:  Barak Naveh (http://sourceforge.net/users/barak_naveh)\n *\n * (C) Copyright 2003-2008, by Barak Naveh and Contributors.\n *\n * This program and the accompanying materials are dual-licensed under\n * either\n *\n * (a) the terms of the GNU Lesser General Public License version 2.1\n * as published by the Free Software Foundation, or (at your option) any\n * later version.\n *\n * or (per the licensee's choosing)\n *\n * (b) the terms of the Eclipse Public License v1.0 as published by\n * the Eclipse Foundation.\n */\n/* -----------------------\n * WeightedMultigraph.java\n * -----------------------\n * (C) Copyright 2003-2008, by Barak Naveh and Contributors.\n *\n * Original Author:  Barak Naveh\n * Contributor(s):   Christian Hammer\n *\n * $Id$\n *\n * Changes\n * -------\n * 05-Aug-2003 : Initial revision (BN);\n * 06-Aug-2005 : Made generic (CH);\n * 28-May-2006 : Moved connectivity info from edge to graph (JVS);\n *\n */\npackage org.jgrapht.graph;\n\nimport org.jgrapht.*;\nimport org.jgrapht.graph.builder.*;\n\n\n/**\n * A weighted multigraph. A weighted multigraph is a non-simple undirected graph\n * in which no loops are permitted, but multiple edges between any two vertices\n * are. The edges of a weighted multigraph have weights. If you're unsure about\n * multigraphs, see: <a href=\"http://mathworld.wolfram.com/Multigraph.html\">\n * http://mathworld.wolfram.com/Multigraph.html</a>.\n */\npublic class WeightedMultigraph<V, E>\n    extends Multigraph<V, E>\n    implements WeightedGraph<V, E>\n{\n    private static final long serialVersionUID = 3544671793370640696L;\n\n    /**\n     * Creates a new weighted multigraph with the specified edge factory.\n     *\n     * @param ef the edge factory of the new graph.\n     */\n    public WeightedMultigraph(EdgeFactory<V, E> ef)\n    {\n        super(ef);\n    }\n\n    /**\n     * Creates a new weighted multigraph.\n     *\n     * @param edgeClass class on which to base factory for edges\n     */\n    public WeightedMultigraph(Class<? extends E> edgeClass)\n    {\n        this(new ClassBasedEdgeFactory<V, E>(edgeClass));\n    }\n\n    public static <V, E> UndirectedWeightedGraphBuilderBase<V,\n        E, ? extends WeightedMultigraph<V, E>, ?> builder(\n        Class<? extends E> edgeClass)\n    {\n        return new UndirectedWeightedGraphBuilder<V,\n            E, WeightedMultigraph<V, E>>(\n                new WeightedMultigraph<V, E>(edgeClass));\n    }\n\n    public static <V, E> UndirectedWeightedGraphBuilderBase<V,\n        E, ? extends WeightedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)\n    {\n        return new UndirectedWeightedGraphBuilder<V,\n            E, WeightedMultigraph<V, E>>(\n                new WeightedMultigraph<V, E>(ef));\n    }\n}\n\n// End WeightedMultigraph.java\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "PartiteRandomGraphGenerator", "org.jgrapht.experimental" ], [ "RandomGraphHelper", "org.jgrapht.experimental" ], [ "GraphReader", "org.jgrapht.experimental" ], [ "DirectedAcyclicGraph", "org.jgrapht.experimental.dag" ], [ "GraphSquare", "org.jgrapht.experimental" ], [ "UniformRandomGraphGenerator", "org.jgrapht.experimental" ], [ "GraphTests", "org.jgrapht.experimental" ], [ "ApproximationAlgorithm", "org.jgrapht.experimental.alg" ], [ "BrownBacktrackColoring", "org.jgrapht.experimental.alg.color" ], [ "GreedyColoring", "org.jgrapht.experimental.alg.color" ], [ "IntArrayGraphAlgorithm", "org.jgrapht.experimental.alg" ], [ "ExactAlgorithm", "org.jgrapht.experimental.alg" ], [ "ListenableGraph", "org.jgrapht" ], [ "ModifiableInteger", "org.jgrapht.util" ], [ "FibonacciHeapNode", "org.jgrapht.util" ], [ "WeightCombiner", "org.jgrapht.util" ], [ "FibonacciHeap", "org.jgrapht.util" ], [ "TypeUtil", "org.jgrapht.util" ], [ "ArrayUnenforcedSet", "org.jgrapht.util" ], [ "VertexPair", "org.jgrapht.util" ], [ "MathUtil", "org.jgrapht.util" ], [ "PrefetchIterator", "org.jgrapht.util" ], [ "VertexFactory", "org.jgrapht" ], [ "Graph", "org.jgrapht" ], [ "GraphPath", "org.jgrapht" ], [ "UndirectedGraphUnion", "org.jgrapht.graph" ], [ "SimpleGraph", "org.jgrapht.graph" ], [ "MixedGraphUnion", "org.jgrapht.graph" ], [ "DefaultGraphMapping", "org.jgrapht.graph" ], [ "WeightedPseudograph", "org.jgrapht.graph" ], [ "UndirectedMaskSubgraph", "org.jgrapht.graph" ], [ "MaskEdgeSet", "org.jgrapht.graph" ], [ "Pseudograph", "org.jgrapht.graph" ], [ "MaskFunctor", "org.jgrapht.graph" ], [ "GraphUnion", "org.jgrapht.graph" ], [ "DirectedMaskSubgraph", "org.jgrapht.graph" ], [ "DirectedMultigraph", "org.jgrapht.graph" ], [ "AbstractBaseGraph", "org.jgrapht.graph" ], [ "DirectedWeightedPseudograph", "org.jgrapht.graph" ], [ "Multigraph", "org.jgrapht.graph" ], [ "DefaultDirectedGraph", "org.jgrapht.graph" ], [ "DefaultWeightedEdge", "org.jgrapht.graph" ], [ "ListenableDirectedWeightedGraph", "org.jgrapht.graph" ], [ "DirectedGraphUnion", "org.jgrapht.graph" ], [ "AsUnweightedGraph", "org.jgrapht.graph" ], [ "EdgeSetFactory", "org.jgrapht.graph" ], [ "GraphDelegator", "org.jgrapht.graph" ], [ "DefaultListenableGraph", "org.jgrapht.graph" ], [ "AsUndirectedGraph", "org.jgrapht.graph" ], [ "ClassBasedVertexFactory", "org.jgrapht.graph" ], [ "DefaultEdge", "org.jgrapht.graph" ], [ "MaskVertexSet", "org.jgrapht.graph" ], [ "ListenableUndirectedGraph", "org.jgrapht.graph" ], [ "DirectedWeightedSubgraph", "org.jgrapht.graph" ], [ "ListenableUndirectedWeightedGraph", "org.jgrapht.graph" ], [ "AsUnweightedDirectedGraph", "org.jgrapht.graph" ], [ "DefaultDirectedWeightedGraph", "org.jgrapht.graph" ], [ "IntrusiveEdge", "org.jgrapht.graph" ], [ "UnmodifiableGraph", "org.jgrapht.graph" ], [ "GraphPathImpl", "org.jgrapht.graph" ], [ "Subgraph", "org.jgrapht.graph" ], [ "UndirectedWeightedSubgraph", "org.jgrapht.graph" ], [ "DirectedPseudograph", "org.jgrapht.graph" ], [ "AbstractGraph", "org.jgrapht.graph" ], [ "MaskSubgraph", "org.jgrapht.graph" ], [ "ClassBasedEdgeFactory", "org.jgrapht.graph" ], [ "SimpleWeightedGraph", "org.jgrapht.graph" ], [ "AsWeightedDirectedGraph", "org.jgrapht.graph" ], [ "SimpleDirectedWeightedGraph", "org.jgrapht.graph" ], [ "UnmodifiableUndirectedGraph", "org.jgrapht.graph" ], [ "UndirectedSubgraph", "org.jgrapht.graph" ], [ "WeightedMultigraph", "org.jgrapht.graph" ], [ "EdgeReversedGraph", "org.jgrapht.graph" ], [ "AsWeightedGraph", "org.jgrapht.graph" ], [ "DirectedGraphBuilder", "org.jgrapht.graph.builder" ], [ "UndirectedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "UndirectedGraphBuilder", "org.jgrapht.graph.builder" ], [ "UndirectedWeightedGraphBuilder", "org.jgrapht.graph.builder" ], [ "UndirectedWeightedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "DirectedWeightedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "AbstractGraphBuilder", "org.jgrapht.graph.builder" ], [ "DirectedWeightedGraphBuilder", "org.jgrapht.graph.builder" ], [ "DirectedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "ListenableDirectedGraph", "org.jgrapht.graph" ], [ "UnmodifiableDirectedGraph", "org.jgrapht.graph" ], [ "SimpleGraphPath", "org.jgrapht.graph" ], [ "ParanoidGraph", "org.jgrapht.graph" ], [ "DirectedWeightedMultigraph", "org.jgrapht.graph" ], [ "DirectedSubgraph", "org.jgrapht.graph" ], [ "SimpleDirectedGraph", "org.jgrapht.graph" ], [ "GraphHelper", "org.jgrapht" ], [ "Graphs", "org.jgrapht" ], [ "DirectedGraph", "org.jgrapht" ], [ "WeightedGraph", "org.jgrapht" ], [ "HyperCubeGraphGenerator", "org.jgrapht.generate" ], [ "RingGraphGenerator", "org.jgrapht.generate" ], [ "SimpleWeightedGraphMatrixGenerator", "org.jgrapht.generate" ], [ "WeightedGraphGenerator", "org.jgrapht.generate" ], [ "WheelGraphGenerator", "org.jgrapht.generate" ], [ "GridGraphGenerator", "org.jgrapht.generate" ], [ "ScaleFreeGraphGenerator", "org.jgrapht.generate" ], [ "SimpleWeightedBipartiteGraphMatrixGenerator", "org.jgrapht.generate" ], [ "LinearGraphGenerator", "org.jgrapht.generate" ], [ "CompleteGraphGenerator", "org.jgrapht.generate" ], [ "RandomGraphGenerator", "org.jgrapht.generate" ], [ "WeightedGraphGeneratorAdapter", "org.jgrapht.generate" ], [ "EmptyGraphGenerator", "org.jgrapht.generate" ], [ "CompleteBipartiteGraphGenerator", "org.jgrapht.generate" ], [ "GraphGenerator", "org.jgrapht.generate" ], [ "StarGraphGenerator", "org.jgrapht.generate" ], [ "UndirectedGraph", "org.jgrapht" ], [ "TopologicalOrderIterator", "org.jgrapht.traverse" ], [ "CrossComponentIterator", "org.jgrapht.traverse" ], [ "AbstractGraphIterator", "org.jgrapht.traverse" ], [ "ClosestFirstIterator", "org.jgrapht.traverse" ], [ "BreadthFirstIterator", "org.jgrapht.traverse" ], [ "DepthFirstIterator", "org.jgrapht.traverse" ], [ "GraphIterator", "org.jgrapht.traverse" ], [ "EdgeFactory", "org.jgrapht" ], [ "GraphMapping", "org.jgrapht" ], [ "VertexSetListener", "org.jgrapht.event" ], [ "EdgeTraversalEvent", "org.jgrapht.event" ], [ "TraversalListener", "org.jgrapht.event" ], [ "GraphEdgeChangeEvent", "org.jgrapht.event" ], [ "VertexTraversalEvent", "org.jgrapht.event" ], [ "GraphChangeEvent", "org.jgrapht.event" ], [ "GraphListener", "org.jgrapht.event" ], [ "TraversalListenerAdapter", "org.jgrapht.event" ], [ "ConnectedComponentTraversalEvent", "org.jgrapht.event" ], [ "GraphVertexChangeEvent", "org.jgrapht.event" ], [ "TarjanLowestCommonAncestor", "org.jgrapht.alg" ], [ "PrimMinimumSpanningTree", "org.jgrapht.alg" ], [ "BlockCutpointGraph", "org.jgrapht.alg" ], [ "AllDirectedPaths", "org.jgrapht.alg" ], [ "KShortestPathsIterator", "org.jgrapht.alg" ], [ "KruskalMinimumSpanningTree", "org.jgrapht.alg" ], [ "StrongConnectivityInspector", "org.jgrapht.alg" ], [ "VF2State", "org.jgrapht.alg.isomorphism" ], [ "VF2GraphIsomorphismState", "org.jgrapht.alg.isomorphism" ], [ "VF2AbstractIsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "VF2SubgraphIsomorphismState", "org.jgrapht.alg.isomorphism" ], [ "IsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "VF2SubgraphIsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "GraphOrdering", "org.jgrapht.alg.isomorphism" ], [ "VF2GraphMappingIterator", "org.jgrapht.alg.isomorphism" ], [ "IsomorphicGraphMapping", "org.jgrapht.alg.isomorphism" ], [ "VF2GraphIsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "VF2SubgraphMappingIterator", "org.jgrapht.alg.isomorphism" ], [ "VF2MappingIterator", "org.jgrapht.alg.isomorphism" ], [ "BronKerboschCliqueFinder", "org.jgrapht.alg" ], [ "ChromaticNumber", "org.jgrapht.alg" ], [ "KosarajuStrongConnectivityInspector", "org.jgrapht.alg" ], [ "BellmanFordShortestPath", "org.jgrapht.alg" ], [ "DijkstraShortestPath", "org.jgrapht.alg" ], [ "RankingPathElement", "org.jgrapht.alg" ], [ "AStarShortestPath", "org.jgrapht.alg" ], [ "EdmondsKarpMaximumFlow", "org.jgrapht.alg" ], [ "BellmanFordPathElement", "org.jgrapht.alg" ], [ "FloydWarshallShortestPaths", "org.jgrapht.alg" ], [ "UnionFind", "org.jgrapht.alg.util" ], [ "AlwaysEqualComparator", "org.jgrapht.alg.util" ], [ "Extension", "org.jgrapht.alg.util" ], [ "VertexDegreeComparator", "org.jgrapht.alg.util" ], [ "Pair", "org.jgrapht.alg.util" ], [ "GabowStrongConnectivityInspector", "org.jgrapht.alg" ], [ "HawickJamesSimpleCycles", "org.jgrapht.alg.cycle" ], [ "DirectedSimpleCycles", "org.jgrapht.alg.cycle" ], [ "JohnsonSimpleCycles", "org.jgrapht.alg.cycle" ], [ "TiernanSimpleCycles", "org.jgrapht.alg.cycle" ], [ "UndirectedCycleBase", "org.jgrapht.alg.cycle" ], [ "PatonCycleBase", "org.jgrapht.alg.cycle" ], [ "TarjanSimpleCycles", "org.jgrapht.alg.cycle" ], [ "SzwarcfiterLauerSimpleCycles", "org.jgrapht.alg.cycle" ], [ "BiconnectivityInspector", "org.jgrapht.alg" ], [ "ConnectivityInspector", "org.jgrapht.alg" ], [ "MinSourceSinkCut", "org.jgrapht.alg" ], [ "RankingPathElementList", "org.jgrapht.alg" ], [ "EdmondsBlossomShrinking", "org.jgrapht.alg" ], [ "TransitiveClosure", "org.jgrapht.alg" ], [ "HopcroftKarpBipartiteMatching", "org.jgrapht.alg" ], [ "StoerWagnerMinimumCut", "org.jgrapht.alg" ], [ "AbstractPathElementList", "org.jgrapht.alg" ], [ "KuhnMunkresMinimalWeightBipartitePerfectMatching", "org.jgrapht.alg" ], [ "TransitiveReduction", "org.jgrapht.alg" ], [ "EulerianCircuit", "org.jgrapht.alg" ], [ "DirectedNeighborIndex", "org.jgrapht.alg" ], [ "NaiveLcaFinder", "org.jgrapht.alg" ], [ "MaximumWeightBipartiteMatching", "org.jgrapht.alg" ], [ "HamiltonianCycle", "org.jgrapht.alg" ], [ "KShortestPaths", "org.jgrapht.alg" ], [ "NeighborIndex", "org.jgrapht.alg" ], [ "VertexCovers", "org.jgrapht.alg" ], [ "CycleDetector", "org.jgrapht.alg" ], [ "AStarAdmissibleHeuristic", "org.jgrapht.alg.interfaces" ], [ "MinimumSpanningTree", "org.jgrapht.alg.interfaces" ], [ "WeightedMatchingAlgorithm", "org.jgrapht.alg.interfaces" ], [ "StrongConnectivityAlgorithm", "org.jgrapht.alg.interfaces" ], [ "MaximumFlowAlgorithm", "org.jgrapht.alg.interfaces" ], [ "MatchingAlgorithm", "org.jgrapht.alg.interfaces" ], [ "CliqueMinimalSeparatorDecomposition", "org.jgrapht.alg" ], [ "BellmanFordIterator", "org.jgrapht.alg" ], [ "AbstractPathElement", "org.jgrapht.alg" ], [ "EdmondsKarpMaximumFlow", "org.jgrapht.alg.flow" ], [ "PushRelabelMaximumFlow", "org.jgrapht.alg.flow" ], [ "MaximumFlowAlgorithmBase", "org.jgrapht.alg.flow" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "addVertices", "org.jgrapht.experimental", "RandomGraphHelper", "public static Object[] addVertices(Graph target, VertexFactory vertexFactory, int numVertices)" ], [ "isEmpty", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isEmpty(Graph<V, E> g)" ], [ "isComplete", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isComplete(Graph<V, E> g)" ], [ "isConnected", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isConnected(Graph<V, E> g)" ], [ "isTree", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isTree(Graph<V, E> g)" ], [ "isBipartite", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isBipartite(Graph<V, E> g)" ], [ "union", "org.jgrapht.util", "FibonacciHeap", "public static <T> FibonacciHeap<T> union(FibonacciHeap<T> h1, FibonacciHeap<T> h2)" ], [ "uncheckedCast", "org.jgrapht.util", "TypeUtil", "public static <T> T uncheckedCast(Object o, TypeUtil<T> typeDecl)" ], [ "factorial", "org.jgrapht.util", "MathUtil", "public static long factorial(int N)" ], [ "builder", "org.jgrapht.graph", "SimpleGraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends SimpleGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleGraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends SimpleGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "WeightedPseudograph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "WeightedPseudograph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "Pseudograph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Pseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "Pseudograph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Pseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedMultigraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedMultigraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedPseudograph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedPseudograph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "Multigraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Multigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "Multigraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Multigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DefaultDirectedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DefaultDirectedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DefaultDirectedWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DefaultDirectedWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedPseudograph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedPseudograph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "SimpleWeightedGraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends SimpleWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleWeightedGraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends SimpleWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends SimpleDirectedWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends SimpleDirectedWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "WeightedMultigraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "WeightedMultigraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedMultigraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedMultigraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends SimpleDirectedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends SimpleDirectedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "addEdge", "org.jgrapht", "Graphs", "public static <V, E> E addEdge(Graph<V, E> g, V sourceVertex, V targetVertex, double weight)" ], [ "addEdgeWithVertices", "org.jgrapht", "Graphs", "public static <V, E> E addEdgeWithVertices(Graph<V, E> g, V sourceVertex, V targetVertex)" ], [ "addEdgeWithVertices", "org.jgrapht", "Graphs", "public static <V, E> boolean addEdgeWithVertices(Graph<V, E> targetGraph, Graph<V, E> sourceGraph, E edge)" ], [ "addEdgeWithVertices", "org.jgrapht", "Graphs", "public static <V, E> E addEdgeWithVertices(Graph<V, E> g, V sourceVertex, V targetVertex, double weight)" ], [ "addGraph", "org.jgrapht", "Graphs", "public static <V, E> boolean addGraph(Graph<? super V, ? super E> destination, Graph<V, E> source)" ], [ "addAllEdges", "org.jgrapht", "Graphs", "public static <V, E> boolean addAllEdges(Graph<? super V, ? super E> destination, Graph<V, E> source, Collection<? extends E> edges)" ], [ "addAllVertices", "org.jgrapht", "Graphs", "public static <V, E> boolean addAllVertices(Graph<? super V, ? super E> destination, Collection<? extends V> vertices)" ], [ "neighborListOf", "org.jgrapht", "Graphs", "public static <V, E> List<V> neighborListOf(Graph<V, E> g, V vertex)" ], [ "predecessorListOf", "org.jgrapht", "Graphs", "public static <V, E> List<V> predecessorListOf(DirectedGraph<V, E> g, V vertex)" ], [ "successorListOf", "org.jgrapht", "Graphs", "public static <V, E> List<V> successorListOf(DirectedGraph<V, E> g, V vertex)" ], [ "undirectedGraph", "org.jgrapht", "Graphs", "public static <V, E> UndirectedGraph<V, E> undirectedGraph(Graph<V, E> g)" ], [ "testIncidence", "org.jgrapht", "Graphs", "public static <V, E> boolean testIncidence(Graph<V, E> g, E e, V v)" ], [ "getOppositeVertex", "org.jgrapht", "Graphs", "public static <V, E> V getOppositeVertex(Graph<V, E> g, E e, V v)" ], [ "getPathVertexList", "org.jgrapht", "Graphs", "public static <V, E> List<V> getPathVertexList(GraphPath<V, E> path)" ], [ "range", "org.jgrapht.generate", "SimpleWeightedGraphMatrixGenerator", "public static int[] range(final int from, final int to)" ], [ "createGraphSpecifics", "org.jgrapht.traverse", "CrossComponentIterator", "static <V, E> Specifics<V, E> createGraphSpecifics(Graph<V, E> g)" ], [ "findGreedyChromaticNumber", "org.jgrapht.alg", "ChromaticNumber", "public static <V, E> int findGreedyChromaticNumber(UndirectedGraph<V, E> g)" ], [ "findGreedyColoredGroups", "org.jgrapht.alg", "ChromaticNumber", "public static <V, E> Map<Integer, Set<V>> findGreedyColoredGroups(UndirectedGraph<V, E> g)" ], [ "findPathBetween", "org.jgrapht.alg", "BellmanFordShortestPath", "public static <V, E> List<E> findPathBetween(Graph<V, E> graph, V startVertex, V endVertex)" ], [ "findPathBetween", "org.jgrapht.alg", "DijkstraShortestPath", "public static <V, E> List<E> findPathBetween(Graph<V, E> graph, V startVertex, V endVertex)" ], [ "of", "org.jgrapht.alg.util", "Pair", "public static <A, B> Pair<A, B> of(A a, B b)" ], [ "isEulerian", "org.jgrapht.alg", "EulerianCircuit", "public static <V, E> boolean isEulerian(UndirectedGraph<V, E> g)" ], [ "getEulerianCircuitVertices", "org.jgrapht.alg", "EulerianCircuit", "public static <V, E> List<V> getEulerianCircuitVertices(UndirectedGraph<V, E> g)" ], [ "getApproximateOptimalForCompleteGraph", "org.jgrapht.alg", "HamiltonianCycle", "public static <V, E> List<V> getApproximateOptimalForCompleteGraph(SimpleWeightedGraph<V, E> g)" ], [ "find2ApproximationCover", "org.jgrapht.alg", "VertexCovers", "public static <V, E> Set<V> find2ApproximationCover(Graph<V, E> g)" ], [ "findGreedyCover", "org.jgrapht.alg", "VertexCovers", "public static <V, E> Set<V> findGreedyCover(UndirectedGraph<V, E> g)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "BEST_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int BEST_ORDER = 0;" ], [ "NATURAL_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int NATURAL_ORDER = 1;" ], [ "SMALLEST_DEGREE_LAST_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int SMALLEST_DEGREE_LAST_ORDER = 2;" ], [ "LARGEST_SATURATION_FIRST_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int LARGEST_SATURATION_FIRST_ORDER = 3;" ], [ "DEFAULT_EDGE_WEIGHT", "org.jgrapht", "WeightedGraph", "public static double DEFAULT_EDGE_WEIGHT = 1.0;" ], [ "HUB_VERTEX", "org.jgrapht.generate", "WheelGraphGenerator", "public static final String HUB_VERTEX = \"Hub Vertex\";" ], [ "CORNER_VERTEX", "org.jgrapht.generate", "GridGraphGenerator", "public static final String CORNER_VERTEX = \"Corner Vertex\";" ], [ "START_VERTEX", "org.jgrapht.generate", "LinearGraphGenerator", "public static final String START_VERTEX = \"Start Vertex\";" ], [ "END_VERTEX", "org.jgrapht.generate", "LinearGraphGenerator", "public static final String END_VERTEX = \"End Vertex\";" ], [ "CENTER_VERTEX", "org.jgrapht.generate", "StarGraphGenerator", "public static final String CENTER_VERTEX = \"Center Vertex\";" ], [ "SENTINEL", "org.jgrapht.traverse", "DepthFirstIterator", "public static final Object SENTINEL = new Object();" ], [ "BEFORE_EDGE_ADDED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int BEFORE_EDGE_ADDED = 21;" ], [ "BEFORE_EDGE_REMOVED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int BEFORE_EDGE_REMOVED = 22;" ], [ "EDGE_ADDED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int EDGE_ADDED = 23;" ], [ "EDGE_REMOVED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int EDGE_REMOVED = 24;" ], [ "CONNECTED_COMPONENT_STARTED", "org.jgrapht.event", "ConnectedComponentTraversalEvent", "public static final int CONNECTED_COMPONENT_STARTED = 31;" ], [ "CONNECTED_COMPONENT_FINISHED", "org.jgrapht.event", "ConnectedComponentTraversalEvent", "public static final int CONNECTED_COMPONENT_FINISHED = 32;" ], [ "BEFORE_VERTEX_ADDED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int BEFORE_VERTEX_ADDED = 11;" ], [ "BEFORE_VERTEX_REMOVED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int BEFORE_VERTEX_REMOVED = 12;" ], [ "VERTEX_ADDED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int VERTEX_ADDED = 13;" ], [ "VERTEX_REMOVED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int VERTEX_REMOVED = 14;" ], [ "NULL_NODE", "org.jgrapht.alg.isomorphism", "VF2State", "public static final int NULL_NODE = -1;" ], [ "DEBUG", "org.jgrapht.alg.isomorphism", "VF2State", "protected static final boolean DEBUG = false;" ], [ "DEFAULT_EPSILON", "org.jgrapht.alg", "EdmondsKarpMaximumFlow", "public static final double DEFAULT_EPSILON = 0.000000001;" ], [ "INSTANCE", "org.jgrapht.alg", "TransitiveClosure", "public static final TransitiveClosure INSTANCE = new TransitiveClosure();" ], [ "INSTANCE", "org.jgrapht.alg", "TransitiveReduction", "public static final TransitiveReduction INSTANCE = new TransitiveReduction();" ], [ "NEGATIVE_UNDIRECTED_EDGE", "org.jgrapht.alg", "BellmanFordIterator", "protected final static String NEGATIVE_UNDIRECTED_EDGE = \"Negative\" + \"edge-weights are not allowed in an unidrected graph!\";" ], [ "DEFAULT_EPSILON", "org.jgrapht.alg.flow", "MaximumFlowAlgorithmBase", "public static final double DEFAULT_EPSILON = 1e-9;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "edgeClass", "java.lang.Class", "Class<? extends E>" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "clone", "org.jgrapht.graph", "AbstractBaseGraph", "public Object clone()" ], [ "getEdgeTarget", "org.jgrapht.graph", "AbstractBaseGraph", "public V getEdgeTarget(E arg0)" ], [ "getEdgeFactory", "org.jgrapht.graph", "AbstractBaseGraph", "public EdgeFactory<V, E> getEdgeFactory()" ], [ "assertVertexExist", "org.jgrapht.graph", "AbstractGraph", "protected boolean assertVertexExist(V arg0)" ], [ "removeAllEdges", "org.jgrapht.graph", "AbstractGraph", "public Set<E> removeAllEdges(V arg0, V arg1)" ], [ "removeAllEdges", "org.jgrapht.graph", "AbstractGraph", "public boolean removeAllEdges(Collection<? extends E> arg0)" ], [ "removeAllVertices", "org.jgrapht.graph", "AbstractGraph", "public boolean removeAllVertices(Collection<? extends V> arg0)" ], [ "vertexSet", "org.jgrapht.graph", "AbstractBaseGraph", "public Set<V> vertexSet()" ], [ "addVertex", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean addVertex(V arg0)" ], [ "addEdge", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean addEdge(V arg0, V arg1, E arg2)" ], [ "removeEdge", "org.jgrapht.graph", "AbstractBaseGraph", "public E removeEdge(V arg0, V arg1)" ], [ "createDirectedSpecifics", "org.jgrapht.graph", "AbstractBaseGraph", "protected AbstractBaseGraph.DirectedSpecifics createDirectedSpecifics()" ], [ "getEdgeSource", "org.jgrapht.graph", "AbstractBaseGraph", "public V getEdgeSource(E arg0)" ], [ "outDegreeOf", "org.jgrapht.graph", "AbstractBaseGraph", "public int outDegreeOf(V arg0)" ], [ "inDegreeOf", "org.jgrapht.graph", "AbstractBaseGraph", "public int inDegreeOf(V arg0)" ], [ "incomingEdgesOf", "org.jgrapht.graph", "AbstractBaseGraph", "public Set<E> incomingEdgesOf(V arg0)" ], [ "degreeOf", "org.jgrapht.graph", "AbstractBaseGraph", "public int degreeOf(V arg0)" ], [ "equals", "org.jgrapht.graph", "AbstractGraph", "public boolean equals(Object arg0)" ], [ "containsEdge", "org.jgrapht.graph", "AbstractGraph", "public boolean containsEdge(V arg0, V arg1)" ], [ "containsVertex", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean containsVertex(V arg0)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "isAllowingLoops", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean isAllowingLoops()" ], [ "removeAllEdges", "org.jgrapht.graph", "AbstractGraph", "protected boolean removeAllEdges(E[] arg0)" ], [ "getEdgeWeight", "org.jgrapht.graph", "AbstractBaseGraph", "public double getEdgeWeight(E arg0)" ], [ "getEdge", "org.jgrapht.graph", "AbstractBaseGraph", "public E getEdge(V arg0, V arg1)" ], [ "toStringFromSets", "org.jgrapht.graph", "AbstractGraph", "protected String toStringFromSets(Collection<? extends V> arg0, Collection<? extends E> arg1, boolean arg2)" ], [ "createUndirectedSpecifics", "org.jgrapht.graph", "AbstractBaseGraph", "protected AbstractBaseGraph.UndirectedSpecifics createUndirectedSpecifics()" ], [ "edgesOf", "org.jgrapht.graph", "AbstractBaseGraph", "public Set<E> edgesOf(V arg0)" ], [ "removeVertex", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean removeVertex(V arg0)" ], [ "hashCode", "org.jgrapht.graph", "AbstractGraph", "public int hashCode()" ], [ "removeEdge", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean removeEdge(E arg0)" ], [ "getAllEdges", "org.jgrapht.graph", "AbstractBaseGraph", "public Set<E> getAllEdges(V arg0, V arg1)" ], [ "edgeSet", "org.jgrapht.graph", "AbstractBaseGraph", "public Set<E> edgeSet()" ], [ "addEdge", "org.jgrapht.graph", "AbstractBaseGraph", "public E addEdge(V arg0, V arg1)" ], [ "outgoingEdgesOf", "org.jgrapht.graph", "AbstractBaseGraph", "public Set<E> outgoingEdgesOf(V arg0)" ], [ "toString", "org.jgrapht.graph", "AbstractGraph", "public String toString()" ], [ "isAllowingMultipleEdges", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean isAllowingMultipleEdges()" ], [ "containsEdge", "org.jgrapht.graph", "AbstractBaseGraph", "public boolean containsEdge(E arg0)" ], [ "getEnumConstants", "java.lang", "Class", "public T[] getEnumConstants()" ], [ "enumConstantDirectory", "java.lang", "Class", "Map<String, T> enumConstantDirectory()" ], [ "getDeclaringClass", "java.lang", "Class", "public Class<? extends Object> getDeclaringClass() throws SecurityException" ], [ "asSubclass", "java.lang", "Class", "public <U> Class<? extends U> asSubclass(Class<U> arg0)" ], [ "getDeclaredConstructor", "java.lang", "Class", "public Constructor<T> getDeclaredConstructor(Class<? extends Object>[] arg0) throws NoSuchMethodException, SecurityException" ], [ "getAnnotationType", "java.lang", "Class", "AnnotationType getAnnotationType()" ], [ "getGenericInterfaces", "java.lang", "Class", "public Type[] getGenericInterfaces()" ], [ "getTypeName", "java.lang", "Class", "public String getTypeName()" ], [ "getDeclaredAnnotation", "java.lang", "Class", "public <A> A getDeclaredAnnotation(Class<A> arg0)" ], [ "getDeclaredAnnotationMap", "java.lang", "Class", "Map<Class<? extends Annotation>, Annotation> getDeclaredAnnotationMap()" ], [ "arrayType", "java.lang", "Class", "public Class<? extends Object> arrayType()" ], [ "isAnnotation", "java.lang", "Class", "public boolean isAnnotation()" ], [ "getAnnotatedSuperclass", "java.lang", "Class", "public AnnotatedType getAnnotatedSuperclass()" ], [ "getAnnotationsByType", "java.lang", "Class", "public <A> A[] getAnnotationsByType(Class<A> arg0)" ], [ "getEnclosingClass", "java.lang", "Class", "public Class<? extends Object> getEnclosingClass() throws SecurityException" ], [ "getDeclaredFields", "java.lang", "Class", "public Field[] getDeclaredFields() throws SecurityException" ], [ "cast", "java.lang", "Class", "public T cast(Object arg0)" ], [ "isPrimitive", "java.lang", "Class", "public native boolean isPrimitive()" ], [ "getDeclaredConstructors", "java.lang", "Class", "public Constructor<? extends Object>[] getDeclaredConstructors() throws SecurityException" ], [ "getDeclaredMethods", "java.lang", "Class", "public Method[] getDeclaredMethods() throws SecurityException" ], [ "getDeclaredAnnotationsByType", "java.lang", "Class", "public <A> A[] getDeclaredAnnotationsByType(Class<A> arg0)" ], [ "getDeclaredAnnotations", "java.lang", "Class", "public Annotation[] getDeclaredAnnotations()" ], [ "isAssignableFrom", "java.lang", "Class", "public native boolean isAssignableFrom(Class<? extends Object> arg0)" ], [ "getComponentType", "java.lang", "Class", "public Class<? extends Object> getComponentType()" ], [ "getClassLoader0", "java.lang", "Class", "ClassLoader getClassLoader0()" ], [ "getSigners", "java.lang", "Class", "public native Object[] getSigners()" ], [ "getClasses", "java.lang", "Class", "public Class<? extends Object>[] getClasses()" ], [ "getConstantPool", "java.lang", "Class", "native ConstantPool getConstantPool()" ], [ "isAnonymousClass", "java.lang", "Class", "public boolean isAnonymousClass()" ], [ "getAnnotatedInterfaces", "java.lang", "Class", "public AnnotatedType[] getAnnotatedInterfaces()" ], [ "getPermittedSubclasses", "java.lang", "Class", "public Class<? extends Object>[] getPermittedSubclasses()" ], [ "getClassLoader", "java.lang", "Class", "public ClassLoader getClassLoader()" ], [ "getEnclosingMethod", "java.lang", "Class", "public Method getEnclosingMethod() throws SecurityException" ], [ "getEnclosingConstructor", "java.lang", "Class", "public Constructor<? extends Object> getEnclosingConstructor() throws SecurityException" ], [ "toGenericString", "java.lang", "Class", "public String toGenericString()" ], [ "casAnnotationType", "java.lang", "Class", "boolean casAnnotationType(AnnotationType arg0, AnnotationType arg1)" ], [ "getMethods", "java.lang", "Class", "public Method[] getMethods() throws SecurityException" ], [ "getAnnotations", "java.lang", "Class", "public Annotation[] getAnnotations()" ], [ "getMethod", "java.lang", "Class", "public Method getMethod(String arg0, Class<? extends Object>[] arg1) throws NoSuchMethodException, SecurityException" ], [ "isSynthetic", "java.lang", "Class", "public boolean isSynthetic()" ], [ "getRawTypeAnnotations", "java.lang", "Class", "native byte[] getRawTypeAnnotations()" ], [ "isArray", "java.lang", "Class", "public native boolean isArray()" ], [ "getDeclaredField", "java.lang", "Class", "public Field getDeclaredField(String arg0) throws NoSuchFieldException, SecurityException" ], [ "isEnum", "java.lang", "Class", "public boolean isEnum()" ], [ "getClassData", "java.lang", "Class", "Object getClassData()" ], [ "componentType", "java.lang", "Class", "public Class<? extends Object> componentType()" ], [ "isInstance", "java.lang", "Class", "public native boolean isInstance(Object arg0)" ], [ "isSealed", "java.lang", "Class", "public boolean isSealed()" ], [ "getDeclaredPublicMethods", "java.lang", "Class", "List<Method> getDeclaredPublicMethods(String arg0, Class<? extends Object>[] arg1)" ], [ "isAnnotationPresent", "java.lang", "Class", "public boolean isAnnotationPresent(Class<? extends Annotation> arg0)" ], [ "getResource", "java.lang", "Class", "public URL getResource(String arg0)" ], [ "getName", "java.lang", "Class", "public String getName()" ], [ "desiredAssertionStatus", "java.lang", "Class", "public boolean desiredAssertionStatus()" ], [ "getFields", "java.lang", "Class", "public Field[] getFields() throws SecurityException" ], [ "isLocalClass", "java.lang", "Class", "public boolean isLocalClass()" ], [ "getPackage", "java.lang", "Class", "public Package getPackage()" ], [ "getPackageName", "java.lang", "Class", "public String getPackageName()" ], [ "getConstructor", "java.lang", "Class", "public Constructor<T> getConstructor(Class<? extends Object>[] arg0) throws NoSuchMethodException, SecurityException" ], [ "getSuperclass", "java.lang", "Class", "public native Class<? super T> getSuperclass()" ], [ "toString", "java.lang", "Class", "public String toString()" ], [ "getInterfaces", "java.lang", "Class", "public Class<? extends Object>[] getInterfaces()" ], [ "getRawAnnotations", "java.lang", "Class", "native byte[] getRawAnnotations()" ], [ "getConstructors", "java.lang", "Class", "public Constructor<? extends Object>[] getConstructors() throws SecurityException" ], [ "getAnnotation", "java.lang", "Class", "public <A> A getAnnotation(Class<A> arg0)" ], [ "protectionDomain", "java.lang", "Class", "ProtectionDomain protectionDomain()" ], [ "getDeclaredMethod", "java.lang", "Class", "public Method getDeclaredMethod(String arg0, Class<? extends Object>[] arg1) throws NoSuchMethodException, SecurityException" ], [ "newInstance", "java.lang", "Class", "public T newInstance() throws InstantiationException, IllegalAccessException" ], [ "getGenericSuperclass", "java.lang", "Class", "public Type getGenericSuperclass()" ], [ "describeConstable", "java.lang", "Class", "public Optional<ClassDesc> describeConstable()" ], [ "isNestmateOf", "java.lang", "Class", "public boolean isNestmateOf(Class<? extends Object> arg0)" ], [ "getResourceAsStream", "java.lang", "Class", "public InputStream getResourceAsStream(String arg0)" ], [ "getProtectionDomain", "java.lang", "Class", "public ProtectionDomain getProtectionDomain()" ], [ "isRecord", "java.lang", "Class", "public boolean isRecord()" ], [ "getEnumConstantsShared", "java.lang", "Class", "T[] getEnumConstantsShared()" ], [ "getDeclaredClasses", "java.lang", "Class", "public Class<? extends Object>[] getDeclaredClasses() throws SecurityException" ], [ "getModule", "java.lang", "Class", "public Module getModule()" ], [ "descriptorString", "java.lang", "Class", "public String descriptorString()" ], [ "getField", "java.lang", "Class", "public Field getField(String arg0) throws NoSuchFieldException, SecurityException" ], [ "getNestHost", "java.lang", "Class", "public Class<? extends Object> getNestHost()" ], [ "getNestMembers", "java.lang", "Class", "public Class<? extends Object>[] getNestMembers()" ], [ "getSimpleName", "java.lang", "Class", "public String getSimpleName()" ], [ "getModifiers", "java.lang", "Class", "public native int getModifiers()" ], [ "isMemberClass", "java.lang", "Class", "public boolean isMemberClass()" ], [ "isHidden", "java.lang", "Class", "public native boolean isHidden()" ], [ "isInterface", "java.lang", "Class", "public native boolean isInterface()" ], [ "getCanonicalName", "java.lang", "Class", "public String getCanonicalName()" ], [ "getTypeParameters", "java.lang", "Class", "public TypeVariable<Class<T>>[] getTypeParameters()" ], [ "getRecordComponents", "java.lang", "Class", "public RecordComponent[] getRecordComponents()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "getTypeParameters", "java.lang.reflect", "GenericDeclaration", "public abstract TypeVariable<? extends Object>[] getTypeParameters()" ], [ "getAnnotation", "java.lang.reflect", "AnnotatedElement", "public abstract <T> T getAnnotation(Class<T> arg0)" ], [ "getDeclaredAnnotation", "java.lang.reflect", "AnnotatedElement", "public default <T> T getDeclaredAnnotation(Class<T> arg0)" ], [ "getDeclaredAnnotations", "java.lang.reflect", "AnnotatedElement", "public abstract Annotation[] getDeclaredAnnotations()" ], [ "getDeclaredAnnotationsByType", "java.lang.reflect", "AnnotatedElement", "public default <T> T[] getDeclaredAnnotationsByType(Class<T> arg0)" ], [ "getAnnotations", "java.lang.reflect", "AnnotatedElement", "public abstract Annotation[] getAnnotations()" ], [ "isAnnotationPresent", "java.lang.reflect", "AnnotatedElement", "public default boolean isAnnotationPresent(Class<? extends Annotation> arg0)" ], [ "getAnnotationsByType", "java.lang.reflect", "AnnotatedElement", "public default <T> T[] getAnnotationsByType(Class<T> arg0)" ], [ "getTypeName", "java.lang.reflect", "Type", "public default String getTypeName()" ], [ "arrayType", "java.lang.invoke", "TypeDescriptor.OfField", "public abstract F arrayType()" ], [ "isPrimitive", "java.lang.invoke", "TypeDescriptor.OfField", "public abstract boolean isPrimitive()" ], [ "componentType", "java.lang.invoke", "TypeDescriptor.OfField", "public abstract F componentType()" ], [ "isArray", "java.lang.invoke", "TypeDescriptor.OfField", "public abstract boolean isArray()" ], [ "descriptorString", "java.lang.invoke", "TypeDescriptor", "public abstract String descriptorString()" ], [ "describeConstable", "java.lang.constant", "Constable", "public abstract Optional<? extends ConstantDesc> describeConstable()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "allowingLoops", "org.jgrapht.graph", "AbstractBaseGraph", "boolean allowingLoops;" ], [ "classValueMap", "java.lang", "Class", "transient ClassValue.ClassValueMap classValueMap;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 26019,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "jgrapht-core-0.9.2",
  "packageName" : "org.jgrapht.graph",
  "className" : "AsWeightedGraph",
  "javadocTag" : "@param g the backing graph over which a weighted view is to be created.",
  "methodJavadoc" : "    /**\n     * Constructor for AsWeightedGraph.\n     *\n     * @param g the backing graph over which a weighted view is to be created.\n     * @param weightMap A mapping of edges to weights. If an edge is not present\n     * in the weight map, the edge weight for the underlying graph is returned.\n     * Note that a live reference to this map is retained, so if the caller\n     * changes the map after construction, the changes will affect the\n     * AsWeightedGraph instance as well.\n     */",
  "methodSourceCode" : "public AsWeightedGraph(Graph<V, E> g, Map<E, Double> weightMap){\n    super(g);\n    assert (weightMap != null);\n    this.weightMap = weightMap;\n    // Remember whether the backing graph implements the WeightedGraph\n    // interface\n    this.isWeightedGraph = (g instanceof WeightedGraph<?, ?>);\n}",
  "classJavadoc" : "/**\n * <p>A weighted view of the backing graph specified in the constructor. This\n * graph allows modules to apply algorithms designed for weighted graphs to an\n * unweighted graph by providing an explicit edge weight mapping. The\n * implementation also allows for \"masking\" weights for a subset of the edges in\n * an existing weighted graph.</p>\n *\n * <p>Query operations on this graph \"read through\" to the backing graph. Vertex\n * addition/removal and edge addition/removal are all supported (and immediately\n * reflected in the backing graph). Setting an edge weight will pass the\n * operation to the backing graph as well if the backing graph implements the\n * WeightedGraph interface. Setting an edge weight will modify the weight map in\n * order to maintain a consistent graph.</p>\n *\n * <p>Note that edges returned by this graph's accessors are really just the\n * edges of the underlying directed graph.</p>\n *\n * <p>This graph does <i>not</i> pass the hashCode and equals operations through\n * to the backing graph, but relies on <tt>Object</tt>'s <tt>equals</tt> and\n * <tt>hashCode</tt> methods. This graph will be serializable if the backing\n * graph is serializable.</p>\n *\n * @author Lucas J. Scharenbroich\n * @since Sep 10, 2007\n */",
  "classSourceCode" : "/* ==========================================\n * JGraphT : a free Java graph-theory library\n * ==========================================\n *\n * Project Info:  http://jgrapht.sourceforge.net/\n * Project Creator:  Barak Naveh (http://sourceforge.net/users/barak_naveh)\n *\n * (C) Copyright 2003-2008, by Barak Naveh and Contributors.\n *\n * This program and the accompanying materials are dual-licensed under\n * either\n *\n * (a) the terms of the GNU Lesser General Public License version 2.1\n * as published by the Free Software Foundation, or (at your option) any\n * later version.\n *\n * or (per the licensee's choosing)\n *\n * (b) the terms of the Eclipse Public License v1.0 as published by\n * the Eclipse Foundation.\n */\n/*  ----------------------\n * AsWeightedGraph.java\n * ----------------------\n * (C) Copyright 2007, by Lucas J. Scharenbroich and Contributors.\n *\n * Original Author:  Lucas J. Scharenbroich\n * Contributor(s):   John V. Sichi\n *\n * $Id$\n *\n * Changes\n * -------\n * 10-Sep-2007 : Initial revision (LJS);\n *\n */\npackage org.jgrapht.graph;\n\nimport java.io.*;\n\nimport java.util.*;\n\nimport org.jgrapht.*;\n\n\n/**\n * <p>A weighted view of the backing graph specified in the constructor. This\n * graph allows modules to apply algorithms designed for weighted graphs to an\n * unweighted graph by providing an explicit edge weight mapping. The\n * implementation also allows for \"masking\" weights for a subset of the edges in\n * an existing weighted graph.</p>\n *\n * <p>Query operations on this graph \"read through\" to the backing graph. Vertex\n * addition/removal and edge addition/removal are all supported (and immediately\n * reflected in the backing graph). Setting an edge weight will pass the\n * operation to the backing graph as well if the backing graph implements the\n * WeightedGraph interface. Setting an edge weight will modify the weight map in\n * order to maintain a consistent graph.</p>\n *\n * <p>Note that edges returned by this graph's accessors are really just the\n * edges of the underlying directed graph.</p>\n *\n * <p>This graph does <i>not</i> pass the hashCode and equals operations through\n * to the backing graph, but relies on <tt>Object</tt>'s <tt>equals</tt> and\n * <tt>hashCode</tt> methods. This graph will be serializable if the backing\n * graph is serializable.</p>\n *\n * @author Lucas J. Scharenbroich\n * @since Sep 10, 2007\n */\npublic class AsWeightedGraph<V, E>\n    extends GraphDelegator<V, E>\n    implements Serializable,\n        WeightedGraph<V, E>\n{\n    /**\n     */\n    private static final long serialVersionUID = -716810639338971372L;\n\n    protected final Map<E, Double> weightMap;\n    private final boolean isWeightedGraph;\n\n    /**\n     * Constructor for AsWeightedGraph.\n     *\n     * @param g the backing graph over which a weighted view is to be created.\n     * @param weightMap A mapping of edges to weights. If an edge is not present\n     * in the weight map, the edge weight for the underlying graph is returned.\n     * Note that a live reference to this map is retained, so if the caller\n     * changes the map after construction, the changes will affect the\n     * AsWeightedGraph instance as well.\n     */\n    public AsWeightedGraph(Graph<V, E> g, Map<E, Double> weightMap)\n    {\n        super(g);\n        assert (weightMap != null);\n        this.weightMap = weightMap;\n\n        // Remember whether the backing graph implements the WeightedGraph\n        // interface\n        this.isWeightedGraph = (g instanceof WeightedGraph<?, ?>);\n    }\n\n    /**\n     * @see WeightedGraph#setEdgeWeight\n     */\n    @Override public void setEdgeWeight(E e, double weight)\n    {\n        if (isWeightedGraph) {\n            super.setEdgeWeight(e, weight);\n        }\n\n        // Always modify the weight map.  It would be a terrible violation\n        // of the use contract to silently ignore changes to the weights.\n        weightMap.put(e, weight);\n    }\n\n    /**\n     * @see Graph#getEdgeWeight\n     */\n    @Override public double getEdgeWeight(E e)\n    {\n        double weight;\n\n        // Always return the value from the weight map first and\n        // only pass the call through as a backup\n        if (weightMap.containsKey(e)) {\n            weight = weightMap.get(e);\n        } else {\n            weight = super.getEdgeWeight(e);\n        }\n\n        return weight;\n    }\n}\n\n// End AsWeightedGraph.java\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "PartiteRandomGraphGenerator", "org.jgrapht.experimental" ], [ "RandomGraphHelper", "org.jgrapht.experimental" ], [ "GraphReader", "org.jgrapht.experimental" ], [ "DirectedAcyclicGraph", "org.jgrapht.experimental.dag" ], [ "GraphSquare", "org.jgrapht.experimental" ], [ "UniformRandomGraphGenerator", "org.jgrapht.experimental" ], [ "GraphTests", "org.jgrapht.experimental" ], [ "ApproximationAlgorithm", "org.jgrapht.experimental.alg" ], [ "BrownBacktrackColoring", "org.jgrapht.experimental.alg.color" ], [ "GreedyColoring", "org.jgrapht.experimental.alg.color" ], [ "IntArrayGraphAlgorithm", "org.jgrapht.experimental.alg" ], [ "ExactAlgorithm", "org.jgrapht.experimental.alg" ], [ "ListenableGraph", "org.jgrapht" ], [ "ModifiableInteger", "org.jgrapht.util" ], [ "FibonacciHeapNode", "org.jgrapht.util" ], [ "WeightCombiner", "org.jgrapht.util" ], [ "FibonacciHeap", "org.jgrapht.util" ], [ "TypeUtil", "org.jgrapht.util" ], [ "ArrayUnenforcedSet", "org.jgrapht.util" ], [ "VertexPair", "org.jgrapht.util" ], [ "MathUtil", "org.jgrapht.util" ], [ "PrefetchIterator", "org.jgrapht.util" ], [ "VertexFactory", "org.jgrapht" ], [ "Graph", "org.jgrapht" ], [ "GraphPath", "org.jgrapht" ], [ "UndirectedGraphUnion", "org.jgrapht.graph" ], [ "SimpleGraph", "org.jgrapht.graph" ], [ "MixedGraphUnion", "org.jgrapht.graph" ], [ "DefaultGraphMapping", "org.jgrapht.graph" ], [ "WeightedPseudograph", "org.jgrapht.graph" ], [ "UndirectedMaskSubgraph", "org.jgrapht.graph" ], [ "MaskEdgeSet", "org.jgrapht.graph" ], [ "Pseudograph", "org.jgrapht.graph" ], [ "MaskFunctor", "org.jgrapht.graph" ], [ "GraphUnion", "org.jgrapht.graph" ], [ "DirectedMaskSubgraph", "org.jgrapht.graph" ], [ "DirectedMultigraph", "org.jgrapht.graph" ], [ "AbstractBaseGraph", "org.jgrapht.graph" ], [ "DirectedWeightedPseudograph", "org.jgrapht.graph" ], [ "Multigraph", "org.jgrapht.graph" ], [ "DefaultDirectedGraph", "org.jgrapht.graph" ], [ "DefaultWeightedEdge", "org.jgrapht.graph" ], [ "ListenableDirectedWeightedGraph", "org.jgrapht.graph" ], [ "DirectedGraphUnion", "org.jgrapht.graph" ], [ "AsUnweightedGraph", "org.jgrapht.graph" ], [ "EdgeSetFactory", "org.jgrapht.graph" ], [ "GraphDelegator", "org.jgrapht.graph" ], [ "DefaultListenableGraph", "org.jgrapht.graph" ], [ "AsUndirectedGraph", "org.jgrapht.graph" ], [ "ClassBasedVertexFactory", "org.jgrapht.graph" ], [ "DefaultEdge", "org.jgrapht.graph" ], [ "MaskVertexSet", "org.jgrapht.graph" ], [ "ListenableUndirectedGraph", "org.jgrapht.graph" ], [ "DirectedWeightedSubgraph", "org.jgrapht.graph" ], [ "ListenableUndirectedWeightedGraph", "org.jgrapht.graph" ], [ "AsUnweightedDirectedGraph", "org.jgrapht.graph" ], [ "DefaultDirectedWeightedGraph", "org.jgrapht.graph" ], [ "IntrusiveEdge", "org.jgrapht.graph" ], [ "UnmodifiableGraph", "org.jgrapht.graph" ], [ "GraphPathImpl", "org.jgrapht.graph" ], [ "Subgraph", "org.jgrapht.graph" ], [ "UndirectedWeightedSubgraph", "org.jgrapht.graph" ], [ "DirectedPseudograph", "org.jgrapht.graph" ], [ "AbstractGraph", "org.jgrapht.graph" ], [ "MaskSubgraph", "org.jgrapht.graph" ], [ "ClassBasedEdgeFactory", "org.jgrapht.graph" ], [ "SimpleWeightedGraph", "org.jgrapht.graph" ], [ "AsWeightedDirectedGraph", "org.jgrapht.graph" ], [ "SimpleDirectedWeightedGraph", "org.jgrapht.graph" ], [ "UnmodifiableUndirectedGraph", "org.jgrapht.graph" ], [ "UndirectedSubgraph", "org.jgrapht.graph" ], [ "WeightedMultigraph", "org.jgrapht.graph" ], [ "EdgeReversedGraph", "org.jgrapht.graph" ], [ "AsWeightedGraph", "org.jgrapht.graph" ], [ "DirectedGraphBuilder", "org.jgrapht.graph.builder" ], [ "UndirectedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "UndirectedGraphBuilder", "org.jgrapht.graph.builder" ], [ "UndirectedWeightedGraphBuilder", "org.jgrapht.graph.builder" ], [ "UndirectedWeightedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "DirectedWeightedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "AbstractGraphBuilder", "org.jgrapht.graph.builder" ], [ "DirectedWeightedGraphBuilder", "org.jgrapht.graph.builder" ], [ "DirectedGraphBuilderBase", "org.jgrapht.graph.builder" ], [ "ListenableDirectedGraph", "org.jgrapht.graph" ], [ "UnmodifiableDirectedGraph", "org.jgrapht.graph" ], [ "SimpleGraphPath", "org.jgrapht.graph" ], [ "ParanoidGraph", "org.jgrapht.graph" ], [ "DirectedWeightedMultigraph", "org.jgrapht.graph" ], [ "DirectedSubgraph", "org.jgrapht.graph" ], [ "SimpleDirectedGraph", "org.jgrapht.graph" ], [ "GraphHelper", "org.jgrapht" ], [ "Graphs", "org.jgrapht" ], [ "DirectedGraph", "org.jgrapht" ], [ "WeightedGraph", "org.jgrapht" ], [ "HyperCubeGraphGenerator", "org.jgrapht.generate" ], [ "RingGraphGenerator", "org.jgrapht.generate" ], [ "SimpleWeightedGraphMatrixGenerator", "org.jgrapht.generate" ], [ "WeightedGraphGenerator", "org.jgrapht.generate" ], [ "WheelGraphGenerator", "org.jgrapht.generate" ], [ "GridGraphGenerator", "org.jgrapht.generate" ], [ "ScaleFreeGraphGenerator", "org.jgrapht.generate" ], [ "SimpleWeightedBipartiteGraphMatrixGenerator", "org.jgrapht.generate" ], [ "LinearGraphGenerator", "org.jgrapht.generate" ], [ "CompleteGraphGenerator", "org.jgrapht.generate" ], [ "RandomGraphGenerator", "org.jgrapht.generate" ], [ "WeightedGraphGeneratorAdapter", "org.jgrapht.generate" ], [ "EmptyGraphGenerator", "org.jgrapht.generate" ], [ "CompleteBipartiteGraphGenerator", "org.jgrapht.generate" ], [ "GraphGenerator", "org.jgrapht.generate" ], [ "StarGraphGenerator", "org.jgrapht.generate" ], [ "UndirectedGraph", "org.jgrapht" ], [ "TopologicalOrderIterator", "org.jgrapht.traverse" ], [ "CrossComponentIterator", "org.jgrapht.traverse" ], [ "AbstractGraphIterator", "org.jgrapht.traverse" ], [ "ClosestFirstIterator", "org.jgrapht.traverse" ], [ "BreadthFirstIterator", "org.jgrapht.traverse" ], [ "DepthFirstIterator", "org.jgrapht.traverse" ], [ "GraphIterator", "org.jgrapht.traverse" ], [ "EdgeFactory", "org.jgrapht" ], [ "GraphMapping", "org.jgrapht" ], [ "VertexSetListener", "org.jgrapht.event" ], [ "EdgeTraversalEvent", "org.jgrapht.event" ], [ "TraversalListener", "org.jgrapht.event" ], [ "GraphEdgeChangeEvent", "org.jgrapht.event" ], [ "VertexTraversalEvent", "org.jgrapht.event" ], [ "GraphChangeEvent", "org.jgrapht.event" ], [ "GraphListener", "org.jgrapht.event" ], [ "TraversalListenerAdapter", "org.jgrapht.event" ], [ "ConnectedComponentTraversalEvent", "org.jgrapht.event" ], [ "GraphVertexChangeEvent", "org.jgrapht.event" ], [ "TarjanLowestCommonAncestor", "org.jgrapht.alg" ], [ "PrimMinimumSpanningTree", "org.jgrapht.alg" ], [ "BlockCutpointGraph", "org.jgrapht.alg" ], [ "AllDirectedPaths", "org.jgrapht.alg" ], [ "KShortestPathsIterator", "org.jgrapht.alg" ], [ "KruskalMinimumSpanningTree", "org.jgrapht.alg" ], [ "StrongConnectivityInspector", "org.jgrapht.alg" ], [ "VF2State", "org.jgrapht.alg.isomorphism" ], [ "VF2GraphIsomorphismState", "org.jgrapht.alg.isomorphism" ], [ "VF2AbstractIsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "VF2SubgraphIsomorphismState", "org.jgrapht.alg.isomorphism" ], [ "IsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "VF2SubgraphIsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "GraphOrdering", "org.jgrapht.alg.isomorphism" ], [ "VF2GraphMappingIterator", "org.jgrapht.alg.isomorphism" ], [ "IsomorphicGraphMapping", "org.jgrapht.alg.isomorphism" ], [ "VF2GraphIsomorphismInspector", "org.jgrapht.alg.isomorphism" ], [ "VF2SubgraphMappingIterator", "org.jgrapht.alg.isomorphism" ], [ "VF2MappingIterator", "org.jgrapht.alg.isomorphism" ], [ "BronKerboschCliqueFinder", "org.jgrapht.alg" ], [ "ChromaticNumber", "org.jgrapht.alg" ], [ "KosarajuStrongConnectivityInspector", "org.jgrapht.alg" ], [ "BellmanFordShortestPath", "org.jgrapht.alg" ], [ "DijkstraShortestPath", "org.jgrapht.alg" ], [ "RankingPathElement", "org.jgrapht.alg" ], [ "AStarShortestPath", "org.jgrapht.alg" ], [ "EdmondsKarpMaximumFlow", "org.jgrapht.alg" ], [ "BellmanFordPathElement", "org.jgrapht.alg" ], [ "FloydWarshallShortestPaths", "org.jgrapht.alg" ], [ "UnionFind", "org.jgrapht.alg.util" ], [ "AlwaysEqualComparator", "org.jgrapht.alg.util" ], [ "Extension", "org.jgrapht.alg.util" ], [ "VertexDegreeComparator", "org.jgrapht.alg.util" ], [ "Pair", "org.jgrapht.alg.util" ], [ "GabowStrongConnectivityInspector", "org.jgrapht.alg" ], [ "HawickJamesSimpleCycles", "org.jgrapht.alg.cycle" ], [ "DirectedSimpleCycles", "org.jgrapht.alg.cycle" ], [ "JohnsonSimpleCycles", "org.jgrapht.alg.cycle" ], [ "TiernanSimpleCycles", "org.jgrapht.alg.cycle" ], [ "UndirectedCycleBase", "org.jgrapht.alg.cycle" ], [ "PatonCycleBase", "org.jgrapht.alg.cycle" ], [ "TarjanSimpleCycles", "org.jgrapht.alg.cycle" ], [ "SzwarcfiterLauerSimpleCycles", "org.jgrapht.alg.cycle" ], [ "BiconnectivityInspector", "org.jgrapht.alg" ], [ "ConnectivityInspector", "org.jgrapht.alg" ], [ "MinSourceSinkCut", "org.jgrapht.alg" ], [ "RankingPathElementList", "org.jgrapht.alg" ], [ "EdmondsBlossomShrinking", "org.jgrapht.alg" ], [ "TransitiveClosure", "org.jgrapht.alg" ], [ "HopcroftKarpBipartiteMatching", "org.jgrapht.alg" ], [ "StoerWagnerMinimumCut", "org.jgrapht.alg" ], [ "AbstractPathElementList", "org.jgrapht.alg" ], [ "KuhnMunkresMinimalWeightBipartitePerfectMatching", "org.jgrapht.alg" ], [ "TransitiveReduction", "org.jgrapht.alg" ], [ "EulerianCircuit", "org.jgrapht.alg" ], [ "DirectedNeighborIndex", "org.jgrapht.alg" ], [ "NaiveLcaFinder", "org.jgrapht.alg" ], [ "MaximumWeightBipartiteMatching", "org.jgrapht.alg" ], [ "HamiltonianCycle", "org.jgrapht.alg" ], [ "KShortestPaths", "org.jgrapht.alg" ], [ "NeighborIndex", "org.jgrapht.alg" ], [ "VertexCovers", "org.jgrapht.alg" ], [ "CycleDetector", "org.jgrapht.alg" ], [ "AStarAdmissibleHeuristic", "org.jgrapht.alg.interfaces" ], [ "MinimumSpanningTree", "org.jgrapht.alg.interfaces" ], [ "WeightedMatchingAlgorithm", "org.jgrapht.alg.interfaces" ], [ "StrongConnectivityAlgorithm", "org.jgrapht.alg.interfaces" ], [ "MaximumFlowAlgorithm", "org.jgrapht.alg.interfaces" ], [ "MatchingAlgorithm", "org.jgrapht.alg.interfaces" ], [ "CliqueMinimalSeparatorDecomposition", "org.jgrapht.alg" ], [ "BellmanFordIterator", "org.jgrapht.alg" ], [ "AbstractPathElement", "org.jgrapht.alg" ], [ "EdmondsKarpMaximumFlow", "org.jgrapht.alg.flow" ], [ "PushRelabelMaximumFlow", "org.jgrapht.alg.flow" ], [ "MaximumFlowAlgorithmBase", "org.jgrapht.alg.flow" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "addVertices", "org.jgrapht.experimental", "RandomGraphHelper", "public static Object[] addVertices(Graph target, VertexFactory vertexFactory, int numVertices)" ], [ "isEmpty", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isEmpty(Graph<V, E> g)" ], [ "isComplete", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isComplete(Graph<V, E> g)" ], [ "isConnected", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isConnected(Graph<V, E> g)" ], [ "isTree", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isTree(Graph<V, E> g)" ], [ "isBipartite", "org.jgrapht.experimental", "GraphTests", "public static <V, E> boolean isBipartite(Graph<V, E> g)" ], [ "union", "org.jgrapht.util", "FibonacciHeap", "public static <T> FibonacciHeap<T> union(FibonacciHeap<T> h1, FibonacciHeap<T> h2)" ], [ "uncheckedCast", "org.jgrapht.util", "TypeUtil", "public static <T> T uncheckedCast(Object o, TypeUtil<T> typeDecl)" ], [ "factorial", "org.jgrapht.util", "MathUtil", "public static long factorial(int N)" ], [ "builder", "org.jgrapht.graph", "SimpleGraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends SimpleGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleGraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends SimpleGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "WeightedPseudograph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "WeightedPseudograph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "Pseudograph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Pseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "Pseudograph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Pseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedMultigraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedMultigraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedPseudograph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedPseudograph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "Multigraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Multigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "Multigraph", "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Multigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DefaultDirectedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DefaultDirectedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DefaultDirectedWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DefaultDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DefaultDirectedWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedPseudograph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedPseudograph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "SimpleWeightedGraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends SimpleWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleWeightedGraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends SimpleWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends SimpleDirectedWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedWeightedGraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends SimpleDirectedWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "WeightedMultigraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "WeightedMultigraph", "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedMultigraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "DirectedWeightedMultigraph", "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends SimpleDirectedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)" ], [ "builder", "org.jgrapht.graph", "SimpleDirectedGraph", "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends SimpleDirectedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)" ], [ "addEdge", "org.jgrapht", "Graphs", "public static <V, E> E addEdge(Graph<V, E> g, V sourceVertex, V targetVertex, double weight)" ], [ "addEdgeWithVertices", "org.jgrapht", "Graphs", "public static <V, E> E addEdgeWithVertices(Graph<V, E> g, V sourceVertex, V targetVertex)" ], [ "addEdgeWithVertices", "org.jgrapht", "Graphs", "public static <V, E> boolean addEdgeWithVertices(Graph<V, E> targetGraph, Graph<V, E> sourceGraph, E edge)" ], [ "addEdgeWithVertices", "org.jgrapht", "Graphs", "public static <V, E> E addEdgeWithVertices(Graph<V, E> g, V sourceVertex, V targetVertex, double weight)" ], [ "addGraph", "org.jgrapht", "Graphs", "public static <V, E> boolean addGraph(Graph<? super V, ? super E> destination, Graph<V, E> source)" ], [ "addAllEdges", "org.jgrapht", "Graphs", "public static <V, E> boolean addAllEdges(Graph<? super V, ? super E> destination, Graph<V, E> source, Collection<? extends E> edges)" ], [ "addAllVertices", "org.jgrapht", "Graphs", "public static <V, E> boolean addAllVertices(Graph<? super V, ? super E> destination, Collection<? extends V> vertices)" ], [ "neighborListOf", "org.jgrapht", "Graphs", "public static <V, E> List<V> neighborListOf(Graph<V, E> g, V vertex)" ], [ "predecessorListOf", "org.jgrapht", "Graphs", "public static <V, E> List<V> predecessorListOf(DirectedGraph<V, E> g, V vertex)" ], [ "successorListOf", "org.jgrapht", "Graphs", "public static <V, E> List<V> successorListOf(DirectedGraph<V, E> g, V vertex)" ], [ "undirectedGraph", "org.jgrapht", "Graphs", "public static <V, E> UndirectedGraph<V, E> undirectedGraph(Graph<V, E> g)" ], [ "testIncidence", "org.jgrapht", "Graphs", "public static <V, E> boolean testIncidence(Graph<V, E> g, E e, V v)" ], [ "getOppositeVertex", "org.jgrapht", "Graphs", "public static <V, E> V getOppositeVertex(Graph<V, E> g, E e, V v)" ], [ "getPathVertexList", "org.jgrapht", "Graphs", "public static <V, E> List<V> getPathVertexList(GraphPath<V, E> path)" ], [ "range", "org.jgrapht.generate", "SimpleWeightedGraphMatrixGenerator", "public static int[] range(final int from, final int to)" ], [ "createGraphSpecifics", "org.jgrapht.traverse", "CrossComponentIterator", "static <V, E> Specifics<V, E> createGraphSpecifics(Graph<V, E> g)" ], [ "findGreedyChromaticNumber", "org.jgrapht.alg", "ChromaticNumber", "public static <V, E> int findGreedyChromaticNumber(UndirectedGraph<V, E> g)" ], [ "findGreedyColoredGroups", "org.jgrapht.alg", "ChromaticNumber", "public static <V, E> Map<Integer, Set<V>> findGreedyColoredGroups(UndirectedGraph<V, E> g)" ], [ "findPathBetween", "org.jgrapht.alg", "BellmanFordShortestPath", "public static <V, E> List<E> findPathBetween(Graph<V, E> graph, V startVertex, V endVertex)" ], [ "findPathBetween", "org.jgrapht.alg", "DijkstraShortestPath", "public static <V, E> List<E> findPathBetween(Graph<V, E> graph, V startVertex, V endVertex)" ], [ "of", "org.jgrapht.alg.util", "Pair", "public static <A, B> Pair<A, B> of(A a, B b)" ], [ "isEulerian", "org.jgrapht.alg", "EulerianCircuit", "public static <V, E> boolean isEulerian(UndirectedGraph<V, E> g)" ], [ "getEulerianCircuitVertices", "org.jgrapht.alg", "EulerianCircuit", "public static <V, E> List<V> getEulerianCircuitVertices(UndirectedGraph<V, E> g)" ], [ "getApproximateOptimalForCompleteGraph", "org.jgrapht.alg", "HamiltonianCycle", "public static <V, E> List<V> getApproximateOptimalForCompleteGraph(SimpleWeightedGraph<V, E> g)" ], [ "find2ApproximationCover", "org.jgrapht.alg", "VertexCovers", "public static <V, E> Set<V> find2ApproximationCover(Graph<V, E> g)" ], [ "findGreedyCover", "org.jgrapht.alg", "VertexCovers", "public static <V, E> Set<V> findGreedyCover(UndirectedGraph<V, E> g)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "BEST_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int BEST_ORDER = 0;" ], [ "NATURAL_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int NATURAL_ORDER = 1;" ], [ "SMALLEST_DEGREE_LAST_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int SMALLEST_DEGREE_LAST_ORDER = 2;" ], [ "LARGEST_SATURATION_FIRST_ORDER", "org.jgrapht.experimental.alg.color", "GreedyColoring", "public static final int LARGEST_SATURATION_FIRST_ORDER = 3;" ], [ "DEFAULT_EDGE_WEIGHT", "org.jgrapht", "WeightedGraph", "public static double DEFAULT_EDGE_WEIGHT = 1.0;" ], [ "HUB_VERTEX", "org.jgrapht.generate", "WheelGraphGenerator", "public static final String HUB_VERTEX = \"Hub Vertex\";" ], [ "CORNER_VERTEX", "org.jgrapht.generate", "GridGraphGenerator", "public static final String CORNER_VERTEX = \"Corner Vertex\";" ], [ "START_VERTEX", "org.jgrapht.generate", "LinearGraphGenerator", "public static final String START_VERTEX = \"Start Vertex\";" ], [ "END_VERTEX", "org.jgrapht.generate", "LinearGraphGenerator", "public static final String END_VERTEX = \"End Vertex\";" ], [ "CENTER_VERTEX", "org.jgrapht.generate", "StarGraphGenerator", "public static final String CENTER_VERTEX = \"Center Vertex\";" ], [ "SENTINEL", "org.jgrapht.traverse", "DepthFirstIterator", "public static final Object SENTINEL = new Object();" ], [ "BEFORE_EDGE_ADDED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int BEFORE_EDGE_ADDED = 21;" ], [ "BEFORE_EDGE_REMOVED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int BEFORE_EDGE_REMOVED = 22;" ], [ "EDGE_ADDED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int EDGE_ADDED = 23;" ], [ "EDGE_REMOVED", "org.jgrapht.event", "GraphEdgeChangeEvent", "public static final int EDGE_REMOVED = 24;" ], [ "CONNECTED_COMPONENT_STARTED", "org.jgrapht.event", "ConnectedComponentTraversalEvent", "public static final int CONNECTED_COMPONENT_STARTED = 31;" ], [ "CONNECTED_COMPONENT_FINISHED", "org.jgrapht.event", "ConnectedComponentTraversalEvent", "public static final int CONNECTED_COMPONENT_FINISHED = 32;" ], [ "BEFORE_VERTEX_ADDED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int BEFORE_VERTEX_ADDED = 11;" ], [ "BEFORE_VERTEX_REMOVED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int BEFORE_VERTEX_REMOVED = 12;" ], [ "VERTEX_ADDED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int VERTEX_ADDED = 13;" ], [ "VERTEX_REMOVED", "org.jgrapht.event", "GraphVertexChangeEvent", "public static final int VERTEX_REMOVED = 14;" ], [ "NULL_NODE", "org.jgrapht.alg.isomorphism", "VF2State", "public static final int NULL_NODE = -1;" ], [ "DEBUG", "org.jgrapht.alg.isomorphism", "VF2State", "protected static final boolean DEBUG = false;" ], [ "DEFAULT_EPSILON", "org.jgrapht.alg", "EdmondsKarpMaximumFlow", "public static final double DEFAULT_EPSILON = 0.000000001;" ], [ "INSTANCE", "org.jgrapht.alg", "TransitiveClosure", "public static final TransitiveClosure INSTANCE = new TransitiveClosure();" ], [ "INSTANCE", "org.jgrapht.alg", "TransitiveReduction", "public static final TransitiveReduction INSTANCE = new TransitiveReduction();" ], [ "NEGATIVE_UNDIRECTED_EDGE", "org.jgrapht.alg", "BellmanFordIterator", "protected final static String NEGATIVE_UNDIRECTED_EDGE = \"Negative\" + \"edge-weights are not allowed in an unidrected graph!\";" ], [ "DEFAULT_EPSILON", "org.jgrapht.alg.flow", "MaximumFlowAlgorithmBase", "public static final double DEFAULT_EPSILON = 1e-9;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "g", "org.jgrapht.Graph", "Graph<V, E>" ], [ "weightMap", "java.util.Map", "Map<E, Double>" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "containsEdge", "org.jgrapht.graph", "AbstractGraph", "public boolean containsEdge(V arg0, V arg1)" ], [ "containsVertex", "org.jgrapht.graph", "GraphDelegator", "public boolean containsVertex(V arg0)" ], [ "getEdgeSource", "org.jgrapht.graph", "GraphDelegator", "public V getEdgeSource(E arg0)" ], [ "degreeOf", "org.jgrapht.graph", "GraphDelegator", "public int degreeOf(V arg0)" ], [ "getEdgeTarget", "org.jgrapht.graph", "GraphDelegator", "public V getEdgeTarget(E arg0)" ], [ "vertexSet", "org.jgrapht.graph", "GraphDelegator", "public Set<V> vertexSet()" ], [ "equals", "org.jgrapht.graph", "AbstractGraph", "public boolean equals(Object arg0)" ], [ "getAllEdges", "org.jgrapht.graph", "GraphDelegator", "public Set<E> getAllEdges(V arg0, V arg1)" ], [ "toString", "org.jgrapht.graph", "GraphDelegator", "public String toString()" ], [ "removeAllEdges", "org.jgrapht.graph", "AbstractGraph", "protected boolean removeAllEdges(E[] arg0)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "addVertex", "org.jgrapht.graph", "GraphDelegator", "public boolean addVertex(V arg0)" ], [ "removeAllEdges", "org.jgrapht.graph", "AbstractGraph", "public Set<E> removeAllEdges(V arg0, V arg1)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "getEdge", "org.jgrapht.graph", "GraphDelegator", "public E getEdge(V arg0, V arg1)" ], [ "removeAllEdges", "org.jgrapht.graph", "AbstractGraph", "public boolean removeAllEdges(Collection<? extends E> arg0)" ], [ "getEdgeFactory", "org.jgrapht.graph", "GraphDelegator", "public EdgeFactory<V, E> getEdgeFactory()" ], [ "hashCode", "org.jgrapht.graph", "AbstractGraph", "public int hashCode()" ], [ "outDegreeOf", "org.jgrapht.graph", "GraphDelegator", "public int outDegreeOf(V arg0)" ], [ "incomingEdgesOf", "org.jgrapht.graph", "GraphDelegator", "public Set<E> incomingEdgesOf(V arg0)" ], [ "toStringFromSets", "org.jgrapht.graph", "AbstractGraph", "protected String toStringFromSets(Collection<? extends V> arg0, Collection<? extends E> arg1, boolean arg2)" ], [ "removeEdge", "org.jgrapht.graph", "GraphDelegator", "public boolean removeEdge(E arg0)" ], [ "removeAllVertices", "org.jgrapht.graph", "AbstractGraph", "public boolean removeAllVertices(Collection<? extends V> arg0)" ], [ "containsEdge", "org.jgrapht.graph", "GraphDelegator", "public boolean containsEdge(E arg0)" ], [ "edgeSet", "org.jgrapht.graph", "GraphDelegator", "public Set<E> edgeSet()" ], [ "assertVertexExist", "org.jgrapht.graph", "AbstractGraph", "protected boolean assertVertexExist(V arg0)" ], [ "addEdge", "org.jgrapht.graph", "GraphDelegator", "public E addEdge(V arg0, V arg1)" ], [ "getEdgeWeight", "org.jgrapht.graph", "AsWeightedGraph", "public double getEdgeWeight(E e)" ], [ "inDegreeOf", "org.jgrapht.graph", "GraphDelegator", "public int inDegreeOf(V arg0)" ], [ "removeVertex", "org.jgrapht.graph", "GraphDelegator", "public boolean removeVertex(V arg0)" ], [ "removeEdge", "org.jgrapht.graph", "GraphDelegator", "public E removeEdge(V arg0, V arg1)" ], [ "edgesOf", "org.jgrapht.graph", "GraphDelegator", "public Set<E> edgesOf(V arg0)" ], [ "addEdge", "org.jgrapht.graph", "GraphDelegator", "public boolean addEdge(V arg0, V arg1, E arg2)" ], [ "outgoingEdgesOf", "org.jgrapht.graph", "GraphDelegator", "public Set<E> outgoingEdgesOf(V arg0)" ], [ "containsEdge", "org.jgrapht", "Graph", "public abstract boolean containsEdge(E arg0)" ], [ "removeAllEdges", "org.jgrapht", "Graph", "public abstract Set<E> removeAllEdges(V arg0, V arg1)" ], [ "vertexSet", "org.jgrapht", "Graph", "public abstract Set<V> vertexSet()" ], [ "addVertex", "org.jgrapht", "Graph", "public abstract boolean addVertex(V arg0)" ], [ "containsEdge", "org.jgrapht", "Graph", "public abstract boolean containsEdge(V arg0, V arg1)" ], [ "getEdgeTarget", "org.jgrapht", "Graph", "public abstract V getEdgeTarget(E arg0)" ], [ "addEdge", "org.jgrapht", "Graph", "public abstract E addEdge(V arg0, V arg1)" ], [ "getEdgeSource", "org.jgrapht", "Graph", "public abstract V getEdgeSource(E arg0)" ], [ "getEdge", "org.jgrapht", "Graph", "public abstract E getEdge(V arg0, V arg1)" ], [ "containsVertex", "org.jgrapht", "Graph", "public abstract boolean containsVertex(V arg0)" ], [ "edgeSet", "org.jgrapht", "Graph", "public abstract Set<E> edgeSet()" ], [ "removeEdge", "org.jgrapht", "Graph", "public abstract E removeEdge(V arg0, V arg1)" ], [ "removeAllVertices", "org.jgrapht", "Graph", "public abstract boolean removeAllVertices(Collection<? extends V> arg0)" ], [ "getEdgeWeight", "org.jgrapht", "Graph", "public abstract double getEdgeWeight(E arg0)" ], [ "addEdge", "org.jgrapht", "Graph", "public abstract boolean addEdge(V arg0, V arg1, E arg2)" ], [ "removeVertex", "org.jgrapht", "Graph", "public abstract boolean removeVertex(V arg0)" ], [ "removeEdge", "org.jgrapht", "Graph", "public abstract boolean removeEdge(E arg0)" ], [ "edgesOf", "org.jgrapht", "Graph", "public abstract Set<E> edgesOf(V arg0)" ], [ "removeAllEdges", "org.jgrapht", "Graph", "public abstract boolean removeAllEdges(Collection<? extends E> arg0)" ], [ "getAllEdges", "org.jgrapht", "Graph", "public abstract Set<E> getAllEdges(V arg0, V arg1)" ], [ "getEdgeFactory", "org.jgrapht", "Graph", "public abstract EdgeFactory<V, E> getEdgeFactory()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "getOrDefault", "java.util", "Map", "public default V getOrDefault(Object arg0, V arg1)" ], [ "containsKey", "java.util", "Map", "public abstract boolean containsKey(Object arg0)" ], [ "replace", "java.util", "Map", "public default boolean replace(K arg0, V arg1, V arg2)" ], [ "keySet", "java.util", "Map", "public abstract Set<K> keySet()" ], [ "put", "java.util", "Map", "public abstract V put(K arg0, V arg1)" ], [ "get", "java.util", "Map", "public abstract V get(Object arg0)" ], [ "hashCode", "java.util", "Map", "public abstract int hashCode()" ], [ "merge", "java.util", "Map", "public default V merge(K arg0, V arg1, BiFunction<? super V, ? super V, ? extends V> arg2)" ], [ "remove", "java.util", "Map", "public default boolean remove(Object arg0, Object arg1)" ], [ "equals", "java.util", "Map", "public abstract boolean equals(Object arg0)" ], [ "computeIfPresent", "java.util", "Map", "public default V computeIfPresent(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "values", "java.util", "Map", "public abstract Collection<V> values()" ], [ "entrySet", "java.util", "Map", "public abstract Set<Map.Entry<K, V>> entrySet()" ], [ "containsValue", "java.util", "Map", "public abstract boolean containsValue(Object arg0)" ], [ "compute", "java.util", "Map", "public default V compute(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "isEmpty", "java.util", "Map", "public abstract boolean isEmpty()" ], [ "computeIfAbsent", "java.util", "Map", "public default V computeIfAbsent(K arg0, Function<? super K, ? extends V> arg1)" ], [ "putIfAbsent", "java.util", "Map", "public default V putIfAbsent(K arg0, V arg1)" ], [ "remove", "java.util", "Map", "public abstract V remove(Object arg0)" ], [ "size", "java.util", "Map", "public abstract int size()" ], [ "replace", "java.util", "Map", "public default V replace(K arg0, V arg1)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "weightMap", "org.jgrapht.graph", "AsWeightedGraph", "protected final Map<E,Double> weightMap;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
} ]